	.text
	.file	"std::io"
	.file	1 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/io" "formatter_private.c3"
	.file	2 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/io" "io.c3"
	.file	3 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/io" "formatter.c3"
	.section	.text.std.io.Formatter.printf,"axG",@progbits,std.io.Formatter.printf,comdat
	.weak	std.io.Formatter.printf         # -- Begin function std.io.Formatter.printf
	.p2align	4, 0x90
	.type	std.io.Formatter.printf,@function
std.io.Formatter.printf:                # @std.io.Formatter.printf
.Lfunc_begin0:
	.loc	3 58 0                          # formatter.c3:58:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$8304, %rsp                     # imm = 0x2070
	movq	%rdi, -5792(%rbp)               # 8-byte Spill
	movq	%rsi, -5784(%rbp)               # 8-byte Spill
	movq	%rdx, -5776(%rbp)               # 8-byte Spill
	movq	%rcx, -5768(%rbp)               # 8-byte Spill
	movq	%r8, -5760(%rbp)                # 8-byte Spill
	movq	%r9, -5752(%rbp)                # 8-byte Spill
.Ltmp0:
	.loc	3 59 1 prologue_end             # formatter.c3:59:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB0_798
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-5752(%rbp), %rax               # 8-byte Reload
	movq	-5760(%rbp), %rcx               # 8-byte Reload
	movq	-5768(%rbp), %rdx               # 8-byte Reload
	movq	-5776(%rbp), %rsi               # 8-byte Reload
	movq	-5784(%rbp), %rdi               # 8-byte Reload
	movq	%rdi, -5696(%rbp)
	movq	%rsi, -5712(%rbp)
	movq	%rdx, -5704(%rbp)
	movq	%rcx, -5728(%rbp)
	movq	%rax, -5720(%rbp)
	movq	-5696(%rbp), %rax
	movq	%rax, -5832(%rbp)               # 8-byte Spill
	movq	-5712(%rbp), %rcx
	movq	%rcx, -5824(%rbp)               # 8-byte Spill
	movq	-5704(%rbp), %rcx
	movq	%rcx, -5816(%rbp)               # 8-byte Spill
	movq	-5728(%rbp), %rcx
	movq	%rcx, -5808(%rbp)               # 8-byte Spill
	movq	-5720(%rbp), %rcx
	movq	%rcx, -5800(%rbp)               # 8-byte Spill
.Ltmp1:
	.loc	3 363 1 is_stmt 1               # formatter.c3:363:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_780
# %bb.2:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-5800(%rbp), %rax               # 8-byte Reload
	movq	-5808(%rbp), %rcx               # 8-byte Reload
	movq	-5816(%rbp), %rdx               # 8-byte Reload
	movq	-5824(%rbp), %rsi               # 8-byte Reload
	movq	-5832(%rbp), %rdi               # 8-byte Reload
	movq	%rdi, -3696(%rbp)
	movq	%rsi, -3712(%rbp)
	movq	%rdx, -3704(%rbp)
	movq	%rcx, -3728(%rbp)
	movq	%rax, -3720(%rbp)
	.loc	3 364 2 is_stmt 1               # formatter.c3:364:2
	movq	-3696(%rbp), %rax
	movq	$0, 32(%rax)
	.loc	3 365 7                         # formatter.c3:365:7
	movq	-3696(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB0_4
# %bb.3:
.Ltmp2:
	.loc	3 368 3                         # formatter.c3:368:3
	movq	-3696(%rbp), %rax
	leaq	std.io.out_null_fn(%rip), %rcx
	movq	%rcx, 8(%rax)
.Ltmp3:
.LBB0_4:
	.loc	3 370 6                         # formatter.c3:370:6
	movq	$0, -3736(%rbp)
	.loc	3 371 19                        # formatter.c3:371:19
	movq	-3704(%rbp), %rax
	movq	%rax, -3744(%rbp)
	.loc	3 372 22                        # formatter.c3:372:22
	movq	$0, -3752(%rbp)
.Ltmp4:
	.loc	3 373 15                        # formatter.c3:373:15
	movq	$0, -3760(%rbp)
.LBB0_5:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_19 Depth 2
                                        #     Child Loop BB0_32 Depth 2
                                        #     Child Loop BB0_65 Depth 2
                                        #     Child Loop BB0_75 Depth 2
                                        #     Child Loop BB0_90 Depth 2
                                        #     Child Loop BB0_105 Depth 2
                                        #     Child Loop BB0_120 Depth 2
                                        #     Child Loop BB0_135 Depth 2
                                        #     Child Loop BB0_143 Depth 2
                                        #     Child Loop BB0_154 Depth 2
                                        #     Child Loop BB0_165 Depth 2
                                        #     Child Loop BB0_176 Depth 2
                                        #     Child Loop BB0_244 Depth 2
                                        #     Child Loop BB0_277 Depth 2
                                        #     Child Loop BB0_287 Depth 2
                                        #     Child Loop BB0_302 Depth 2
                                        #     Child Loop BB0_317 Depth 2
                                        #     Child Loop BB0_332 Depth 2
                                        #     Child Loop BB0_347 Depth 2
                                        #     Child Loop BB0_355 Depth 2
                                        #     Child Loop BB0_366 Depth 2
                                        #     Child Loop BB0_377 Depth 2
                                        #     Child Loop BB0_388 Depth 2
                                        #     Child Loop BB0_704 Depth 2
                                        #     Child Loop BB0_721 Depth 2
                                        #     Child Loop BB0_580 Depth 2
                                        #     Child Loop BB0_584 Depth 2
                                        #     Child Loop BB0_634 Depth 2
                                        #     Child Loop BB0_653 Depth 2
                                        #     Child Loop BB0_668 Depth 2
                                        #     Child Loop BB0_681 Depth 2
	.loc	3 373 18 is_stmt 0              # formatter.c3:373:18
	movq	-3760(%rbp), %rax
	cmpq	-3744(%rbp), %rax
	jae	.LBB0_777
# %bb.6:                                #   in Loop: Header=BB0_5 Depth=1
.Ltmp5:
	.loc	3 376 12 is_stmt 1              # formatter.c3:376:12
	movq	-3704(%rbp), %rcx
	movq	%rcx, -5856(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -5848(%rbp)               # 8-byte Spill
	.loc	3 376 19 is_stmt 0              # formatter.c3:376:19
	movq	-3760(%rbp), %rax
	movq	%rax, -5840(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_781
# %bb.7:                                #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-5848(%rbp), %rax               # 8-byte Reload
	movq	-5840(%rbp), %rcx               # 8-byte Reload
	.loc	3 376 19                        # formatter.c3:376:19
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 377 7 is_stmt 1               # formatter.c3:377:7
	cmpb	$37, -3761(%rbp)
	je	.LBB0_11
# %bb.8:                                #   in Loop: Header=BB0_5 Depth=1
.Ltmp6:
	.loc	3 380 4                         # formatter.c3:380:4
	movq	-3736(%rbp), %rax
	movq	%rax, -5872(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 380 17 is_stmt 0              # formatter.c3:380:17
	leaq	-3856(%rbp), %rdi
	movzbl	-3761(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5864(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_10
# %bb.9:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5864(%rbp), %rax               # 8-byte Reload
	.loc	3 380 17                        # formatter.c3:380:17
	movq	%rax, -3848(%rbp)
	movq	-3848(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_10:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5872(%rbp), %rax               # 8-byte Reload
	.loc	3 380 4                         # formatter.c3:380:4
	addq	-3856(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 381 4 is_stmt 1               # formatter.c3:381:4
	jmp	.LBB0_776
.Ltmp7:
.LBB0_11:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 383 3                         # formatter.c3:383:3
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 384 7                         # formatter.c3:384:7
	movq	-3760(%rbp), %rax
	cmpq	-3744(%rbp), %rax
	jb	.LBB0_13
# %bb.12:
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-3696(%rbp), %rax
	movq	%rax, -3872(%rbp)
	movq	-3872(%rbp), %rsi
.Ltmp8:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-3880(%rbp), %rdi
	leaq	.L.str.78(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -3864(%rbp)
	movq	-3864(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp9:
.LBB0_13:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 385 7                         # formatter.c3:385:7
	movq	-3704(%rbp), %rcx
	movq	%rcx, -5904(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -5896(%rbp)               # 8-byte Spill
	.loc	3 385 14 is_stmt 0              # formatter.c3:385:14
	movq	-3760(%rbp), %rax
	movq	%rax, -5888(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_782
# %bb.14:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-5896(%rbp), %rax               # 8-byte Reload
	movq	-5888(%rbp), %rcx               # 8-byte Reload
	.loc	3 385 14                        # formatter.c3:385:14
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 386 7 is_stmt 1               # formatter.c3:386:7
	cmpb	$37, -3761(%rbp)
	jne	.LBB0_18
# %bb.15:                               #   in Loop: Header=BB0_5 Depth=1
.Ltmp10:
	.loc	3 388 4                         # formatter.c3:388:4
	movq	-3736(%rbp), %rax
	movq	%rax, -5920(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 388 17 is_stmt 0              # formatter.c3:388:17
	leaq	-3968(%rbp), %rdi
	movzbl	-3761(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5912(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_17
# %bb.16:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5912(%rbp), %rax               # 8-byte Reload
	.loc	3 388 17                        # formatter.c3:388:17
	movq	%rax, -3960(%rbp)
	movq	-3960(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_17:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5920(%rbp), %rax               # 8-byte Reload
	.loc	3 388 4                         # formatter.c3:388:4
	addq	-3968(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 389 4 is_stmt 1               # formatter.c3:389:4
	jmp	.LBB0_776
.Ltmp11:
.LBB0_18:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 392 3                         # formatter.c3:392:3
	movq	-3696(%rbp), %rax
	movl	$0, 16(%rax)
.LBB0_19:                               #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	3 0 3 is_stmt 0                 # formatter.c3:0:3
	movb	-3761(%rbp), %al
	movb	%al, -3969(%rbp)
	movb	-3969(%rbp), %al
	addb	$-32, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -5928(%rbp)               # 8-byte Spill
	subb	$16, %al
	ja	.LBB0_25
# %bb.799:                              #   in Loop: Header=BB0_19 Depth=2
	movq	-5928(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI0_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB0_20:                               #   in Loop: Header=BB0_19 Depth=2
.Ltmp12:
	.loc	3 397 15 is_stmt 1              # formatter.c3:397:15
	movq	-3696(%rbp), %rax
	.loc	3 397 36 is_stmt 0              # formatter.c3:397:36
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	orl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_220
.Ltmp13:
.LBB0_21:                               #   in Loop: Header=BB0_19 Depth=2
	.loc	3 398 15 is_stmt 1              # formatter.c3:398:15
	movq	-3696(%rbp), %rax
	.loc	3 398 33 is_stmt 0              # formatter.c3:398:33
	movl	16(%rax), %ecx
	andl	$-3, %ecx
	orl	$2, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_220
.Ltmp14:
.LBB0_22:                               #   in Loop: Header=BB0_19 Depth=2
	.loc	3 399 15 is_stmt 1              # formatter.c3:399:15
	movq	-3696(%rbp), %rax
	.loc	3 399 33 is_stmt 0              # formatter.c3:399:33
	movl	16(%rax), %ecx
	andl	$-5, %ecx
	orl	$4, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_220
.Ltmp15:
.LBB0_23:                               #   in Loop: Header=BB0_19 Depth=2
	.loc	3 400 15 is_stmt 1              # formatter.c3:400:15
	movq	-3696(%rbp), %rax
	.loc	3 400 34 is_stmt 0              # formatter.c3:400:34
	movl	16(%rax), %ecx
	andl	$-9, %ecx
	orl	$8, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_220
.Ltmp16:
.LBB0_24:                               #   in Loop: Header=BB0_19 Depth=2
	.loc	3 401 15 is_stmt 1              # formatter.c3:401:15
	movq	-3696(%rbp), %rax
	.loc	3 401 33 is_stmt 0              # formatter.c3:401:33
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	orl	$16, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_220
.Ltmp17:
.LBB0_25:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-3728(%rbp), %rsi
	movq	-3720(%rbp), %rdx
	movq	-3712(%rbp), %rcx
	movq	-3704(%rbp), %rax
	movq	%rsi, -264(%rbp)
	movq	%rdx, -272(%rbp)
	leaq	-3752(%rbp), %rdx
	movq	%rdx, -280(%rbp)
	movq	%rcx, -288(%rbp)
	movq	%rax, -296(%rbp)
	leaq	-3760(%rbp), %rax
	movq	%rax, -304(%rbp)
.Ltmp18:
	.loc	1 682 11 is_stmt 1              # formatter_private.c3:682:11
	movq	-288(%rbp), %rax
	movq	%rax, -5944(%rbp)               # 8-byte Spill
	.loc	1 682 23 is_stmt 0              # formatter_private.c3:682:23
	movq	-304(%rbp), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_191
# %bb.26:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5936(%rbp), %rax               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	andq	$7, %rax
	movq	%rax, -5952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_192
# %bb.27:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5944(%rbp), %rax               # 8-byte Reload
	movq	-5936(%rbp), %rcx               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	movq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -305(%rbp)
	movb	-305(%rbp), %al
	movb	%al, -385(%rbp)
	movb	-385(%rbp), %al
	movb	%al, -386(%rbp)
.Ltmp19:
	.file	4 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/core" "ascii.c3"
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-386(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5960(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_193
# %bb.28:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-5960(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	je	.LBB0_45
.Ltmp20:
# %bb.29:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 683 63 is_stmt 1              # formatter_private.c3:683:63
	movq	-288(%rbp), %rdx
	movq	-296(%rbp), %rcx
	movq	-304(%rbp), %rax
	movq	%rdx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%rax, -24(%rbp)
.Ltmp21:
	.loc	1 146 11                        # formatter_private.c3:146:11
	movl	$0, -28(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-24(%rbp), %rax
	movq	%rax, -5968(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_39
# %bb.30:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-5968(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -5976(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_40
# %bb.31:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-5968(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB0_32:                               #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp22:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-40(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB0_37
# %bb.33:                               #   in Loop: Header=BB0_32 Depth=2
.Ltmp23:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-8(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -113(%rbp)
	movb	-113(%rbp), %al
	movb	%al, -114(%rbp)
	movb	-114(%rbp), %al
	movb	%al, -115(%rbp)
.Ltmp24:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-115(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5984(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_41
# %bb.34:                               #   in Loop: Header=BB0_32 Depth=2
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-5984(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB0_36
.Ltmp25:
# %bb.35:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB0_37
.LBB0_36:                               #   in Loop: Header=BB0_32 Depth=2
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -28(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-113(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -28(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB0_32
.Ltmp26:
.LBB0_37:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-24(%rbp), %rax
	movq	%rax, -5992(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_42
# %bb.38:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-5992(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -6000(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_43
	jmp	.LBB0_44
.LBB0_39:
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB0_40:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-5976(%rbp), %rcx               # 8-byte Reload
	movq	$8, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-112(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_41:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-5984(%rbp), %rcx               # 8-byte Reload
	movq	$256, -128(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -136(%rbp)
	movq	%rax, -168(%rbp)
	leaq	-128(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-136(%rbp), %rax
	movq	%rax, -160(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	$2, -184(%rbp)
.Ltmp27:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-192(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp28:
.LBB0_42:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB0_43:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-6000(%rbp), %rcx               # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-256(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_44:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-5992(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-40(%rbp), %rcx
	movq	%rcx, (%rax)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-28(%rbp), %eax
.Ltmp29:
	.loc	1 683 27                        # formatter_private.c3:683:27
	movl	%eax, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_45:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 684 6                         # formatter_private.c3:684:6
	cmpb	$42, -305(%rbp)
	je	.LBB0_47
# %bb.46:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 684 23 is_stmt 0              # formatter_private.c3:684:23
	movl	$0, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_47:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 685 16 is_stmt 1              # formatter_private.c3:685:16
	movq	-304(%rbp), %rax
	movq	%rax, -6016(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_194
# %bb.48:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6016(%rbp), %rax               # 8-byte Reload
	.loc	1 685 16                        # formatter_private.c3:685:16
	andq	$7, %rax
	movq	%rax, -6024(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_195
# %bb.49:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-6016(%rbp), %rcx               # 8-byte Reload
	.loc	1 685 15                        # formatter_private.c3:685:15
	movq	(%rcx), %rax
	addq	$1, %rax
	movq	%rax, (%rcx)
	movq	%rax, -472(%rbp)
	.loc	1 686 6 is_stmt 1               # formatter_private.c3:686:6
	movq	-472(%rbp), %rax
	cmpq	-296(%rbp), %rax
	jb	.LBB0_51
# %bb.50:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 686 32 is_stmt 0              # formatter_private.c3:686:32
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_51:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	movq	-280(%rbp), %rax
	movq	%rax, -6032(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_196
# %bb.52:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6032(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	andq	$7, %rax
	movq	%rax, -6040(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_197
# %bb.53:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-6032(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	movq	(%rax), %rax
	.loc	1 687 6                         # formatter_private.c3:687:6
	cmpq	-272(%rbp), %rax
	jb	.LBB0_55
# %bb.54:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 687 42                        # formatter_private.c3:687:42
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_55:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 688 12 is_stmt 1              # formatter_private.c3:688:12
	movq	-264(%rbp), %rax
	movq	%rax, -6056(%rbp)               # 8-byte Spill
	.loc	1 688 23 is_stmt 0              # formatter_private.c3:688:23
	movq	-280(%rbp), %rax
	movq	%rax, -6048(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_198
# %bb.56:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6048(%rbp), %rax               # 8-byte Reload
	.loc	1 688 23                        # formatter_private.c3:688:23
	andq	$7, %rax
	movq	%rax, -6064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_199
# %bb.57:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6056(%rbp), %rax               # 8-byte Reload
	movq	-6048(%rbp), %rdx               # 8-byte Reload
	.loc	1 688 22                        # formatter_private.c3:688:22
	movq	(%rdx), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -6080(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -6072(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_200
# %bb.58:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6080(%rbp), %rax               # 8-byte Reload
	.loc	1 688 12                        # formatter_private.c3:688:12
	movq	(%rax), %rcx
	movq	%rcx, -624(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -616(%rbp)
	.loc	1 689 7 is_stmt 1               # formatter_private.c3:689:7
	movq	-616(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_60
# %bb.59:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 689 40 is_stmt 0              # formatter_private.c3:689:40
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_60:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-624(%rbp), %rax
	movq	%rax, -784(%rbp)
	movq	-616(%rbp), %rax
	movq	%rax, -776(%rbp)
.Ltmp30:
	.file	5 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/core" "types.c3"
	.loc	5 690 17 is_stmt 1              # types.c3:690:17
	movl	$2, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_62
# %bb.61:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.LBB0_62:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 19 11                         # types.c3:19:11
	movq	-776(%rbp), %rax
	.loc	5 690 17                        # types.c3:690:17
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_64
# %bb.63:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.Ltmp31:
.LBB0_64:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 23 20                         # types.c3:23:20
	movq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-800(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -801(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-800(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$2, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -802(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$2147483647, -808(%rbp)         # imm = 0x7FFFFFFF
	.loc	5 27 14                         # types.c3:27:14
	movl	$-2147483648, -812(%rbp)        # imm = 0x80000000
	movq	-800(%rbp), %rax
	movq	%rax, -824(%rbp)
	movq	-824(%rbp), %rax
	movq	%rax, -6096(%rbp)               # 8-byte Spill
	movq	%rax, -6088(%rbp)               # 8-byte Spill
.LBB0_65:                               #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6088(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6112(%rbp)               # 8-byte Spill
.Ltmp32:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6097(%rbp)                # 1-byte Spill
	je	.LBB0_67
# %bb.66:                               #   in Loop: Header=BB0_65 Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6112(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6088(%rbp)               # 8-byte Spill
	movb	%al, -6097(%rbp)                # 1-byte Spill
	jne	.LBB0_65
.LBB0_67:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6097(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB0_68
	jmp	.LBB0_74
.LBB0_68:                               #   in Loop: Header=BB0_5 Depth=1
.Ltmp33:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-784(%rbp), %rax
	movq	%rax, -6120(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_201
# %bb.69:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-6120(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -825(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6121(%rbp)                # 1-byte Spill
	je	.LBB0_71
# %bb.70:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-825(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6121(%rbp)                # 1-byte Spill
.LBB0_71:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6121(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB0_72
	jmp	.LBB0_73
.LBB0_72:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_73:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-825(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp34:
.LBB0_74:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6136(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB0_75
.LBB0_75:                               #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6136(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6152(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6137(%rbp)                # 1-byte Spill
	je	.LBB0_77
# %bb.76:                               #   in Loop: Header=BB0_75 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6152(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6136(%rbp)               # 8-byte Spill
	movb	%al, -6137(%rbp)                # 1-byte Spill
	jne	.LBB0_75
.LBB0_77:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6137(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB0_78
	jmp	.LBB0_89
.LBB0_78:                               #   in Loop: Header=BB0_5 Depth=1
.Ltmp35:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-784(%rbp), %rax
	movq	%rax, -6160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_202
# %bb.79:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6160(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -6168(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_203
# %bb.80:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6160(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -828(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6169(%rbp)                # 1-byte Spill
	je	.LBB0_82
# %bb.81:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-828(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6169(%rbp)                # 1-byte Spill
.LBB0_82:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6169(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB0_83
	jmp	.LBB0_84
.LBB0_83:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_84:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-828(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -6170(%rbp)                # 1-byte Spill
	jg	.LBB0_86
# %bb.85:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 19 is_stmt 0               # types.c3:37:19
	movswl	-828(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -6170(%rbp)                # 1-byte Spill
.LBB0_86:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6170(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB0_87
	jmp	.LBB0_88
.LBB0_87:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_88:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-828(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp36:
.LBB0_89:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6184(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB0_90
.LBB0_90:                               #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6184(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6200(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6185(%rbp)                # 1-byte Spill
	je	.LBB0_92
# %bb.91:                               #   in Loop: Header=BB0_90 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6200(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6184(%rbp)               # 8-byte Spill
	movb	%al, -6185(%rbp)                # 1-byte Spill
	jne	.LBB0_90
.LBB0_92:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6185(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB0_93
	jmp	.LBB0_104
.LBB0_93:                               #   in Loop: Header=BB0_5 Depth=1
.Ltmp37:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-784(%rbp), %rax
	movq	%rax, -6208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_204
# %bb.94:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-6208(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -6216(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_205
# %bb.95:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 13                          # types.c3:0:13
	movq	-6208(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -900(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6217(%rbp)                # 1-byte Spill
	je	.LBB0_97
# %bb.96:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -900(%rbp)
	setl	%al
	movb	%al, -6217(%rbp)                # 1-byte Spill
.LBB0_97:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6217(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB0_98
	jmp	.LBB0_99
.LBB0_98:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_99:                               #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-900(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -6218(%rbp)                # 1-byte Spill
	jg	.LBB0_101
# %bb.100:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 19 is_stmt 0               # types.c3:42:19
	movl	-900(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -6218(%rbp)                # 1-byte Spill
.LBB0_101:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6218(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB0_102
	jmp	.LBB0_103
.LBB0_102:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_103:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-900(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp38:
.LBB0_104:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6232(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB0_105
.LBB0_105:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6232(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6248(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6233(%rbp)                # 1-byte Spill
	je	.LBB0_107
# %bb.106:                              #   in Loop: Header=BB0_105 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6248(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6232(%rbp)               # 8-byte Spill
	movb	%al, -6233(%rbp)                # 1-byte Spill
	jne	.LBB0_105
.LBB0_107:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6233(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB0_108
	jmp	.LBB0_119
.LBB0_108:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp39:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-784(%rbp), %rax
	movq	%rax, -6256(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_206
# %bb.109:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6256(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -6264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_207
# %bb.110:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6256(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -984(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6265(%rbp)                # 1-byte Spill
	je	.LBB0_112
# %bb.111:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -984(%rbp)
	setl	%al
	movb	%al, -6265(%rbp)                # 1-byte Spill
.LBB0_112:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6265(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB0_113
	jmp	.LBB0_114
.LBB0_113:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_114:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-984(%rbp), %rcx
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movslq	-808(%rbp), %rdx
	.loc	5 47 8                          # types.c3:47:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -6266(%rbp)                # 1-byte Spill
	jg	.LBB0_116
# %bb.115:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 19                         # types.c3:47:19
	movq	-984(%rbp), %rax
	.loc	5 47 23                         # types.c3:47:23
	movslq	-812(%rbp), %rcx
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rcx, %rax
	setl	%al
	movb	%al, -6266(%rbp)                # 1-byte Spill
.LBB0_116:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6266(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB0_117
	jmp	.LBB0_118
.LBB0_117:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_118:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-984(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp40:
.LBB0_119:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6280(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB0_120
.LBB0_120:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6280(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6296(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6281(%rbp)                # 1-byte Spill
	je	.LBB0_122
# %bb.121:                              #   in Loop: Header=BB0_120 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6296(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6280(%rbp)               # 8-byte Spill
	movb	%al, -6281(%rbp)                # 1-byte Spill
	jne	.LBB0_120
.LBB0_122:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6281(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB0_123
	jmp	.LBB0_134
.LBB0_123:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp41:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-784(%rbp), %rax
	movq	%rax, -6304(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_208
# %bb.124:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6304(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -6312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_209
# %bb.125:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6304(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1064(%rbp)
	movq	%rax, -1072(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6313(%rbp)                # 1-byte Spill
	je	.LBB0_127
# %bb.126:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-1064(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -6313(%rbp)                # 1-byte Spill
.LBB0_127:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6313(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB0_128
	jmp	.LBB0_129
.LBB0_128:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_129:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-1072(%rbp), %rdi
	movq	-1064(%rbp), %rdx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movslq	-808(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	movb	$1, %al
	.loc	5 52 8                          # types.c3:52:8
	subq	%rdi, %rsi
	sbbq	%rdx, %rcx
	movb	%al, -6314(%rbp)                # 1-byte Spill
	jl	.LBB0_131
	jmp	.LBB0_130
.LBB0_130:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 19                         # types.c3:52:19
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	movb	%al, -6314(%rbp)                # 1-byte Spill
.LBB0_131:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6314(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB0_132
	jmp	.LBB0_133
.LBB0_132:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_133:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-1072(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp42:
.LBB0_134:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6328(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB0_135
.LBB0_135:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6328(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6344(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6329(%rbp)                # 1-byte Spill
	je	.LBB0_137
# %bb.136:                              #   in Loop: Header=BB0_135 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6344(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6328(%rbp)               # 8-byte Spill
	movb	%al, -6329(%rbp)                # 1-byte Spill
	jne	.LBB0_135
.LBB0_137:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6329(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB0_138
	jmp	.LBB0_142
.LBB0_138:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp43:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-784(%rbp), %rax
	movq	%rax, -6352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_210
# %bb.139:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6352(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -1137(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-1137(%rbp), %eax
	cmpl	%eax, -808(%rbp)
	jge	.LBB0_141
# %bb.140:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_141:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-1137(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp44:
.LBB0_142:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6360(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB0_143
.LBB0_143:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6360(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6376(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6361(%rbp)                # 1-byte Spill
	je	.LBB0_145
# %bb.144:                              #   in Loop: Header=BB0_143 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6376(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6360(%rbp)               # 8-byte Spill
	movb	%al, -6361(%rbp)                # 1-byte Spill
	jne	.LBB0_143
.LBB0_145:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6361(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB0_146
	jmp	.LBB0_153
.LBB0_146:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp45:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-784(%rbp), %rax
	movq	%rax, -6384(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_211
# %bb.147:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6384(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -6392(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_212
# %bb.148:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6384(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -1140(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-1140(%rbp), %ecx
	movb	$1, %al
	cmpl	%ecx, -808(%rbp)
	movb	%al, -6393(%rbp)                # 1-byte Spill
	jl	.LBB0_150
# %bb.149:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-1140(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%al
	movb	%al, -6393(%rbp)                # 1-byte Spill
.LBB0_150:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6393(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB0_151
	jmp	.LBB0_152
.LBB0_151:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_152:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-1140(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp46:
.LBB0_153:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6408(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB0_154
.LBB0_154:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6408(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6424(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6409(%rbp)                # 1-byte Spill
	je	.LBB0_156
# %bb.155:                              #   in Loop: Header=BB0_154 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6424(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6408(%rbp)               # 8-byte Spill
	movb	%al, -6409(%rbp)                # 1-byte Spill
	jne	.LBB0_154
.LBB0_156:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6409(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB0_157
	jmp	.LBB0_164
.LBB0_157:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp47:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-784(%rbp), %rax
	movq	%rax, -6432(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_213
# %bb.158:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6432(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -6440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_214
# %bb.159:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6432(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -1220(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-1220(%rbp), %ecx
	cmpl	%ecx, -808(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6441(%rbp)                # 1-byte Spill
	jne	.LBB0_161
# %bb.160:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-1220(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -6441(%rbp)                # 1-byte Spill
.LBB0_161:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6441(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB0_162
	jmp	.LBB0_163
.LBB0_162:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_163:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-1220(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp48:
.LBB0_164:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6456(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB0_165
.LBB0_165:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6456(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6472(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6457(%rbp)                # 1-byte Spill
	je	.LBB0_167
# %bb.166:                              #   in Loop: Header=BB0_165 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6472(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6456(%rbp)               # 8-byte Spill
	movb	%al, -6457(%rbp)                # 1-byte Spill
	jne	.LBB0_165
.LBB0_167:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6457(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB0_168
	jmp	.LBB0_175
.LBB0_168:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp49:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-784(%rbp), %rax
	movq	%rax, -6480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_215
# %bb.169:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6480(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -6488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_216
# %bb.170:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6480(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -1304(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-1304(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movslq	-808(%rbp), %rax
	.loc	5 68 8                          # types.c3:68:8
	cmpq	%rcx, %rax
	setl	%al
	cmpq	$0, %rcx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6489(%rbp)                # 1-byte Spill
	jne	.LBB0_172
# %bb.171:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 68 19                         # types.c3:68:19
	movq	-1304(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movslq	-812(%rbp), %rcx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rax, %rcx
	setg	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	movb	%al, -6489(%rbp)                # 1-byte Spill
.LBB0_172:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6489(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB0_173
	jmp	.LBB0_174
.LBB0_173:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_174:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-1304(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp50:
.LBB0_175:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6504(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB0_176
.LBB0_176:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6504(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6520(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6505(%rbp)                # 1-byte Spill
	je	.LBB0_178
# %bb.177:                              #   in Loop: Header=BB0_176 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6520(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6504(%rbp)               # 8-byte Spill
	movb	%al, -6505(%rbp)                # 1-byte Spill
	jne	.LBB0_176
.LBB0_178:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6505(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB0_179
	jmp	.LBB0_186
.LBB0_179:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp51:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-784(%rbp), %rax
	movq	%rax, -6528(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_217
# %bb.180:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-6528(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -6536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_218
# %bb.181:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-6528(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1384(%rbp)
	movq	%rax, -1392(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-1392(%rbp), %rsi
	movq	-1384(%rbp), %rcx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movslq	-808(%rbp), %rdx
	movq	%rdx, %rax
	sarq	$63, %rax
	.loc	5 72 8                          # types.c3:72:8
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	shrq	$63, %rcx
                                        # kill: def $cl killed $cl killed $rcx
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6537(%rbp)                # 1-byte Spill
	jne	.LBB0_183
# %bb.182:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 72 19                         # types.c3:72:19
	movq	-1392(%rbp), %rcx
	movq	-1384(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rdx
	sarq	$63, %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rsi, %rcx
	movq	%rax, %rcx
	sbbq	%rdx, %rcx
	setl	%cl
	testq	%rax, %rax
	setns	%al
	andb	%cl, %al
	movb	%al, -6537(%rbp)                # 1-byte Spill
.LBB0_183:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6537(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB0_184
	jmp	.LBB0_185
.LBB0_184:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB0_188
.LBB0_185:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-1392(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB0_187
.Ltmp52:
.LBB0_186:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.123(%rip), %rax
	movq	%rax, -1472(%rbp)
	movq	$30, -1464(%rbp)
.Ltmp53:
	.file	6 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/core" "builtin.c3"
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-1472(%rbp), %rdi
	movq	-1464(%rbp), %rsi
	movq	$0, -1480(%rbp)
	movq	$0, -1488(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.124(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.125(%rip), %r8
	movl	$25, %r9d
	leaq	-1488(%rbp), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_187:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-788(%rbp), %eax
	movl	%eax, -756(%rbp)
	movq	$0, -768(%rbp)
.Ltmp54:
.LBB0_188:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 691 9 is_stmt 1               # formatter_private.c3:691:9
	cmpq	$0, -768(%rbp)
	sete	%al
	testb	$1, %al
	jne	.LBB0_189
	jmp	.LBB0_190
.LBB0_189:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-756(%rbp), %eax
	.loc	1 691 19 is_stmt 0              # formatter_private.c3:691:19
	movl	%eax, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_190:                              #   in Loop: Header=BB0_5 Depth=1
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -1496(%rbp)
	movq	-1496(%rbp), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB0_219
.LBB0_191:
	.loc	1 682 23 is_stmt 1              # formatter_private.c3:682:23
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	callq	*(%rax)
.LBB0_192:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5952(%rbp), %rcx               # 8-byte Reload
	movq	$8, -320(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -328(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-320(%rbp), %rcx
	movq	%rcx, -368(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-328(%rbp), %rax
	movq	%rax, -352(%rbp)
	leaq	-368(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	$2, -376(%rbp)
	.loc	1 682 23                        # formatter_private.c3:682:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-384(%rbp), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_193:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5960(%rbp), %rcx               # 8-byte Reload
	movq	$256, -400(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -408(%rbp)
	movq	%rax, -440(%rbp)
	leaq	-400(%rbp), %rcx
	movq	%rcx, -448(%rbp)
	movq	%rax, -424(%rbp)
	leaq	-408(%rbp), %rax
	movq	%rax, -432(%rbp)
	leaq	-448(%rbp), %rax
	movq	%rax, -464(%rbp)
	movq	$2, -456(%rbp)
.Ltmp55:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-464(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp56:
.LBB0_194:
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	callq	*(%rax)
.LBB0_195:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6024(%rbp), %rcx               # 8-byte Reload
	movq	$8, -480(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -488(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-480(%rbp), %rcx
	movq	%rcx, -528(%rbp)
	movq	%rax, -504(%rbp)
	leaq	-488(%rbp), %rax
	movq	%rax, -512(%rbp)
	leaq	-528(%rbp), %rax
	movq	%rax, -544(%rbp)
	movq	$2, -536(%rbp)
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-544(%rbp), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_196:
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	callq	*(%rax)
.LBB0_197:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6040(%rbp), %rcx               # 8-byte Reload
	movq	$8, -552(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -560(%rbp)
	movq	%rax, -584(%rbp)
	leaq	-552(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	%rax, -568(%rbp)
	leaq	-560(%rbp), %rax
	movq	%rax, -576(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	$2, -600(%rbp)
	.loc	1 687 7                         # formatter_private.c3:687:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-608(%rbp), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_198:
	.loc	1 688 23 is_stmt 1              # formatter_private.c3:688:23
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	callq	*(%rax)
.LBB0_199:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6064(%rbp), %rcx               # 8-byte Reload
	movq	$8, -632(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -640(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-632(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	%rax, -648(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -688(%rbp)
	movq	$2, -680(%rbp)
	.loc	1 688 23                        # formatter_private.c3:688:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-688(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_200:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6072(%rbp), %rcx               # 8-byte Reload
	movq	$8, -696(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -704(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-696(%rbp), %rcx
	movq	%rcx, -736(%rbp)
	movq	%rax, -712(%rbp)
	leaq	-704(%rbp), %rax
	movq	%rax, -720(%rbp)
	leaq	-736(%rbp), %rax
	movq	%rax, -752(%rbp)
	movq	$2, -744(%rbp)
	.loc	1 688 12                        # formatter_private.c3:688:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-752(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_201:
.Ltmp57:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp58:
.LBB0_202:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB0_203:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6168(%rbp), %rcx               # 8-byte Reload
	movq	$2, -840(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -848(%rbp)
	movq	%rax, -872(%rbp)
	leaq	-840(%rbp), %rcx
	movq	%rcx, -880(%rbp)
	movq	%rax, -856(%rbp)
	leaq	-848(%rbp), %rax
	movq	%rax, -864(%rbp)
	leaq	-880(%rbp), %rax
	movq	%rax, -896(%rbp)
	movq	$2, -888(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-896(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp59:
.LBB0_204:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB0_205:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-6216(%rbp), %rcx               # 8-byte Reload
	movq	$4, -912(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -920(%rbp)
	movq	%rax, -952(%rbp)
	leaq	-912(%rbp), %rcx
	movq	%rcx, -960(%rbp)
	movq	%rax, -936(%rbp)
	leaq	-920(%rbp), %rax
	movq	%rax, -944(%rbp)
	leaq	-960(%rbp), %rax
	movq	%rax, -976(%rbp)
	movq	$2, -968(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-976(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp60:
.LBB0_206:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB0_207:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6264(%rbp), %rcx               # 8-byte Reload
	movq	$8, -992(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1000(%rbp)
	movq	%rax, -1032(%rbp)
	leaq	-992(%rbp), %rcx
	movq	%rcx, -1040(%rbp)
	movq	%rax, -1016(%rbp)
	leaq	-1000(%rbp), %rax
	movq	%rax, -1024(%rbp)
	leaq	-1040(%rbp), %rax
	movq	%rax, -1056(%rbp)
	movq	$2, -1048(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1056(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp61:
.LBB0_208:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB0_209:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6312(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1080(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1088(%rbp)
	movq	%rax, -1112(%rbp)
	leaq	-1080(%rbp), %rcx
	movq	%rcx, -1120(%rbp)
	movq	%rax, -1096(%rbp)
	leaq	-1088(%rbp), %rax
	movq	%rax, -1104(%rbp)
	leaq	-1120(%rbp), %rax
	movq	%rax, -1136(%rbp)
	movq	$2, -1128(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1136(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp62:
.LBB0_210:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp63:
.LBB0_211:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB0_212:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6392(%rbp), %rcx               # 8-byte Reload
	movq	$2, -1152(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1160(%rbp)
	movq	%rax, -1192(%rbp)
	leaq	-1152(%rbp), %rcx
	movq	%rcx, -1200(%rbp)
	movq	%rax, -1176(%rbp)
	leaq	-1160(%rbp), %rax
	movq	%rax, -1184(%rbp)
	leaq	-1200(%rbp), %rax
	movq	%rax, -1216(%rbp)
	movq	$2, -1208(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1216(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp64:
.LBB0_213:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB0_214:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6440(%rbp), %rcx               # 8-byte Reload
	movq	$4, -1232(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1240(%rbp)
	movq	%rax, -1272(%rbp)
	leaq	-1232(%rbp), %rcx
	movq	%rcx, -1280(%rbp)
	movq	%rax, -1256(%rbp)
	leaq	-1240(%rbp), %rax
	movq	%rax, -1264(%rbp)
	leaq	-1280(%rbp), %rax
	movq	%rax, -1296(%rbp)
	movq	$2, -1288(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1296(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp65:
.LBB0_215:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB0_216:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6488(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1312(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1320(%rbp)
	movq	%rax, -1352(%rbp)
	leaq	-1312(%rbp), %rcx
	movq	%rcx, -1360(%rbp)
	movq	%rax, -1336(%rbp)
	leaq	-1320(%rbp), %rax
	movq	%rax, -1344(%rbp)
	leaq	-1360(%rbp), %rax
	movq	%rax, -1376(%rbp)
	movq	$2, -1368(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1376(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp66:
.LBB0_217:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB0_218:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-6536(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1400(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1408(%rbp)
	movq	%rax, -1432(%rbp)
	leaq	-1400(%rbp), %rcx
	movq	%rcx, -1440(%rbp)
	movq	%rax, -1416(%rbp)
	leaq	-1408(%rbp), %rax
	movq	%rax, -1424(%rbp)
	leaq	-1440(%rbp), %rax
	movq	%rax, -1456(%rbp)
	movq	$2, -1448(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1456(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp67:
.LBB0_219:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-6008(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6552(%rbp)               # 8-byte Spill
	.loc	3 408 12 is_stmt 1              # formatter.c3:408:12
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_225
	jmp	.LBB0_224
.LBB0_220:                              #   in Loop: Header=BB0_19 Depth=2
.Ltmp68:
	.loc	3 404 10                        # formatter.c3:404:10
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 404 8 is_stmt 0               # formatter.c3:404:8
	cmpq	-3744(%rbp), %rax
	jb	.LBB0_222
# %bb.221:
	.loc	3 0 8                           # formatter.c3:0:8
	movq	-3696(%rbp), %rax
	movq	%rax, -3992(%rbp)
	movq	-3992(%rbp), %rsi
.Ltmp69:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4000(%rbp), %rdi
	leaq	.L.str.79(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -3984(%rbp)
	movq	-3984(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp70:
.LBB0_222:                              #   in Loop: Header=BB0_19 Depth=2
	.loc	3 405 8                         # formatter.c3:405:8
	movq	-3704(%rbp), %rcx
	movq	%rcx, -6576(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -6568(%rbp)               # 8-byte Spill
	.loc	3 405 15 is_stmt 0              # formatter.c3:405:15
	movq	-3760(%rbp), %rax
	movq	%rax, -6560(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_783
# %bb.223:                              #   in Loop: Header=BB0_19 Depth=2
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-6568(%rbp), %rax               # 8-byte Reload
	movq	-6560(%rbp), %rcx               # 8-byte Reload
	.loc	3 405 15                        # formatter.c3:405:15
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	jmp	.LBB0_19
.Ltmp71:
.LBB0_224:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-6552(%rbp), %rax               # 8-byte Reload
	.loc	3 408 12 is_stmt 1              # formatter.c3:408:12
	movq	%rax, -4080(%rbp)
	jmp	.LBB0_226
.LBB0_225:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-4084(%rbp), %eax
	movl	%eax, -4068(%rbp)
	movq	$0, -4080(%rbp)
.LBB0_226:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 409 13                        # formatter.c3:409:13
	movq	-4080(%rbp), %rax
	movq	%rax, -6584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_228
# %bb.227:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-6584(%rbp), %rax               # 8-byte Reload
	.loc	3 409 13                        # formatter.c3:409:13
	movq	%rax, -4096(%rbp)
	jmp	.LBB0_229
.LBB0_228:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4096(%rbp)
.LBB0_229:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4096(%rbp)
	je	.LBB0_231
# %bb.230:
	.loc	3 0 13                          # formatter.c3:0:13
	movq	-3696(%rbp), %rax
	movq	%rax, -4112(%rbp)
	movq	-4112(%rbp), %rsi
.Ltmp72:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4120(%rbp), %rdi
	leaq	.L.str.80(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4104(%rbp)
	movq	-4104(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp73:
.LBB0_231:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 410 7                         # formatter.c3:410:7
	movq	-3704(%rbp), %rcx
	movq	%rcx, -6608(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -6600(%rbp)               # 8-byte Spill
	.loc	3 410 14 is_stmt 0              # formatter.c3:410:14
	movq	-3760(%rbp), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_784
# %bb.232:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-6600(%rbp), %rax               # 8-byte Reload
	movq	-6592(%rbp), %rcx               # 8-byte Reload
	.loc	3 410 14                        # formatter.c3:410:14
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 411 7 is_stmt 1               # formatter.c3:411:7
	cmpl	$0, -4068(%rbp)
	jge	.LBB0_234
# %bb.233:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp74:
	.loc	3 413 4                         # formatter.c3:413:4
	movq	-3696(%rbp), %rax
	.loc	3 413 22 is_stmt 0              # formatter.c3:413:22
	movl	16(%rax), %ecx
	andl	$-3, %ecx
	orl	$2, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 414 9 is_stmt 1               # formatter.c3:414:9
	xorl	%eax, %eax
	subl	-4068(%rbp), %eax
	movl	%eax, -4068(%rbp)
	movq	$0, -4080(%rbp)
.Ltmp75:
.LBB0_234:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 416 16                        # formatter.c3:416:16
	movl	-4068(%rbp), %ecx
	.loc	3 416 3 is_stmt 0               # formatter.c3:416:3
	movq	-3696(%rbp), %rax
	movl	%ecx, 20(%rax)
	.loc	3 418 3 is_stmt 1               # formatter.c3:418:3
	movq	-3696(%rbp), %rax
	movl	$0, 24(%rax)
	.loc	3 419 7                         # formatter.c3:419:7
	cmpb	$46, -3761(%rbp)
	jne	.LBB0_444
# %bb.235:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp76:
	.loc	3 421 4                         # formatter.c3:421:4
	movq	-3696(%rbp), %rax
	.loc	3 421 27 is_stmt 0              # formatter.c3:421:27
	movl	16(%rax), %ecx
	andl	$-65, %ecx
	orl	$64, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 422 10 is_stmt 1              # formatter.c3:422:10
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 422 8 is_stmt 0               # formatter.c3:422:8
	cmpq	-3744(%rbp), %rax
	jb	.LBB0_237
# %bb.236:
	.loc	3 0 8                           # formatter.c3:0:8
	movq	-3696(%rbp), %rax
	movq	%rax, -4208(%rbp)
	movq	-4208(%rbp), %rsi
.Ltmp77:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4216(%rbp), %rdi
	leaq	.L.str.81(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4200(%rbp)
	movq	-4200(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp78:
.LBB0_237:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-3728(%rbp), %rsi
	movq	-3720(%rbp), %rdx
	movq	-3712(%rbp), %rcx
	movq	-3704(%rbp), %rax
	movq	%rsi, -1752(%rbp)
	movq	%rdx, -1760(%rbp)
	leaq	-3752(%rbp), %rdx
	movq	%rdx, -1768(%rbp)
	movq	%rcx, -1776(%rbp)
	movq	%rax, -1784(%rbp)
	leaq	-3760(%rbp), %rax
	movq	%rax, -1792(%rbp)
.Ltmp79:
	.loc	1 682 11 is_stmt 1              # formatter_private.c3:682:11
	movq	-1776(%rbp), %rax
	movq	%rax, -6624(%rbp)               # 8-byte Spill
	.loc	1 682 23 is_stmt 0              # formatter_private.c3:682:23
	movq	-1792(%rbp), %rax
	movq	%rax, -6616(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_403
# %bb.238:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6616(%rbp), %rax               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	andq	$7, %rax
	movq	%rax, -6632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_404
# %bb.239:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6624(%rbp), %rax               # 8-byte Reload
	movq	-6616(%rbp), %rcx               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	movq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1793(%rbp)
	movb	-1793(%rbp), %al
	movb	%al, -1873(%rbp)
	movb	-1873(%rbp), %al
	movb	%al, -1874(%rbp)
.Ltmp80:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-1874(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6640(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_405
# %bb.240:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-6640(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	je	.LBB0_257
.Ltmp81:
# %bb.241:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 683 63 is_stmt 1              # formatter_private.c3:683:63
	movq	-1776(%rbp), %rdx
	movq	-1784(%rbp), %rcx
	movq	-1792(%rbp), %rax
	movq	%rdx, -1504(%rbp)
	movq	%rcx, -1512(%rbp)
	movq	%rax, -1520(%rbp)
.Ltmp82:
	.loc	1 146 11                        # formatter_private.c3:146:11
	movl	$0, -1524(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-1520(%rbp), %rax
	movq	%rax, -6648(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_251
# %bb.242:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-6648(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -6656(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_252
# %bb.243:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6648(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -1536(%rbp)
.LBB0_244:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp83:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-1536(%rbp), %rax
	cmpq	-1512(%rbp), %rax
	jae	.LBB0_249
# %bb.245:                              #   in Loop: Header=BB0_244 Depth=2
.Ltmp84:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-1504(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-1536(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1601(%rbp)
	movb	-1601(%rbp), %al
	movb	%al, -1602(%rbp)
	movb	-1602(%rbp), %al
	movb	%al, -1603(%rbp)
.Ltmp85:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-1603(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6664(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_253
# %bb.246:                              #   in Loop: Header=BB0_244 Depth=2
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-6664(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB0_248
.Ltmp86:
# %bb.247:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB0_249
.LBB0_248:                              #   in Loop: Header=BB0_244 Depth=2
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -1524(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-1601(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -1524(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-1536(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -1536(%rbp)
	jmp	.LBB0_244
.Ltmp87:
.LBB0_249:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-1520(%rbp), %rax
	movq	%rax, -6672(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_254
# %bb.250:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-6672(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -6680(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_255
	jmp	.LBB0_256
.LBB0_251:
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB0_252:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-6656(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1544(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1552(%rbp)
	movq	%rax, -1576(%rbp)
	leaq	-1544(%rbp), %rcx
	movq	%rcx, -1584(%rbp)
	movq	%rax, -1560(%rbp)
	leaq	-1552(%rbp), %rax
	movq	%rax, -1568(%rbp)
	leaq	-1584(%rbp), %rax
	movq	%rax, -1600(%rbp)
	movq	$2, -1592(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1600(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_253:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6664(%rbp), %rcx               # 8-byte Reload
	movq	$256, -1616(%rbp)               # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1624(%rbp)
	movq	%rax, -1656(%rbp)
	leaq	-1616(%rbp), %rcx
	movq	%rcx, -1664(%rbp)
	movq	%rax, -1640(%rbp)
	leaq	-1624(%rbp), %rax
	movq	%rax, -1648(%rbp)
	leaq	-1664(%rbp), %rax
	movq	%rax, -1680(%rbp)
	movq	$2, -1672(%rbp)
.Ltmp88:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1680(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp89:
.LBB0_254:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB0_255:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-6680(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1688(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1696(%rbp)
	movq	%rax, -1720(%rbp)
	leaq	-1688(%rbp), %rcx
	movq	%rcx, -1728(%rbp)
	movq	%rax, -1704(%rbp)
	leaq	-1696(%rbp), %rax
	movq	%rax, -1712(%rbp)
	leaq	-1728(%rbp), %rax
	movq	%rax, -1744(%rbp)
	movq	$2, -1736(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1744(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_256:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-6672(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-1536(%rbp), %rcx
	movq	%rcx, (%rax)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-1524(%rbp), %eax
.Ltmp90:
	.loc	1 683 27                        # formatter_private.c3:683:27
	movl	%eax, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_257:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 684 6                         # formatter_private.c3:684:6
	cmpb	$42, -1793(%rbp)
	je	.LBB0_259
# %bb.258:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 684 23 is_stmt 0              # formatter_private.c3:684:23
	movl	$0, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_259:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 685 16 is_stmt 1              # formatter_private.c3:685:16
	movq	-1792(%rbp), %rax
	movq	%rax, -6696(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_406
# %bb.260:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6696(%rbp), %rax               # 8-byte Reload
	.loc	1 685 16                        # formatter_private.c3:685:16
	andq	$7, %rax
	movq	%rax, -6704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_407
# %bb.261:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-6696(%rbp), %rcx               # 8-byte Reload
	.loc	1 685 15                        # formatter_private.c3:685:15
	movq	(%rcx), %rax
	addq	$1, %rax
	movq	%rax, (%rcx)
	movq	%rax, -1960(%rbp)
	.loc	1 686 6 is_stmt 1               # formatter_private.c3:686:6
	movq	-1960(%rbp), %rax
	cmpq	-1784(%rbp), %rax
	jb	.LBB0_263
# %bb.262:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 686 32 is_stmt 0              # formatter_private.c3:686:32
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_263:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	movq	-1768(%rbp), %rax
	movq	%rax, -6712(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_408
# %bb.264:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6712(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	andq	$7, %rax
	movq	%rax, -6720(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_409
# %bb.265:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-6712(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	movq	(%rax), %rax
	.loc	1 687 6                         # formatter_private.c3:687:6
	cmpq	-1760(%rbp), %rax
	jb	.LBB0_267
# %bb.266:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 687 42                        # formatter_private.c3:687:42
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_267:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 688 12 is_stmt 1              # formatter_private.c3:688:12
	movq	-1752(%rbp), %rax
	movq	%rax, -6736(%rbp)               # 8-byte Spill
	.loc	1 688 23 is_stmt 0              # formatter_private.c3:688:23
	movq	-1768(%rbp), %rax
	movq	%rax, -6728(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_410
# %bb.268:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6728(%rbp), %rax               # 8-byte Reload
	.loc	1 688 23                        # formatter_private.c3:688:23
	andq	$7, %rax
	movq	%rax, -6744(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_411
# %bb.269:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6736(%rbp), %rax               # 8-byte Reload
	movq	-6728(%rbp), %rdx               # 8-byte Reload
	.loc	1 688 22                        # formatter_private.c3:688:22
	movq	(%rdx), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -6760(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -6752(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_412
# %bb.270:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6760(%rbp), %rax               # 8-byte Reload
	.loc	1 688 12                        # formatter_private.c3:688:12
	movq	(%rax), %rcx
	movq	%rcx, -2112(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -2104(%rbp)
	.loc	1 689 7 is_stmt 1               # formatter_private.c3:689:7
	movq	-2104(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_272
# %bb.271:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 689 40 is_stmt 0              # formatter_private.c3:689:40
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_272:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-2112(%rbp), %rax
	movq	%rax, -2272(%rbp)
	movq	-2104(%rbp), %rax
	movq	%rax, -2264(%rbp)
.Ltmp91:
	.loc	5 690 17 is_stmt 1              # types.c3:690:17
	movl	$2, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_274
# %bb.273:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.LBB0_274:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 19 11                         # types.c3:19:11
	movq	-2264(%rbp), %rax
	.loc	5 690 17                        # types.c3:690:17
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB0_276
# %bb.275:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.Ltmp92:
.LBB0_276:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 23 20                         # types.c3:23:20
	movq	-2264(%rbp), %rax
	movq	%rax, -2288(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-2288(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -2289(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-2288(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$2, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -2290(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$2147483647, -2296(%rbp)        # imm = 0x7FFFFFFF
	.loc	5 27 14                         # types.c3:27:14
	movl	$-2147483648, -2300(%rbp)       # imm = 0x80000000
	movq	-2288(%rbp), %rax
	movq	%rax, -2312(%rbp)
	movq	-2312(%rbp), %rax
	movq	%rax, -6776(%rbp)               # 8-byte Spill
	movq	%rax, -6768(%rbp)               # 8-byte Spill
.LBB0_277:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6768(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6792(%rbp)               # 8-byte Spill
.Ltmp93:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6777(%rbp)                # 1-byte Spill
	je	.LBB0_279
# %bb.278:                              #   in Loop: Header=BB0_277 Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6792(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6768(%rbp)               # 8-byte Spill
	movb	%al, -6777(%rbp)                # 1-byte Spill
	jne	.LBB0_277
.LBB0_279:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6777(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB0_280
	jmp	.LBB0_286
.LBB0_280:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp94:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-2272(%rbp), %rax
	movq	%rax, -6800(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_413
# %bb.281:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-6800(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -2313(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6801(%rbp)                # 1-byte Spill
	je	.LBB0_283
# %bb.282:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-2313(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6801(%rbp)                # 1-byte Spill
.LBB0_283:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6801(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB0_284
	jmp	.LBB0_285
.LBB0_284:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_285:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-2313(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp95:
.LBB0_286:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6816(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB0_287
.LBB0_287:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6816(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6832(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6817(%rbp)                # 1-byte Spill
	je	.LBB0_289
# %bb.288:                              #   in Loop: Header=BB0_287 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6832(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6816(%rbp)               # 8-byte Spill
	movb	%al, -6817(%rbp)                # 1-byte Spill
	jne	.LBB0_287
.LBB0_289:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6817(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB0_290
	jmp	.LBB0_301
.LBB0_290:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp96:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-2272(%rbp), %rax
	movq	%rax, -6840(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_414
# %bb.291:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6840(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -6848(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_415
# %bb.292:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6840(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -2316(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6849(%rbp)                # 1-byte Spill
	je	.LBB0_294
# %bb.293:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-2316(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6849(%rbp)                # 1-byte Spill
.LBB0_294:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6849(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB0_295
	jmp	.LBB0_296
.LBB0_295:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_296:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-2316(%rbp), %ecx
	movb	$1, %al
	cmpl	-2296(%rbp), %ecx
	movb	%al, -6850(%rbp)                # 1-byte Spill
	jg	.LBB0_298
# %bb.297:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 19 is_stmt 0               # types.c3:37:19
	movswl	-2316(%rbp), %eax
	cmpl	-2300(%rbp), %eax
	setl	%al
	movb	%al, -6850(%rbp)                # 1-byte Spill
.LBB0_298:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6850(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB0_299
	jmp	.LBB0_300
.LBB0_299:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_300:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-2316(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp97:
.LBB0_301:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6864(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB0_302
.LBB0_302:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6864(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6880(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6865(%rbp)                # 1-byte Spill
	je	.LBB0_304
# %bb.303:                              #   in Loop: Header=BB0_302 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6880(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6864(%rbp)               # 8-byte Spill
	movb	%al, -6865(%rbp)                # 1-byte Spill
	jne	.LBB0_302
.LBB0_304:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6865(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB0_305
	jmp	.LBB0_316
.LBB0_305:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp98:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-2272(%rbp), %rax
	movq	%rax, -6888(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_416
# %bb.306:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-6888(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -6896(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_417
# %bb.307:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 13                          # types.c3:0:13
	movq	-6888(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -2388(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6897(%rbp)                # 1-byte Spill
	je	.LBB0_309
# %bb.308:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -2388(%rbp)
	setl	%al
	movb	%al, -6897(%rbp)                # 1-byte Spill
.LBB0_309:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6897(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB0_310
	jmp	.LBB0_311
.LBB0_310:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_311:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-2388(%rbp), %ecx
	movb	$1, %al
	cmpl	-2296(%rbp), %ecx
	movb	%al, -6898(%rbp)                # 1-byte Spill
	jg	.LBB0_313
# %bb.312:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 19 is_stmt 0               # types.c3:42:19
	movl	-2388(%rbp), %eax
	cmpl	-2300(%rbp), %eax
	setl	%al
	movb	%al, -6898(%rbp)                # 1-byte Spill
.LBB0_313:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6898(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB0_314
	jmp	.LBB0_315
.LBB0_314:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_315:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-2388(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp99:
.LBB0_316:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6912(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB0_317
.LBB0_317:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6912(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6928(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6913(%rbp)                # 1-byte Spill
	je	.LBB0_319
# %bb.318:                              #   in Loop: Header=BB0_317 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6928(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6912(%rbp)               # 8-byte Spill
	movb	%al, -6913(%rbp)                # 1-byte Spill
	jne	.LBB0_317
.LBB0_319:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6913(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB0_320
	jmp	.LBB0_331
.LBB0_320:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp100:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-2272(%rbp), %rax
	movq	%rax, -6936(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_418
# %bb.321:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6936(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -6944(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_419
# %bb.322:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6936(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -2472(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6945(%rbp)                # 1-byte Spill
	je	.LBB0_324
# %bb.323:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -2472(%rbp)
	setl	%al
	movb	%al, -6945(%rbp)                # 1-byte Spill
.LBB0_324:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6945(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB0_325
	jmp	.LBB0_326
.LBB0_325:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_326:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-2472(%rbp), %rcx
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movslq	-2296(%rbp), %rdx
	.loc	5 47 8                          # types.c3:47:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -6946(%rbp)                # 1-byte Spill
	jg	.LBB0_328
# %bb.327:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 19                         # types.c3:47:19
	movq	-2472(%rbp), %rax
	.loc	5 47 23                         # types.c3:47:23
	movslq	-2300(%rbp), %rcx
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rcx, %rax
	setl	%al
	movb	%al, -6946(%rbp)                # 1-byte Spill
.LBB0_328:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6946(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB0_329
	jmp	.LBB0_330
.LBB0_329:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_330:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-2472(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp101:
.LBB0_331:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6960(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB0_332
.LBB0_332:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6960(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6976(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6961(%rbp)                # 1-byte Spill
	je	.LBB0_334
# %bb.333:                              #   in Loop: Header=BB0_332 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6976(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6960(%rbp)               # 8-byte Spill
	movb	%al, -6961(%rbp)                # 1-byte Spill
	jne	.LBB0_332
.LBB0_334:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6961(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB0_335
	jmp	.LBB0_346
.LBB0_335:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp102:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-2272(%rbp), %rax
	movq	%rax, -6984(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_420
# %bb.336:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6984(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -6992(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_421
# %bb.337:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6984(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -2552(%rbp)
	movq	%rax, -2560(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6993(%rbp)                # 1-byte Spill
	je	.LBB0_339
# %bb.338:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-2552(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -6993(%rbp)                # 1-byte Spill
.LBB0_339:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6993(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB0_340
	jmp	.LBB0_341
.LBB0_340:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_341:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-2560(%rbp), %rdi
	movq	-2552(%rbp), %rdx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movslq	-2296(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	movb	$1, %al
	.loc	5 52 8                          # types.c3:52:8
	subq	%rdi, %rsi
	sbbq	%rdx, %rcx
	movb	%al, -6994(%rbp)                # 1-byte Spill
	jl	.LBB0_343
	jmp	.LBB0_342
.LBB0_342:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 19                         # types.c3:52:19
	movq	-2560(%rbp), %rdx
	movq	-2552(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movslq	-2300(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	movb	%al, -6994(%rbp)                # 1-byte Spill
.LBB0_343:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6994(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB0_344
	jmp	.LBB0_345
.LBB0_344:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_345:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-2560(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp103:
.LBB0_346:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7008(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB0_347
.LBB0_347:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7008(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7024(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7009(%rbp)                # 1-byte Spill
	je	.LBB0_349
# %bb.348:                              #   in Loop: Header=BB0_347 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7024(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7008(%rbp)               # 8-byte Spill
	movb	%al, -7009(%rbp)                # 1-byte Spill
	jne	.LBB0_347
.LBB0_349:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7009(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB0_350
	jmp	.LBB0_354
.LBB0_350:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp104:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-2272(%rbp), %rax
	movq	%rax, -7032(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_422
# %bb.351:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-7032(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -2625(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-2625(%rbp), %eax
	cmpl	%eax, -2296(%rbp)
	jge	.LBB0_353
# %bb.352:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_353:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-2625(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp105:
.LBB0_354:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7040(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB0_355
.LBB0_355:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7040(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7056(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7041(%rbp)                # 1-byte Spill
	je	.LBB0_357
# %bb.356:                              #   in Loop: Header=BB0_355 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7056(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7040(%rbp)               # 8-byte Spill
	movb	%al, -7041(%rbp)                # 1-byte Spill
	jne	.LBB0_355
.LBB0_357:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7041(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB0_358
	jmp	.LBB0_365
.LBB0_358:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp106:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-2272(%rbp), %rax
	movq	%rax, -7064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_423
# %bb.359:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-7064(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -7072(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_424
# %bb.360:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-7064(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -2628(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-2628(%rbp), %ecx
	movb	$1, %al
	cmpl	%ecx, -2296(%rbp)
	movb	%al, -7073(%rbp)                # 1-byte Spill
	jl	.LBB0_362
# %bb.361:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-2628(%rbp), %eax
	cmpl	%eax, -2300(%rbp)
	setg	%al
	movb	%al, -7073(%rbp)                # 1-byte Spill
.LBB0_362:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7073(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB0_363
	jmp	.LBB0_364
.LBB0_363:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_364:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-2628(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp107:
.LBB0_365:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7088(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB0_366
.LBB0_366:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7088(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7104(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7089(%rbp)                # 1-byte Spill
	je	.LBB0_368
# %bb.367:                              #   in Loop: Header=BB0_366 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7104(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7088(%rbp)               # 8-byte Spill
	movb	%al, -7089(%rbp)                # 1-byte Spill
	jne	.LBB0_366
.LBB0_368:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7089(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB0_369
	jmp	.LBB0_376
.LBB0_369:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp108:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-2272(%rbp), %rax
	movq	%rax, -7112(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_425
# %bb.370:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-7112(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -7120(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_426
# %bb.371:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-7112(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -2708(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-2708(%rbp), %ecx
	cmpl	%ecx, -2296(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7121(%rbp)                # 1-byte Spill
	jne	.LBB0_373
# %bb.372:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-2708(%rbp), %eax
	cmpl	%eax, -2300(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -7121(%rbp)                # 1-byte Spill
.LBB0_373:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7121(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB0_374
	jmp	.LBB0_375
.LBB0_374:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_375:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-2708(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp109:
.LBB0_376:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7136(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB0_377
.LBB0_377:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7136(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7152(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7137(%rbp)                # 1-byte Spill
	je	.LBB0_379
# %bb.378:                              #   in Loop: Header=BB0_377 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7152(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7136(%rbp)               # 8-byte Spill
	movb	%al, -7137(%rbp)                # 1-byte Spill
	jne	.LBB0_377
.LBB0_379:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7137(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB0_380
	jmp	.LBB0_387
.LBB0_380:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp110:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-2272(%rbp), %rax
	movq	%rax, -7160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_427
# %bb.381:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-7160(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -7168(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_428
# %bb.382:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-7160(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -2792(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-2792(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movslq	-2296(%rbp), %rax
	.loc	5 68 8                          # types.c3:68:8
	cmpq	%rcx, %rax
	setl	%al
	cmpq	$0, %rcx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7169(%rbp)                # 1-byte Spill
	jne	.LBB0_384
# %bb.383:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 68 19                         # types.c3:68:19
	movq	-2792(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movslq	-2300(%rbp), %rcx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rax, %rcx
	setg	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	movb	%al, -7169(%rbp)                # 1-byte Spill
.LBB0_384:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7169(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB0_385
	jmp	.LBB0_386
.LBB0_385:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_386:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-2792(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp111:
.LBB0_387:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6776(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7184(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB0_388
.LBB0_388:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7184(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7200(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7185(%rbp)                # 1-byte Spill
	je	.LBB0_390
# %bb.389:                              #   in Loop: Header=BB0_388 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7200(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7184(%rbp)               # 8-byte Spill
	movb	%al, -7185(%rbp)                # 1-byte Spill
	jne	.LBB0_388
.LBB0_390:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7185(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB0_391
	jmp	.LBB0_398
.LBB0_391:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp112:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-2272(%rbp), %rax
	movq	%rax, -7208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_429
# %bb.392:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-7208(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -7216(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_430
# %bb.393:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-7208(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -2872(%rbp)
	movq	%rax, -2880(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-2880(%rbp), %rsi
	movq	-2872(%rbp), %rcx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movslq	-2296(%rbp), %rdx
	movq	%rdx, %rax
	sarq	$63, %rax
	.loc	5 72 8                          # types.c3:72:8
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	shrq	$63, %rcx
                                        # kill: def $cl killed $cl killed $rcx
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7217(%rbp)                # 1-byte Spill
	jne	.LBB0_395
# %bb.394:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 72 19                         # types.c3:72:19
	movq	-2880(%rbp), %rcx
	movq	-2872(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movslq	-2300(%rbp), %rsi
	movq	%rsi, %rdx
	sarq	$63, %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rsi, %rcx
	movq	%rax, %rcx
	sbbq	%rdx, %rcx
	setl	%cl
	testq	%rax, %rax
	setns	%al
	andb	%cl, %al
	movb	%al, -7217(%rbp)                # 1-byte Spill
.LBB0_395:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7217(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB0_396
	jmp	.LBB0_397
.LBB0_396:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB0_400
.LBB0_397:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-2880(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB0_399
.Ltmp113:
.LBB0_398:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.123(%rip), %rax
	movq	%rax, -2960(%rbp)
	movq	$30, -2952(%rbp)
.Ltmp114:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-2960(%rbp), %rdi
	movq	-2952(%rbp), %rsi
	movq	$0, -2968(%rbp)
	movq	$0, -2976(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.124(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.125(%rip), %r8
	movl	$25, %r9d
	leaq	-2976(%rbp), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_399:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-2276(%rbp), %eax
	movl	%eax, -2244(%rbp)
	movq	$0, -2256(%rbp)
.Ltmp115:
.LBB0_400:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 691 9 is_stmt 1               # formatter_private.c3:691:9
	cmpq	$0, -2256(%rbp)
	sete	%al
	testb	$1, %al
	jne	.LBB0_401
	jmp	.LBB0_402
.LBB0_401:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-2244(%rbp), %eax
	.loc	1 691 19 is_stmt 0              # formatter_private.c3:691:19
	movl	%eax, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_402:                              #   in Loop: Header=BB0_5 Depth=1
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -2984(%rbp)
	movq	-2984(%rbp), %rax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	jmp	.LBB0_431
.LBB0_403:
	.loc	1 682 23 is_stmt 1              # formatter_private.c3:682:23
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	callq	*(%rax)
.LBB0_404:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6632(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1808(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1816(%rbp)
	movq	%rax, -1848(%rbp)
	leaq	-1808(%rbp), %rcx
	movq	%rcx, -1856(%rbp)
	movq	%rax, -1832(%rbp)
	leaq	-1816(%rbp), %rax
	movq	%rax, -1840(%rbp)
	leaq	-1856(%rbp), %rax
	movq	%rax, -1872(%rbp)
	movq	$2, -1864(%rbp)
	.loc	1 682 23                        # formatter_private.c3:682:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1872(%rbp), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_405:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6640(%rbp), %rcx               # 8-byte Reload
	movq	$256, -1888(%rbp)               # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1896(%rbp)
	movq	%rax, -1928(%rbp)
	leaq	-1888(%rbp), %rcx
	movq	%rcx, -1936(%rbp)
	movq	%rax, -1912(%rbp)
	leaq	-1896(%rbp), %rax
	movq	%rax, -1920(%rbp)
	leaq	-1936(%rbp), %rax
	movq	%rax, -1952(%rbp)
	movq	$2, -1944(%rbp)
.Ltmp116:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1952(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp117:
.LBB0_406:
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	callq	*(%rax)
.LBB0_407:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6704(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1968(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1976(%rbp)
	movq	%rax, -2008(%rbp)
	leaq	-1968(%rbp), %rcx
	movq	%rcx, -2016(%rbp)
	movq	%rax, -1992(%rbp)
	leaq	-1976(%rbp), %rax
	movq	%rax, -2000(%rbp)
	leaq	-2016(%rbp), %rax
	movq	%rax, -2032(%rbp)
	movq	$2, -2024(%rbp)
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2032(%rbp), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_408:
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	callq	*(%rax)
.LBB0_409:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6720(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2040(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2048(%rbp)
	movq	%rax, -2072(%rbp)
	leaq	-2040(%rbp), %rcx
	movq	%rcx, -2080(%rbp)
	movq	%rax, -2056(%rbp)
	leaq	-2048(%rbp), %rax
	movq	%rax, -2064(%rbp)
	leaq	-2080(%rbp), %rax
	movq	%rax, -2096(%rbp)
	movq	$2, -2088(%rbp)
	.loc	1 687 7                         # formatter_private.c3:687:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2096(%rbp), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_410:
	.loc	1 688 23 is_stmt 1              # formatter_private.c3:688:23
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	callq	*(%rax)
.LBB0_411:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6744(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2120(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2128(%rbp)
	movq	%rax, -2152(%rbp)
	leaq	-2120(%rbp), %rcx
	movq	%rcx, -2160(%rbp)
	movq	%rax, -2136(%rbp)
	leaq	-2128(%rbp), %rax
	movq	%rax, -2144(%rbp)
	leaq	-2160(%rbp), %rax
	movq	%rax, -2176(%rbp)
	movq	$2, -2168(%rbp)
	.loc	1 688 23                        # formatter_private.c3:688:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2176(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_412:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6752(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2184(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2192(%rbp)
	movq	%rax, -2216(%rbp)
	leaq	-2184(%rbp), %rcx
	movq	%rcx, -2224(%rbp)
	movq	%rax, -2200(%rbp)
	leaq	-2192(%rbp), %rax
	movq	%rax, -2208(%rbp)
	leaq	-2224(%rbp), %rax
	movq	%rax, -2240(%rbp)
	movq	$2, -2232(%rbp)
	.loc	1 688 12                        # formatter_private.c3:688:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2240(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_413:
.Ltmp118:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp119:
.LBB0_414:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB0_415:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6848(%rbp), %rcx               # 8-byte Reload
	movq	$2, -2328(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2336(%rbp)
	movq	%rax, -2360(%rbp)
	leaq	-2328(%rbp), %rcx
	movq	%rcx, -2368(%rbp)
	movq	%rax, -2344(%rbp)
	leaq	-2336(%rbp), %rax
	movq	%rax, -2352(%rbp)
	leaq	-2368(%rbp), %rax
	movq	%rax, -2384(%rbp)
	movq	$2, -2376(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2384(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp120:
.LBB0_416:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB0_417:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-6896(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2400(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2408(%rbp)
	movq	%rax, -2440(%rbp)
	leaq	-2400(%rbp), %rcx
	movq	%rcx, -2448(%rbp)
	movq	%rax, -2424(%rbp)
	leaq	-2408(%rbp), %rax
	movq	%rax, -2432(%rbp)
	leaq	-2448(%rbp), %rax
	movq	%rax, -2464(%rbp)
	movq	$2, -2456(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2464(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp121:
.LBB0_418:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB0_419:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6944(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2480(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2488(%rbp)
	movq	%rax, -2520(%rbp)
	leaq	-2480(%rbp), %rcx
	movq	%rcx, -2528(%rbp)
	movq	%rax, -2504(%rbp)
	leaq	-2488(%rbp), %rax
	movq	%rax, -2512(%rbp)
	leaq	-2528(%rbp), %rax
	movq	%rax, -2544(%rbp)
	movq	$2, -2536(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2544(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp122:
.LBB0_420:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB0_421:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6992(%rbp), %rcx               # 8-byte Reload
	movq	$16, -2568(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2576(%rbp)
	movq	%rax, -2600(%rbp)
	leaq	-2568(%rbp), %rcx
	movq	%rcx, -2608(%rbp)
	movq	%rax, -2584(%rbp)
	leaq	-2576(%rbp), %rax
	movq	%rax, -2592(%rbp)
	leaq	-2608(%rbp), %rax
	movq	%rax, -2624(%rbp)
	movq	$2, -2616(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2624(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp123:
.LBB0_422:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp124:
.LBB0_423:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB0_424:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-7072(%rbp), %rcx               # 8-byte Reload
	movq	$2, -2640(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2648(%rbp)
	movq	%rax, -2680(%rbp)
	leaq	-2640(%rbp), %rcx
	movq	%rcx, -2688(%rbp)
	movq	%rax, -2664(%rbp)
	leaq	-2648(%rbp), %rax
	movq	%rax, -2672(%rbp)
	leaq	-2688(%rbp), %rax
	movq	%rax, -2704(%rbp)
	movq	$2, -2696(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2704(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp125:
.LBB0_425:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB0_426:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-7120(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2720(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2728(%rbp)
	movq	%rax, -2760(%rbp)
	leaq	-2720(%rbp), %rcx
	movq	%rcx, -2768(%rbp)
	movq	%rax, -2744(%rbp)
	leaq	-2728(%rbp), %rax
	movq	%rax, -2752(%rbp)
	leaq	-2768(%rbp), %rax
	movq	%rax, -2784(%rbp)
	movq	$2, -2776(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2784(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp126:
.LBB0_427:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB0_428:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-7168(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2800(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2808(%rbp)
	movq	%rax, -2840(%rbp)
	leaq	-2800(%rbp), %rcx
	movq	%rcx, -2848(%rbp)
	movq	%rax, -2824(%rbp)
	leaq	-2808(%rbp), %rax
	movq	%rax, -2832(%rbp)
	leaq	-2848(%rbp), %rax
	movq	%rax, -2864(%rbp)
	movq	$2, -2856(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2864(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp127:
.LBB0_429:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB0_430:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-7216(%rbp), %rcx               # 8-byte Reload
	movq	$16, -2888(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2896(%rbp)
	movq	%rax, -2920(%rbp)
	leaq	-2888(%rbp), %rcx
	movq	%rcx, -2928(%rbp)
	movq	%rax, -2904(%rbp)
	leaq	-2896(%rbp), %rax
	movq	%rax, -2912(%rbp)
	leaq	-2928(%rbp), %rax
	movq	%rax, -2944(%rbp)
	movq	$2, -2936(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2944(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp128:
.LBB0_431:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-6688(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7232(%rbp)               # 8-byte Spill
	.loc	3 423 16 is_stmt 1              # formatter.c3:423:16
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_433
# %bb.432:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-7232(%rbp), %rax               # 8-byte Reload
	.loc	3 423 16                        # formatter.c3:423:16
	movq	%rax, -4232(%rbp)
	jmp	.LBB0_434
.LBB0_433:                              #   in Loop: Header=BB0_5 Depth=1
	movl	-4236(%rbp), %eax
	movl	%eax, -4220(%rbp)
	movq	$0, -4232(%rbp)
.LBB0_434:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 424 14 is_stmt 1              # formatter.c3:424:14
	movq	-4232(%rbp), %rax
	movq	%rax, -7240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_436
# %bb.435:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7240(%rbp), %rax               # 8-byte Reload
	.loc	3 424 14                        # formatter.c3:424:14
	movq	%rax, -4248(%rbp)
	jmp	.LBB0_437
.LBB0_436:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4248(%rbp)
.LBB0_437:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4248(%rbp)
	je	.LBB0_439
# %bb.438:
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-3696(%rbp), %rax
	movq	%rax, -4264(%rbp)
	movq	-4264(%rbp), %rsi
.Ltmp129:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4272(%rbp), %rdi
	leaq	.L.str.82(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4256(%rbp)
	movq	-4256(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp130:
.LBB0_439:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 425 16                        # formatter.c3:425:16
	cmpl	$0, -4220(%rbp)
	jge	.LBB0_441
# %bb.440:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 425 27 is_stmt 0              # formatter.c3:425:27
	xorl	%eax, %eax
	movl	%eax, -7244(%rbp)               # 4-byte Spill
	jmp	.LBB0_442
.LBB0_441:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 425 31                        # formatter.c3:425:31
	movl	-4220(%rbp), %eax
	movl	%eax, -7244(%rbp)               # 4-byte Spill
.LBB0_442:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 31                          # formatter.c3:0:31
	movl	-7244(%rbp), %ecx               # 4-byte Reload
	.loc	3 425 4                         # formatter.c3:425:4
	movq	-3696(%rbp), %rax
	movl	%ecx, 24(%rax)
	.loc	3 426 8 is_stmt 1               # formatter.c3:426:8
	movq	-3704(%rbp), %rcx
	movq	%rcx, -7272(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -7264(%rbp)               # 8-byte Spill
	.loc	3 426 15 is_stmt 0              # formatter.c3:426:15
	movq	-3760(%rbp), %rax
	movq	%rax, -7256(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_785
# %bb.443:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-7264(%rbp), %rax               # 8-byte Reload
	movq	-7256(%rbp), %rcx               # 8-byte Reload
	.loc	3 426 15                        # formatter.c3:426:15
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
.Ltmp131:
.LBB0_444:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 430 15 is_stmt 1              # formatter.c3:430:15
	movl	$0, -4340(%rbp)
	.loc	3 431 7                         # formatter.c3:431:7
	movq	-3752(%rbp), %rax
	cmpq	-3720(%rbp), %rax
	jb	.LBB0_453
# %bb.445:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-3696(%rbp), %rax
	movq	%rax, -4352(%rbp)
	movq	std.io.NOT_ENOUGH_ARGUMENTS@GOTPCREL(%rip), %rax
	movq	%rax, -4360(%rbp)
.Ltmp132:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4352(%rbp)
	jne	.LBB0_447
# %bb.446:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp133:
.LBB0_447:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4352(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_449
# %bb.448:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4352(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4368(%rbp)
	jmp	.LBB0_450
.LBB0_449:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4352(%rbp), %rax
	movq	-4360(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4360(%rbp), %rax
	movq	%rax, -4368(%rbp)
.Ltmp134:
.LBB0_450:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 434 4                         # formatter.c3:434:4
	movq	-3736(%rbp), %rax
	movq	%rax, -7288(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 434 17 is_stmt 0              # formatter.c3:434:17
	leaq	-4384(%rbp), %rdi
	leaq	.L.str.84(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7280(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_452
# %bb.451:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7280(%rbp), %rax               # 8-byte Reload
	.loc	3 434 17                        # formatter.c3:434:17
	movq	%rax, -4376(%rbp)
	movq	-4376(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_452:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7288(%rbp), %rax               # 8-byte Reload
	.loc	3 434 4                         # formatter.c3:434:4
	addq	-4384(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 435 4 is_stmt 1               # formatter.c3:435:4
	jmp	.LBB0_776
.Ltmp135:
.LBB0_453:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 437 17                        # formatter.c3:437:17
	movq	-3720(%rbp), %rcx
	movq	%rcx, -7312(%rbp)               # 8-byte Spill
	movq	-3728(%rbp), %rax
	movq	%rax, -7304(%rbp)               # 8-byte Spill
	.loc	3 437 22 is_stmt 0              # formatter.c3:437:22
	movq	-3752(%rbp), %rax
	movq	%rax, -7296(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -3752(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_786
# %bb.454:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 22                          # formatter.c3:0:22
	movq	-7304(%rbp), %rax               # 8-byte Reload
	movq	-7296(%rbp), %rcx               # 8-byte Reload
	.loc	3 437 22                        # formatter.c3:437:22
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -7328(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -7320(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_787
# %bb.455:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 22                          # formatter.c3:0:22
	movq	-7328(%rbp), %rax               # 8-byte Reload
	.loc	3 437 17                        # formatter.c3:437:17
	vmovdqu	(%rax), %xmm0
	vmovdqa	%xmm0, -4400(%rbp)
	movb	-3761(%rbp), %al
	movb	%al, -4529(%rbp)
	movb	-4529(%rbp), %al
	addb	$-65, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -7336(%rbp)               # 8-byte Spill
	subb	$55, %al
	ja	.LBB0_737
# %bb.800:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7336(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI0_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB0_456:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp136:
	.loc	3 441 12 is_stmt 1              # formatter.c3:441:12
	movl	$10, -4340(%rbp)
	.loc	3 442 5                         # formatter.c3:442:5
	movq	-3696(%rbp), %rax
	.loc	3 442 23 is_stmt 0              # formatter.c3:442:23
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB0_745
.Ltmp137:
.LBB0_457:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 444 5 is_stmt 1               # formatter.c3:444:5
	movq	-3696(%rbp), %rax
	.loc	3 444 28 is_stmt 0              # formatter.c3:444:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp138:
.LBB0_458:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 447 12 is_stmt 1              # formatter.c3:447:12
	movl	$16, -4340(%rbp)
	jmp	.LBB0_745
.Ltmp139:
.LBB0_459:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 449 5                         # formatter.c3:449:5
	movq	-3696(%rbp), %rax
	.loc	3 449 28 is_stmt 0              # formatter.c3:449:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp140:
.LBB0_460:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 452 12 is_stmt 1              # formatter.c3:452:12
	movl	$8, -4340(%rbp)
	jmp	.LBB0_745
.Ltmp141:
.LBB0_461:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 454 5                         # formatter.c3:454:5
	movq	-3696(%rbp), %rax
	.loc	3 454 28 is_stmt 0              # formatter.c3:454:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp142:
.LBB0_462:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 457 12 is_stmt 1              # formatter.c3:457:12
	movl	$2, -4340(%rbp)
	jmp	.LBB0_745
.Ltmp143:
.LBB0_463:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 459 5                         # formatter.c3:459:5
	movq	-3696(%rbp), %rax
	.loc	3 459 28 is_stmt 0              # formatter.c3:459:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp144:
.LBB0_464:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 462 5 is_stmt 1               # formatter.c3:462:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7352(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4552(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp145:
	.loc	3 462 44 is_stmt 0              # formatter.c3:462:44
	leaq	-4576(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7344(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_466
# %bb.465:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7344(%rbp), %rax               # 8-byte Reload
	.loc	3 462 44                        # formatter.c3:462:44
	movq	%rax, -4568(%rbp)
	jmp	.LBB0_469
.LBB0_466:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4576(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4584(%rbp), %rdi
	callq	std.io.Formatter.atoa@PLT
	movq	%rax, -7360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_468
# %bb.467:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7360(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4568(%rbp)
	jmp	.LBB0_469
.LBB0_468:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-4584(%rbp), %rax
	movq	%rax, -4560(%rbp)
	movq	$0, -4568(%rbp)
.LBB0_469:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 346 18 is_stmt 1              # formatter.c3:346:18
	movq	-4568(%rbp), %rax
	movq	%rax, -7368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_471
# %bb.470:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7368(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4592(%rbp)
	jmp	.LBB0_472
.LBB0_471:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4592(%rbp)
.LBB0_472:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4592(%rbp)
	je	.LBB0_489
# %bb.473:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4592(%rbp), %rax
	movq	%rax, -4600(%rbp)
	movq	-4600(%rbp), %rcx
	movq	%rcx, -7376(%rbp)               # 8-byte Spill
.Ltmp146:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB0_475
# %bb.474:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7376(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB0_481
.LBB0_475:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4552(%rbp), %rax
	movq	%rax, -4608(%rbp)
	movq	-4592(%rbp), %rax
	movq	%rax, -4616(%rbp)
.Ltmp147:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4608(%rbp)
	jne	.LBB0_477
# %bb.476:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp148:
.LBB0_477:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4608(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_479
# %bb.478:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4608(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4624(%rbp)
	jmp	.LBB0_480
.LBB0_479:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4608(%rbp), %rax
	movq	-4616(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4616(%rbp), %rax
	movq	%rax, -4624(%rbp)
.LBB0_480:
	movq	-4624(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB0_490
.Ltmp149:
.LBB0_481:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4552(%rbp), %rax
	movq	%rax, -4632(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4640(%rbp)
.Ltmp150:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4632(%rbp)
	jne	.LBB0_483
# %bb.482:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp151:
.LBB0_483:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4632(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_485
# %bb.484:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4632(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4648(%rbp)
	jmp	.LBB0_486
.LBB0_485:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4632(%rbp), %rax
	movq	-4640(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4640(%rbp), %rax
	movq	%rax, -4648(%rbp)
.LBB0_486:
	movq	-4648(%rbp), %rax
	movq	%rax, -4592(%rbp)
	movq	-4552(%rbp), %rsi
.Ltmp152:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4664(%rbp), %rdi
	leaq	.L.str.85(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7384(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_488
# %bb.487:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7384(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4656(%rbp)
	movq	-4656(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB0_490
.LBB0_488:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4592(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB0_490
.Ltmp153:
.LBB0_489:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7352(%rbp), %rax               # 8-byte Reload
	.loc	3 462 5 is_stmt 1               # formatter.c3:462:5
	addq	-4560(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 463 5                         # formatter.c3:463:5
	jmp	.LBB0_776
.LBB0_490:
.Ltmp154:
	.loc	3 359 9                         # formatter.c3:359:9
	movq	-4544(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp155:
.LBB0_491:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 465 5                         # formatter.c3:465:5
	movq	-3696(%rbp), %rax
	.loc	3 465 28 is_stmt 0              # formatter.c3:465:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp156:
.LBB0_492:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 468 5 is_stmt 1               # formatter.c3:468:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7400(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4680(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp157:
	.loc	3 468 44 is_stmt 0              # formatter.c3:468:44
	leaq	-4704(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7392(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_494
# %bb.493:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7392(%rbp), %rax               # 8-byte Reload
	.loc	3 468 44                        # formatter.c3:468:44
	movq	%rax, -4696(%rbp)
	jmp	.LBB0_497
.LBB0_494:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4704(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4712(%rbp), %rdi
	callq	std.io.Formatter.ftoa@PLT
	movq	%rax, -7408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_496
# %bb.495:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7408(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4696(%rbp)
	jmp	.LBB0_497
.LBB0_496:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-4712(%rbp), %rax
	movq	%rax, -4688(%rbp)
	movq	$0, -4696(%rbp)
.LBB0_497:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 346 18 is_stmt 1              # formatter.c3:346:18
	movq	-4696(%rbp), %rax
	movq	%rax, -7416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_499
# %bb.498:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7416(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4720(%rbp)
	jmp	.LBB0_500
.LBB0_499:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4720(%rbp)
.LBB0_500:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4720(%rbp)
	je	.LBB0_517
# %bb.501:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4720(%rbp), %rax
	movq	%rax, -4728(%rbp)
	movq	-4728(%rbp), %rcx
	movq	%rcx, -7424(%rbp)               # 8-byte Spill
.Ltmp158:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB0_503
# %bb.502:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7424(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB0_509
.LBB0_503:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4680(%rbp), %rax
	movq	%rax, -4736(%rbp)
	movq	-4720(%rbp), %rax
	movq	%rax, -4744(%rbp)
.Ltmp159:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4736(%rbp)
	jne	.LBB0_505
# %bb.504:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp160:
.LBB0_505:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4736(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_507
# %bb.506:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4736(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4752(%rbp)
	jmp	.LBB0_508
.LBB0_507:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4736(%rbp), %rax
	movq	-4744(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4744(%rbp), %rax
	movq	%rax, -4752(%rbp)
.LBB0_508:
	movq	-4752(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB0_518
.Ltmp161:
.LBB0_509:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4680(%rbp), %rax
	movq	%rax, -4760(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4768(%rbp)
.Ltmp162:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4760(%rbp)
	jne	.LBB0_511
# %bb.510:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp163:
.LBB0_511:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4760(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_513
# %bb.512:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4760(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4776(%rbp)
	jmp	.LBB0_514
.LBB0_513:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4760(%rbp), %rax
	movq	-4768(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4768(%rbp), %rax
	movq	%rax, -4776(%rbp)
.LBB0_514:
	movq	-4776(%rbp), %rax
	movq	%rax, -4720(%rbp)
	movq	-4680(%rbp), %rsi
.Ltmp164:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4792(%rbp), %rdi
	leaq	.L.str.86(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7432(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_516
# %bb.515:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7432(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4784(%rbp)
	movq	-4784(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB0_518
.LBB0_516:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4720(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB0_518
.Ltmp165:
.LBB0_517:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7400(%rbp), %rax               # 8-byte Reload
	.loc	3 468 5 is_stmt 1               # formatter.c3:468:5
	addq	-4688(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 469 5                         # formatter.c3:469:5
	jmp	.LBB0_776
.LBB0_518:
.Ltmp166:
	.loc	3 359 9                         # formatter.c3:359:9
	movq	-4672(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp167:
.LBB0_519:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 471 5                         # formatter.c3:471:5
	movq	-3696(%rbp), %rax
	.loc	3 471 28 is_stmt 0              # formatter.c3:471:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp168:
.LBB0_520:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 474 5 is_stmt 1               # formatter.c3:474:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7448(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4808(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp169:
	.loc	3 474 44 is_stmt 0              # formatter.c3:474:44
	leaq	-4832(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_522
# %bb.521:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7440(%rbp), %rax               # 8-byte Reload
	.loc	3 474 44                        # formatter.c3:474:44
	movq	%rax, -4824(%rbp)
	jmp	.LBB0_525
.LBB0_522:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4832(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4840(%rbp), %rdi
	callq	std.io.Formatter.etoa@PLT
	movq	%rax, -7456(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_524
# %bb.523:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7456(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4824(%rbp)
	jmp	.LBB0_525
.LBB0_524:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-4840(%rbp), %rax
	movq	%rax, -4816(%rbp)
	movq	$0, -4824(%rbp)
.LBB0_525:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 346 18 is_stmt 1              # formatter.c3:346:18
	movq	-4824(%rbp), %rax
	movq	%rax, -7464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_527
# %bb.526:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7464(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4848(%rbp)
	jmp	.LBB0_528
.LBB0_527:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4848(%rbp)
.LBB0_528:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4848(%rbp)
	je	.LBB0_545
# %bb.529:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4848(%rbp), %rax
	movq	%rax, -4856(%rbp)
	movq	-4856(%rbp), %rcx
	movq	%rcx, -7472(%rbp)               # 8-byte Spill
.Ltmp170:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB0_531
# %bb.530:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7472(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB0_537
.LBB0_531:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4808(%rbp), %rax
	movq	%rax, -4864(%rbp)
	movq	-4848(%rbp), %rax
	movq	%rax, -4872(%rbp)
.Ltmp171:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4864(%rbp)
	jne	.LBB0_533
# %bb.532:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp172:
.LBB0_533:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4864(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_535
# %bb.534:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4864(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4880(%rbp)
	jmp	.LBB0_536
.LBB0_535:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4864(%rbp), %rax
	movq	-4872(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4872(%rbp), %rax
	movq	%rax, -4880(%rbp)
.LBB0_536:
	movq	-4880(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB0_546
.Ltmp173:
.LBB0_537:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4808(%rbp), %rax
	movq	%rax, -4888(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4896(%rbp)
.Ltmp174:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4888(%rbp)
	jne	.LBB0_539
# %bb.538:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp175:
.LBB0_539:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4888(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_541
# %bb.540:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4888(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4904(%rbp)
	jmp	.LBB0_542
.LBB0_541:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4888(%rbp), %rax
	movq	-4896(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4896(%rbp), %rax
	movq	%rax, -4904(%rbp)
.LBB0_542:
	movq	-4904(%rbp), %rax
	movq	%rax, -4848(%rbp)
	movq	-4808(%rbp), %rsi
.Ltmp176:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4920(%rbp), %rdi
	leaq	.L.str.87(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_544
# %bb.543:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7480(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4912(%rbp)
	movq	-4912(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB0_546
.LBB0_544:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4848(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB0_546
.Ltmp177:
.LBB0_545:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7448(%rbp), %rax               # 8-byte Reload
	.loc	3 474 5 is_stmt 1               # formatter.c3:474:5
	addq	-4816(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 475 5                         # formatter.c3:475:5
	jmp	.LBB0_776
.LBB0_546:
.Ltmp178:
	.loc	3 359 9                         # formatter.c3:359:9
	movq	-4800(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp179:
.LBB0_547:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 477 5                         # formatter.c3:477:5
	movq	-3696(%rbp), %rax
	.loc	3 477 28 is_stmt 0              # formatter.c3:477:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp180:
.LBB0_548:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 480 5 is_stmt 1               # formatter.c3:480:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7496(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4936(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp181:
	.loc	3 480 44 is_stmt 0              # formatter.c3:480:44
	leaq	-4960(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_550
# %bb.549:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7488(%rbp), %rax               # 8-byte Reload
	.loc	3 480 44                        # formatter.c3:480:44
	movq	%rax, -4952(%rbp)
	jmp	.LBB0_553
.LBB0_550:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4960(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4968(%rbp), %rdi
	callq	std.io.Formatter.gtoa@PLT
	movq	%rax, -7504(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_552
# %bb.551:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7504(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4952(%rbp)
	jmp	.LBB0_553
.LBB0_552:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-4968(%rbp), %rax
	movq	%rax, -4944(%rbp)
	movq	$0, -4952(%rbp)
.LBB0_553:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 346 18 is_stmt 1              # formatter.c3:346:18
	movq	-4952(%rbp), %rax
	movq	%rax, -7512(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_555
# %bb.554:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7512(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4976(%rbp)
	jmp	.LBB0_556
.LBB0_555:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -4976(%rbp)
.LBB0_556:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -4976(%rbp)
	je	.LBB0_573
# %bb.557:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4976(%rbp), %rax
	movq	%rax, -4984(%rbp)
	movq	-4984(%rbp), %rcx
	movq	%rcx, -7520(%rbp)               # 8-byte Spill
.Ltmp182:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB0_559
# %bb.558:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7520(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB0_565
.LBB0_559:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4936(%rbp), %rax
	movq	%rax, -4992(%rbp)
	movq	-4976(%rbp), %rax
	movq	%rax, -5000(%rbp)
.Ltmp183:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4992(%rbp)
	jne	.LBB0_561
# %bb.560:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp184:
.LBB0_561:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4992(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_563
# %bb.562:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4992(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5008(%rbp)
	jmp	.LBB0_564
.LBB0_563:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4992(%rbp), %rax
	movq	-5000(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5000(%rbp), %rax
	movq	%rax, -5008(%rbp)
.LBB0_564:
	movq	-5008(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB0_574
.Ltmp185:
.LBB0_565:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4936(%rbp), %rax
	movq	%rax, -5016(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -5024(%rbp)
.Ltmp186:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5016(%rbp)
	jne	.LBB0_567
# %bb.566:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp187:
.LBB0_567:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5016(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_569
# %bb.568:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5016(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5032(%rbp)
	jmp	.LBB0_570
.LBB0_569:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5016(%rbp), %rax
	movq	-5024(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5024(%rbp), %rax
	movq	%rax, -5032(%rbp)
.LBB0_570:
	movq	-5032(%rbp), %rax
	movq	%rax, -4976(%rbp)
	movq	-4936(%rbp), %rsi
.Ltmp188:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-5048(%rbp), %rdi
	leaq	.L.str.88(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7528(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_572
# %bb.571:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7528(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -5040(%rbp)
	movq	-5040(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB0_574
.LBB0_572:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4976(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB0_574
.Ltmp189:
.LBB0_573:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7496(%rbp), %rax               # 8-byte Reload
	.loc	3 480 5 is_stmt 1               # formatter.c3:480:5
	addq	-4944(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 481 5                         # formatter.c3:481:5
	jmp	.LBB0_776
.LBB0_574:
.Ltmp190:
	.loc	3 359 9                         # formatter.c3:359:9
	movq	-4928(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp191:
.LBB0_575:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 483 5                         # formatter.c3:483:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7544(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 483 18 is_stmt 0              # formatter.c3:483:18
	leaq	-5064(%rbp), %rdi
	callq	std.io.Formatter.out_char
	movq	%rax, -7536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_577
# %bb.576:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7536(%rbp), %rax               # 8-byte Reload
	.loc	3 483 18                        # formatter.c3:483:18
	movq	%rax, -5056(%rbp)
	movq	-5056(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_577:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7544(%rbp), %rax               # 8-byte Reload
	.loc	3 483 5                         # formatter.c3:483:5
	addq	-5064(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 484 5 is_stmt 1               # formatter.c3:484:5
	jmp	.LBB0_776
.Ltmp192:
.LBB0_578:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 486 5                         # formatter.c3:486:5
	movq	-3696(%rbp), %rax
	.loc	3 486 28 is_stmt 0              # formatter.c3:486:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp193:
.LBB0_579:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 28                          # formatter.c3:0:28
	movq	-4392(%rbp), %rax
	movq	%rax, -5088(%rbp)
	movq	-5088(%rbp), %rax
	movq	%rax, -7560(%rbp)               # 8-byte Spill
	movq	%rax, -7552(%rbp)               # 8-byte Spill
.LBB0_580:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-7552(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7576(%rbp)               # 8-byte Spill
.Ltmp194:
	.loc	3 492 11 is_stmt 1              # formatter.c3:492:11
	movb	$1, %al
	movq	($ct.sa$char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7561(%rbp)                # 1-byte Spill
	je	.LBB0_582
# %bb.581:                              #   in Loop: Header=BB0_580 Depth=2
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7576(%rbp), %rax               # 8-byte Reload
	.loc	3 492 11                        # formatter.c3:492:11
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7552(%rbp)               # 8-byte Spill
	movb	%al, -7561(%rbp)                # 1-byte Spill
	jne	.LBB0_580
.LBB0_582:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movb	-7561(%rbp), %al                # 1-byte Reload
	.loc	3 492 11                        # formatter.c3:492:11
	testb	$1, %al
	jne	.LBB0_587
# %bb.583:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-7560(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7584(%rbp)               # 8-byte Spill
	.loc	3 493 11 is_stmt 1              # formatter.c3:493:11
	jmp	.LBB0_584
.LBB0_584:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7584(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7600(%rbp)               # 8-byte Spill
	.loc	3 493 11                        # formatter.c3:493:11
	movb	$1, %al
	movq	($ct.sa$ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7585(%rbp)                # 1-byte Spill
	je	.LBB0_586
# %bb.585:                              #   in Loop: Header=BB0_584 Depth=2
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-7600(%rbp), %rax               # 8-byte Reload
	.loc	3 493 11                        # formatter.c3:493:11
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7584(%rbp)               # 8-byte Spill
	movb	%al, -7585(%rbp)                # 1-byte Spill
	jne	.LBB0_584
.LBB0_586:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movb	-7585(%rbp), %al                # 1-byte Reload
	.loc	3 493 11                        # formatter.c3:493:11
	testb	$1, %al
	jne	.LBB0_587
	jmp	.LBB0_590
.LBB0_587:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp195:
	.loc	3 494 14 is_stmt 1              # formatter.c3:494:14
	movq	-4400(%rbp), %rax
	movq	%rax, -7608(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_788
# %bb.588:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7608(%rbp), %rax               # 8-byte Reload
	.loc	3 494 14                        # formatter.c3:494:14
	andq	$7, %rax
	movq	%rax, -7616(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_789
# %bb.589:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-7608(%rbp), %rax               # 8-byte Reload
	.loc	3 494 14                        # formatter.c3:494:14
	movq	(%rax), %rcx
	movq	%rcx, -5080(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -5072(%rbp)
	jmp	.LBB0_632
.Ltmp196:
.LBB0_590:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 496 11 is_stmt 1              # formatter.c3:496:11
	movq	-4392(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpb	$15, (%rcx)
	movb	%al, -7617(%rbp)                # 1-byte Spill
	jne	.LBB0_612
# %bb.591:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 496 44 is_stmt 0              # formatter.c3:496:44
	movq	-4392(%rbp), %rax
	movq	%rax, -7632(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7618(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB0_600
# %bb.592:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$19, %al
	je	.LBB0_600
# %bb.593:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$17, %al
	je	.LBB0_600
# %bb.594:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$8, %al
	je	.LBB0_600
# %bb.595:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$16, %al
	je	.LBB0_600
# %bb.596:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$18, %al
	je	.LBB0_600
# %bb.597:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$9, %al
	je	.LBB0_600
# %bb.598:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7618(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$12, %al
	je	.LBB0_600
# %bb.599:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$496, (%rsp)                    # imm = 0x1F0
	callq	*(%rax)
.LBB0_600:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7632(%rbp), %rcx               # 8-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rdx
	cmpq	%rdx, 32(%rcx)
	movb	%al, -7633(%rbp)                # 1-byte Spill
	je	.LBB0_611
# %bb.601:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 496 81                        # formatter.c3:496:81
	movq	-4392(%rbp), %rax
	movq	%rax, -7648(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7634(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB0_610
# %bb.602:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$19, %al
	je	.LBB0_610
# %bb.603:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$17, %al
	je	.LBB0_610
# %bb.604:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$8, %al
	je	.LBB0_610
# %bb.605:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$16, %al
	je	.LBB0_610
# %bb.606:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$18, %al
	je	.LBB0_610
# %bb.607:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$9, %al
	je	.LBB0_610
# %bb.608:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7634(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$12, %al
	je	.LBB0_610
# %bb.609:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$496, (%rsp)                    # imm = 0x1F0
	callq	*(%rax)
.LBB0_610:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movq	-7648(%rbp), %rax               # 8-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rcx, 32(%rax)
	sete	%al
	movb	%al, -7633(%rbp)                # 1-byte Spill
.LBB0_611:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7633(%rbp), %al                # 1-byte Reload
	movb	%al, -7617(%rbp)                # 1-byte Spill
.LBB0_612:                              #   in Loop: Header=BB0_5 Depth=1
	movb	-7617(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	testb	$1, %al
	jne	.LBB0_613
	jmp	.LBB0_615
.LBB0_613:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp197:
	.loc	3 498 22 is_stmt 1              # formatter.c3:498:22
	movq	-4400(%rbp), %rax
	movq	%rax, -7664(%rbp)               # 8-byte Spill
	.loc	3 498 36 is_stmt 0              # formatter.c3:498:36
	movq	-4392(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -7656(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_790
# %bb.614:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 36                          # formatter.c3:0:36
	movq	-7664(%rbp), %rax               # 8-byte Reload
	movq	-7656(%rbp), %rcx               # 8-byte Reload
	.loc	3 498 14                        # formatter.c3:498:14
	movq	%rcx, -5072(%rbp)
	movq	%rax, -5080(%rbp)
	.loc	3 499 8 is_stmt 1               # formatter.c3:499:8
	jmp	.LBB0_632
.Ltmp198:
.LBB0_615:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 501 11                        # formatter.c3:501:11
	movq	-4392(%rbp), %rax
	cmpb	$19, (%rax)
	jne	.LBB0_629
# %bb.616:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp199:
	.loc	3 503 25                        # formatter.c3:503:25
	movq	-4400(%rbp), %rax
	movq	%rax, -7672(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_791
# %bb.617:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 25 is_stmt 0                # formatter.c3:0:25
	movq	-7672(%rbp), %rax               # 8-byte Reload
	.loc	3 503 17                        # formatter.c3:503:17
	andq	$7, %rax
	movq	%rax, -7680(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB0_792
# %bb.618:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7672(%rbp), %rax               # 8-byte Reload
	.loc	3 503 17                        # formatter.c3:503:17
	movq	(%rax), %rax
	movq	%rax, -7704(%rbp)               # 8-byte Spill
	.loc	3 503 40                        # formatter.c3:503:40
	movq	-4392(%rbp), %rax
	movq	%rax, -7696(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7681(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB0_627
# %bb.619:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$19, %al
	je	.LBB0_627
# %bb.620:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$17, %al
	je	.LBB0_627
# %bb.621:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$8, %al
	je	.LBB0_627
# %bb.622:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$16, %al
	je	.LBB0_627
# %bb.623:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$18, %al
	je	.LBB0_627
# %bb.624:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$9, %al
	je	.LBB0_627
# %bb.625:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7681(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$12, %al
	je	.LBB0_627
# %bb.626:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	callq	*(%rax)
.LBB0_627:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movq	-7696(%rbp), %rax               # 8-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	movq	32(%rax), %rax
	movq	24(%rax), %rax
	movq	%rax, -7712(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB0_793
# %bb.628:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movq	-7704(%rbp), %rax               # 8-byte Reload
	movq	-7712(%rbp), %rcx               # 8-byte Reload
	.loc	3 503 14                        # formatter.c3:503:14
	movq	%rcx, -5072(%rbp)
	movq	%rax, -5080(%rbp)
	.loc	3 504 8 is_stmt 1               # formatter.c3:504:8
	jmp	.LBB0_632
.Ltmp200:
.LBB0_629:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 506 7                         # formatter.c3:506:7
	movq	-3736(%rbp), %rax
	movq	%rax, -7728(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 506 20 is_stmt 0              # formatter.c3:506:20
	leaq	-5328(%rbp), %rdi
	leaq	.L.str.92(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7720(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_631
# %bb.630:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-7720(%rbp), %rax               # 8-byte Reload
	.loc	3 506 20                        # formatter.c3:506:20
	movq	%rax, -5320(%rbp)
	movq	-5320(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_631:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-7728(%rbp), %rax               # 8-byte Reload
	.loc	3 506 7                         # formatter.c3:506:7
	addq	-5328(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 507 7 is_stmt 1               # formatter.c3:507:7
	jmp	.LBB0_776
.Ltmp201:
.LBB0_632:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 509 9                         # formatter.c3:509:9
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB0_665
# %bb.633:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp202:
	.loc	3 511 43                        # formatter.c3:511:43
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3696(%rbp), %rsi
	movq	-5080(%rbp), %rdx
	movq	-5072(%rbp), %rcx
	movq	%rsi, -3152(%rbp)
	movq	%rdx, -3168(%rbp)
	movq	%rcx, -3160(%rbp)
	movb	%al, -3169(%rbp)
.Ltmp203:
	.loc	1 11 18                         # formatter_private.c3:11:18
	movb	-3169(%rbp), %cl
	.loc	1 11 36 is_stmt 0               # formatter_private.c3:11:36
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -7730(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -7729(%rbp)                # 1-byte Spill
	jne	.LBB0_802
# %bb.801:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 36                          # formatter_private.c3:0:36
	movb	-7730(%rbp), %al                # 1-byte Reload
	movb	%al, -7729(%rbp)                # 1-byte Spill
.LBB0_802:                              #   in Loop: Header=BB0_5 Depth=1
	movb	-7729(%rbp), %al                # 1-byte Reload
	.loc	1 11 36                         # formatter_private.c3:11:36
	movzbl	%al, %eax
	.loc	1 11 17                         # formatter_private.c3:11:17
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3170(%rbp)
	.loc	1 12 12 is_stmt 1               # formatter_private.c3:12:12
	movq	$0, -3184(%rbp)
.Ltmp204:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3160(%rbp), %rax
	movq	%rax, -7744(%rbp)               # 8-byte Spill
	movq	$0, -3192(%rbp)
.LBB0_634:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7744(%rbp), %rax               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	cmpq	%rax, -3192(%rbp)
	jae	.LBB0_647
# %bb.635:                              #   in Loop: Header=BB0_634 Depth=2
.Ltmp205:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3160(%rbp), %rcx
	movq	%rcx, -7768(%rbp)               # 8-byte Spill
	movq	-3168(%rbp), %rax
	movq	%rax, -7760(%rbp)               # 8-byte Spill
	movq	-3192(%rbp), %rax
	movq	%rax, -7752(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_648
# %bb.636:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-7760(%rbp), %rax               # 8-byte Reload
	movq	-7752(%rbp), %rcx               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	movb	(%rax,%rcx), %al
	movb	%al, -3193(%rbp)
.Ltmp206:
	.loc	1 15 16 is_stmt 1               # formatter_private.c3:15:16
	movzbl	-3193(%rbp), %eax
	shrl	$4, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3265(%rbp)
	.loc	1 16 9                          # formatter_private.c3:16:9
	movzbl	-3265(%rbp), %eax
	movl	%eax, -7772(%rbp)               # 4-byte Spill
	.loc	1 16 18 is_stmt 0               # formatter_private.c3:16:18
	movzbl	-3265(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB0_638
# %bb.637:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 16 31                         # formatter_private.c3:16:31
	movb	$48, %al
	movb	%al, -7773(%rbp)                # 1-byte Spill
	jmp	.LBB0_639
.LBB0_638:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 16 37                         # formatter_private.c3:16:37
	movb	-3170(%rbp), %al
	movb	%al, -7773(%rbp)                # 1-byte Spill
.LBB0_639:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7772(%rbp), %eax               # 4-byte Reload
	movb	-7773(%rbp), %cl                # 1-byte Reload
	.loc	1 16 37                         # formatter_private.c3:16:37
	movzbl	%cl, %ecx
	.loc	1 16 9                          # formatter_private.c3:16:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3152(%rbp), %rsi
	.loc	1 16 3                          # formatter_private.c3:16:3
	leaq	-3288(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7784(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_641
# %bb.640:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7784(%rbp), %rax               # 8-byte Reload
	.loc	1 16 3                          # formatter_private.c3:16:3
	movq	%rax, -3280(%rbp)
	movq	-3280(%rbp), %rax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
	jmp	.LBB0_649
.LBB0_641:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 17 3 is_stmt 1                # formatter_private.c3:17:3
	movq	-3184(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3184(%rbp)
	.loc	1 18 11                         # formatter_private.c3:18:11
	movzbl	-3193(%rbp), %eax
	andl	$15, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3265(%rbp)
	.loc	1 19 9                          # formatter_private.c3:19:9
	movzbl	-3265(%rbp), %eax
	movl	%eax, -7796(%rbp)               # 4-byte Spill
	.loc	1 19 18 is_stmt 0               # formatter_private.c3:19:18
	movzbl	-3265(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB0_643
# %bb.642:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 19 31                         # formatter_private.c3:19:31
	movb	$48, %al
	movb	%al, -7797(%rbp)                # 1-byte Spill
	jmp	.LBB0_644
.LBB0_643:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 19 37                         # formatter_private.c3:19:37
	movb	-3170(%rbp), %al
	movb	%al, -7797(%rbp)                # 1-byte Spill
.LBB0_644:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7796(%rbp), %eax               # 4-byte Reload
	movb	-7797(%rbp), %cl                # 1-byte Reload
	.loc	1 19 37                         # formatter_private.c3:19:37
	movzbl	%cl, %ecx
	.loc	1 19 9                          # formatter_private.c3:19:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3152(%rbp), %rsi
	.loc	1 19 3                          # formatter_private.c3:19:3
	leaq	-3304(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7808(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_646
# %bb.645:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7808(%rbp), %rax               # 8-byte Reload
	.loc	1 19 3                          # formatter_private.c3:19:3
	movq	%rax, -3296(%rbp)
	movq	-3296(%rbp), %rax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
	jmp	.LBB0_649
.LBB0_646:                              #   in Loop: Header=BB0_634 Depth=2
	.loc	1 20 3 is_stmt 1                # formatter_private.c3:20:3
	movq	-3184(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3184(%rbp)
.Ltmp207:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3192(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3192(%rbp)
	jmp	.LBB0_634
.Ltmp208:
.LBB0_647:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 22 9                          # formatter_private.c3:22:9
	movq	-3184(%rbp), %rax
	movq	%rax, -5352(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
	jmp	.LBB0_649
.LBB0_648:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-7752(%rbp), %rcx               # 8-byte Reload
	movq	-7768(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3208(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3216(%rbp)
	movq	%rax, -3240(%rbp)
	leaq	-3208(%rbp), %rcx
	movq	%rcx, -3248(%rbp)
	movq	%rax, -3224(%rbp)
	leaq	-3216(%rbp), %rax
	movq	%rax, -3232(%rbp)
	leaq	-3248(%rbp), %rax
	movq	%rax, -3264(%rbp)
	movq	$2, -3256(%rbp)
.Ltmp209:
	.loc	1 13 15 is_stmt 1               # formatter_private.c3:13:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.97(%rip), %r8
	movl	$15, %r9d
	leaq	-3264(%rbp), %rax
	movl	$13, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp210:
.LBB0_649:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7792(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7816(%rbp)               # 8-byte Spill
	.loc	3 511 16 is_stmt 1              # formatter.c3:511:16
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_651
# %bb.650:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-7816(%rbp), %rax               # 8-byte Reload
	.loc	3 511 16                        # formatter.c3:511:16
	movq	%rax, -5344(%rbp)
	movq	-5344(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_651:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-5352(%rbp), %rax
	movq	%rax, -5336(%rbp)
	.loc	3 512 6 is_stmt 1               # formatter.c3:512:6
	movq	-3736(%rbp), %rax
	addq	-5336(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 513 6                         # formatter.c3:513:6
	movq	-3736(%rbp), %rax
	movq	%rax, -7848(%rbp)               # 8-byte Spill
	.loc	3 513 33 is_stmt 0              # formatter.c3:513:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7840(%rbp)               # 8-byte Spill
	.loc	3 513 45                        # formatter.c3:513:45
	movq	-5336(%rbp), %rax
	movq	%rax, -7832(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -7824(%rbp)               # 8-byte Spill
.Ltmp211:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_661
# %bb.652:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7832(%rbp), %rax               # 8-byte Reload
	movq	-7840(%rbp), %rcx               # 8-byte Reload
	movq	-7824(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3600(%rbp)
	movb	$32, -3601(%rbp)
	movq	%rcx, -3616(%rbp)
	movq	%rax, -3624(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3616(%rbp), %rax
	subq	-3624(%rbp), %rax
	movq	%rax, -3632(%rbp)
.Ltmp212:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3640(%rbp)
.LBB0_653:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3640(%rbp), %rax
	cmpq	-3632(%rbp), %rax
	jge	.LBB0_657
# %bb.654:                              #   in Loop: Header=BB0_653 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3600(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3656(%rbp), %rdi
	movzbl	-3601(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7856(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_656
# %bb.655:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7856(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3648(%rbp)
	movq	-3648(%rbp), %rax
	movq	%rax, -7864(%rbp)               # 8-byte Spill
	jmp	.LBB0_662
.LBB0_656:                              #   in Loop: Header=BB0_653 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3640(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3640(%rbp)
	jmp	.LBB0_653
.Ltmp213:
.LBB0_657:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3660(%rbp)
	movq	-3632(%rbp), %rax
	movq	%rax, -3672(%rbp)
	movl	-3660(%rbp), %eax
	movl	%eax, -3676(%rbp)
	movq	-3672(%rbp), %rax
	movq	%rax, -3688(%rbp)
.Ltmp214:
	.file	7 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/core" "builtin_comparison.c3"
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3676(%rbp), %rax
	cmpq	-3688(%rbp), %rax
	jle	.LBB0_659
.Ltmp215:
# %bb.658:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3660(%rbp), %rax
	movq	%rax, -7872(%rbp)               # 8-byte Spill
	jmp	.LBB0_660
.LBB0_659:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3672(%rbp), %rax
	movq	%rax, -7872(%rbp)               # 8-byte Spill
.LBB0_660:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7872(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5368(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7864(%rbp)               # 8-byte Spill
	jmp	.LBB0_662
.Ltmp216:
.LBB0_661:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp217:
.LBB0_662:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7864(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7880(%rbp)               # 8-byte Spill
	.loc	3 513 19 is_stmt 1              # formatter.c3:513:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_664
# %bb.663:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-7880(%rbp), %rax               # 8-byte Reload
	.loc	3 513 19                        # formatter.c3:513:19
	movq	%rax, -5360(%rbp)
	movq	-5360(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_664:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-7848(%rbp), %rax               # 8-byte Reload
	.loc	3 513 6                         # formatter.c3:513:6
	addq	-5368(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 514 6 is_stmt 1               # formatter.c3:514:6
	jmp	.LBB0_776
.Ltmp218:
.LBB0_665:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 516 9                         # formatter.c3:516:9
	movq	-3696(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB0_680
# %bb.666:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp219:
	.loc	3 518 6                         # formatter.c3:518:6
	movq	-3736(%rbp), %rax
	movq	%rax, -7912(%rbp)               # 8-byte Spill
	.loc	3 518 33 is_stmt 0              # formatter.c3:518:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7904(%rbp)               # 8-byte Spill
	.loc	3 518 45                        # formatter.c3:518:45
	movq	-5072(%rbp), %rax
	shlq	%rax
	movq	%rax, -7896(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -7888(%rbp)               # 8-byte Spill
.Ltmp220:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_676
# %bb.667:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7896(%rbp), %rax               # 8-byte Reload
	movq	-7904(%rbp), %rcx               # 8-byte Reload
	movq	-7888(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3504(%rbp)
	movb	$32, -3505(%rbp)
	movq	%rcx, -3520(%rbp)
	movq	%rax, -3528(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3520(%rbp), %rax
	subq	-3528(%rbp), %rax
	movq	%rax, -3536(%rbp)
.Ltmp221:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3544(%rbp)
.LBB0_668:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3544(%rbp), %rax
	cmpq	-3536(%rbp), %rax
	jge	.LBB0_672
# %bb.669:                              #   in Loop: Header=BB0_668 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3504(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3560(%rbp), %rdi
	movzbl	-3505(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7920(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_671
# %bb.670:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7920(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3552(%rbp)
	movq	-3552(%rbp), %rax
	movq	%rax, -7928(%rbp)               # 8-byte Spill
	jmp	.LBB0_677
.LBB0_671:                              #   in Loop: Header=BB0_668 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3544(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3544(%rbp)
	jmp	.LBB0_668
.Ltmp222:
.LBB0_672:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3564(%rbp)
	movq	-3536(%rbp), %rax
	movq	%rax, -3576(%rbp)
	movl	-3564(%rbp), %eax
	movl	%eax, -3580(%rbp)
	movq	-3576(%rbp), %rax
	movq	%rax, -3592(%rbp)
.Ltmp223:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3580(%rbp), %rax
	cmpq	-3592(%rbp), %rax
	jle	.LBB0_674
.Ltmp224:
# %bb.673:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3564(%rbp), %rax
	movq	%rax, -7936(%rbp)               # 8-byte Spill
	jmp	.LBB0_675
.LBB0_674:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3576(%rbp), %rax
	movq	%rax, -7936(%rbp)               # 8-byte Spill
.LBB0_675:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7936(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5384(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7928(%rbp)               # 8-byte Spill
	jmp	.LBB0_677
.Ltmp225:
.LBB0_676:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp226:
.LBB0_677:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7928(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7944(%rbp)               # 8-byte Spill
	.loc	3 518 19 is_stmt 1              # formatter.c3:518:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_679
# %bb.678:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-7944(%rbp), %rax               # 8-byte Reload
	.loc	3 518 19                        # formatter.c3:518:19
	movq	%rax, -5376(%rbp)
	movq	-5376(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_679:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-7912(%rbp), %rax               # 8-byte Reload
	.loc	3 518 6                         # formatter.c3:518:6
	addq	-5384(%rbp), %rax
	movq	%rax, -3736(%rbp)
.Ltmp227:
.LBB0_680:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 520 5 is_stmt 1               # formatter.c3:520:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7960(%rbp)               # 8-byte Spill
	.loc	3 520 45 is_stmt 0              # formatter.c3:520:45
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3696(%rbp), %rsi
	movq	-5080(%rbp), %rdx
	movq	-5072(%rbp), %rcx
	movq	%rsi, -2992(%rbp)
	movq	%rdx, -3008(%rbp)
	movq	%rcx, -3000(%rbp)
	movb	%al, -3009(%rbp)
.Ltmp228:
	.loc	1 11 18 is_stmt 1               # formatter_private.c3:11:18
	movb	-3009(%rbp), %cl
	.loc	1 11 36 is_stmt 0               # formatter_private.c3:11:36
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -7946(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -7945(%rbp)                # 1-byte Spill
	jne	.LBB0_804
# %bb.803:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 36                          # formatter_private.c3:0:36
	movb	-7946(%rbp), %al                # 1-byte Reload
	movb	%al, -7945(%rbp)                # 1-byte Spill
.LBB0_804:                              #   in Loop: Header=BB0_5 Depth=1
	movb	-7945(%rbp), %al                # 1-byte Reload
	.loc	1 11 36                         # formatter_private.c3:11:36
	movzbl	%al, %eax
	.loc	1 11 17                         # formatter_private.c3:11:17
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3010(%rbp)
	.loc	1 12 12 is_stmt 1               # formatter_private.c3:12:12
	movq	$0, -3024(%rbp)
.Ltmp229:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3000(%rbp), %rax
	movq	%rax, -7968(%rbp)               # 8-byte Spill
	movq	$0, -3032(%rbp)
.LBB0_681:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7968(%rbp), %rax               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	cmpq	%rax, -3032(%rbp)
	jae	.LBB0_694
# %bb.682:                              #   in Loop: Header=BB0_681 Depth=2
.Ltmp230:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3000(%rbp), %rcx
	movq	%rcx, -7992(%rbp)               # 8-byte Spill
	movq	-3008(%rbp), %rax
	movq	%rax, -7984(%rbp)               # 8-byte Spill
	movq	-3032(%rbp), %rax
	movq	%rax, -7976(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB0_695
# %bb.683:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-7984(%rbp), %rax               # 8-byte Reload
	movq	-7976(%rbp), %rcx               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	movb	(%rax,%rcx), %al
	movb	%al, -3033(%rbp)
.Ltmp231:
	.loc	1 15 16 is_stmt 1               # formatter_private.c3:15:16
	movzbl	-3033(%rbp), %eax
	shrl	$4, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3105(%rbp)
	.loc	1 16 9                          # formatter_private.c3:16:9
	movzbl	-3105(%rbp), %eax
	movl	%eax, -7996(%rbp)               # 4-byte Spill
	.loc	1 16 18 is_stmt 0               # formatter_private.c3:16:18
	movzbl	-3105(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB0_685
# %bb.684:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 16 31                         # formatter_private.c3:16:31
	movb	$48, %al
	movb	%al, -7997(%rbp)                # 1-byte Spill
	jmp	.LBB0_686
.LBB0_685:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 16 37                         # formatter_private.c3:16:37
	movb	-3010(%rbp), %al
	movb	%al, -7997(%rbp)                # 1-byte Spill
.LBB0_686:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7996(%rbp), %eax               # 4-byte Reload
	movb	-7997(%rbp), %cl                # 1-byte Reload
	.loc	1 16 37                         # formatter_private.c3:16:37
	movzbl	%cl, %ecx
	.loc	1 16 9                          # formatter_private.c3:16:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-2992(%rbp), %rsi
	.loc	1 16 3                          # formatter_private.c3:16:3
	leaq	-3128(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -8008(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_688
# %bb.687:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-8008(%rbp), %rax               # 8-byte Reload
	.loc	1 16 3                          # formatter_private.c3:16:3
	movq	%rax, -3120(%rbp)
	movq	-3120(%rbp), %rax
	movq	%rax, -8016(%rbp)               # 8-byte Spill
	jmp	.LBB0_696
.LBB0_688:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 17 3 is_stmt 1                # formatter_private.c3:17:3
	movq	-3024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3024(%rbp)
	.loc	1 18 11                         # formatter_private.c3:18:11
	movzbl	-3033(%rbp), %eax
	andl	$15, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3105(%rbp)
	.loc	1 19 9                          # formatter_private.c3:19:9
	movzbl	-3105(%rbp), %eax
	movl	%eax, -8020(%rbp)               # 4-byte Spill
	.loc	1 19 18 is_stmt 0               # formatter_private.c3:19:18
	movzbl	-3105(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB0_690
# %bb.689:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 19 31                         # formatter_private.c3:19:31
	movb	$48, %al
	movb	%al, -8021(%rbp)                # 1-byte Spill
	jmp	.LBB0_691
.LBB0_690:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 19 37                         # formatter_private.c3:19:37
	movb	-3010(%rbp), %al
	movb	%al, -8021(%rbp)                # 1-byte Spill
.LBB0_691:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-8020(%rbp), %eax               # 4-byte Reload
	movb	-8021(%rbp), %cl                # 1-byte Reload
	.loc	1 19 37                         # formatter_private.c3:19:37
	movzbl	%cl, %ecx
	.loc	1 19 9                          # formatter_private.c3:19:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-2992(%rbp), %rsi
	.loc	1 19 3                          # formatter_private.c3:19:3
	leaq	-3144(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -8032(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_693
# %bb.692:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-8032(%rbp), %rax               # 8-byte Reload
	.loc	1 19 3                          # formatter_private.c3:19:3
	movq	%rax, -3136(%rbp)
	movq	-3136(%rbp), %rax
	movq	%rax, -8016(%rbp)               # 8-byte Spill
	jmp	.LBB0_696
.LBB0_693:                              #   in Loop: Header=BB0_681 Depth=2
	.loc	1 20 3 is_stmt 1                # formatter_private.c3:20:3
	movq	-3024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3024(%rbp)
.Ltmp232:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3032(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3032(%rbp)
	jmp	.LBB0_681
.Ltmp233:
.LBB0_694:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 22 9                          # formatter_private.c3:22:9
	movq	-3024(%rbp), %rax
	movq	%rax, -5400(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8016(%rbp)               # 8-byte Spill
	jmp	.LBB0_696
.LBB0_695:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-7976(%rbp), %rcx               # 8-byte Reload
	movq	-7992(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3048(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3056(%rbp)
	movq	%rax, -3080(%rbp)
	leaq	-3048(%rbp), %rcx
	movq	%rcx, -3088(%rbp)
	movq	%rax, -3064(%rbp)
	leaq	-3056(%rbp), %rax
	movq	%rax, -3072(%rbp)
	leaq	-3088(%rbp), %rax
	movq	%rax, -3104(%rbp)
	movq	$2, -3096(%rbp)
.Ltmp234:
	.loc	1 13 15 is_stmt 1               # formatter_private.c3:13:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.97(%rip), %r8
	movl	$15, %r9d
	leaq	-3104(%rbp), %rax
	movl	$13, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp235:
.LBB0_696:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-8016(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8040(%rbp)               # 8-byte Spill
	.loc	3 520 18 is_stmt 1              # formatter.c3:520:18
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_698
# %bb.697:
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-8040(%rbp), %rax               # 8-byte Reload
	.loc	3 520 18                        # formatter.c3:520:18
	movq	%rax, -5392(%rbp)
	movq	-5392(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_698:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7960(%rbp), %rax               # 8-byte Reload
	.loc	3 520 5                         # formatter.c3:520:5
	addq	-5400(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 521 5 is_stmt 1               # formatter.c3:521:5
	jmp	.LBB0_776
.Ltmp236:
.LBB0_699:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 523 9                         # formatter.c3:523:9
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB0_716
# %bb.700:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
.Ltmp237:
	.loc	3 525 16 is_stmt 1              # formatter.c3:525:16
	leaq	-5424(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -8048(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_702
# %bb.701:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-8048(%rbp), %rax               # 8-byte Reload
	.loc	3 525 16                        # formatter.c3:525:16
	movq	%rax, -5416(%rbp)
	movq	-5416(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_702:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-5424(%rbp), %rax
	movq	%rax, -5408(%rbp)
	.loc	3 526 6 is_stmt 1               # formatter.c3:526:6
	movq	-3736(%rbp), %rax
	addq	-5408(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 527 6                         # formatter.c3:527:6
	movq	-3736(%rbp), %rax
	movq	%rax, -8080(%rbp)               # 8-byte Spill
	.loc	3 527 33 is_stmt 0              # formatter.c3:527:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8072(%rbp)               # 8-byte Spill
	.loc	3 527 45                        # formatter.c3:527:45
	movq	-5408(%rbp), %rax
	movq	%rax, -8064(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -8056(%rbp)               # 8-byte Spill
.Ltmp238:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_712
# %bb.703:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-8064(%rbp), %rax               # 8-byte Reload
	movq	-8072(%rbp), %rcx               # 8-byte Reload
	movq	-8056(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3408(%rbp)
	movb	$32, -3409(%rbp)
	movq	%rcx, -3424(%rbp)
	movq	%rax, -3432(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3424(%rbp), %rax
	subq	-3432(%rbp), %rax
	movq	%rax, -3440(%rbp)
.Ltmp239:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3448(%rbp)
.LBB0_704:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3448(%rbp), %rax
	cmpq	-3440(%rbp), %rax
	jge	.LBB0_708
# %bb.705:                              #   in Loop: Header=BB0_704 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3408(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3464(%rbp), %rdi
	movzbl	-3409(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -8088(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_707
# %bb.706:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-8088(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3456(%rbp)
	movq	-3456(%rbp), %rax
	movq	%rax, -8096(%rbp)               # 8-byte Spill
	jmp	.LBB0_713
.LBB0_707:                              #   in Loop: Header=BB0_704 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3448(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3448(%rbp)
	jmp	.LBB0_704
.Ltmp240:
.LBB0_708:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3468(%rbp)
	movq	-3440(%rbp), %rax
	movq	%rax, -3480(%rbp)
	movl	-3468(%rbp), %eax
	movl	%eax, -3484(%rbp)
	movq	-3480(%rbp), %rax
	movq	%rax, -3496(%rbp)
.Ltmp241:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3484(%rbp), %rax
	cmpq	-3496(%rbp), %rax
	jle	.LBB0_710
.Ltmp242:
# %bb.709:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3468(%rbp), %rax
	movq	%rax, -8104(%rbp)               # 8-byte Spill
	jmp	.LBB0_711
.LBB0_710:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3480(%rbp), %rax
	movq	%rax, -8104(%rbp)               # 8-byte Spill
.LBB0_711:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-8104(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5440(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8096(%rbp)               # 8-byte Spill
	jmp	.LBB0_713
.Ltmp243:
.LBB0_712:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp244:
.LBB0_713:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-8096(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8112(%rbp)               # 8-byte Spill
	.loc	3 527 19 is_stmt 1              # formatter.c3:527:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_715
# %bb.714:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-8112(%rbp), %rax               # 8-byte Reload
	.loc	3 527 19                        # formatter.c3:527:19
	movq	%rax, -5432(%rbp)
	movq	-5432(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_715:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-8080(%rbp), %rax               # 8-byte Reload
	.loc	3 527 6                         # formatter.c3:527:6
	addq	-5440(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 528 6 is_stmt 1               # formatter.c3:528:6
	jmp	.LBB0_776
.Ltmp245:
.LBB0_716:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 530 9                         # formatter.c3:530:9
	movq	-3696(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB0_733
# %bb.717:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp246:
	.loc	3 532 24                        # formatter.c3:532:24
	movq	-3696(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5448(%rbp)
	.loc	3 533 6                         # formatter.c3:533:6
	movq	-3696(%rbp), %rax
	leaq	std.io.out_null_fn(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 534 16                        # formatter.c3:534:16
	leaq	-5472(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -8120(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_719
# %bb.718:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-8120(%rbp), %rax               # 8-byte Reload
	.loc	3 534 16                        # formatter.c3:534:16
	movq	%rax, -5464(%rbp)
	movq	-5464(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_719:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-5472(%rbp), %rax
	movq	%rax, -5456(%rbp)
	.loc	3 535 6 is_stmt 1               # formatter.c3:535:6
	movq	-3696(%rbp), %rax
	movq	-5448(%rbp), %rcx
	movq	%rcx, 8(%rax)
	.loc	3 536 6                         # formatter.c3:536:6
	movq	-3736(%rbp), %rax
	movq	%rax, -8152(%rbp)               # 8-byte Spill
	.loc	3 536 33 is_stmt 0              # formatter.c3:536:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8144(%rbp)               # 8-byte Spill
	.loc	3 536 45                        # formatter.c3:536:45
	movq	-5456(%rbp), %rax
	movq	%rax, -8136(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -8128(%rbp)               # 8-byte Spill
.Ltmp247:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_729
# %bb.720:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-8136(%rbp), %rax               # 8-byte Reload
	movq	-8144(%rbp), %rcx               # 8-byte Reload
	movq	-8128(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3312(%rbp)
	movb	$32, -3313(%rbp)
	movq	%rcx, -3328(%rbp)
	movq	%rax, -3336(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3328(%rbp), %rax
	subq	-3336(%rbp), %rax
	movq	%rax, -3344(%rbp)
.Ltmp248:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3352(%rbp)
.LBB0_721:                              #   Parent Loop BB0_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3352(%rbp), %rax
	cmpq	-3344(%rbp), %rax
	jge	.LBB0_725
# %bb.722:                              #   in Loop: Header=BB0_721 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3312(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3368(%rbp), %rdi
	movzbl	-3313(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -8160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_724
# %bb.723:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-8160(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3360(%rbp)
	movq	-3360(%rbp), %rax
	movq	%rax, -8168(%rbp)               # 8-byte Spill
	jmp	.LBB0_730
.LBB0_724:                              #   in Loop: Header=BB0_721 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3352(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3352(%rbp)
	jmp	.LBB0_721
.Ltmp249:
.LBB0_725:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3372(%rbp)
	movq	-3344(%rbp), %rax
	movq	%rax, -3384(%rbp)
	movl	-3372(%rbp), %eax
	movl	%eax, -3388(%rbp)
	movq	-3384(%rbp), %rax
	movq	%rax, -3400(%rbp)
.Ltmp250:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3388(%rbp), %rax
	cmpq	-3400(%rbp), %rax
	jle	.LBB0_727
.Ltmp251:
# %bb.726:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3372(%rbp), %rax
	movq	%rax, -8176(%rbp)               # 8-byte Spill
	jmp	.LBB0_728
.LBB0_727:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3384(%rbp), %rax
	movq	%rax, -8176(%rbp)               # 8-byte Spill
.LBB0_728:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-8176(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5488(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8168(%rbp)               # 8-byte Spill
	jmp	.LBB0_730
.Ltmp252:
.LBB0_729:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp253:
.LBB0_730:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-8168(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8184(%rbp)               # 8-byte Spill
	.loc	3 536 19 is_stmt 1              # formatter.c3:536:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_732
# %bb.731:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-8184(%rbp), %rax               # 8-byte Reload
	.loc	3 536 19                        # formatter.c3:536:19
	movq	%rax, -5480(%rbp)
	movq	-5480(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_732:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-8152(%rbp), %rax               # 8-byte Reload
	.loc	3 536 6                         # formatter.c3:536:6
	addq	-5488(%rbp), %rax
	movq	%rax, -3736(%rbp)
.Ltmp254:
.LBB0_733:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 538 5 is_stmt 1               # formatter.c3:538:5
	movq	-3736(%rbp), %rax
	movq	%rax, -8200(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 538 18 is_stmt 0              # formatter.c3:538:18
	leaq	-5504(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -8192(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_735
# %bb.734:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8192(%rbp), %rax               # 8-byte Reload
	.loc	3 538 18                        # formatter.c3:538:18
	movq	%rax, -5496(%rbp)
	movq	-5496(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_735:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8200(%rbp), %rax               # 8-byte Reload
	.loc	3 538 5                         # formatter.c3:538:5
	addq	-5504(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 539 5 is_stmt 1               # formatter.c3:539:5
	jmp	.LBB0_776
.Ltmp255:
.LBB0_736:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 541 5                         # formatter.c3:541:5
	movq	-3696(%rbp), %rax
	.loc	3 541 26 is_stmt 0              # formatter.c3:541:26
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	orl	$1, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 542 5 is_stmt 1               # formatter.c3:542:5
	movq	-3696(%rbp), %rax
	.loc	3 542 23 is_stmt 0              # formatter.c3:542:23
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	orl	$16, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 543 12 is_stmt 1              # formatter.c3:543:12
	movl	$16, -4340(%rbp)
	jmp	.LBB0_745
.Ltmp256:
.LBB0_737:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-3696(%rbp), %rax
	movq	%rax, -5512(%rbp)
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -5520(%rbp)
.Ltmp257:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5512(%rbp)
	jne	.LBB0_739
# %bb.738:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp258:
.LBB0_739:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5512(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_741
# %bb.740:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5512(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5528(%rbp)
	jmp	.LBB0_742
.LBB0_741:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5512(%rbp), %rax
	movq	-5520(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5520(%rbp), %rax
	movq	%rax, -5528(%rbp)
.Ltmp259:
.LBB0_742:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 546 5                         # formatter.c3:546:5
	movq	-3736(%rbp), %rax
	movq	%rax, -8216(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 546 18 is_stmt 0              # formatter.c3:546:18
	leaq	-5544(%rbp), %rdi
	leaq	.L.str.93(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -8208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_744
# %bb.743:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8208(%rbp), %rax               # 8-byte Reload
	.loc	3 546 18                        # formatter.c3:546:18
	movq	%rax, -5536(%rbp)
	movq	-5536(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_744:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8216(%rbp), %rax               # 8-byte Reload
	.loc	3 546 5                         # formatter.c3:546:5
	addq	-5544(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 547 5 is_stmt 1               # formatter.c3:547:5
	jmp	.LBB0_776
.Ltmp260:
.LBB0_745:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 549 7                         # formatter.c3:549:7
	movl	$10, %eax
	cmpl	-4340(%rbp), %eax
	je	.LBB0_747
# %bb.746:                              #   in Loop: Header=BB0_5 Depth=1
.Ltmp261:
	.loc	3 551 4                         # formatter.c3:551:4
	movq	-3696(%rbp), %rax
	.loc	3 551 22 is_stmt 0              # formatter.c3:551:22
	movl	16(%rax), %ecx
	andl	$-5, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 552 4 is_stmt 1               # formatter.c3:552:4
	movq	-3696(%rbp), %rax
	.loc	3 552 23 is_stmt 0              # formatter.c3:552:23
	movl	16(%rax), %ecx
	andl	$-9, %ecx
	movl	%ecx, 16(%rax)
.Ltmp262:
.LBB0_747:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 555 7 is_stmt 1               # formatter.c3:555:7
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB0_749
# %bb.748:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 555 29 is_stmt 0              # formatter.c3:555:29
	movq	-3696(%rbp), %rax
	.loc	3 555 50                        # formatter.c3:555:50
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 16(%rax)
.LBB0_749:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 557 8 is_stmt 1               # formatter.c3:557:8
	movb	$0, -5545(%rbp)
	.loc	3 558 3                         # formatter.c3:558:3
	movq	-3736(%rbp), %rax
	movq	%rax, -8232(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -5568(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp263:
	.loc	3 558 42 is_stmt 0              # formatter.c3:558:42
	leaq	-5600(%rbp), %rdi
	leaq	-5545(%rbp), %rcx
	callq	std.io.int_from_any
	movq	%rax, -8224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_751
# %bb.750:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-8224(%rbp), %rax               # 8-byte Reload
	.loc	3 558 42                        # formatter.c3:558:42
	movq	%rax, -5584(%rbp)
	jmp	.LBB0_754
.LBB0_751:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-3696(%rbp), %rsi
	movq	-5600(%rbp), %rdx
	movq	-5592(%rbp), %rcx
	movb	-5545(%rbp), %al
	movl	-4340(%rbp), %r9d
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-5608(%rbp), %rdi
	movzbl	%al, %r8d
	callq	std.io.Formatter.ntoa
	movq	%rax, -8240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_753
# %bb.752:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-8240(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -5584(%rbp)
	jmp	.LBB0_754
.LBB0_753:                              #   in Loop: Header=BB0_5 Depth=1
	movq	-5608(%rbp), %rax
	movq	%rax, -5576(%rbp)
	movq	$0, -5584(%rbp)
.LBB0_754:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 346 18 is_stmt 1              # formatter.c3:346:18
	movq	-5584(%rbp), %rax
	movq	%rax, -8248(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_756
# %bb.755:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-8248(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -5616(%rbp)
	jmp	.LBB0_757
.LBB0_756:                              #   in Loop: Header=BB0_5 Depth=1
	movq	$0, -5616(%rbp)
.LBB0_757:                              #   in Loop: Header=BB0_5 Depth=1
	cmpq	$0, -5616(%rbp)
	je	.LBB0_774
# %bb.758:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-5616(%rbp), %rax
	movq	%rax, -5624(%rbp)
	movq	-5624(%rbp), %rcx
	movq	%rcx, -8256(%rbp)               # 8-byte Spill
.Ltmp264:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB0_760
# %bb.759:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-8256(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB0_766
.LBB0_760:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-5568(%rbp), %rax
	movq	%rax, -5632(%rbp)
	movq	-5616(%rbp), %rax
	movq	%rax, -5640(%rbp)
.Ltmp265:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5632(%rbp)
	jne	.LBB0_762
# %bb.761:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp266:
.LBB0_762:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5632(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_764
# %bb.763:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5632(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5648(%rbp)
	jmp	.LBB0_765
.LBB0_764:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5632(%rbp), %rax
	movq	-5640(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5640(%rbp), %rax
	movq	%rax, -5648(%rbp)
.LBB0_765:
	movq	-5648(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB0_775
.Ltmp267:
.LBB0_766:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-5568(%rbp), %rax
	movq	%rax, -5656(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -5664(%rbp)
.Ltmp268:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5656(%rbp)
	jne	.LBB0_768
# %bb.767:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp269:
.LBB0_768:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5656(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_770
# %bb.769:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5656(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5672(%rbp)
	jmp	.LBB0_771
.LBB0_770:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5656(%rbp), %rax
	movq	-5664(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5664(%rbp), %rax
	movq	%rax, -5672(%rbp)
.LBB0_771:
	movq	-5672(%rbp), %rax
	movq	%rax, -5616(%rbp)
	movq	-5568(%rbp), %rsi
.Ltmp270:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-5688(%rbp), %rdi
	leaq	.L.str.94(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -8264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_773
# %bb.772:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-8264(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -5680(%rbp)
	movq	-5680(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB0_775
.LBB0_773:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-5616(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB0_775
.Ltmp271:
.LBB0_774:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-8232(%rbp), %rax               # 8-byte Reload
	.loc	3 558 3 is_stmt 1               # formatter.c3:558:3
	addq	-5576(%rbp), %rax
	movq	%rax, -3736(%rbp)
	jmp	.LBB0_776
.LBB0_775:
.Ltmp272:
	.loc	3 359 9                         # formatter.c3:359:9
	movq	-5560(%rbp), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.Ltmp273:
.LBB0_776:                              #   in Loop: Header=BB0_5 Depth=1
	.loc	3 373 34                        # formatter.c3:373:34
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	jmp	.LBB0_5
.Ltmp274:
.LBB0_777:
	.loc	3 564 6                         # formatter.c3:564:6
	movq	-3696(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB0_779
# %bb.778:
	.loc	3 564 31 is_stmt 0              # formatter.c3:564:31
	movq	-3696(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_779:
	.loc	3 565 9 is_stmt 1               # formatter.c3:565:9
	movq	-3736(%rbp), %rax
	movq	%rax, -5744(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	jmp	.LBB0_794
.LBB0_780:
	.loc	3 362 27                        # formatter.c3:362:27
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$362, (%rsp)                    # imm = 0x16A
	callq	*(%rax)
.LBB0_781:
	.loc	3 0 27 is_stmt 0                # formatter.c3:0:27
	movq	-5840(%rbp), %rcx               # 8-byte Reload
	movq	-5856(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3776(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3784(%rbp)
	movq	%rax, -3816(%rbp)
	leaq	-3776(%rbp), %rcx
	movq	%rcx, -3824(%rbp)
	movq	%rax, -3800(%rbp)
	leaq	-3784(%rbp), %rax
	movq	%rax, -3808(%rbp)
	leaq	-3824(%rbp), %rax
	movq	%rax, -3840(%rbp)
	movq	$2, -3832(%rbp)
.Ltmp275:
	.loc	3 376 19 is_stmt 1              # formatter.c3:376:19
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-3840(%rbp), %rax
	movl	$376, (%rsp)                    # imm = 0x178
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_782:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-5888(%rbp), %rcx               # 8-byte Reload
	movq	-5904(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3888(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3896(%rbp)
	movq	%rax, -3928(%rbp)
	leaq	-3888(%rbp), %rcx
	movq	%rcx, -3936(%rbp)
	movq	%rax, -3912(%rbp)
	leaq	-3896(%rbp), %rax
	movq	%rax, -3920(%rbp)
	leaq	-3936(%rbp), %rax
	movq	%rax, -3952(%rbp)
	movq	$2, -3944(%rbp)
	.loc	3 385 14 is_stmt 1              # formatter.c3:385:14
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-3952(%rbp), %rax
	movl	$385, (%rsp)                    # imm = 0x181
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_783:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-6560(%rbp), %rcx               # 8-byte Reload
	movq	-6576(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4008(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4016(%rbp)
	movq	%rax, -4040(%rbp)
	leaq	-4008(%rbp), %rcx
	movq	%rcx, -4048(%rbp)
	movq	%rax, -4024(%rbp)
	leaq	-4016(%rbp), %rax
	movq	%rax, -4032(%rbp)
	leaq	-4048(%rbp), %rax
	movq	%rax, -4064(%rbp)
	movq	$2, -4056(%rbp)
.Ltmp276:
	.loc	3 405 15 is_stmt 1              # formatter.c3:405:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4064(%rbp), %rax
	movl	$405, (%rsp)                    # imm = 0x195
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp277:
.LBB0_784:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-6592(%rbp), %rcx               # 8-byte Reload
	movq	-6608(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4128(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4136(%rbp)
	movq	%rax, -4168(%rbp)
	leaq	-4128(%rbp), %rcx
	movq	%rcx, -4176(%rbp)
	movq	%rax, -4152(%rbp)
	leaq	-4136(%rbp), %rax
	movq	%rax, -4160(%rbp)
	leaq	-4176(%rbp), %rax
	movq	%rax, -4192(%rbp)
	movq	$2, -4184(%rbp)
	.loc	3 410 14 is_stmt 1              # formatter.c3:410:14
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4192(%rbp), %rax
	movl	$410, (%rsp)                    # imm = 0x19A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_785:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7256(%rbp), %rcx               # 8-byte Reload
	movq	-7272(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4280(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4288(%rbp)
	movq	%rax, -4312(%rbp)
	leaq	-4280(%rbp), %rcx
	movq	%rcx, -4320(%rbp)
	movq	%rax, -4296(%rbp)
	leaq	-4288(%rbp), %rax
	movq	%rax, -4304(%rbp)
	leaq	-4320(%rbp), %rax
	movq	%rax, -4336(%rbp)
	movq	$2, -4328(%rbp)
.Ltmp278:
	.loc	3 426 15 is_stmt 1              # formatter.c3:426:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4336(%rbp), %rax
	movl	$426, (%rsp)                    # imm = 0x1AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp279:
.LBB0_786:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-7296(%rbp), %rcx               # 8-byte Reload
	movq	-7312(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4408(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4416(%rbp)
	movq	%rax, -4440(%rbp)
	leaq	-4408(%rbp), %rcx
	movq	%rcx, -4448(%rbp)
	movq	%rax, -4424(%rbp)
	leaq	-4416(%rbp), %rax
	movq	%rax, -4432(%rbp)
	leaq	-4448(%rbp), %rax
	movq	%rax, -4464(%rbp)
	movq	$2, -4456(%rbp)
	.loc	3 437 22 is_stmt 1              # formatter.c3:437:22
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4464(%rbp), %rax
	movl	$437, (%rsp)                    # imm = 0x1B5
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_787:
	.loc	3 0 22 is_stmt 0                # formatter.c3:0:22
	movq	-7320(%rbp), %rcx               # 8-byte Reload
	movq	$8, -4472(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4480(%rbp)
	movq	%rax, -4504(%rbp)
	leaq	-4472(%rbp), %rcx
	movq	%rcx, -4512(%rbp)
	movq	%rax, -4488(%rbp)
	leaq	-4480(%rbp), %rax
	movq	%rax, -4496(%rbp)
	leaq	-4512(%rbp), %rax
	movq	%rax, -4528(%rbp)
	movq	$2, -4520(%rbp)
	.loc	3 437 17                        # formatter.c3:437:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4528(%rbp), %rax
	movl	$437, (%rsp)                    # imm = 0x1B5
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_788:
.Ltmp280:
	.loc	3 494 14 is_stmt 1              # formatter.c3:494:14
	leaq	.panic_msg.89(%rip), %rdi
	movl	$57, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$494, (%rsp)                    # imm = 0x1EE
	callq	*(%rax)
.LBB0_789:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7616(%rbp), %rcx               # 8-byte Reload
	movq	$8, -5096(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -5104(%rbp)
	movq	%rax, -5128(%rbp)
	leaq	-5096(%rbp), %rcx
	movq	%rcx, -5136(%rbp)
	movq	%rax, -5112(%rbp)
	leaq	-5104(%rbp), %rax
	movq	%rax, -5120(%rbp)
	leaq	-5136(%rbp), %rax
	movq	%rax, -5152(%rbp)
	movq	$2, -5144(%rbp)
	.loc	3 494 14                        # formatter.c3:494:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5152(%rbp), %rax
	movl	$494, (%rsp)                    # imm = 0x1EE
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp281:
.LBB0_790:
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-7656(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5160(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5176(%rbp)
	leaq	-5160(%rbp), %rax
	movq	%rax, -5184(%rbp)
	leaq	-5184(%rbp), %rax
	movq	%rax, -5200(%rbp)
	movq	$1, -5192(%rbp)
.Ltmp282:
	.loc	3 498 14 is_stmt 1              # formatter.c3:498:14
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5200(%rbp), %rax
	movl	$498, (%rsp)                    # imm = 0x1F2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp283:
.LBB0_791:
	.loc	3 503 17                        # formatter.c3:503:17
	leaq	.panic_msg.91(%rip), %rdi
	movl	$60, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	callq	*(%rax)
.LBB0_792:
	.loc	3 0 17 is_stmt 0                # formatter.c3:0:17
	movq	-7680(%rbp), %rcx               # 8-byte Reload
	movq	$8, -5208(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -5216(%rbp)
	movq	%rax, -5240(%rbp)
	leaq	-5208(%rbp), %rcx
	movq	%rcx, -5248(%rbp)
	movq	%rax, -5224(%rbp)
	leaq	-5216(%rbp), %rax
	movq	%rax, -5232(%rbp)
	leaq	-5248(%rbp), %rax
	movq	%rax, -5264(%rbp)
	movq	$2, -5256(%rbp)
	.loc	3 503 17                        # formatter.c3:503:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5264(%rbp), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB0_793:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7712(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5272(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5288(%rbp)
	leaq	-5272(%rbp), %rax
	movq	%rax, -5296(%rbp)
	leaq	-5296(%rbp), %rax
	movq	%rax, -5312(%rbp)
	movq	$1, -5304(%rbp)
	.loc	3 503 14                        # formatter.c3:503:14
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5312(%rbp), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp284:
.LBB0_794:
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-5880(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8272(%rbp)               # 8-byte Spill
	.loc	3 60 9 is_stmt 1                # formatter.c3:60:9
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB0_796
# %bb.795:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-8272(%rbp), %rax               # 8-byte Reload
	.loc	3 60 9                          # formatter.c3:60:9
	movq	%rax, -5736(%rbp)
	jmp	.LBB0_797
.LBB0_796:
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-5792(%rbp), %rax               # 8-byte Reload
	.loc	3 60 9                          # formatter.c3:60:9
	movq	-5744(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 60 9 epilogue_begin           # formatter.c3:60:9
	addq	$8304, %rsp                     # imm = 0x2070
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_797:
	.cfi_def_cfa %rbp, 16
	movq	-5736(%rbp), %rax
	.loc	3 60 9 epilogue_begin           # formatter.c3:60:9
	addq	$8304, %rsp                     # imm = 0x2070
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_798:
	.cfi_def_cfa %rbp, 16
	.loc	3 58 26 is_stmt 1               # formatter.c3:58:26
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func(%rip), %r8
	movl	$6, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$58, (%rsp)
	callq	*(%rax)
.Ltmp285:
.Lfunc_end0:
	.size	std.io.Formatter.printf, .Lfunc_end0-std.io.Formatter.printf
	.cfi_endproc
	.section	.rodata.std.io.Formatter.printf,"aG",@progbits,std.io.Formatter.printf,comdat
	.p2align	2, 0x0
.LJTI0_0:
	.long	.LBB0_23-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_24-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_22-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_21-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_25-.LJTI0_0
	.long	.LBB0_20-.LJTI0_0
.LJTI0_1:
	.long	.LBB0_463-.LJTI0_1
	.long	.LBB0_461-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_519-.LJTI0_1
	.long	.LBB0_491-.LJTI0_1
	.long	.LBB0_547-.LJTI0_1
	.long	.LBB0_578-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_459-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_457-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_464-.LJTI0_1
	.long	.LBB0_462-.LJTI0_1
	.long	.LBB0_575-.LJTI0_1
	.long	.LBB0_456-.LJTI0_1
	.long	.LBB0_520-.LJTI0_1
	.long	.LBB0_492-.LJTI0_1
	.long	.LBB0_548-.LJTI0_1
	.long	.LBB0_579-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_460-.LJTI0_1
	.long	.LBB0_736-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_699-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_737-.LJTI0_1
	.long	.LBB0_458-.LJTI0_1
                                        # -- End function
	.section	.text.std.io.Formatter.init,"axG",@progbits,std.io.Formatter.init,comdat
	.weak	std.io.Formatter.init           # -- Begin function std.io.Formatter.init
	.p2align	4, 0x90
	.type	std.io.Formatter.init,@function
std.io.Formatter.init:                  # @std.io.Formatter.init
.Lfunc_begin1:
	.loc	3 87 0                          # formatter.c3:87:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movq	%rdi, -152(%rbp)                # 8-byte Spill
	movq	%rsi, -144(%rbp)                # 8-byte Spill
	movq	%rdx, -136(%rbp)                # 8-byte Spill
.Ltmp286:
	.loc	3 88 1 prologue_end             # formatter.c3:88:1
	cmpq	$0, %rdi
	sete	%al
	testb	$1, %al
	jne	.LBB1_4
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-136(%rbp), %rax                # 8-byte Reload
	movq	-144(%rbp), %rcx                # 8-byte Reload
	movq	-152(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%rax, -24(%rbp)
	leaq	-64(%rbp), %rdi
	xorl	%esi, %esi
	movl	$40, %edx
	callq	memset@PLT
	.loc	3 89 20 is_stmt 1               # formatter.c3:89:20
	movq	-24(%rbp), %rax
	movq	%rax, -64(%rbp)
	.loc	3 89 36 is_stmt 0               # formatter.c3:89:36
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	.loc	3 89 3                          # formatter.c3:89:3
	movq	-8(%rbp), %rax
	movq	%rax, -160(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB1_5
# %bb.2:
	.loc	3 0 3                           # formatter.c3:0:3
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	3 89 3                          # formatter.c3:89:3
	andq	$7, %rax
	movq	%rax, -168(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB1_6
# %bb.3:
	.loc	3 0 3                           # formatter.c3:0:3
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	3 89 3                          # formatter.c3:89:3
	vmovdqu	-64(%rbp), %xmm0
	vmovdqu	-48(%rbp), %xmm1
	vmovdqu	%xmm1, 16(%rax)
	vmovdqu	%xmm0, (%rax)
	movq	-32(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	3 89 3 epilogue_begin           # formatter.c3:89:3
	addq	$192, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:
	.cfi_def_cfa %rbp, 16
	.loc	3 87 24 is_stmt 1               # formatter.c3:87:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.2(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$87, (%rsp)
	callq	*(%rax)
.LBB1_5:
	.loc	3 89 3                          # formatter.c3:89:3
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.2(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$89, (%rsp)
	callq	*(%rax)
.LBB1_6:
	.loc	3 0 3 is_stmt 0                 # formatter.c3:0:3
	movq	-168(%rbp), %rcx                # 8-byte Reload
	movq	$8, -72(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -80(%rbp)
	movq	%rax, -104(%rbp)
	leaq	-72(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	$2, -120(%rbp)
	.loc	3 89 3                          # formatter.c3:89:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.2(%rip), %r8
	movl	$4, %r9d
	leaq	-128(%rbp), %rax
	movl	$89, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp287:
.Lfunc_end1:
	.size	std.io.Formatter.init, .Lfunc_end1-std.io.Formatter.init
	.cfi_endproc
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out
	.type	std.io.Formatter.out,@function
std.io.Formatter.out:                   # @std.io.Formatter.out
.Lfunc_begin2:
	.loc	3 92 0 is_stmt 1                # formatter.c3:92:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rsi, -56(%rbp)                 # 8-byte Spill
	movq	%rdi, -48(%rbp)                 # 8-byte Spill
	movb	%dl, %al
	movb	%al, -33(%rbp)                  # 1-byte Spill
.Ltmp288:
	.loc	3 93 1 prologue_end             # formatter.c3:93:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB2_11
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movb	-33(%rbp), %al                  # 1-byte Reload
	movq	-56(%rbp), %rcx                 # 8-byte Reload
	movq	%rcx, -8(%rbp)
	movb	%al, -9(%rbp)
# %bb.2:
	.loc	3 94 18 is_stmt 1               # formatter.c3:94:18
	movq	-8(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB2_12
# %bb.3:
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-64(%rbp), %rax                 # 8-byte Reload
	.loc	3 94 30                         # formatter.c3:94:30
	movq	-8(%rbp), %rcx
	.loc	3 94 41                         # formatter.c3:94:41
	movq	(%rcx), %rdi
	.loc	3 94 18                         # formatter.c3:94:18
	movzbl	-9(%rbp), %esi
	callq	*%rax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB2_5
# %bb.4:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-72(%rbp), %rax                 # 8-byte Reload
	.loc	3 94 18                         # formatter.c3:94:18
	movq	%rax, -24(%rbp)
	jmp	.LBB2_6
.LBB2_5:
	movq	$0, -24(%rbp)
.LBB2_6:
	cmpq	$0, -24(%rbp)
	je	.LBB2_10
# %bb.7:
.Ltmp289:
	.loc	3 96 7 is_stmt 1                # formatter.c3:96:7
	movq	-8(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB2_9
# %bb.8:
	.loc	3 96 32 is_stmt 0               # formatter.c3:96:32
	movq	-8(%rbp), %rax
	movq	32(%rax), %rax
	.loc	3 96 32 epilogue_begin          # formatter.c3:96:32
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:
	.cfi_def_cfa %rbp, 16
	.loc	3 97 3 is_stmt 1                # formatter.c3:97:3
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	3 98 10                         # formatter.c3:98:10
	movq	-24(%rbp), %rax
	.loc	3 98 10 epilogue_begin is_stmt 0 # formatter.c3:98:10
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp290:
.LBB2_10:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 10                          # formatter.c3:0:10
	movq	-48(%rbp), %rax                 # 8-byte Reload
	.loc	3 100 9 is_stmt 1               # formatter.c3:100:9
	movq	$1, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 100 9 epilogue_begin is_stmt 0 # formatter.c3:100:9
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_11:
	.cfi_def_cfa %rbp, 16
	.loc	3 92 23 is_stmt 1               # formatter.c3:92:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.5(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$92, (%rsp)
	callq	*(%rax)
.LBB2_12:
	.loc	3 94 18                         # formatter.c3:94:18
	leaq	.panic_msg.6(%rip), %rdi
	movl	$54, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.5(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$94, (%rsp)
	callq	*(%rax)
.Ltmp291:
.Lfunc_end2:
	.size	std.io.Formatter.out, .Lfunc_end2-std.io.Formatter.out
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.print_with_function,"axG",@progbits,std.io.Formatter.print_with_function,comdat
	.weak	std.io.Formatter.print_with_function # -- Begin function std.io.Formatter.print_with_function
	.p2align	4, 0x90
	.type	std.io.Formatter.print_with_function,@function
std.io.Formatter.print_with_function:   # @std.io.Formatter.print_with_function
.Lfunc_begin3:
	.loc	3 103 0                         # formatter.c3:103:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$352, %rsp                      # imm = 0x160
	movq	%rdi, -232(%rbp)                # 8-byte Spill
	movq	%rsi, -224(%rbp)                # 8-byte Spill
	movq	%rdx, -216(%rbp)                # 8-byte Spill
	movq	%rcx, -208(%rbp)                # 8-byte Spill
.Ltmp292:
	.loc	3 104 1 prologue_end            # formatter.c3:104:1
	movq	$0, -176(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -96(%rbp)
	movq	$0, -40(%rbp)
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB3_38
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-208(%rbp), %rax                # 8-byte Reload
	movq	-216(%rbp), %rcx                # 8-byte Reload
	movq	-224(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -16(%rbp)
	.loc	3 105 7 is_stmt 1               # formatter.c3:105:7
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rax
	movq	%rax, -240(%rbp)                # 8-byte Spill
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	-40(%rbp), %rax
	je	.LBB3_3
# %bb.2:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-240(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	movq	16(%rax), %rdi
	movq	($sel.to_format)@GOTPCREL(%rip), %rsi
	callq	.dyn_search@PLT
	movq	-240(%rbp), %rcx                # 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%rax, -248(%rbp)                # 8-byte Spill
	jmp	.LBB3_4
.LBB3_3:
	movq	-32(%rbp), %rax
	movq	%rax, -248(%rbp)                # 8-byte Spill
.LBB3_4:
	.loc	3 0 1                           # formatter.c3:0:1
	movq	-248(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	$0, %rax
	je	.LBB3_19
# %bb.5:
.Ltmp293:
	.loc	3 107 20 is_stmt 1              # formatter.c3:107:20
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -44(%rbp)
	.loc	3 108 20                        # formatter.c3:108:20
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -48(%rbp)
	.loc	3 109 19                        # formatter.c3:109:19
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -52(%rbp)
	.loc	3 116 7                         # formatter.c3:116:7
	cmpq	$0, -24(%rbp)
	jne	.LBB3_10
# %bb.6:
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-8(%rbp), %rsi
	.loc	3 116 20                        # formatter.c3:116:20
	leaq	-72(%rbp), %rdi
	leaq	.L.str(%rip), %rdx
	movl	$6, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -256(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB3_8
# %bb.7:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-256(%rbp), %rax                # 8-byte Reload
	.loc	3 116 20                        # formatter.c3:116:20
	movq	%rax, -64(%rbp)
	jmp	.LBB3_9
.LBB3_8:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-232(%rbp), %rax                # 8-byte Reload
	.loc	3 116 20                        # formatter.c3:116:20
	movq	-72(%rbp), %rcx
.Ltmp294:
	.loc	3 112 4 is_stmt 1               # formatter.c3:112:4
	movq	-8(%rbp), %rdx
	movl	-44(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 113 4                         # formatter.c3:113:4
	movq	-8(%rbp), %rdx
	movl	-48(%rbp), %esi
	movl	%esi, 20(%rdx)
	.loc	3 114 4                         # formatter.c3:114:4
	movq	-8(%rbp), %rdx
	movl	-52(%rbp), %esi
	movl	%esi, 24(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 114 4 epilogue_begin is_stmt 0 # formatter.c3:114:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp295:
.LBB3_9:
	.cfi_def_cfa %rbp, 16
	.loc	3 112 4 is_stmt 1               # formatter.c3:112:4
	movq	-8(%rbp), %rax
	movl	-44(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 113 4                         # formatter.c3:113:4
	movq	-8(%rbp), %rax
	movl	-48(%rbp), %ecx
	movl	%ecx, 20(%rax)
	.loc	3 114 4                         # formatter.c3:114:4
	movq	-8(%rbp), %rax
	movl	-52(%rbp), %ecx
	movl	%ecx, 24(%rax)
	movq	-64(%rbp), %rax
	.loc	3 114 4 epilogue_begin is_stmt 0 # formatter.c3:114:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp296:
.LBB3_10:
	.cfi_def_cfa %rbp, 16
	.loc	3 117 24 is_stmt 1              # formatter.c3:117:24
	movq	-16(%rbp), %rax
	movq	%rax, -264(%rbp)                # 8-byte Spill
.Ltmp297:
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	-96(%rbp), %rax
	je	.LBB3_12
# %bb.11:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-264(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	movq	16(%rax), %rdi
	movq	($sel.to_format)@GOTPCREL(%rip), %rsi
	callq	.dyn_search@PLT
	movq	-264(%rbp), %rcx                # 8-byte Reload
	movq	%rax, -88(%rbp)
	movq	%rcx, -96(%rbp)
	movq	%rax, -272(%rbp)                # 8-byte Spill
	jmp	.LBB3_13
.LBB3_12:
	movq	-88(%rbp), %rax
	movq	%rax, -272(%rbp)                # 8-byte Spill
.LBB3_13:
	.loc	3 0 1                           # formatter.c3:0:1
	movq	-272(%rbp), %rax                # 8-byte Reload
	movq	%rax, -280(%rbp)                # 8-byte Spill
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	$0, %rax
	jne	.LBB3_15
# %bb.14:
.Ltmp298:
	.loc	3 117 10 is_stmt 1              # formatter.c3:117:10
	leaq	.panic_msg.8(%rip), %rdi
	movl	$46, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.7(%rip), %r8
	movl	$19, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$117, (%rsp)
	callq	*(%rax)
.LBB3_15:
	.loc	3 0 10 is_stmt 0                # formatter.c3:0:10
	movq	-280(%rbp), %rax                # 8-byte Reload
	movq	-24(%rbp), %rsi
	movq	-8(%rbp), %rdx
	.loc	3 117 10                        # formatter.c3:117:10
	leaq	-104(%rbp), %rdi
	callq	*%rax
	movq	%rax, -288(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB3_17
# %bb.16:
	.loc	3 0 10                          # formatter.c3:0:10
	movq	-288(%rbp), %rax                # 8-byte Reload
	.loc	3 117 10                        # formatter.c3:117:10
	movq	%rax, -80(%rbp)
	jmp	.LBB3_18
.LBB3_17:
	.loc	3 0 10                          # formatter.c3:0:10
	movq	-232(%rbp), %rax                # 8-byte Reload
	.loc	3 117 10                        # formatter.c3:117:10
	movq	-104(%rbp), %rcx
.Ltmp299:
	.loc	3 112 4 is_stmt 1               # formatter.c3:112:4
	movq	-8(%rbp), %rdx
	movl	-44(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 113 4                         # formatter.c3:113:4
	movq	-8(%rbp), %rdx
	movl	-48(%rbp), %esi
	movl	%esi, 20(%rdx)
	.loc	3 114 4                         # formatter.c3:114:4
	movq	-8(%rbp), %rdx
	movl	-52(%rbp), %esi
	movl	%esi, 24(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 114 4 epilogue_begin is_stmt 0 # formatter.c3:114:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp300:
.LBB3_18:
	.cfi_def_cfa %rbp, 16
	.loc	3 112 4 is_stmt 1               # formatter.c3:112:4
	movq	-8(%rbp), %rax
	movl	-44(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 113 4                         # formatter.c3:113:4
	movq	-8(%rbp), %rax
	movl	-48(%rbp), %ecx
	movl	%ecx, 20(%rax)
	.loc	3 114 4                         # formatter.c3:114:4
	movq	-8(%rbp), %rax
	movl	-52(%rbp), %ecx
	movl	%ecx, 24(%rax)
	movq	-80(%rbp), %rax
	.loc	3 114 4 epilogue_begin is_stmt 0 # formatter.c3:114:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp301:
.LBB3_19:
	.cfi_def_cfa %rbp, 16
	.loc	3 119 7 is_stmt 1               # formatter.c3:119:7
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rax
	movq	%rax, -296(%rbp)                # 8-byte Spill
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	-120(%rbp), %rax
	je	.LBB3_21
# %bb.20:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-296(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	movq	16(%rax), %rdi
	movq	($sel.to_constant_string)@GOTPCREL(%rip), %rsi
	callq	.dyn_search@PLT
	movq	-296(%rbp), %rcx                # 8-byte Reload
	movq	%rax, -112(%rbp)
	movq	%rcx, -120(%rbp)
	movq	%rax, -304(%rbp)                # 8-byte Spill
	jmp	.LBB3_22
.LBB3_21:
	movq	-112(%rbp), %rax
	movq	%rax, -304(%rbp)                # 8-byte Spill
.LBB3_22:
	.loc	3 0 1                           # formatter.c3:0:1
	movq	-304(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	$0, %rax
	je	.LBB3_37
# %bb.23:
.Ltmp302:
	.loc	3 121 20 is_stmt 1              # formatter.c3:121:20
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -124(%rbp)
	.loc	3 122 20                        # formatter.c3:122:20
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -128(%rbp)
	.loc	3 123 19                        # formatter.c3:123:19
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -132(%rbp)
	.loc	3 130 7                         # formatter.c3:130:7
	cmpq	$0, -24(%rbp)
	jne	.LBB3_28
# %bb.24:
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-8(%rbp), %rsi
	.loc	3 130 20                        # formatter.c3:130:20
	leaq	-152(%rbp), %rdi
	leaq	.L.str.9(%rip), %rdx
	movl	$6, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -312(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB3_26
# %bb.25:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-312(%rbp), %rax                # 8-byte Reload
	.loc	3 130 20                        # formatter.c3:130:20
	movq	%rax, -144(%rbp)
	jmp	.LBB3_27
.LBB3_26:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-232(%rbp), %rax                # 8-byte Reload
	.loc	3 130 20                        # formatter.c3:130:20
	movq	-152(%rbp), %rcx
.Ltmp303:
	.loc	3 126 4 is_stmt 1               # formatter.c3:126:4
	movq	-8(%rbp), %rdx
	movl	-124(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 127 4                         # formatter.c3:127:4
	movq	-8(%rbp), %rdx
	movl	-128(%rbp), %esi
	movl	%esi, 20(%rdx)
	.loc	3 128 4                         # formatter.c3:128:4
	movq	-8(%rbp), %rdx
	movl	-132(%rbp), %esi
	movl	%esi, 24(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 128 4 epilogue_begin is_stmt 0 # formatter.c3:128:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp304:
.LBB3_27:
	.cfi_def_cfa %rbp, 16
	.loc	3 126 4 is_stmt 1               # formatter.c3:126:4
	movq	-8(%rbp), %rax
	movl	-124(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 127 4                         # formatter.c3:127:4
	movq	-8(%rbp), %rax
	movl	-128(%rbp), %ecx
	movl	%ecx, 20(%rax)
	.loc	3 128 4                         # formatter.c3:128:4
	movq	-8(%rbp), %rax
	movl	-132(%rbp), %ecx
	movl	%ecx, 24(%rax)
	movq	-144(%rbp), %rax
	.loc	3 128 4 epilogue_begin is_stmt 0 # formatter.c3:128:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp305:
.LBB3_28:
	.cfi_def_cfa %rbp, 16
	.loc	3 131 26 is_stmt 1              # formatter.c3:131:26
	movq	-16(%rbp), %rax
	movq	%rax, -320(%rbp)                # 8-byte Spill
.Ltmp306:
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	-176(%rbp), %rax
	je	.LBB3_30
# %bb.29:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-320(%rbp), %rax                # 8-byte Reload
	.loc	3 104 1                         # formatter.c3:104:1
	movq	16(%rax), %rdi
	movq	($sel.to_constant_string)@GOTPCREL(%rip), %rsi
	callq	.dyn_search@PLT
	movq	-320(%rbp), %rcx                # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	%rax, -328(%rbp)                # 8-byte Spill
	jmp	.LBB3_31
.LBB3_30:
	movq	-168(%rbp), %rax
	movq	%rax, -328(%rbp)                # 8-byte Spill
.LBB3_31:
	.loc	3 0 1                           # formatter.c3:0:1
	movq	-328(%rbp), %rax                # 8-byte Reload
	movq	%rax, -336(%rbp)                # 8-byte Spill
	.loc	3 104 1                         # formatter.c3:104:1
	cmpq	$0, %rax
	jne	.LBB3_33
# %bb.32:
.Ltmp307:
	.loc	3 131 26 is_stmt 1              # formatter.c3:131:26
	leaq	.panic_msg.10(%rip), %rdi
	movl	$55, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.7(%rip), %r8
	movl	$19, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$131, (%rsp)
	callq	*(%rax)
.LBB3_33:
	.loc	3 0 26 is_stmt 0                # formatter.c3:0:26
	movq	-336(%rbp), %rax                # 8-byte Reload
	.loc	3 131 26                        # formatter.c3:131:26
	movq	-24(%rbp), %rdi
	callq	*%rax
	movq	%rdx, -184(%rbp)
	movq	%rax, -192(%rbp)
	movq	-8(%rbp), %rsi
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rcx
	.loc	3 131 10                        # formatter.c3:131:10
	leaq	-200(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -344(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB3_35
# %bb.34:
	.loc	3 0 10                          # formatter.c3:0:10
	movq	-344(%rbp), %rax                # 8-byte Reload
	.loc	3 131 10                        # formatter.c3:131:10
	movq	%rax, -160(%rbp)
	jmp	.LBB3_36
.LBB3_35:
	.loc	3 0 10                          # formatter.c3:0:10
	movq	-232(%rbp), %rax                # 8-byte Reload
	.loc	3 131 10                        # formatter.c3:131:10
	movq	-200(%rbp), %rcx
.Ltmp308:
	.loc	3 126 4 is_stmt 1               # formatter.c3:126:4
	movq	-8(%rbp), %rdx
	movl	-124(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 127 4                         # formatter.c3:127:4
	movq	-8(%rbp), %rdx
	movl	-128(%rbp), %esi
	movl	%esi, 20(%rdx)
	.loc	3 128 4                         # formatter.c3:128:4
	movq	-8(%rbp), %rdx
	movl	-132(%rbp), %esi
	movl	%esi, 24(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 128 4 epilogue_begin is_stmt 0 # formatter.c3:128:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp309:
.LBB3_36:
	.cfi_def_cfa %rbp, 16
	.loc	3 126 4 is_stmt 1               # formatter.c3:126:4
	movq	-8(%rbp), %rax
	movl	-124(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 127 4                         # formatter.c3:127:4
	movq	-8(%rbp), %rax
	movl	-128(%rbp), %ecx
	movl	%ecx, 20(%rax)
	.loc	3 128 4                         # formatter.c3:128:4
	movq	-8(%rbp), %rax
	movl	-132(%rbp), %ecx
	movl	%ecx, 24(%rax)
	movq	-160(%rbp), %rax
	.loc	3 128 4 epilogue_begin is_stmt 0 # formatter.c3:128:4
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp310:
.LBB3_37:
	.cfi_def_cfa %rbp, 16
	.loc	3 133 9 is_stmt 1               # formatter.c3:133:9
	movq	std.core.builtin.NOT_FOUND@GOTPCREL(%rip), %rax
	.loc	3 133 9 epilogue_begin is_stmt 0 # formatter.c3:133:9
	addq	$352, %rsp                      # imm = 0x160
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_38:
	.cfi_def_cfa %rbp, 16
	.loc	3 103 39 is_stmt 1              # formatter.c3:103:39
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.7(%rip), %r8
	movl	$19, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$103, (%rsp)
	callq	*(%rax)
.Ltmp311:
.Lfunc_end3:
	.size	std.io.Formatter.print_with_function, .Lfunc_end3-std.io.Formatter.print_with_function
	.cfi_endproc
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out_unknown
	.type	std.io.Formatter.out_unknown,@function
std.io.Formatter.out_unknown:           # @std.io.Formatter.out_unknown
.Lfunc_begin4:
	.loc	3 136 0                         # formatter.c3:136:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$304, %rsp                      # imm = 0x130
	movq	%rdi, -184(%rbp)                # 8-byte Spill
	movq	%rsi, -176(%rbp)                # 8-byte Spill
	movq	%rdx, -168(%rbp)                # 8-byte Spill
	movq	%rcx, -160(%rbp)                # 8-byte Spill
	movq	%r8, -152(%rbp)                 # 8-byte Spill
	movq	%r9, -144(%rbp)                 # 8-byte Spill
.Ltmp312:
	.loc	3 137 1 prologue_end            # formatter.c3:137:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB4_17
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	-152(%rbp), %rcx                # 8-byte Reload
	movq	-160(%rbp), %rdx                # 8-byte Reload
	movq	-168(%rbp), %rsi                # 8-byte Reload
	movq	-176(%rbp), %rdi                # 8-byte Reload
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	%rcx, -40(%rbp)
	movq	%rax, -32(%rbp)
	movq	-8(%rbp), %rsi
	.loc	3 138 9 is_stmt 1               # formatter.c3:138:9
	leaq	-56(%rbp), %rdi
	leaq	.L.str.12(%rip), %rdx
	movl	$1, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -192(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_3
# %bb.2:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-192(%rbp), %rax                # 8-byte Reload
	.loc	3 138 9                         # formatter.c3:138:9
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_3:
	movq	-56(%rbp), %rax
	movq	%rax, -208(%rbp)                # 8-byte Spill
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	.loc	3 138 32                        # formatter.c3:138:32
	leaq	-64(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -200(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_5
# %bb.4:
	.loc	3 0 32                          # formatter.c3:0:32
	movq	-200(%rbp), %rax                # 8-byte Reload
	.loc	3 138 32                        # formatter.c3:138:32
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_5:
	.loc	3 0 32                          # formatter.c3:0:32
	movq	-208(%rbp), %rax                # 8-byte Reload
	.loc	3 138 9                         # formatter.c3:138:9
	addq	-64(%rbp), %rax
	movq	%rax, -224(%rbp)                # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 138 60                        # formatter.c3:138:60
	leaq	-72(%rbp), %rdi
	leaq	.L.str.13(%rip), %rdx
	movl	$6, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -216(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_7
# %bb.6:
	.loc	3 0 60                          # formatter.c3:0:60
	movq	-216(%rbp), %rax                # 8-byte Reload
	.loc	3 138 60                        # formatter.c3:138:60
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_7:
	.loc	3 0 60                          # formatter.c3:0:60
	movq	-224(%rbp), %rax                # 8-byte Reload
	.loc	3 138 60                        # formatter.c3:138:60
	movq	-72(%rbp), %rcx
	.loc	3 138 9                         # formatter.c3:138:9
	addq	%rcx, %rax
	movq	%rax, -240(%rbp)                # 8-byte Spill
	.loc	3 138 104                       # formatter.c3:138:104
	movq	-32(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	-8(%rbp), %rsi
	movq	%rcx, -96(%rbp)
	movq	%rax, -88(%rbp)
	movq	-96(%rbp), %rdx
	movq	-88(%rbp), %rcx
	.loc	3 138 88                        # formatter.c3:138:88
	leaq	-80(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$16, %r9d
	callq	std.io.Formatter.ntoa
	movq	%rax, -232(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_9
# %bb.8:
	.loc	3 0 88                          # formatter.c3:0:88
	movq	-232(%rbp), %rax                # 8-byte Reload
	.loc	3 138 88                        # formatter.c3:138:88
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_9:
	.loc	3 0 88                          # formatter.c3:0:88
	movq	-240(%rbp), %rax                # 8-byte Reload
	.loc	3 138 9                         # formatter.c3:138:9
	addq	-80(%rbp), %rax
	movq	%rax, -256(%rbp)                # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 138 127                       # formatter.c3:138:127
	leaq	-104(%rbp), %rdi
	leaq	.L.str.14(%rip), %rdx
	movl	$7, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -248(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_11
# %bb.10:
	.loc	3 0 127                         # formatter.c3:0:127
	movq	-248(%rbp), %rax                # 8-byte Reload
	.loc	3 138 127                       # formatter.c3:138:127
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_11:
	.loc	3 0 127                         # formatter.c3:0:127
	movq	-256(%rbp), %rax                # 8-byte Reload
	.loc	3 138 127                       # formatter.c3:138:127
	movq	-104(%rbp), %rcx
	.loc	3 138 9                         # formatter.c3:138:9
	addq	%rcx, %rax
	movq	%rax, -272(%rbp)                # 8-byte Spill
	.loc	3 138 166                       # formatter.c3:138:166
	movq	-40(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	-8(%rbp), %rsi
	movq	%rcx, -128(%rbp)
	movq	%rax, -120(%rbp)
	movq	-128(%rbp), %rdx
	movq	-120(%rbp), %rcx
	.loc	3 138 156                       # formatter.c3:138:156
	leaq	-112(%rbp), %rdi
	xorl	%r8d, %r8d
	movl	$16, %r9d
	callq	std.io.Formatter.ntoa
	movq	%rax, -264(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_13
# %bb.12:
	.loc	3 0 156                         # formatter.c3:0:156
	movq	-264(%rbp), %rax                # 8-byte Reload
	.loc	3 138 156                       # formatter.c3:138:156
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_13:
	.loc	3 0 156                         # formatter.c3:0:156
	movq	-272(%rbp), %rax                # 8-byte Reload
	.loc	3 138 9                         # formatter.c3:138:9
	addq	-112(%rbp), %rax
	movq	%rax, -288(%rbp)                # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 138 194                       # formatter.c3:138:194
	leaq	-136(%rbp), %rdi
	leaq	.L.str.15(%rip), %rdx
	movl	$1, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -280(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB4_15
# %bb.14:
	.loc	3 0 194                         # formatter.c3:0:194
	movq	-280(%rbp), %rax                # 8-byte Reload
	.loc	3 138 194                       # formatter.c3:138:194
	movq	%rax, -48(%rbp)
	jmp	.LBB4_16
.LBB4_15:
	.loc	3 0 194                         # formatter.c3:0:194
	movq	-184(%rbp), %rax                # 8-byte Reload
	movq	-288(%rbp), %rcx                # 8-byte Reload
	.loc	3 138 9                         # formatter.c3:138:9
	addq	-136(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 138 9 epilogue_begin          # formatter.c3:138:9
	addq	$304, %rsp                      # imm = 0x130
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %rax
	.loc	3 138 9 epilogue_begin          # formatter.c3:138:9
	addq	$304, %rsp                      # imm = 0x130
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:
	.cfi_def_cfa %rbp, 16
	.loc	3 136 31 is_stmt 1              # formatter.c3:136:31
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.11(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$136, (%rsp)
	callq	*(%rax)
.Ltmp313:
.Lfunc_end4:
	.size	std.io.Formatter.out_unknown, .Lfunc_end4-std.io.Formatter.out_unknown
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out_str
	.type	std.io.Formatter.out_str,@function
std.io.Formatter.out_str:               # @std.io.Formatter.out_str
.Lfunc_begin5:
	.loc	3 140 0                         # formatter.c3:140:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$4816, %rsp                     # imm = 0x12D0
	movq	%rdi, -3320(%rbp)               # 8-byte Spill
	movq	%rsi, -3312(%rbp)               # 8-byte Spill
	movq	%rdx, -3304(%rbp)               # 8-byte Spill
	movq	%rcx, -3296(%rbp)               # 8-byte Spill
.Ltmp314:
	.loc	3 141 1 prologue_end            # formatter.c3:141:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB5_480
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-3296(%rbp), %rax               # 8-byte Reload
	movq	-3304(%rbp), %rcx               # 8-byte Reload
	movq	-3312(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -16(%rbp)
.Ltmp315:
	.loc	3 142 10 is_stmt 1              # formatter.c3:142:10
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -25(%rbp)
# %bb.2:
	.loc	3 0 10 is_stmt 0                # formatter.c3:0:10
	movzbl	-25(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -3328(%rbp)               # 8-byte Spill
	subq	$20, %rax
	ja	.LBB5_66
# %bb.532:
	movq	-3328(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI5_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB5_3:
	movq	-8(%rbp), %rsi
.Ltmp316:
	.loc	3 145 11 is_stmt 1              # formatter.c3:145:11
	leaq	-48(%rbp), %rdi
	leaq	.L.str.17(%rip), %rdx
	movl	$6, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3336(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_5
# %bb.4:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-3336(%rbp), %rax               # 8-byte Reload
	.loc	3 145 11                        # formatter.c3:145:11
	movq	%rax, -40(%rbp)
	jmp	.LBB5_6
.LBB5_5:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 145 11                        # formatter.c3:145:11
	movq	-48(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 145 11 epilogue_begin         # formatter.c3:145:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:
	.cfi_def_cfa %rbp, 16
	movq	-40(%rbp), %rax
	.loc	3 145 11 epilogue_begin         # formatter.c3:145:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp317:
.LBB5_7:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-8(%rbp), %rsi
.Ltmp318:
	.loc	3 147 11 is_stmt 1              # formatter.c3:147:11
	leaq	-64(%rbp), %rdi
	leaq	.L.str.18(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3344(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_9
# %bb.8:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-3344(%rbp), %rax               # 8-byte Reload
	.loc	3 147 11                        # formatter.c3:147:11
	movq	%rax, -56(%rbp)
	jmp	.LBB5_10
.LBB5_9:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 147 11                        # formatter.c3:147:11
	movq	-64(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 147 11 epilogue_begin         # formatter.c3:147:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rax
	.loc	3 147 11 epilogue_begin         # formatter.c3:147:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp319:
.LBB5_11:
	.cfi_def_cfa %rbp, 16
	.loc	3 149 23 is_stmt 1              # formatter.c3:149:23
	movq	-24(%rbp), %rax
	movq	%rax, -3352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_481
# %bb.12:
	.loc	3 0 23 is_stmt 0                # formatter.c3:0:23
	movq	-3352(%rbp), %rax               # 8-byte Reload
	.loc	3 149 15                        # formatter.c3:149:15
	andq	$7, %rax
	movq	%rax, -3360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_482
# %bb.13:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-3352(%rbp), %rax               # 8-byte Reload
	.loc	3 149 15                        # formatter.c3:149:15
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	.loc	3 150 27 is_stmt 1              # formatter.c3:150:27
	cmpq	$0, -72(%rbp)
	je	.LBB5_18
# %bb.14:
	.loc	3 150 31 is_stmt 0              # formatter.c3:150:31
	movq	-72(%rbp), %rax
	movq	%rax, -3368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	jne	.LBB5_16
# %bb.15:
	.loc	3 0 31                          # formatter.c3:0:31
	leaq	-168(%rbp), %rdi
	xorl	%esi, %esi
	movl	$16, %edx
	callq	memset@PLT
	leaq	-168(%rbp), %rax
	movq	%rax, -3376(%rbp)               # 8-byte Spill
	jmp	.LBB5_17
.LBB5_16:
	movq	-3368(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3376(%rbp)               # 8-byte Spill
.LBB5_17:
	movq	-3376(%rbp), %rax               # 8-byte Reload
	movq	(%rax), %rcx
	movq	8(%rax), %rax
	movq	%rcx, -3392(%rbp)               # 8-byte Spill
	movq	%rax, -3384(%rbp)               # 8-byte Spill
	jmp	.LBB5_19
.LBB5_18:
	movl	$13, %eax
	leaq	.L.str.20(%rip), %rcx
	movq	%rcx, -3392(%rbp)               # 8-byte Spill
	movq	%rax, -3384(%rbp)               # 8-byte Spill
	.loc	3 150 42                        # formatter.c3:150:42
	jmp	.LBB5_19
.LBB5_19:
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-3392(%rbp), %rdx               # 8-byte Reload
	movq	-3384(%rbp), %rcx               # 8-byte Reload
	movq	-8(%rbp), %rsi
	.loc	3 150 11                        # formatter.c3:150:11
	leaq	-176(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -3400(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_21
# %bb.20:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3400(%rbp), %rax               # 8-byte Reload
	.loc	3 150 11                        # formatter.c3:150:11
	movq	%rax, -152(%rbp)
	jmp	.LBB5_22
.LBB5_21:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 150 11                        # formatter.c3:150:11
	movq	-176(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 150 11 epilogue_begin         # formatter.c3:150:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_22:
	.cfi_def_cfa %rbp, 16
	movq	-152(%rbp), %rax
	.loc	3 150 11 epilogue_begin         # formatter.c3:150:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp320:
.LBB5_23:
	.cfi_def_cfa %rbp, 16
	.loc	3 152 13 is_stmt 1              # formatter.c3:152:13
	movq	-24(%rbp), %rax
	movq	%rax, -3408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_483
# %bb.24:
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-3408(%rbp), %rax               # 8-byte Reload
	.loc	3 152 13                        # formatter.c3:152:13
	andq	$7, %rax
	movq	%rax, -3416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_484
# %bb.25:
	.loc	3 0 13                          # formatter.c3:0:13
	movq	-3408(%rbp), %rax               # 8-byte Reload
	.loc	3 152 13                        # formatter.c3:152:13
	movq	(%rax), %rcx
	movq	%rcx, -192(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -184(%rbp)
	.loc	3 153 11 is_stmt 1              # formatter.c3:153:11
	cmpq	$0, -192(%rbp)
	je	.LBB5_29
# %bb.26:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	movq	-192(%rbp), %rdx
	movq	-184(%rbp), %rcx
	.loc	3 153 15                        # formatter.c3:153:15
	leaq	-272(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -3424(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_28
# %bb.27:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-3424(%rbp), %rax               # 8-byte Reload
	.loc	3 153 15                        # formatter.c3:153:15
	movq	%rax, -264(%rbp)
	jmp	.LBB5_33
.LBB5_28:
	movq	-272(%rbp), %rax
	movq	%rax, -3432(%rbp)               # 8-byte Spill
	jmp	.LBB5_32
.LBB5_29:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-8(%rbp), %rsi
	.loc	3 153 33                        # formatter.c3:153:33
	leaq	-280(%rbp), %rdi
	leaq	.L.str.22(%rip), %rdx
	movl	$17, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_31
# %bb.30:
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-3440(%rbp), %rax               # 8-byte Reload
	.loc	3 153 33                        # formatter.c3:153:33
	movq	%rax, -264(%rbp)
	jmp	.LBB5_33
.LBB5_31:
	movq	-280(%rbp), %rax
	movq	%rax, -3432(%rbp)               # 8-byte Spill
.LBB5_32:
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-3432(%rbp), %rcx               # 8-byte Reload
	.loc	3 153 33                        # formatter.c3:153:33
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 153 33 epilogue_begin         # formatter.c3:153:33
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_33:
	.cfi_def_cfa %rbp, 16
	movq	-264(%rbp), %rax
	.loc	3 153 33 epilogue_begin         # formatter.c3:153:33
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp321:
.LBB5_34:
	.cfi_def_cfa %rbp, 16
	.loc	3 155 13 is_stmt 1              # formatter.c3:155:13
	movq	-24(%rbp), %rax
	movq	%rax, -3448(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_485
# %bb.35:
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-3448(%rbp), %rax               # 8-byte Reload
	.loc	3 155 13                        # formatter.c3:155:13
	andq	$7, %rax
	movq	%rax, -3456(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_486
# %bb.36:
	.loc	3 0 13                          # formatter.c3:0:13
	movq	-3448(%rbp), %rax               # 8-byte Reload
	.loc	3 155 13                        # formatter.c3:155:13
	movq	(%rax), %rcx
	movq	%rcx, -296(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -288(%rbp)
	.loc	3 156 11 is_stmt 1              # formatter.c3:156:11
	cmpq	$0, -296(%rbp)
	je	.LBB5_40
# %bb.37:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	movq	-296(%rbp), %rdx
	movq	-288(%rbp), %rcx
	.loc	3 156 15                        # formatter.c3:156:15
	leaq	-384(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -3464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_39
# %bb.38:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-3464(%rbp), %rax               # 8-byte Reload
	.loc	3 156 15                        # formatter.c3:156:15
	movq	%rax, -376(%rbp)
	jmp	.LBB5_44
.LBB5_39:
	movq	-384(%rbp), %rax
	movq	%rax, -3472(%rbp)               # 8-byte Spill
	jmp	.LBB5_43
.LBB5_40:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-8(%rbp), %rsi
	.loc	3 156 33                        # formatter.c3:156:33
	leaq	-392(%rbp), %rdi
	leaq	.L.str.23(%rip), %rdx
	movl	$11, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_42
# %bb.41:
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-3480(%rbp), %rax               # 8-byte Reload
	.loc	3 156 33                        # formatter.c3:156:33
	movq	%rax, -376(%rbp)
	jmp	.LBB5_44
.LBB5_42:
	movq	-392(%rbp), %rax
	movq	%rax, -3472(%rbp)               # 8-byte Spill
.LBB5_43:
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-3472(%rbp), %rcx               # 8-byte Reload
	.loc	3 156 33                        # formatter.c3:156:33
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 156 33 epilogue_begin         # formatter.c3:156:33
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_44:
	.cfi_def_cfa %rbp, 16
	movq	-376(%rbp), %rax
	.loc	3 156 33 epilogue_begin         # formatter.c3:156:33
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp322:
.LBB5_45:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 33                          # formatter.c3:0:33
	leaq	.L.str.24(%rip), %rax
	movq	%rax, -408(%rbp)
	movq	$30, -400(%rbp)
.Ltmp323:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-408(%rbp), %rdi
	movq	-400(%rbp), %rsi
	movq	$0, -416(%rbp)
	movq	$0, -424(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.25(%rip), %rdx
	movl	$12, %ecx
	leaq	.L.str.26(%rip), %r8
	movl	$17, %r9d
	leaq	-424(%rbp), %rax
	movl	$158, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp324:
.LBB5_46:
	.loc	3 161 23 is_stmt 1              # formatter.c3:161:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -428(%rbp)
	.loc	3 162 17                        # formatter.c3:162:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -432(%rbp)
	.loc	3 168 4                         # formatter.c3:168:4
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	.loc	3 169 4                         # formatter.c3:169:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
	.loc	3 170 11                        # formatter.c3:170:11
	leaq	-448(%rbp), %rdi
	movl	$10, %r8d
	callq	std.io.Formatter.ntoa_any
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_47
	jmp	.LBB5_48
.LBB5_47:
	movq	-448(%rbp), %rax
	movq	%rax, -3488(%rbp)               # 8-byte Spill
	jmp	.LBB5_51
.LBB5_48:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	.loc	3 170 37                        # formatter.c3:170:37
	leaq	-456(%rbp), %rdi
	leaq	.L.str.27(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3496(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_50
# %bb.49:
	.loc	3 0 37                          # formatter.c3:0:37
	movq	-3496(%rbp), %rax               # 8-byte Reload
	.loc	3 170 37                        # formatter.c3:170:37
	movq	%rax, -440(%rbp)
	jmp	.LBB5_52
.LBB5_50:
	movq	-456(%rbp), %rax
	movq	%rax, -3488(%rbp)               # 8-byte Spill
.LBB5_51:
	.loc	3 0 37                          # formatter.c3:0:37
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-3488(%rbp), %rcx               # 8-byte Reload
.Ltmp325:
	.loc	3 165 5 is_stmt 1               # formatter.c3:165:5
	movq	-8(%rbp), %rdx
	movl	-428(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 166 5                         # formatter.c3:166:5
	movq	-8(%rbp), %rdx
	movl	-432(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 166 5 epilogue_begin is_stmt 0 # formatter.c3:166:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp326:
.LBB5_52:
	.cfi_def_cfa %rbp, 16
	.loc	3 165 5 is_stmt 1               # formatter.c3:165:5
	movq	-8(%rbp), %rax
	movl	-428(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 166 5                         # formatter.c3:166:5
	movq	-8(%rbp), %rax
	movl	-432(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-440(%rbp), %rax
	.loc	3 166 5 epilogue_begin is_stmt 0 # formatter.c3:166:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp327:
.LBB5_53:
	.cfi_def_cfa %rbp, 16
	.loc	3 172 23 is_stmt 1              # formatter.c3:172:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -460(%rbp)
	.loc	3 173 17                        # formatter.c3:173:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -464(%rbp)
	.loc	3 179 4                         # formatter.c3:179:4
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	.loc	3 180 4                         # formatter.c3:180:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-24(%rbp), %rsi
	movq	-16(%rbp), %rdx
	.loc	3 181 21                        # formatter.c3:181:21
	leaq	-480(%rbp), %rdi
	callq	std.io.float_from_any
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_54
	jmp	.LBB5_56
.LBB5_54:
	.loc	3 0 21 is_stmt 0                # formatter.c3:0:21
	movq	-8(%rbp), %rsi
	vmovsd	-480(%rbp), %xmm0               # xmm0 = mem[0],zero
	.loc	3 181 11                        # formatter.c3:181:11
	leaq	-488(%rbp), %rdi
	callq	std.io.Formatter.ftoa@PLT
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_55
	jmp	.LBB5_56
.LBB5_55:
	movq	-488(%rbp), %rax
	movq	%rax, -3504(%rbp)               # 8-byte Spill
	jmp	.LBB5_59
.LBB5_56:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	.loc	3 181 45                        # formatter.c3:181:45
	leaq	-496(%rbp), %rdi
	leaq	.L.str.28(%rip), %rdx
	movl	$3, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -3512(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_58
# %bb.57:
	.loc	3 0 45                          # formatter.c3:0:45
	movq	-3512(%rbp), %rax               # 8-byte Reload
	.loc	3 181 45                        # formatter.c3:181:45
	movq	%rax, -472(%rbp)
	jmp	.LBB5_60
.LBB5_58:
	movq	-496(%rbp), %rax
	movq	%rax, -3504(%rbp)               # 8-byte Spill
.LBB5_59:
	.loc	3 0 45                          # formatter.c3:0:45
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-3504(%rbp), %rcx               # 8-byte Reload
.Ltmp328:
	.loc	3 176 5 is_stmt 1               # formatter.c3:176:5
	movq	-8(%rbp), %rdx
	movl	-460(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 177 5                         # formatter.c3:177:5
	movq	-8(%rbp), %rdx
	movl	-464(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 177 5 epilogue_begin is_stmt 0 # formatter.c3:177:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp329:
.LBB5_60:
	.cfi_def_cfa %rbp, 16
	.loc	3 176 5 is_stmt 1               # formatter.c3:176:5
	movq	-8(%rbp), %rax
	movl	-460(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 177 5                         # formatter.c3:177:5
	movq	-8(%rbp), %rax
	movl	-464(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-472(%rbp), %rax
	.loc	3 177 5 epilogue_begin is_stmt 0 # formatter.c3:177:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp330:
.LBB5_61:
	.cfi_def_cfa %rbp, 16
	.loc	3 183 35 is_stmt 1              # formatter.c3:183:35
	movq	-24(%rbp), %rax
	movq	%rax, -3520(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_487
# %bb.62:
	.loc	3 0 35 is_stmt 0                # formatter.c3:0:35
	movq	-3520(%rbp), %rax               # 8-byte Reload
	.loc	3 183 54                        # formatter.c3:183:54
	movzbl	(%rax), %eax
                                        # kill: def $rax killed $eax
	.loc	3 183 28                        # formatter.c3:183:28
	movb	%al, %sil
	.loc	3 183 54                        # formatter.c3:183:54
	leaq	.L.str.30(%rip), %rcx
	leaq	.L.str.31(%rip), %rdx
	testb	$1, %sil
	cmovneq	%rcx, %rdx
                                        # kill: def $eax killed $eax killed $rax
	andl	$1, %eax
	movl	%eax, %ecx
	xorq	$5, %rcx
	movq	-8(%rbp), %rsi
	.loc	3 183 11                        # formatter.c3:183:11
	leaq	-512(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -3528(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_64
# %bb.63:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3528(%rbp), %rax               # 8-byte Reload
	.loc	3 183 11                        # formatter.c3:183:11
	movq	%rax, -504(%rbp)
	jmp	.LBB5_65
.LBB5_64:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 183 11                        # formatter.c3:183:11
	movq	-512(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 183 11 epilogue_begin         # formatter.c3:183:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_65:
	.cfi_def_cfa %rbp, 16
	movq	-504(%rbp), %rax
	.loc	3 183 11 epilogue_begin         # formatter.c3:183:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp331:
.LBB5_66:
	.cfi_def_cfa %rbp, 16
	.loc	3 186 47 is_stmt 1              # formatter.c3:186:47
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -544(%rbp)
	movq	%rax, -552(%rbp)
	movq	-552(%rbp), %rdx
	movq	-544(%rbp), %rcx
	.loc	3 186 11 is_stmt 0              # formatter.c3:186:11
	leaq	-536(%rbp), %rdi
	callq	std.io.Formatter.print_with_function@PLT
	movq	%rax, -3536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_68
# %bb.67:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3536(%rbp), %rax               # 8-byte Reload
	.loc	3 186 11                        # formatter.c3:186:11
	movq	%rax, -528(%rbp)
	jmp	.LBB5_69
.LBB5_68:
	movq	-536(%rbp), %rax
	movq	%rax, -520(%rbp)
	movq	$0, -528(%rbp)
.LBB5_69:
	.loc	3 187 6 is_stmt 1               # formatter.c3:187:6
	cmpq	$0, -528(%rbp)
	jne	.LBB5_71
# %bb.70:
	.loc	3 0 6 is_stmt 0                 # formatter.c3:0:6
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 187 20                        # formatter.c3:187:20
	movq	-520(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 187 20 epilogue_begin         # formatter.c3:187:20
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_71:
	.cfi_def_cfa %rbp, 16
.Ltmp332:
	.loc	6 461 12 is_stmt 1              # builtin.c3:461:12
	jmp	.LBB5_72
.LBB5_72:
	.loc	6 461 16 is_stmt 0              # builtin.c3:461:16
	movq	-528(%rbp), %rax
	movq	%rax, -3544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_74
# %bb.73:
	.loc	6 0 16                          # builtin.c3:0:16
	movq	-3544(%rbp), %rax               # 8-byte Reload
	.loc	6 461 16                        # builtin.c3:461:16
	movq	%rax, -576(%rbp)
	jmp	.LBB5_75
.LBB5_74:
	movq	$0, -576(%rbp)
.LBB5_75:
	cmpq	$0, -576(%rbp)
	je	.LBB5_77
# %bb.76:
	.loc	6 461 30                        # builtin.c3:461:30
	movq	-576(%rbp), %rax
	movq	%rax, -568(%rbp)
	jmp	.LBB5_78
.LBB5_77:
	.loc	6 462 9 is_stmt 1               # builtin.c3:462:9
	movq	$0, -568(%rbp)
.Ltmp333:
.LBB5_78:
	.loc	3 188 6                         # formatter.c3:188:6
	movq	std.core.builtin.NOT_FOUND@GOTPCREL(%rip), %rax
	cmpq	%rax, -568(%rbp)
	je	.LBB5_84
# %bb.79:
	.loc	3 188 30 is_stmt 0              # formatter.c3:188:30
	movq	-528(%rbp), %rax
	movq	%rax, -3552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_81
# %bb.80:
	.loc	3 0 30                          # formatter.c3:0:30
	movq	-3552(%rbp), %rax               # 8-byte Reload
	.loc	3 188 30                        # formatter.c3:188:30
	movq	%rax, -584(%rbp)
	jmp	.LBB5_82
.LBB5_81:
	jmp	.LBB5_83
.LBB5_82:
	movq	-584(%rbp), %rax
	.loc	3 188 30 epilogue_begin         # formatter.c3:188:30
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_83:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB5_84
.LBB5_84:
.Ltmp334:
	.loc	3 189 10 is_stmt 1              # formatter.c3:189:10
	movq	-16(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -585(%rbp)
# %bb.85:
	.loc	3 0 10 is_stmt 0                # formatter.c3:0:10
	movb	-585(%rbp), %al
	addb	$-7, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -3560(%rbp)               # 8-byte Spill
	subb	$13, %al
	ja	.LBB5_476
# %bb.533:
	movq	-3560(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI5_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB5_86:
	movq	-24(%rbp), %rax
	movq	%rax, -624(%rbp)
	movq	-16(%rbp), %rax
	movq	%rax, -616(%rbp)
.Ltmp335:
	.loc	5 192 12 is_stmt 1              # types.c3:192:12
	movl	$3, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB5_88
# %bb.87:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$192, (%rsp)
	callq	*(%rax)
.LBB5_88:
	.loc	5 10 11                         # types.c3:10:11
	movq	-616(%rbp), %rax
	.loc	5 192 12                        # types.c3:192:12
	cmpb	$8, (%rax)
	je	.LBB5_90
# %bb.89:
	leaq	.panic_msg.33(%rip), %rdi
	movl	$67, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$192, (%rsp)
	callq	*(%rax)
.Ltmp336:
.LBB5_90:
	.loc	5 0 12 is_stmt 0                # types.c3:0:12
	leaq	-624(%rbp), %rax
	movq	%rax, -632(%rbp)
.Ltmp337:
	.loc	6 278 20 is_stmt 1              # builtin.c3:278:20
	cmpq	$0, -632(%rbp)
	jne	.LBB5_92
# %bb.91:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$278, (%rsp)                    # imm = 0x116
	callq	*(%rax)
.Ltmp338:
.LBB5_92:
	.loc	6 280 20                        # builtin.c3:280:20
	movq	-632(%rbp), %rax
	movq	%rax, -3568(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_488
# %bb.93:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-3568(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	andq	$7, %rax
	movq	%rax, -3576(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_489
# %bb.94:
	.loc	6 0 20                          # builtin.c3:0:20
	movq	-3568(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	movq	(%rax), %rax
	movq	%rax, -3592(%rbp)               # 8-byte Spill
	.loc	6 280 30                        # builtin.c3:280:30
	movq	-632(%rbp), %rax
	movq	%rax, -3584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_490
# %bb.95:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-3584(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	andq	$7, %rax
	movq	%rax, -3600(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_491
# %bb.96:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-3584(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	8(%rax), %rax
	movq	%rax, -3616(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -3601(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_105
# %bb.97:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$19, %al
	je	.LBB5_105
# %bb.98:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$17, %al
	je	.LBB5_105
# %bb.99:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$8, %al
	je	.LBB5_105
# %bb.100:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$16, %al
	je	.LBB5_105
# %bb.101:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$18, %al
	je	.LBB5_105
# %bb.102:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$9, %al
	je	.LBB5_105
# %bb.103:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-3601(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$12, %al
	je	.LBB5_105
# %bb.104:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_105:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-3592(%rbp), %rax               # 8-byte Reload
	movq	-3616(%rbp), %rcx               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	32(%rcx), %rcx
	movq	%rcx, -776(%rbp)
	movq	%rax, -784(%rbp)
.Ltmp339:
	.loc	5 14 9 is_stmt 1                # types.c3:14:9
	movl	$3, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB5_107
# %bb.106:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$14, (%rsp)
	callq	*(%rax)
.LBB5_107:
	.loc	5 19 11                         # types.c3:19:11
	movq	-776(%rbp), %rax
	.loc	5 14 9                          # types.c3:14:9
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB5_109
# %bb.108:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$14, (%rsp)
	callq	*(%rax)
.Ltmp340:
.LBB5_109:
	.loc	5 23 20                         # types.c3:23:20
	movq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-800(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -801(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-800(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$3, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -802(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movq	$-1, -816(%rbp)
	.loc	5 27 14                         # types.c3:27:14
	movq	$0, -824(%rbp)
	movq	-800(%rbp), %rax
	movq	%rax, -832(%rbp)
# %bb.110:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-832(%rbp), %rax
	movq	%rax, -3632(%rbp)               # 8-byte Spill
	movq	%rax, -3624(%rbp)               # 8-byte Spill
.LBB5_111:                              # =>This Inner Loop Header: Depth=1
	movq	-3624(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3648(%rbp)               # 8-byte Spill
.Ltmp341:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3633(%rbp)                # 1-byte Spill
	je	.LBB5_113
# %bb.112:                              #   in Loop: Header=BB5_111 Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3648(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3624(%rbp)               # 8-byte Spill
	movb	%al, -3633(%rbp)                # 1-byte Spill
	jne	.LBB5_111
.LBB5_113:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3633(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB5_114
	jmp	.LBB5_120
.LBB5_114:
.Ltmp342:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-784(%rbp), %rax
	movq	%rax, -3656(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_492
# %bb.115:
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-3656(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -833(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -3657(%rbp)                # 1-byte Spill
	je	.LBB5_117
# %bb.116:
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-833(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -3657(%rbp)                # 1-byte Spill
.LBB5_117:
	.loc	5 0 27                          # types.c3:0:27
	movb	-3657(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB5_118
	jmp	.LBB5_119
.LBB5_118:
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_119:
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbq	-833(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp343:
.LBB5_120:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3672(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB5_121
.LBB5_121:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3672(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3688(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3673(%rbp)                # 1-byte Spill
	je	.LBB5_123
# %bb.122:                              #   in Loop: Header=BB5_121 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3688(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3672(%rbp)               # 8-byte Spill
	movb	%al, -3673(%rbp)                # 1-byte Spill
	jne	.LBB5_121
.LBB5_123:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3673(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB5_124
	jmp	.LBB5_135
.LBB5_124:
.Ltmp344:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-784(%rbp), %rax
	movq	%rax, -3696(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_493
# %bb.125:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-3696(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -3704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_494
# %bb.126:
	.loc	5 0 15                          # types.c3:0:15
	movq	-3696(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -836(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -3705(%rbp)                # 1-byte Spill
	je	.LBB5_128
# %bb.127:
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-836(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -3705(%rbp)                # 1-byte Spill
.LBB5_128:
	.loc	5 0 27                          # types.c3:0:27
	movb	-3705(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB5_129
	jmp	.LBB5_130
.LBB5_129:
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_130:
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswq	-836(%rbp), %rax
	.loc	5 37 12 is_stmt 0               # types.c3:37:12
	movq	-816(%rbp), %rcx
	.loc	5 37 8                          # types.c3:37:8
	cmpq	%rcx, %rax
	setg	%al
	cmpq	$0, %rcx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -3706(%rbp)                # 1-byte Spill
	jne	.LBB5_132
# %bb.131:
	.loc	5 37 19                         # types.c3:37:19
	movswq	-836(%rbp), %rcx
	.loc	5 37 23                         # types.c3:37:23
	movq	-824(%rbp), %rax
	.loc	5 37 19                         # types.c3:37:19
	cmpq	%rax, %rcx
	setl	%cl
	cmpq	$0, %rax
	setl	%al
	orb	%cl, %al
	movb	%al, -3706(%rbp)                # 1-byte Spill
.LBB5_132:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3706(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB5_133
	jmp	.LBB5_134
.LBB5_133:
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_134:
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswq	-836(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp345:
.LBB5_135:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3720(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB5_136
.LBB5_136:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3720(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3736(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3721(%rbp)                # 1-byte Spill
	je	.LBB5_138
# %bb.137:                              #   in Loop: Header=BB5_136 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3736(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3720(%rbp)               # 8-byte Spill
	movb	%al, -3721(%rbp)                # 1-byte Spill
	jne	.LBB5_136
.LBB5_138:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3721(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB5_139
	jmp	.LBB5_150
.LBB5_139:
.Ltmp346:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-784(%rbp), %rax
	movq	%rax, -3744(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_495
# %bb.140:
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-3744(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -3752(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_496
# %bb.141:
	.loc	5 0 13                          # types.c3:0:13
	movq	-3744(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -916(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -3753(%rbp)                # 1-byte Spill
	je	.LBB5_143
# %bb.142:
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -916(%rbp)
	setl	%al
	movb	%al, -3753(%rbp)                # 1-byte Spill
.LBB5_143:
	.loc	5 0 27                          # types.c3:0:27
	movb	-3753(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB5_144
	jmp	.LBB5_145
.LBB5_144:
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_145:
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movslq	-916(%rbp), %rax
	.loc	5 42 12 is_stmt 0               # types.c3:42:12
	movq	-816(%rbp), %rcx
	.loc	5 42 8                          # types.c3:42:8
	cmpq	%rcx, %rax
	setg	%al
	cmpq	$0, %rcx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -3754(%rbp)                # 1-byte Spill
	jne	.LBB5_147
# %bb.146:
	.loc	5 42 19                         # types.c3:42:19
	movslq	-916(%rbp), %rcx
	.loc	5 42 23                         # types.c3:42:23
	movq	-824(%rbp), %rax
	.loc	5 42 19                         # types.c3:42:19
	cmpq	%rax, %rcx
	setl	%cl
	cmpq	$0, %rax
	setl	%al
	orb	%cl, %al
	movb	%al, -3754(%rbp)                # 1-byte Spill
.LBB5_147:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3754(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB5_148
	jmp	.LBB5_149
.LBB5_148:
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_149:
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movslq	-916(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp347:
.LBB5_150:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3768(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB5_151
.LBB5_151:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3768(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3784(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3769(%rbp)                # 1-byte Spill
	je	.LBB5_153
# %bb.152:                              #   in Loop: Header=BB5_151 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3784(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3768(%rbp)               # 8-byte Spill
	movb	%al, -3769(%rbp)                # 1-byte Spill
	jne	.LBB5_151
.LBB5_153:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3769(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB5_154
	jmp	.LBB5_165
.LBB5_154:
.Ltmp348:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-784(%rbp), %rax
	movq	%rax, -3792(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_497
# %bb.155:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-3792(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -3800(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_498
# %bb.156:
	.loc	5 0 14                          # types.c3:0:14
	movq	-3792(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -1000(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -3801(%rbp)                # 1-byte Spill
	je	.LBB5_158
# %bb.157:
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -1000(%rbp)
	setl	%al
	movb	%al, -3801(%rbp)                # 1-byte Spill
.LBB5_158:
	.loc	5 0 27                          # types.c3:0:27
	movb	-3801(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB5_159
	jmp	.LBB5_160
.LBB5_159:
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_160:
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-1000(%rbp), %rax
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movq	-816(%rbp), %rcx
	.loc	5 47 8                          # types.c3:47:8
	cmpq	%rcx, %rax
	setg	%al
	cmpq	$0, %rcx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -3802(%rbp)                # 1-byte Spill
	jne	.LBB5_162
# %bb.161:
	.loc	5 47 19                         # types.c3:47:19
	movq	-1000(%rbp), %rcx
	.loc	5 47 23                         # types.c3:47:23
	movq	-824(%rbp), %rax
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rax, %rcx
	setl	%cl
	cmpq	$0, %rax
	setl	%al
	orb	%cl, %al
	movb	%al, -3802(%rbp)                # 1-byte Spill
.LBB5_162:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3802(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB5_163
	jmp	.LBB5_164
.LBB5_163:
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_164:
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-1000(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp349:
.LBB5_165:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3816(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB5_166
.LBB5_166:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3816(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3832(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3817(%rbp)                # 1-byte Spill
	je	.LBB5_168
# %bb.167:                              #   in Loop: Header=BB5_166 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3832(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3816(%rbp)               # 8-byte Spill
	movb	%al, -3817(%rbp)                # 1-byte Spill
	jne	.LBB5_166
.LBB5_168:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3817(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB5_169
	jmp	.LBB5_180
.LBB5_169:
.Ltmp350:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-784(%rbp), %rax
	movq	%rax, -3840(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_499
# %bb.170:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-3840(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -3848(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_500
# %bb.171:
	.loc	5 0 16                          # types.c3:0:16
	movq	-3840(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1080(%rbp)
	movq	%rax, -1088(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -3849(%rbp)                # 1-byte Spill
	je	.LBB5_173
# %bb.172:
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-1080(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -3849(%rbp)                # 1-byte Spill
.LBB5_173:
	.loc	5 0 27                          # types.c3:0:27
	movb	-3849(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB5_174
	jmp	.LBB5_175
.LBB5_174:
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_175:
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-1088(%rbp), %rsi
	movq	-1080(%rbp), %rcx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movq	-816(%rbp), %rdx
	xorl	%eax, %eax
	.loc	5 52 8                          # types.c3:52:8
	subq	%rsi, %rdx
                                        # kill: def $rax killed $eax
	sbbq	%rcx, %rax
	setl	%al
	movb	$1, %cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -3850(%rbp)                # 1-byte Spill
	jne	.LBB5_177
# %bb.176:
	.loc	5 52 19                         # types.c3:52:19
	movq	-1088(%rbp), %rcx
	movq	-1080(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movq	-824(%rbp), %rdx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rdx, %rcx
	sbbq	$0, %rax
	setl	%cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	orb	%cl, %al
	movb	%al, -3850(%rbp)                # 1-byte Spill
.LBB5_177:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3850(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB5_178
	jmp	.LBB5_179
.LBB5_178:
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_179:
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movq	-1088(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp351:
.LBB5_180:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3864(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB5_181
.LBB5_181:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3864(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3880(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3865(%rbp)                # 1-byte Spill
	je	.LBB5_183
# %bb.182:                              #   in Loop: Header=BB5_181 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3880(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3864(%rbp)               # 8-byte Spill
	movb	%al, -3865(%rbp)                # 1-byte Spill
	jne	.LBB5_181
.LBB5_183:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3865(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB5_184
	jmp	.LBB5_188
.LBB5_184:
.Ltmp352:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-784(%rbp), %rax
	movq	%rax, -3888(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_501
# %bb.185:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-3888(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -1153(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-1153(%rbp), %eax
                                        # kill: def $rax killed $eax
	cmpq	-816(%rbp), %rax
	jbe	.LBB5_187
# %bb.186:
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_187:
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-1153(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp353:
.LBB5_188:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3896(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB5_189
.LBB5_189:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3896(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3912(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3897(%rbp)                # 1-byte Spill
	je	.LBB5_191
# %bb.190:                              #   in Loop: Header=BB5_189 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3912(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3896(%rbp)               # 8-byte Spill
	movb	%al, -3897(%rbp)                # 1-byte Spill
	jne	.LBB5_189
.LBB5_191:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3897(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB5_192
	jmp	.LBB5_199
.LBB5_192:
.Ltmp354:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-784(%rbp), %rax
	movq	%rax, -3920(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_502
# %bb.193:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-3920(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -3928(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_503
# %bb.194:
	.loc	5 0 16                          # types.c3:0:16
	movq	-3920(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -1156(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-1156(%rbp), %eax
	movl	%eax, %ecx
	movb	$1, %al
	cmpq	-816(%rbp), %rcx
	movb	%al, -3929(%rbp)                # 1-byte Spill
	ja	.LBB5_196
# %bb.195:
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-1156(%rbp), %eax
                                        # kill: def $rax killed $eax
	cmpq	-824(%rbp), %rax
	setb	%al
	movb	%al, -3929(%rbp)                # 1-byte Spill
.LBB5_196:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3929(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB5_197
	jmp	.LBB5_198
.LBB5_197:
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_198:
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-1156(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp355:
.LBB5_199:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3944(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB5_200
.LBB5_200:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3944(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3960(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3945(%rbp)                # 1-byte Spill
	je	.LBB5_202
# %bb.201:                              #   in Loop: Header=BB5_200 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-3960(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3944(%rbp)               # 8-byte Spill
	movb	%al, -3945(%rbp)                # 1-byte Spill
	jne	.LBB5_200
.LBB5_202:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3945(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB5_203
	jmp	.LBB5_210
.LBB5_203:
.Ltmp356:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-784(%rbp), %rax
	movq	%rax, -3968(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_504
# %bb.204:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-3968(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -3976(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_505
# %bb.205:
	.loc	5 0 14                          # types.c3:0:14
	movq	-3968(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -1236(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-1236(%rbp), %eax
	movl	%eax, %ecx
	movb	$1, %al
	cmpq	-816(%rbp), %rcx
	movb	%al, -3977(%rbp)                # 1-byte Spill
	ja	.LBB5_207
# %bb.206:
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-1236(%rbp), %eax
                                        # kill: def $rax killed $eax
	cmpq	-824(%rbp), %rax
	setb	%al
	movb	%al, -3977(%rbp)                # 1-byte Spill
.LBB5_207:
	.loc	5 0 19                          # types.c3:0:19
	movb	-3977(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB5_208
	jmp	.LBB5_209
.LBB5_208:
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_209:
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-1236(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp357:
.LBB5_210:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3992(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB5_211
.LBB5_211:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-3992(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -4008(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -3993(%rbp)                # 1-byte Spill
	je	.LBB5_213
# %bb.212:                              #   in Loop: Header=BB5_211 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-4008(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -3992(%rbp)               # 8-byte Spill
	movb	%al, -3993(%rbp)                # 1-byte Spill
	jne	.LBB5_211
.LBB5_213:
	.loc	5 0 8                           # types.c3:0:8
	movb	-3993(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB5_214
	jmp	.LBB5_221
.LBB5_214:
.Ltmp358:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-784(%rbp), %rax
	movq	%rax, -4016(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_506
# %bb.215:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-4016(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -4024(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_507
# %bb.216:
	.loc	5 0 15                          # types.c3:0:15
	movq	-4016(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -1320(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-1320(%rbp), %rcx
	movb	$1, %al
	cmpq	-816(%rbp), %rcx
	movb	%al, -4025(%rbp)                # 1-byte Spill
	ja	.LBB5_218
# %bb.217:
	.loc	5 68 19 is_stmt 0               # types.c3:68:19
	movq	-1320(%rbp), %rax
	cmpq	-824(%rbp), %rax
	setb	%al
	movb	%al, -4025(%rbp)                # 1-byte Spill
.LBB5_218:
	.loc	5 0 19                          # types.c3:0:19
	movb	-4025(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB5_219
	jmp	.LBB5_220
.LBB5_219:
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_220:
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-1320(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.Ltmp359:
.LBB5_221:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-3632(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4040(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB5_222
.LBB5_222:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-4040(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -4056(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -4041(%rbp)                # 1-byte Spill
	je	.LBB5_224
# %bb.223:                              #   in Loop: Header=BB5_222 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-4056(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -4040(%rbp)               # 8-byte Spill
	movb	%al, -4041(%rbp)                # 1-byte Spill
	jne	.LBB5_222
.LBB5_224:
	.loc	5 0 8                           # types.c3:0:8
	movb	-4041(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB5_225
	jmp	.LBB5_232
.LBB5_225:
.Ltmp360:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-784(%rbp), %rax
	movq	%rax, -4064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_508
# %bb.226:
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-4064(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -4072(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_509
# %bb.227:
	.loc	5 0 17                          # types.c3:0:17
	movq	-4064(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1400(%rbp)
	movq	%rax, -1408(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-1408(%rbp), %rdi
	movq	-1400(%rbp), %rdx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movq	-816(%rbp), %rsi
	movb	$1, %al
	xorl	%ecx, %ecx
	.loc	5 72 8                          # types.c3:72:8
	subq	%rdi, %rsi
                                        # kill: def $rcx killed $ecx
	sbbq	%rdx, %rcx
	movb	%al, -4073(%rbp)                # 1-byte Spill
	jb	.LBB5_229
	jmp	.LBB5_228
.LBB5_228:
	.loc	5 72 19                         # types.c3:72:19
	movq	-1408(%rbp), %rcx
	movq	-1400(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movq	-824(%rbp), %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rdx, %rcx
	sbbq	$0, %rax
	setb	%al
	movb	%al, -4073(%rbp)                # 1-byte Spill
.LBB5_229:
	.loc	5 0 19                          # types.c3:0:19
	movb	-4073(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB5_230
	jmp	.LBB5_231
.LBB5_230:
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -608(%rbp)
	jmp	.LBB5_235
.LBB5_231:
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movq	-1408(%rbp), %rax
	movq	%rax, -792(%rbp)
	jmp	.LBB5_234
.LBB5_232:
	jmp	.LBB5_233
.Ltmp361:
.LBB5_233:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.48(%rip), %rax
	movq	%rax, -1488(%rbp)
	movq	$30, -1480(%rbp)
.Ltmp362:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-1488(%rbp), %rdi
	movq	-1480(%rbp), %rsi
	movq	$0, -1496(%rbp)
	movq	$0, -1504(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.49(%rip), %rdx
	movl	$12, %ecx
	leaq	.L.str.50(%rip), %r8
	movl	$17, %r9d
	leaq	-1504(%rbp), %rax
	movl	$192, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_234:
	jmp	.LBB5_236
.LBB5_235:
	movq	($ct.fault)@GOTPCREL(%rip), %rax
	movq	%rax, -1512(%rbp)
	leaq	-608(%rbp), %rax
	movq	%rax, -1520(%rbp)
	leaq	-1520(%rbp), %rax
	movq	%rax, -1536(%rbp)
	movq	$1, -1528(%rbp)
.Ltmp363:
	.loc	3 192 12 is_stmt 1              # formatter.c3:192:12
	leaq	.panic_msg.51(%rip), %rdi
	movl	$36, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1536(%rbp), %rax
	movl	$192, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_236:
	movq	-792(%rbp), %rax
	movq	%rax, -600(%rbp)
	.loc	3 193 11                        # formatter.c3:193:11
	movq	-600(%rbp), %rax
	movq	%rax, -4096(%rbp)               # 8-byte Spill
	.loc	3 193 15 is_stmt 0              # formatter.c3:193:15
	movq	-16(%rbp), %rax
	movq	%rax, -4088(%rbp)               # 8-byte Spill
	cmpb	$8, (%rax)
	je	.LBB5_238
# %bb.237:
	leaq	.panic_msg.52(%rip), %rdi
	movl	$51, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$193, (%rsp)
	callq	*(%rax)
.LBB5_238:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-4096(%rbp), %rax               # 8-byte Reload
	movq	-4088(%rbp), %rdx               # 8-byte Reload
	.loc	3 193 15                        # formatter.c3:193:15
	movq	40(%rdx), %rcx
	addq	$48, %rdx
	.loc	3 193 11                        # formatter.c3:193:11
	cmpq	%rcx, %rax
	jb	.LBB5_240
# %bb.239:
	.loc	3 193 88                        # formatter.c3:193:88
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rax, -1544(%rbp)
	leaq	-600(%rbp), %rax
	movq	%rax, -1552(%rbp)
	leaq	-1552(%rbp), %rax
	movq	%rax, -1568(%rbp)
	movq	$1, -1560(%rbp)
	.loc	3 193 11                        # formatter.c3:193:11
	leaq	.panic_msg.53(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1568(%rbp), %rax
	movl	$193, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_240:
	.loc	3 194 27 is_stmt 1              # formatter.c3:194:27
	movq	-16(%rbp), %rax
	movq	%rax, -4104(%rbp)               # 8-byte Spill
	cmpb	$8, (%rax)
	je	.LBB5_242
# %bb.241:
	leaq	.panic_msg.52(%rip), %rdi
	movl	$51, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$194, (%rsp)
	callq	*(%rax)
.LBB5_242:
	.loc	3 0 27 is_stmt 0                # formatter.c3:0:27
	movq	-4104(%rbp), %rax               # 8-byte Reload
	.loc	3 194 27                        # formatter.c3:194:27
	movq	40(%rax), %rcx
	movq	%rcx, -4128(%rbp)               # 8-byte Spill
	addq	$48, %rax
	movq	%rax, -4120(%rbp)               # 8-byte Spill
	.loc	3 194 42                        # formatter.c3:194:42
	movq	-600(%rbp), %rax
	movq	%rax, -4112(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB5_510
# %bb.243:
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-4120(%rbp), %rax               # 8-byte Reload
	movq	-4112(%rbp), %rcx               # 8-byte Reload
	.loc	3 194 42                        # formatter.c3:194:42
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -4144(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -4136(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_511
# %bb.244:
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-4144(%rbp), %rax               # 8-byte Reload
	movq	-8(%rbp), %rsi
	movq	(%rax), %rdx
	movq	8(%rax), %rcx
	.loc	3 194 11                        # formatter.c3:194:11
	leaq	-1720(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -4152(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_246
# %bb.245:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-4152(%rbp), %rax               # 8-byte Reload
	.loc	3 194 11                        # formatter.c3:194:11
	movq	%rax, -1576(%rbp)
	jmp	.LBB5_247
.LBB5_246:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 194 11                        # formatter.c3:194:11
	movq	-1720(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 194 11 epilogue_begin         # formatter.c3:194:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_247:
	.cfi_def_cfa %rbp, 16
	movq	-1576(%rbp), %rax
	.loc	3 194 11 epilogue_begin         # formatter.c3:194:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp364:
.LBB5_248:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %r8
	movq	-16(%rbp), %r9
.Ltmp365:
	.loc	3 196 11 is_stmt 1              # formatter.c3:196:11
	leaq	-1736(%rbp), %rdi
	leaq	.L.str.55(%rip), %rdx
	movl	$6, %ecx
	callq	std.io.Formatter.out_unknown
	movq	%rax, -4160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_250
# %bb.249:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4160(%rbp), %rax               # 8-byte Reload
	.loc	3 196 11                        # formatter.c3:196:11
	movq	%rax, -1728(%rbp)
	jmp	.LBB5_251
.LBB5_250:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 196 11                        # formatter.c3:196:11
	movq	-1736(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 196 11 epilogue_begin         # formatter.c3:196:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_251:
	.cfi_def_cfa %rbp, 16
	movq	-1728(%rbp), %rax
	.loc	3 196 11 epilogue_begin         # formatter.c3:196:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp366:
.LBB5_252:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %r8
	movq	-16(%rbp), %r9
.Ltmp367:
	.loc	3 198 11 is_stmt 1              # formatter.c3:198:11
	leaq	-1752(%rbp), %rdi
	leaq	.L.str.56(%rip), %rdx
	movl	$5, %ecx
	callq	std.io.Formatter.out_unknown
	movq	%rax, -4168(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_254
# %bb.253:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4168(%rbp), %rax               # 8-byte Reload
	.loc	3 198 11                        # formatter.c3:198:11
	movq	%rax, -1744(%rbp)
	jmp	.LBB5_255
.LBB5_254:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 198 11                        # formatter.c3:198:11
	movq	-1752(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 198 11 epilogue_begin         # formatter.c3:198:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_255:
	.cfi_def_cfa %rbp, 16
	movq	-1744(%rbp), %rax
	.loc	3 198 11 epilogue_begin         # formatter.c3:198:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp368:
.LBB5_256:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %r8
	movq	-16(%rbp), %r9
.Ltmp369:
	.loc	3 200 11 is_stmt 1              # formatter.c3:200:11
	leaq	-1768(%rbp), %rdi
	leaq	.L.str.57(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_unknown
	movq	%rax, -4176(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_258
# %bb.257:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4176(%rbp), %rax               # 8-byte Reload
	.loc	3 200 11                        # formatter.c3:200:11
	movq	%rax, -1760(%rbp)
	jmp	.LBB5_259
.LBB5_258:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 200 11                        # formatter.c3:200:11
	movq	-1768(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 200 11 epilogue_begin         # formatter.c3:200:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_259:
	.cfi_def_cfa %rbp, 16
	movq	-1760(%rbp), %rax
	.loc	3 200 11 epilogue_begin         # formatter.c3:200:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp370:
.LBB5_260:
	.cfi_def_cfa %rbp, 16
	.loc	3 202 23 is_stmt 1              # formatter.c3:202:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -1772(%rbp)
	.loc	3 203 17                        # formatter.c3:203:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -1776(%rbp)
	.loc	3 209 4                         # formatter.c3:209:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-8(%rbp), %rsi
	.loc	3 210 11                        # formatter.c3:210:11
	leaq	-1800(%rbp), %rdi
	leaq	.L.str.58(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_262
# %bb.261:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4184(%rbp), %rax               # 8-byte Reload
	.loc	3 210 11                        # formatter.c3:210:11
	movq	%rax, -1792(%rbp)
	jmp	.LBB5_263
.LBB5_262:
	jmp	.LBB5_264
.LBB5_263:
.Ltmp371:
	.loc	3 206 5 is_stmt 1               # formatter.c3:206:5
	movq	-8(%rbp), %rax
	movl	-1772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 207 5                         # formatter.c3:207:5
	movq	-8(%rbp), %rax
	movl	-1776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-1792(%rbp), %rax
	.loc	3 207 5 epilogue_begin is_stmt 0 # formatter.c3:207:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_264:
	.cfi_def_cfa %rbp, 16
	movq	-1800(%rbp), %rax
	movq	%rax, -4200(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
.Ltmp372:
	.loc	3 210 36 is_stmt 1              # formatter.c3:210:36
	leaq	-1808(%rbp), %rdi
	movl	$16, %r8d
	callq	std.io.Formatter.ntoa_any
	movq	%rax, -4192(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_266
# %bb.265:
	.loc	3 0 36 is_stmt 0                # formatter.c3:0:36
	movq	-4192(%rbp), %rax               # 8-byte Reload
	.loc	3 210 36                        # formatter.c3:210:36
	movq	%rax, -1784(%rbp)
	jmp	.LBB5_267
.LBB5_266:
	.loc	3 0 36                          # formatter.c3:0:36
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-4200(%rbp), %rcx               # 8-byte Reload
	.loc	3 210 11                        # formatter.c3:210:11
	addq	-1808(%rbp), %rcx
.Ltmp373:
	.loc	3 206 5 is_stmt 1               # formatter.c3:206:5
	movq	-8(%rbp), %rdx
	movl	-1772(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 207 5                         # formatter.c3:207:5
	movq	-8(%rbp), %rdx
	movl	-1776(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 207 5 epilogue_begin is_stmt 0 # formatter.c3:207:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp374:
.LBB5_267:
	.cfi_def_cfa %rbp, 16
	.loc	3 206 5 is_stmt 1               # formatter.c3:206:5
	movq	-8(%rbp), %rax
	movl	-1772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 207 5                         # formatter.c3:207:5
	movq	-8(%rbp), %rax
	movl	-1776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-1784(%rbp), %rax
	.loc	3 207 5 epilogue_begin is_stmt 0 # formatter.c3:207:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp375:
.LBB5_268:
	.cfi_def_cfa %rbp, 16
	.loc	3 213 8 is_stmt 1               # formatter.c3:213:8
	movq	($ct.String)@GOTPCREL(%rip), %rax
	cmpq	%rax, -16(%rbp)
	jne	.LBB5_275
# %bb.269:
.Ltmp376:
	.loc	3 215 29                        # formatter.c3:215:29
	movq	-24(%rbp), %rax
	movq	%rax, -4208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_512
# %bb.270:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4208(%rbp), %rax               # 8-byte Reload
	.loc	3 215 29                        # formatter.c3:215:29
	andq	$7, %rax
	movq	%rax, -4216(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_513
# %bb.271:
	.loc	3 0 29                          # formatter.c3:0:29
	movq	-4208(%rbp), %rax               # 8-byte Reload
	movq	-8(%rbp), %rsi
	movq	(%rax), %rdx
	movq	8(%rax), %rcx
	.loc	3 215 12                        # formatter.c3:215:12
	leaq	-1896(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -4224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_273
# %bb.272:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-4224(%rbp), %rax               # 8-byte Reload
	.loc	3 215 12                        # formatter.c3:215:12
	movq	%rax, -1816(%rbp)
	jmp	.LBB5_274
.LBB5_273:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 215 12                        # formatter.c3:215:12
	movq	-1896(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 215 12 epilogue_begin         # formatter.c3:215:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_274:
	.cfi_def_cfa %rbp, 16
	movq	-1816(%rbp), %rax
	.loc	3 215 12 epilogue_begin         # formatter.c3:215:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp377:
.LBB5_275:
	.cfi_def_cfa %rbp, 16
	.loc	3 217 8 is_stmt 1               # formatter.c3:217:8
	movq	($ct.std.core.string.ZString)@GOTPCREL(%rip), %rax
	cmpq	%rax, -16(%rbp)
	jne	.LBB5_287
# %bb.276:
.Ltmp378:
	.loc	3 219 29                        # formatter.c3:219:29
	movq	-24(%rbp), %rax
	movq	%rax, -4232(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_514
# %bb.277:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4232(%rbp), %rax               # 8-byte Reload
	.loc	3 219 29                        # formatter.c3:219:29
	andq	$7, %rax
	movq	%rax, -4240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_515
# %bb.278:
	.loc	3 0 29                          # formatter.c3:0:29
	movq	-4232(%rbp), %rax               # 8-byte Reload
	.loc	3 219 29                        # formatter.c3:219:29
	cmpq	$0, (%rax)
	je	.LBB5_282
# %bb.279:
	.loc	3 219 46                        # formatter.c3:219:46
	movq	-24(%rbp), %rax
	movq	%rax, -4248(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_516
# %bb.280:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4248(%rbp), %rax               # 8-byte Reload
	.loc	3 219 46                        # formatter.c3:219:46
	andq	$7, %rax
	movq	%rax, -4256(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_517
# %bb.281:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4248(%rbp), %rax               # 8-byte Reload
	.loc	3 219 46                        # formatter.c3:219:46
	movq	(%rax), %rdi
	.loc	3 219 45                        # formatter.c3:219:45
	callq	std.core.string.ZString.str_view@PLT
	movq	%rdx, -2040(%rbp)
	movq	%rax, -2048(%rbp)
	movq	-2048(%rbp), %rcx
	movq	-2040(%rbp), %rax
	movq	%rcx, -4272(%rbp)               # 8-byte Spill
	movq	%rax, -4264(%rbp)               # 8-byte Spill
	jmp	.LBB5_283
.LBB5_282:
	.loc	3 0 45                          # formatter.c3:0:45
	movl	$6, %eax
	leaq	.L.str.61(%rip), %rcx
	movq	%rcx, -4272(%rbp)               # 8-byte Spill
	movq	%rax, -4264(%rbp)               # 8-byte Spill
	.loc	3 219 74                        # formatter.c3:219:74
	jmp	.LBB5_283
.LBB5_283:
	.loc	3 0 74                          # formatter.c3:0:74
	movq	-4272(%rbp), %rdx               # 8-byte Reload
	movq	-4264(%rbp), %rcx               # 8-byte Reload
	movq	-8(%rbp), %rsi
	.loc	3 219 12                        # formatter.c3:219:12
	leaq	-2056(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -4280(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_285
# %bb.284:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-4280(%rbp), %rax               # 8-byte Reload
	.loc	3 219 12                        # formatter.c3:219:12
	movq	%rax, -1904(%rbp)
	jmp	.LBB5_286
.LBB5_285:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 219 12                        # formatter.c3:219:12
	movq	-2056(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 219 12 epilogue_begin         # formatter.c3:219:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_286:
	.cfi_def_cfa %rbp, 16
	movq	-1904(%rbp), %rax
	.loc	3 219 12 epilogue_begin         # formatter.c3:219:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp379:
.LBB5_287:
	.cfi_def_cfa %rbp, 16
	.loc	3 221 8 is_stmt 1               # formatter.c3:221:8
	movq	($ct.std.core.dstring.DString)@GOTPCREL(%rip), %rax
	cmpq	%rax, -16(%rbp)
	jne	.LBB5_299
# %bb.288:
.Ltmp380:
	.loc	3 223 29                        # formatter.c3:223:29
	movq	-24(%rbp), %rax
	movq	%rax, -4288(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_518
# %bb.289:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4288(%rbp), %rax               # 8-byte Reload
	.loc	3 223 29                        # formatter.c3:223:29
	andq	$7, %rax
	movq	%rax, -4296(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_519
# %bb.290:
	.loc	3 0 29                          # formatter.c3:0:29
	movq	-4288(%rbp), %rax               # 8-byte Reload
	.loc	3 223 29                        # formatter.c3:223:29
	cmpq	$0, (%rax)
	je	.LBB5_294
# %bb.291:
	.loc	3 223 46                        # formatter.c3:223:46
	movq	-24(%rbp), %rax
	movq	%rax, -4304(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_520
# %bb.292:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4304(%rbp), %rax               # 8-byte Reload
	.loc	3 223 46                        # formatter.c3:223:46
	andq	$7, %rax
	movq	%rax, -4312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_521
# %bb.293:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4304(%rbp), %rax               # 8-byte Reload
	.loc	3 223 46                        # formatter.c3:223:46
	movq	(%rax), %rdi
	.loc	3 223 45                        # formatter.c3:223:45
	callq	std.core.dstring.DString.str_view@PLT
	movq	%rdx, -2200(%rbp)
	movq	%rax, -2208(%rbp)
	movq	-2208(%rbp), %rcx
	movq	-2200(%rbp), %rax
	movq	%rcx, -4328(%rbp)               # 8-byte Spill
	movq	%rax, -4320(%rbp)               # 8-byte Spill
	jmp	.LBB5_295
.LBB5_294:
	.loc	3 0 45                          # formatter.c3:0:45
	movl	$6, %eax
	leaq	.L.str.63(%rip), %rcx
	movq	%rcx, -4328(%rbp)               # 8-byte Spill
	movq	%rax, -4320(%rbp)               # 8-byte Spill
	.loc	3 223 74                        # formatter.c3:223:74
	jmp	.LBB5_295
.LBB5_295:
	.loc	3 0 74                          # formatter.c3:0:74
	movq	-4328(%rbp), %rdx               # 8-byte Reload
	movq	-4320(%rbp), %rcx               # 8-byte Reload
	movq	-8(%rbp), %rsi
	.loc	3 223 12                        # formatter.c3:223:12
	leaq	-2216(%rbp), %rdi
	callq	std.io.Formatter.out_substr
	movq	%rax, -4336(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_297
# %bb.296:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-4336(%rbp), %rax               # 8-byte Reload
	.loc	3 223 12                        # formatter.c3:223:12
	movq	%rax, -2064(%rbp)
	jmp	.LBB5_298
.LBB5_297:
	.loc	3 0 12                          # formatter.c3:0:12
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 223 12                        # formatter.c3:223:12
	movq	-2216(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 223 12 epilogue_begin         # formatter.c3:223:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_298:
	.cfi_def_cfa %rbp, 16
	movq	-2064(%rbp), %rax
	.loc	3 223 12 epilogue_begin         # formatter.c3:223:12
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp381:
.LBB5_299:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 12                          # formatter.c3:0:12
	leaq	-24(%rbp), %rax
	movq	%rax, -2232(%rbp)
.Ltmp382:
	.loc	6 278 20 is_stmt 1              # builtin.c3:278:20
	cmpq	$0, -2232(%rbp)
	jne	.LBB5_301
# %bb.300:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$278, (%rsp)                    # imm = 0x116
	callq	*(%rax)
.Ltmp383:
.LBB5_301:
	.loc	6 280 20                        # builtin.c3:280:20
	movq	-2232(%rbp), %rax
	movq	%rax, -4344(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_522
# %bb.302:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-4344(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	andq	$7, %rax
	movq	%rax, -4352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_523
# %bb.303:
	.loc	6 0 20                          # builtin.c3:0:20
	movq	-4344(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	movq	(%rax), %rax
	movq	%rax, -4368(%rbp)               # 8-byte Spill
	.loc	6 280 30                        # builtin.c3:280:30
	movq	-2232(%rbp), %rax
	movq	%rax, -4360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_524
# %bb.304:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-4360(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	andq	$7, %rax
	movq	%rax, -4376(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_525
# %bb.305:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-4360(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	8(%rax), %rax
	movq	%rax, -4392(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4377(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_314
# %bb.306:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$19, %al
	je	.LBB5_314
# %bb.307:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$17, %al
	je	.LBB5_314
# %bb.308:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$8, %al
	je	.LBB5_314
# %bb.309:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$16, %al
	je	.LBB5_314
# %bb.310:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$18, %al
	je	.LBB5_314
# %bb.311:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$9, %al
	je	.LBB5_314
# %bb.312:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-4377(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$12, %al
	je	.LBB5_314
# %bb.313:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_314:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-4368(%rbp), %rax               # 8-byte Reload
	movq	-4392(%rbp), %rcx               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	32(%rcx), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -2384(%rbp)
	movq	%rax, -2392(%rbp)
	movq	-2392(%rbp), %rdx
	movq	-2384(%rbp), %rcx
.Ltmp384:
	.loc	3 225 11 is_stmt 1              # formatter.c3:225:11
	leaq	-2376(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -4400(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_316
# %bb.315:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4400(%rbp), %rax               # 8-byte Reload
	.loc	3 225 11                        # formatter.c3:225:11
	movq	%rax, -2224(%rbp)
	jmp	.LBB5_317
.LBB5_316:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 225 11                        # formatter.c3:225:11
	movq	-2376(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 225 11 epilogue_begin         # formatter.c3:225:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_317:
	.cfi_def_cfa %rbp, 16
	movq	-2224(%rbp), %rax
	.loc	3 225 11 epilogue_begin         # formatter.c3:225:11
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp385:
.LBB5_318:
	.cfi_def_cfa %rbp, 16
	.loc	3 227 19 is_stmt 1              # formatter.c3:227:19
	movq	-16(%rbp), %rax
	movq	%rax, -4416(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4401(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_327
# %bb.319:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$19, %al
	je	.LBB5_327
# %bb.320:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$17, %al
	je	.LBB5_327
# %bb.321:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$8, %al
	je	.LBB5_327
# %bb.322:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$16, %al
	je	.LBB5_327
# %bb.323:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$18, %al
	je	.LBB5_327
# %bb.324:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$9, %al
	je	.LBB5_327
# %bb.325:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4401(%rbp), %al                # 1-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	cmpb	$12, %al
	je	.LBB5_327
# %bb.326:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$227, (%rsp)
	callq	*(%rax)
.LBB5_327:
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-4416(%rbp), %rax               # 8-byte Reload
	.loc	3 227 19                        # formatter.c3:227:19
	movq	32(%rax), %rax
	movq	%rax, -2400(%rbp)
	.loc	3 228 21 is_stmt 1              # formatter.c3:228:21
	movq	-24(%rbp), %rax
	movq	%rax, -2408(%rbp)
	.loc	3 229 8                         # formatter.c3:229:8
	movq	-16(%rbp), %rax
	movq	%rax, -4432(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4417(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_336
# %bb.328:
	.loc	3 0 8 is_stmt 0                 # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$19, %al
	je	.LBB5_336
# %bb.329:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$17, %al
	je	.LBB5_336
# %bb.330:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$8, %al
	je	.LBB5_336
# %bb.331:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$16, %al
	je	.LBB5_336
# %bb.332:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$18, %al
	je	.LBB5_336
# %bb.333:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$9, %al
	je	.LBB5_336
# %bb.334:
	.loc	3 0 8                           # formatter.c3:0:8
	movb	-4417(%rbp), %al                # 1-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	cmpb	$12, %al
	je	.LBB5_336
# %bb.335:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$229, (%rsp)
	callq	*(%rax)
.LBB5_336:
	.loc	3 0 8                           # formatter.c3:0:8
	movq	-4432(%rbp), %rax               # 8-byte Reload
	.loc	3 229 8                         # formatter.c3:229:8
	movq	($ct.void)@GOTPCREL(%rip), %rcx
	cmpq	%rcx, 32(%rax)
	je	.LBB5_358
# %bb.337:
.Ltmp386:
	.loc	3 231 27 is_stmt 1              # formatter.c3:231:27
	movq	-2408(%rbp), %rax
	movq	%rax, -4440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_526
# %bb.338:
	.loc	3 0 27 is_stmt 0                # formatter.c3:0:27
	movq	-4440(%rbp), %rax               # 8-byte Reload
	.loc	3 231 27                        # formatter.c3:231:27
	andq	$7, %rax
	movq	%rax, -4448(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_527
# %bb.339:
	.loc	3 0 27                          # formatter.c3:0:27
	movq	-4440(%rbp), %rax               # 8-byte Reload
	movq	(%rax), %rax
	movq	%rax, -2504(%rbp)
	movq	-2400(%rbp), %rax
	movq	%rax, -2512(%rbp)
.Ltmp387:
	.loc	6 270 20 is_stmt 1              # builtin.c3:270:20
	movq	-2504(%rbp), %rax
	.loc	6 270 25 is_stmt 0              # builtin.c3:270:25
	movq	-2512(%rbp), %rcx
	movq	%rcx, -2416(%rbp)
	movq	%rax, -2424(%rbp)
.Ltmp388:
	.loc	3 232 45 is_stmt 1              # formatter.c3:232:45
	movq	-2424(%rbp), %rax
	movq	-2416(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -2528(%rbp)
	movq	%rax, -2536(%rbp)
	movq	-2536(%rbp), %rdx
	movq	-2528(%rbp), %rcx
	.loc	3 232 9 is_stmt 0               # formatter.c3:232:9
	leaq	-2520(%rbp), %rdi
	callq	std.io.Formatter.print_with_function@PLT
	movq	%rax, -4456(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_341
# %bb.340:
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-4456(%rbp), %rax               # 8-byte Reload
	.loc	3 232 9                         # formatter.c3:232:9
	movq	%rax, -528(%rbp)
	jmp	.LBB5_342
.LBB5_341:
	movq	-2520(%rbp), %rax
	movq	%rax, -520(%rbp)
	movq	$0, -528(%rbp)
.LBB5_342:
	.loc	3 233 9 is_stmt 1               # formatter.c3:233:9
	cmpq	$0, -528(%rbp)
	jne	.LBB5_344
# %bb.343:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 233 23                        # formatter.c3:233:23
	movq	-520(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 233 23 epilogue_begin         # formatter.c3:233:23
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_344:
	.cfi_def_cfa %rbp, 16
.Ltmp389:
	.loc	6 461 12 is_stmt 1              # builtin.c3:461:12
	jmp	.LBB5_345
.LBB5_345:
	.loc	6 461 16 is_stmt 0              # builtin.c3:461:16
	movq	-528(%rbp), %rax
	movq	%rax, -4464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_347
# %bb.346:
	.loc	6 0 16                          # builtin.c3:0:16
	movq	-4464(%rbp), %rax               # 8-byte Reload
	.loc	6 461 16                        # builtin.c3:461:16
	movq	%rax, -2560(%rbp)
	jmp	.LBB5_348
.LBB5_347:
	movq	$0, -2560(%rbp)
.LBB5_348:
	cmpq	$0, -2560(%rbp)
	je	.LBB5_350
# %bb.349:
	.loc	6 461 30                        # builtin.c3:461:30
	movq	-2560(%rbp), %rax
	movq	%rax, -2552(%rbp)
	jmp	.LBB5_351
.LBB5_350:
	.loc	6 462 9 is_stmt 1               # builtin.c3:462:9
	movq	$0, -2552(%rbp)
.Ltmp390:
.LBB5_351:
	.loc	3 234 9                         # formatter.c3:234:9
	movq	std.core.builtin.NOT_FOUND@GOTPCREL(%rip), %rax
	cmpq	%rax, -2552(%rbp)
	je	.LBB5_357
# %bb.352:
	.loc	3 234 33 is_stmt 0              # formatter.c3:234:33
	movq	-528(%rbp), %rax
	movq	%rax, -4472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_354
# %bb.353:
	.loc	3 0 33                          # formatter.c3:0:33
	movq	-4472(%rbp), %rax               # 8-byte Reload
	.loc	3 234 33                        # formatter.c3:234:33
	movq	%rax, -2568(%rbp)
	jmp	.LBB5_355
.LBB5_354:
	jmp	.LBB5_356
.LBB5_355:
	movq	-2568(%rbp), %rax
	.loc	3 234 33 epilogue_begin         # formatter.c3:234:33
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_356:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB5_357
.LBB5_357:
	jmp	.LBB5_358
.Ltmp391:
.LBB5_358:
	.loc	3 236 23 is_stmt 1              # formatter.c3:236:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -2572(%rbp)
	.loc	3 237 17                        # formatter.c3:237:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -2576(%rbp)
	.loc	3 243 4                         # formatter.c3:243:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	-8(%rbp), %rsi
	.loc	3 244 11                        # formatter.c3:244:11
	leaq	-2600(%rbp), %rdi
	leaq	.L.str.65(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_360
# %bb.359:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-4480(%rbp), %rax               # 8-byte Reload
	.loc	3 244 11                        # formatter.c3:244:11
	movq	%rax, -2592(%rbp)
	jmp	.LBB5_361
.LBB5_360:
	jmp	.LBB5_362
.LBB5_361:
.Ltmp392:
	.loc	3 240 5 is_stmt 1               # formatter.c3:240:5
	movq	-8(%rbp), %rax
	movl	-2572(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 241 5                         # formatter.c3:241:5
	movq	-8(%rbp), %rax
	movl	-2576(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2592(%rbp), %rax
	.loc	3 241 5 epilogue_begin is_stmt 0 # formatter.c3:241:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_362:
	.cfi_def_cfa %rbp, 16
	movq	-2600(%rbp), %rax
	movq	%rax, -4496(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	movq	-24(%rbp), %rdx
	movq	-16(%rbp), %rcx
.Ltmp393:
	.loc	3 244 36 is_stmt 1              # formatter.c3:244:36
	leaq	-2608(%rbp), %rdi
	movl	$16, %r8d
	callq	std.io.Formatter.ntoa_any
	movq	%rax, -4488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_364
# %bb.363:
	.loc	3 0 36 is_stmt 0                # formatter.c3:0:36
	movq	-4488(%rbp), %rax               # 8-byte Reload
	.loc	3 244 36                        # formatter.c3:244:36
	movq	%rax, -2584(%rbp)
	jmp	.LBB5_365
.LBB5_364:
	.loc	3 0 36                          # formatter.c3:0:36
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-4496(%rbp), %rcx               # 8-byte Reload
	.loc	3 244 11                        # formatter.c3:244:11
	addq	-2608(%rbp), %rcx
.Ltmp394:
	.loc	3 240 5 is_stmt 1               # formatter.c3:240:5
	movq	-8(%rbp), %rdx
	movl	-2572(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 241 5                         # formatter.c3:241:5
	movq	-8(%rbp), %rdx
	movl	-2576(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 241 5 epilogue_begin is_stmt 0 # formatter.c3:241:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp395:
.LBB5_365:
	.cfi_def_cfa %rbp, 16
	.loc	3 240 5 is_stmt 1               # formatter.c3:240:5
	movq	-8(%rbp), %rax
	movl	-2572(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 241 5                         # formatter.c3:241:5
	movq	-8(%rbp), %rax
	movl	-2576(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2584(%rbp), %rax
	.loc	3 241 5 epilogue_begin is_stmt 0 # formatter.c3:241:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp396:
.LBB5_366:
	.cfi_def_cfa %rbp, 16
	.loc	3 247 23 is_stmt 1              # formatter.c3:247:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -2612(%rbp)
	.loc	3 248 17                        # formatter.c3:248:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -2616(%rbp)
	.loc	3 254 4                         # formatter.c3:254:4
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	.loc	3 255 4                         # formatter.c3:255:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	.loc	3 256 19                        # formatter.c3:256:19
	movq	-16(%rbp), %rax
	movq	%rax, -4512(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4497(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_375
# %bb.367:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$19, %al
	je	.LBB5_375
# %bb.368:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$17, %al
	je	.LBB5_375
# %bb.369:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$8, %al
	je	.LBB5_375
# %bb.370:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$16, %al
	je	.LBB5_375
# %bb.371:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$18, %al
	je	.LBB5_375
# %bb.372:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$9, %al
	je	.LBB5_375
# %bb.373:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4497(%rbp), %al                # 1-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	cmpb	$12, %al
	je	.LBB5_375
# %bb.374:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$256, (%rsp)                    # imm = 0x100
	callq	*(%rax)
.LBB5_375:
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-4512(%rbp), %rax               # 8-byte Reload
	.loc	3 256 19                        # formatter.c3:256:19
	movq	32(%rax), %rax
	movq	%rax, -2624(%rbp)
	.loc	3 257 15 is_stmt 1              # formatter.c3:257:15
	movq	-2624(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2632(%rbp)
	.loc	3 258 15                        # formatter.c3:258:15
	movq	-16(%rbp), %rax
	movq	%rax, -4528(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4513(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_380
# %bb.376:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movb	-4513(%rbp), %al                # 1-byte Reload
	.loc	3 258 15                        # formatter.c3:258:15
	cmpb	$17, %al
	je	.LBB5_380
# %bb.377:
	.loc	3 0 15                          # formatter.c3:0:15
	movb	-4513(%rbp), %al                # 1-byte Reload
	.loc	3 258 15                        # formatter.c3:258:15
	cmpb	$8, %al
	je	.LBB5_380
# %bb.378:
	.loc	3 0 15                          # formatter.c3:0:15
	movb	-4513(%rbp), %al                # 1-byte Reload
	.loc	3 258 15                        # formatter.c3:258:15
	cmpb	$16, %al
	je	.LBB5_380
# %bb.379:
	leaq	.panic_msg.66(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$258, (%rsp)                    # imm = 0x102
	callq	*(%rax)
.LBB5_380:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-4528(%rbp), %rax               # 8-byte Reload
	.loc	3 258 15                        # formatter.c3:258:15
	movq	40(%rax), %rax
	movq	%rax, -2640(%rbp)
	.loc	3 260 16 is_stmt 1              # formatter.c3:260:16
	movq	-24(%rbp), %rax
	movq	%rax, -2648(%rbp)
	movq	-8(%rbp), %rsi
	.loc	3 261 14                        # formatter.c3:261:14
	leaq	-2672(%rbp), %rdi
	movl	$91, %edx
	callq	std.io.Formatter.out
	movq	%rax, -4536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_382
# %bb.381:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-4536(%rbp), %rax               # 8-byte Reload
	.loc	3 261 14                        # formatter.c3:261:14
	movq	%rax, -2664(%rbp)
	jmp	.LBB5_383
.LBB5_382:
	jmp	.LBB5_384
.LBB5_383:
.Ltmp397:
	.loc	3 251 5 is_stmt 1               # formatter.c3:251:5
	movq	-8(%rbp), %rax
	movl	-2612(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 252 5                         # formatter.c3:252:5
	movq	-8(%rbp), %rax
	movl	-2616(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2664(%rbp), %rax
	.loc	3 252 5 epilogue_begin is_stmt 0 # formatter.c3:252:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_384:
	.cfi_def_cfa %rbp, 16
	movq	-2672(%rbp), %rax
	movq	%rax, -2656(%rbp)
.Ltmp398:
	.loc	3 262 17 is_stmt 1              # formatter.c3:262:17
	movq	$0, -2680(%rbp)
.LBB5_385:                              # =>This Inner Loop Header: Depth=1
	.loc	3 262 20 is_stmt 0              # formatter.c3:262:20
	movq	-2680(%rbp), %rax
	cmpq	-2640(%rbp), %rax
	jae	.LBB5_397
# %bb.386:                              #   in Loop: Header=BB5_385 Depth=1
.Ltmp399:
	.loc	3 264 9 is_stmt 1               # formatter.c3:264:9
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	-2680(%rbp), %rax
	je	.LBB5_392
# %bb.387:                              #   in Loop: Header=BB5_385 Depth=1
	.loc	3 264 17 is_stmt 0              # formatter.c3:264:17
	movq	-2656(%rbp), %rax
	movq	%rax, -4552(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 264 24                        # formatter.c3:264:24
	leaq	-2696(%rbp), %rdi
	leaq	.L.str.67(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_389
# %bb.388:
	.loc	3 0 24                          # formatter.c3:0:24
	movq	-4544(%rbp), %rax               # 8-byte Reload
	.loc	3 264 24                        # formatter.c3:264:24
	movq	%rax, -2688(%rbp)
	jmp	.LBB5_390
.LBB5_389:                              #   in Loop: Header=BB5_385 Depth=1
	jmp	.LBB5_391
.Ltmp400:
.LBB5_390:
	.loc	3 251 5 is_stmt 1               # formatter.c3:251:5
	movq	-8(%rbp), %rax
	movl	-2612(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 252 5                         # formatter.c3:252:5
	movq	-8(%rbp), %rax
	movl	-2616(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2688(%rbp), %rax
	.loc	3 252 5 epilogue_begin is_stmt 0 # formatter.c3:252:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp401:
.LBB5_391:                              #   in Loop: Header=BB5_385 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4552(%rbp), %rax               # 8-byte Reload
.Ltmp402:
	.loc	3 264 17 is_stmt 1              # formatter.c3:264:17
	addq	-2696(%rbp), %rax
	movq	%rax, -2656(%rbp)
.LBB5_392:                              #   in Loop: Header=BB5_385 Depth=1
	.loc	3 265 5                         # formatter.c3:265:5
	movq	-2656(%rbp), %rax
	movq	%rax, -4568(%rbp)               # 8-byte Spill
	movq	-2648(%rbp), %rax
	movq	%rax, -2712(%rbp)
	movq	-2624(%rbp), %rax
	movq	%rax, -2720(%rbp)
.Ltmp403:
	.loc	6 270 20                        # builtin.c3:270:20
	movq	-2712(%rbp), %rax
	.loc	6 270 25 is_stmt 0              # builtin.c3:270:25
	movq	-2720(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -2736(%rbp)
	movq	%rax, -2744(%rbp)
	movq	-2744(%rbp), %rdx
	movq	-2736(%rbp), %rcx
.Ltmp404:
	.loc	3 265 12 is_stmt 1              # formatter.c3:265:12
	leaq	-2728(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -4560(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_394
# %bb.393:
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-4560(%rbp), %rax               # 8-byte Reload
	.loc	3 265 12                        # formatter.c3:265:12
	movq	%rax, -2704(%rbp)
	jmp	.LBB5_395
.LBB5_394:                              #   in Loop: Header=BB5_385 Depth=1
	jmp	.LBB5_396
.Ltmp405:
.LBB5_395:
	.loc	3 251 5 is_stmt 1               # formatter.c3:251:5
	movq	-8(%rbp), %rax
	movl	-2612(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 252 5                         # formatter.c3:252:5
	movq	-8(%rbp), %rax
	movl	-2616(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2704(%rbp), %rax
	.loc	3 252 5 epilogue_begin is_stmt 0 # formatter.c3:252:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp406:
.LBB5_396:                              #   in Loop: Header=BB5_385 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4568(%rbp), %rax               # 8-byte Reload
.Ltmp407:
	.loc	3 265 5 is_stmt 1               # formatter.c3:265:5
	addq	-2728(%rbp), %rax
	movq	%rax, -2656(%rbp)
	.loc	3 266 5                         # formatter.c3:266:5
	movq	-2648(%rbp), %rax
	addq	-2632(%rbp), %rax
	movq	%rax, -2648(%rbp)
.Ltmp408:
	.loc	3 262 30                        # formatter.c3:262:30
	movq	-2680(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -2680(%rbp)
	jmp	.LBB5_385
.Ltmp409:
.LBB5_397:
	.loc	3 268 4                         # formatter.c3:268:4
	movq	-2656(%rbp), %rax
	movq	%rax, -4584(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 268 11 is_stmt 0              # formatter.c3:268:11
	leaq	-2760(%rbp), %rdi
	movl	$93, %edx
	callq	std.io.Formatter.out
	movq	%rax, -4576(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_399
# %bb.398:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-4576(%rbp), %rax               # 8-byte Reload
	.loc	3 268 11                        # formatter.c3:268:11
	movq	%rax, -2752(%rbp)
	jmp	.LBB5_400
.LBB5_399:
	jmp	.LBB5_401
.LBB5_400:
.Ltmp410:
	.loc	3 251 5 is_stmt 1               # formatter.c3:251:5
	movq	-8(%rbp), %rax
	movl	-2612(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 252 5                         # formatter.c3:252:5
	movq	-8(%rbp), %rax
	movl	-2616(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2752(%rbp), %rax
	.loc	3 252 5 epilogue_begin is_stmt 0 # formatter.c3:252:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp411:
.LBB5_401:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-4584(%rbp), %rcx               # 8-byte Reload
	.loc	3 268 4 is_stmt 1               # formatter.c3:268:4
	addq	-2760(%rbp), %rcx
	movq	%rcx, -2656(%rbp)
	.loc	3 269 11                        # formatter.c3:269:11
	movq	-2656(%rbp), %rcx
.Ltmp412:
	.loc	3 251 5                         # formatter.c3:251:5
	movq	-8(%rbp), %rdx
	movl	-2612(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 252 5                         # formatter.c3:252:5
	movq	-8(%rbp), %rdx
	movl	-2616(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 252 5 epilogue_begin is_stmt 0 # formatter.c3:252:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp413:
.LBB5_402:
	.cfi_def_cfa %rbp, 16
	.loc	3 271 23 is_stmt 1              # formatter.c3:271:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -2772(%rbp)
	.loc	3 272 17                        # formatter.c3:272:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -2776(%rbp)
	.loc	3 278 4                         # formatter.c3:278:4
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	.loc	3 279 4                         # formatter.c3:279:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	.loc	3 281 19                        # formatter.c3:281:19
	movq	-16(%rbp), %rax
	movq	%rax, -4600(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4585(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_411
# %bb.403:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$19, %al
	je	.LBB5_411
# %bb.404:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$17, %al
	je	.LBB5_411
# %bb.405:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$8, %al
	je	.LBB5_411
# %bb.406:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$16, %al
	je	.LBB5_411
# %bb.407:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$18, %al
	je	.LBB5_411
# %bb.408:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$9, %al
	je	.LBB5_411
# %bb.409:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4585(%rbp), %al                # 1-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	cmpb	$12, %al
	je	.LBB5_411
# %bb.410:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$281, (%rsp)                    # imm = 0x119
	callq	*(%rax)
.LBB5_411:
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-4600(%rbp), %rax               # 8-byte Reload
	.loc	3 281 19                        # formatter.c3:281:19
	movq	32(%rax), %rax
	movq	%rax, -2784(%rbp)
	.loc	3 282 15 is_stmt 1              # formatter.c3:282:15
	movq	-2784(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2792(%rbp)
	.loc	3 283 15                        # formatter.c3:283:15
	movq	-16(%rbp), %rax
	movq	%rax, -4616(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4601(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_416
# %bb.412:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movb	-4601(%rbp), %al                # 1-byte Reload
	.loc	3 283 15                        # formatter.c3:283:15
	cmpb	$17, %al
	je	.LBB5_416
# %bb.413:
	.loc	3 0 15                          # formatter.c3:0:15
	movb	-4601(%rbp), %al                # 1-byte Reload
	.loc	3 283 15                        # formatter.c3:283:15
	cmpb	$8, %al
	je	.LBB5_416
# %bb.414:
	.loc	3 0 15                          # formatter.c3:0:15
	movb	-4601(%rbp), %al                # 1-byte Reload
	.loc	3 283 15                        # formatter.c3:283:15
	cmpb	$16, %al
	je	.LBB5_416
# %bb.415:
	leaq	.panic_msg.66(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$283, (%rsp)                    # imm = 0x11B
	callq	*(%rax)
.LBB5_416:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-4616(%rbp), %rax               # 8-byte Reload
	.loc	3 283 15                        # formatter.c3:283:15
	movq	40(%rax), %rax
	movq	%rax, -2800(%rbp)
	.loc	3 285 16 is_stmt 1              # formatter.c3:285:16
	movq	-24(%rbp), %rax
	movq	%rax, -2808(%rbp)
	movq	-8(%rbp), %rsi
	.loc	3 286 14                        # formatter.c3:286:14
	leaq	-2832(%rbp), %rdi
	leaq	.L.str.68(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4624(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_418
# %bb.417:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-4624(%rbp), %rax               # 8-byte Reload
	.loc	3 286 14                        # formatter.c3:286:14
	movq	%rax, -2824(%rbp)
	jmp	.LBB5_419
.LBB5_418:
	jmp	.LBB5_420
.LBB5_419:
.Ltmp414:
	.loc	3 275 5 is_stmt 1               # formatter.c3:275:5
	movq	-8(%rbp), %rax
	movl	-2772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 276 5                         # formatter.c3:276:5
	movq	-8(%rbp), %rax
	movl	-2776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2824(%rbp), %rax
	.loc	3 276 5 epilogue_begin is_stmt 0 # formatter.c3:276:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_420:
	.cfi_def_cfa %rbp, 16
	movq	-2832(%rbp), %rax
	movq	%rax, -2816(%rbp)
.Ltmp415:
	.loc	3 287 17 is_stmt 1              # formatter.c3:287:17
	movq	$0, -2840(%rbp)
.LBB5_421:                              # =>This Inner Loop Header: Depth=1
	.loc	3 287 20 is_stmt 0              # formatter.c3:287:20
	movq	-2840(%rbp), %rax
	cmpq	-2800(%rbp), %rax
	jae	.LBB5_433
# %bb.422:                              #   in Loop: Header=BB5_421 Depth=1
.Ltmp416:
	.loc	3 289 9 is_stmt 1               # formatter.c3:289:9
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	-2840(%rbp), %rax
	je	.LBB5_428
# %bb.423:                              #   in Loop: Header=BB5_421 Depth=1
	.loc	3 289 17 is_stmt 0              # formatter.c3:289:17
	movq	-2816(%rbp), %rax
	movq	%rax, -4640(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 289 24                        # formatter.c3:289:24
	leaq	-2856(%rbp), %rdi
	leaq	.L.str.69(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_425
# %bb.424:
	.loc	3 0 24                          # formatter.c3:0:24
	movq	-4632(%rbp), %rax               # 8-byte Reload
	.loc	3 289 24                        # formatter.c3:289:24
	movq	%rax, -2848(%rbp)
	jmp	.LBB5_426
.LBB5_425:                              #   in Loop: Header=BB5_421 Depth=1
	jmp	.LBB5_427
.Ltmp417:
.LBB5_426:
	.loc	3 275 5 is_stmt 1               # formatter.c3:275:5
	movq	-8(%rbp), %rax
	movl	-2772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 276 5                         # formatter.c3:276:5
	movq	-8(%rbp), %rax
	movl	-2776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2848(%rbp), %rax
	.loc	3 276 5 epilogue_begin is_stmt 0 # formatter.c3:276:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp418:
.LBB5_427:                              #   in Loop: Header=BB5_421 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4640(%rbp), %rax               # 8-byte Reload
.Ltmp419:
	.loc	3 289 17 is_stmt 1              # formatter.c3:289:17
	addq	-2856(%rbp), %rax
	movq	%rax, -2816(%rbp)
.LBB5_428:                              #   in Loop: Header=BB5_421 Depth=1
	.loc	3 290 5                         # formatter.c3:290:5
	movq	-2816(%rbp), %rax
	movq	%rax, -4656(%rbp)               # 8-byte Spill
	movq	-2808(%rbp), %rax
	movq	%rax, -2872(%rbp)
	movq	-2784(%rbp), %rax
	movq	%rax, -2880(%rbp)
.Ltmp420:
	.loc	6 270 20                        # builtin.c3:270:20
	movq	-2872(%rbp), %rax
	.loc	6 270 25 is_stmt 0              # builtin.c3:270:25
	movq	-2880(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -2896(%rbp)
	movq	%rax, -2904(%rbp)
	movq	-2904(%rbp), %rdx
	movq	-2896(%rbp), %rcx
.Ltmp421:
	.loc	3 290 12 is_stmt 1              # formatter.c3:290:12
	leaq	-2888(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -4648(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_430
# %bb.429:
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-4648(%rbp), %rax               # 8-byte Reload
	.loc	3 290 12                        # formatter.c3:290:12
	movq	%rax, -2864(%rbp)
	jmp	.LBB5_431
.LBB5_430:                              #   in Loop: Header=BB5_421 Depth=1
	jmp	.LBB5_432
.Ltmp422:
.LBB5_431:
	.loc	3 275 5 is_stmt 1               # formatter.c3:275:5
	movq	-8(%rbp), %rax
	movl	-2772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 276 5                         # formatter.c3:276:5
	movq	-8(%rbp), %rax
	movl	-2776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2864(%rbp), %rax
	.loc	3 276 5 epilogue_begin is_stmt 0 # formatter.c3:276:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp423:
.LBB5_432:                              #   in Loop: Header=BB5_421 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4656(%rbp), %rax               # 8-byte Reload
.Ltmp424:
	.loc	3 290 5 is_stmt 1               # formatter.c3:290:5
	addq	-2888(%rbp), %rax
	movq	%rax, -2816(%rbp)
	.loc	3 291 5                         # formatter.c3:291:5
	movq	-2808(%rbp), %rax
	addq	-2792(%rbp), %rax
	movq	%rax, -2808(%rbp)
.Ltmp425:
	.loc	3 287 30                        # formatter.c3:287:30
	movq	-2840(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -2840(%rbp)
	jmp	.LBB5_421
.Ltmp426:
.LBB5_433:
	.loc	3 293 4                         # formatter.c3:293:4
	movq	-2816(%rbp), %rax
	movq	%rax, -4672(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 293 11 is_stmt 0              # formatter.c3:293:11
	leaq	-2920(%rbp), %rdi
	leaq	.L.str.70(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4664(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_435
# %bb.434:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-4664(%rbp), %rax               # 8-byte Reload
	.loc	3 293 11                        # formatter.c3:293:11
	movq	%rax, -2912(%rbp)
	jmp	.LBB5_436
.LBB5_435:
	jmp	.LBB5_437
.LBB5_436:
.Ltmp427:
	.loc	3 275 5 is_stmt 1               # formatter.c3:275:5
	movq	-8(%rbp), %rax
	movl	-2772(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 276 5                         # formatter.c3:276:5
	movq	-8(%rbp), %rax
	movl	-2776(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-2912(%rbp), %rax
	.loc	3 276 5 epilogue_begin is_stmt 0 # formatter.c3:276:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp428:
.LBB5_437:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-4672(%rbp), %rcx               # 8-byte Reload
	.loc	3 293 4 is_stmt 1               # formatter.c3:293:4
	addq	-2920(%rbp), %rcx
	movq	%rcx, -2816(%rbp)
	.loc	3 294 11                        # formatter.c3:294:11
	movq	-2816(%rbp), %rcx
.Ltmp429:
	.loc	3 275 5                         # formatter.c3:275:5
	movq	-8(%rbp), %rdx
	movl	-2772(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 276 5                         # formatter.c3:276:5
	movq	-8(%rbp), %rdx
	movl	-2776(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 276 5 epilogue_begin is_stmt 0 # formatter.c3:276:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp430:
.LBB5_438:
	.cfi_def_cfa %rbp, 16
	.loc	3 297 19 is_stmt 1              # formatter.c3:297:19
	movq	-16(%rbp), %rax
	movq	%rax, -4688(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -4673(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB5_447
# %bb.439:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$19, %al
	je	.LBB5_447
# %bb.440:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$17, %al
	je	.LBB5_447
# %bb.441:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$8, %al
	je	.LBB5_447
# %bb.442:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$16, %al
	je	.LBB5_447
# %bb.443:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$18, %al
	je	.LBB5_447
# %bb.444:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$9, %al
	je	.LBB5_447
# %bb.445:
	.loc	3 0 19                          # formatter.c3:0:19
	movb	-4673(%rbp), %al                # 1-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	cmpb	$12, %al
	je	.LBB5_447
# %bb.446:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$297, (%rsp)                    # imm = 0x129
	callq	*(%rax)
.LBB5_447:
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-4688(%rbp), %rax               # 8-byte Reload
	.loc	3 297 19                        # formatter.c3:297:19
	movq	32(%rax), %rax
	movq	%rax, -2936(%rbp)
	.loc	3 298 8 is_stmt 1               # formatter.c3:298:8
	movq	($ct.void)@GOTPCREL(%rip), %rax
	cmpq	%rax, -2936(%rbp)
	jne	.LBB5_449
# %bb.448:
	.loc	3 298 38 is_stmt 0              # formatter.c3:298:38
	movq	($ct.char)@GOTPCREL(%rip), %rax
	movq	%rax, -2936(%rbp)
.LBB5_449:
	.loc	3 299 23 is_stmt 1              # formatter.c3:299:23
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	movl	%eax, -2940(%rbp)
	.loc	3 300 17                        # formatter.c3:300:17
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movl	%eax, -2944(%rbp)
	.loc	3 306 4                         # formatter.c3:306:4
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
	.loc	3 307 4                         # formatter.c3:307:4
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	.loc	3 308 15                        # formatter.c3:308:15
	movq	-2936(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -2952(%rbp)
	.loc	3 310 19                        # formatter.c3:310:19
	movq	-24(%rbp), %rax
	movq	%rax, -2960(%rbp)
	.loc	3 311 23                        # formatter.c3:311:23
	movq	-2960(%rbp), %rax
	movq	%rax, -4696(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_528
# %bb.450:
	.loc	3 0 23 is_stmt 0                # formatter.c3:0:23
	movq	-4696(%rbp), %rax               # 8-byte Reload
	.loc	3 311 23                        # formatter.c3:311:23
	andq	$7, %rax
	movq	%rax, -4704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_529
# %bb.451:
	.loc	3 0 23                          # formatter.c3:0:23
	movq	-4696(%rbp), %rax               # 8-byte Reload
	.loc	3 311 23                        # formatter.c3:311:23
	movq	(%rax), %rax
	movq	%rax, -2968(%rbp)
	.loc	3 312 15 is_stmt 1              # formatter.c3:312:15
	movq	-2960(%rbp), %rax
	movq	%rax, -4712(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_530
# %bb.452:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4712(%rbp), %rax               # 8-byte Reload
	.loc	3 312 15                        # formatter.c3:312:15
	andq	$7, %rax
	movq	%rax, -4720(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB5_531
# %bb.453:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-4712(%rbp), %rax               # 8-byte Reload
	.loc	3 312 15                        # formatter.c3:312:15
	movq	8(%rax), %rax
	movq	%rax, -3048(%rbp)
	movq	-8(%rbp), %rsi
	.loc	3 313 14 is_stmt 1              # formatter.c3:313:14
	leaq	-3144(%rbp), %rdi
	movl	$91, %edx
	callq	std.io.Formatter.out
	movq	%rax, -4728(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_455
# %bb.454:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-4728(%rbp), %rax               # 8-byte Reload
	.loc	3 313 14                        # formatter.c3:313:14
	movq	%rax, -3136(%rbp)
	jmp	.LBB5_456
.LBB5_455:
	jmp	.LBB5_457
.LBB5_456:
.Ltmp431:
	.loc	3 303 5 is_stmt 1               # formatter.c3:303:5
	movq	-8(%rbp), %rax
	movl	-2940(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 304 5                         # formatter.c3:304:5
	movq	-8(%rbp), %rax
	movl	-2944(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-3136(%rbp), %rax
	.loc	3 304 5 epilogue_begin is_stmt 0 # formatter.c3:304:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_457:
	.cfi_def_cfa %rbp, 16
	movq	-3144(%rbp), %rax
	movq	%rax, -3128(%rbp)
.Ltmp432:
	.loc	3 314 17 is_stmt 1              # formatter.c3:314:17
	movq	$0, -3152(%rbp)
.LBB5_458:                              # =>This Inner Loop Header: Depth=1
	.loc	3 314 20 is_stmt 0              # formatter.c3:314:20
	movq	-3152(%rbp), %rax
	cmpq	-3048(%rbp), %rax
	jae	.LBB5_470
# %bb.459:                              #   in Loop: Header=BB5_458 Depth=1
.Ltmp433:
	.loc	3 316 9 is_stmt 1               # formatter.c3:316:9
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	-3152(%rbp), %rax
	je	.LBB5_465
# %bb.460:                              #   in Loop: Header=BB5_458 Depth=1
	.loc	3 316 17 is_stmt 0              # formatter.c3:316:17
	movq	-3128(%rbp), %rax
	movq	%rax, -4744(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 316 24                        # formatter.c3:316:24
	leaq	-3168(%rbp), %rdi
	leaq	.L.str.72(%rip), %rdx
	movl	$2, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4736(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_462
# %bb.461:
	.loc	3 0 24                          # formatter.c3:0:24
	movq	-4736(%rbp), %rax               # 8-byte Reload
	.loc	3 316 24                        # formatter.c3:316:24
	movq	%rax, -3160(%rbp)
	jmp	.LBB5_463
.LBB5_462:                              #   in Loop: Header=BB5_458 Depth=1
	jmp	.LBB5_464
.Ltmp434:
.LBB5_463:
	.loc	3 303 5 is_stmt 1               # formatter.c3:303:5
	movq	-8(%rbp), %rax
	movl	-2940(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 304 5                         # formatter.c3:304:5
	movq	-8(%rbp), %rax
	movl	-2944(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-3160(%rbp), %rax
	.loc	3 304 5 epilogue_begin is_stmt 0 # formatter.c3:304:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp435:
.LBB5_464:                              #   in Loop: Header=BB5_458 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4744(%rbp), %rax               # 8-byte Reload
.Ltmp436:
	.loc	3 316 17 is_stmt 1              # formatter.c3:316:17
	addq	-3168(%rbp), %rax
	movq	%rax, -3128(%rbp)
.LBB5_465:                              #   in Loop: Header=BB5_458 Depth=1
	.loc	3 317 5                         # formatter.c3:317:5
	movq	-3128(%rbp), %rax
	movq	%rax, -4760(%rbp)               # 8-byte Spill
	movq	-2968(%rbp), %rax
	movq	%rax, -3184(%rbp)
	movq	-2936(%rbp), %rax
	movq	%rax, -3192(%rbp)
.Ltmp437:
	.loc	6 270 20                        # builtin.c3:270:20
	movq	-3184(%rbp), %rax
	.loc	6 270 25 is_stmt 0              # builtin.c3:270:25
	movq	-3192(%rbp), %rcx
	movq	-8(%rbp), %rsi
	movq	%rcx, -3208(%rbp)
	movq	%rax, -3216(%rbp)
	movq	-3216(%rbp), %rdx
	movq	-3208(%rbp), %rcx
.Ltmp438:
	.loc	3 317 12 is_stmt 1              # formatter.c3:317:12
	leaq	-3200(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -4752(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_467
# %bb.466:
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-4752(%rbp), %rax               # 8-byte Reload
	.loc	3 317 12                        # formatter.c3:317:12
	movq	%rax, -3176(%rbp)
	jmp	.LBB5_468
.LBB5_467:                              #   in Loop: Header=BB5_458 Depth=1
	jmp	.LBB5_469
.Ltmp439:
.LBB5_468:
	.loc	3 303 5 is_stmt 1               # formatter.c3:303:5
	movq	-8(%rbp), %rax
	movl	-2940(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 304 5                         # formatter.c3:304:5
	movq	-8(%rbp), %rax
	movl	-2944(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-3176(%rbp), %rax
	.loc	3 304 5 epilogue_begin is_stmt 0 # formatter.c3:304:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp440:
.LBB5_469:                              #   in Loop: Header=BB5_458 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-4760(%rbp), %rax               # 8-byte Reload
.Ltmp441:
	.loc	3 317 5 is_stmt 1               # formatter.c3:317:5
	addq	-3200(%rbp), %rax
	movq	%rax, -3128(%rbp)
	.loc	3 318 5                         # formatter.c3:318:5
	movq	-2968(%rbp), %rax
	addq	-2952(%rbp), %rax
	movq	%rax, -2968(%rbp)
.Ltmp442:
	.loc	3 314 30                        # formatter.c3:314:30
	movq	-3152(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3152(%rbp)
	jmp	.LBB5_458
.Ltmp443:
.LBB5_470:
	.loc	3 320 4                         # formatter.c3:320:4
	movq	-3128(%rbp), %rax
	movq	%rax, -4776(%rbp)               # 8-byte Spill
	movq	-8(%rbp), %rsi
	.loc	3 320 11 is_stmt 0              # formatter.c3:320:11
	leaq	-3232(%rbp), %rdi
	movl	$93, %edx
	callq	std.io.Formatter.out
	movq	%rax, -4768(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_472
# %bb.471:
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-4768(%rbp), %rax               # 8-byte Reload
	.loc	3 320 11                        # formatter.c3:320:11
	movq	%rax, -3224(%rbp)
	jmp	.LBB5_473
.LBB5_472:
	jmp	.LBB5_474
.LBB5_473:
.Ltmp444:
	.loc	3 303 5 is_stmt 1               # formatter.c3:303:5
	movq	-8(%rbp), %rax
	movl	-2940(%rbp), %ecx
	movl	%ecx, 16(%rax)
	.loc	3 304 5                         # formatter.c3:304:5
	movq	-8(%rbp), %rax
	movl	-2944(%rbp), %ecx
	movl	%ecx, 20(%rax)
	movq	-3224(%rbp), %rax
	.loc	3 304 5 epilogue_begin is_stmt 0 # formatter.c3:304:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp445:
.LBB5_474:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	movq	-3320(%rbp), %rax               # 8-byte Reload
	movq	-4776(%rbp), %rcx               # 8-byte Reload
	.loc	3 320 4 is_stmt 1               # formatter.c3:320:4
	addq	-3232(%rbp), %rcx
	movq	%rcx, -3128(%rbp)
	.loc	3 321 11                        # formatter.c3:321:11
	movq	-3128(%rbp), %rcx
.Ltmp446:
	.loc	3 303 5                         # formatter.c3:303:5
	movq	-8(%rbp), %rdx
	movl	-2940(%rbp), %esi
	movl	%esi, 16(%rdx)
	.loc	3 304 5                         # formatter.c3:304:5
	movq	-8(%rbp), %rdx
	movl	-2944(%rbp), %esi
	movl	%esi, 20(%rdx)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 304 5 epilogue_begin is_stmt 0 # formatter.c3:304:5
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp447:
.LBB5_475:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 5                           # formatter.c3:0:5
	leaq	.L.str.73(%rip), %rax
	movq	%rax, -3256(%rbp)
	movq	$15, -3248(%rbp)
.Ltmp448:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-3256(%rbp), %rdi
	movq	-3248(%rbp), %rsi
	movq	$0, -3264(%rbp)
	movq	$0, -3272(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.74(%rip), %rdx
	movl	$12, %ecx
	leaq	.L.str.75(%rip), %r8
	movl	$17, %r9d
	leaq	-3272(%rbp), %rax
	movl	$324, (%rsp)                    # imm = 0x144
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp449:
.LBB5_476:
	.loc	6 0 2                           # builtin.c3:0:2
	movq	-8(%rbp), %rsi
	.loc	3 327 9 is_stmt 1               # formatter.c3:327:9
	leaq	-3288(%rbp), %rdi
	leaq	.L.str.76(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -4784(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB5_478
# %bb.477:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-4784(%rbp), %rax               # 8-byte Reload
	.loc	3 327 9                         # formatter.c3:327:9
	movq	%rax, -3280(%rbp)
	jmp	.LBB5_479
.LBB5_478:
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-3320(%rbp), %rax               # 8-byte Reload
	.loc	3 327 9                         # formatter.c3:327:9
	movq	-3288(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 327 9 epilogue_begin          # formatter.c3:327:9
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_479:
	.cfi_def_cfa %rbp, 16
	movq	-3280(%rbp), %rax
	.loc	3 327 9 epilogue_begin          # formatter.c3:327:9
	addq	$4816, %rsp                     # imm = 0x12D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_480:
	.cfi_def_cfa %rbp, 16
	.loc	3 140 27 is_stmt 1              # formatter.c3:140:27
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$140, (%rsp)
	callq	*(%rax)
.LBB5_481:
.Ltmp450:
	.loc	3 149 15                        # formatter.c3:149:15
	leaq	.panic_msg.19(%rip), %rdi
	movl	$56, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$149, (%rsp)
	callq	*(%rax)
.LBB5_482:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-3360(%rbp), %rcx               # 8-byte Reload
	movq	$8, -80(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -88(%rbp)
	movq	%rax, -120(%rbp)
	leaq	-80(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	%rax, -104(%rbp)
	leaq	-88(%rbp), %rax
	movq	%rax, -112(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, -144(%rbp)
	movq	$2, -136(%rbp)
	.loc	3 149 15                        # formatter.c3:149:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-144(%rbp), %rax
	movl	$149, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp451:
.LBB5_483:
	.loc	3 152 13 is_stmt 1              # formatter.c3:152:13
	leaq	.panic_msg.21(%rip), %rdi
	movl	$50, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$152, (%rsp)
	callq	*(%rax)
.LBB5_484:
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-3416(%rbp), %rcx               # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	3 152 13                        # formatter.c3:152:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-256(%rbp), %rax
	movl	$152, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp452:
.LBB5_485:
	.loc	3 155 13 is_stmt 1              # formatter.c3:155:13
	leaq	.panic_msg.21(%rip), %rdi
	movl	$50, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB5_486:
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-3456(%rbp), %rcx               # 8-byte Reload
	movq	$8, -304(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -312(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, -352(%rbp)
	movq	%rax, -328(%rbp)
	leaq	-312(%rbp), %rax
	movq	%rax, -336(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	$2, -360(%rbp)
	.loc	3 155 13                        # formatter.c3:155:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-368(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp453:
.LBB5_487:
	.loc	3 183 28 is_stmt 1              # formatter.c3:183:28
	leaq	.panic_msg.29(%rip), %rdi
	movl	$55, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$183, (%rsp)
	callq	*(%rax)
.Ltmp454:
.LBB5_488:
	.loc	6 280 20                        # builtin.c3:280:20
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_489:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-3576(%rbp), %rcx               # 8-byte Reload
	movq	$8, -640(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -648(%rbp)
	movq	%rax, -680(%rbp)
	leaq	-640(%rbp), %rcx
	movq	%rcx, -688(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-648(%rbp), %rax
	movq	%rax, -672(%rbp)
	leaq	-688(%rbp), %rax
	movq	%rax, -704(%rbp)
	movq	$2, -696(%rbp)
	.loc	6 280 20                        # builtin.c3:280:20
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-704(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_490:
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_491:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-3600(%rbp), %rcx               # 8-byte Reload
	movq	$8, -712(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -720(%rbp)
	movq	%rax, -744(%rbp)
	leaq	-712(%rbp), %rcx
	movq	%rcx, -752(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-720(%rbp), %rax
	movq	%rax, -736(%rbp)
	leaq	-752(%rbp), %rax
	movq	%rax, -768(%rbp)
	movq	$2, -760(%rbp)
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-768(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp455:
.LBB5_492:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp456:
.LBB5_493:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB5_494:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-3704(%rbp), %rcx               # 8-byte Reload
	movq	$2, -848(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -856(%rbp)
	movq	%rax, -888(%rbp)
	leaq	-848(%rbp), %rcx
	movq	%rcx, -896(%rbp)
	movq	%rax, -872(%rbp)
	leaq	-856(%rbp), %rax
	movq	%rax, -880(%rbp)
	leaq	-896(%rbp), %rax
	movq	%rax, -912(%rbp)
	movq	$2, -904(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-912(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp457:
.LBB5_495:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB5_496:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-3752(%rbp), %rcx               # 8-byte Reload
	movq	$4, -928(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -936(%rbp)
	movq	%rax, -968(%rbp)
	leaq	-928(%rbp), %rcx
	movq	%rcx, -976(%rbp)
	movq	%rax, -952(%rbp)
	leaq	-936(%rbp), %rax
	movq	%rax, -960(%rbp)
	leaq	-976(%rbp), %rax
	movq	%rax, -992(%rbp)
	movq	$2, -984(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-992(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp458:
.LBB5_497:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB5_498:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-3800(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1008(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1016(%rbp)
	movq	%rax, -1048(%rbp)
	leaq	-1008(%rbp), %rcx
	movq	%rcx, -1056(%rbp)
	movq	%rax, -1032(%rbp)
	leaq	-1016(%rbp), %rax
	movq	%rax, -1040(%rbp)
	leaq	-1056(%rbp), %rax
	movq	%rax, -1072(%rbp)
	movq	$2, -1064(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1072(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp459:
.LBB5_499:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB5_500:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-3848(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1096(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1104(%rbp)
	movq	%rax, -1128(%rbp)
	leaq	-1096(%rbp), %rcx
	movq	%rcx, -1136(%rbp)
	movq	%rax, -1112(%rbp)
	leaq	-1104(%rbp), %rax
	movq	%rax, -1120(%rbp)
	leaq	-1136(%rbp), %rax
	movq	%rax, -1152(%rbp)
	movq	$2, -1144(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1152(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp460:
.LBB5_501:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp461:
.LBB5_502:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB5_503:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-3928(%rbp), %rcx               # 8-byte Reload
	movq	$2, -1168(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1176(%rbp)
	movq	%rax, -1208(%rbp)
	leaq	-1168(%rbp), %rcx
	movq	%rcx, -1216(%rbp)
	movq	%rax, -1192(%rbp)
	leaq	-1176(%rbp), %rax
	movq	%rax, -1200(%rbp)
	leaq	-1216(%rbp), %rax
	movq	%rax, -1232(%rbp)
	movq	$2, -1224(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1232(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp462:
.LBB5_504:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB5_505:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-3976(%rbp), %rcx               # 8-byte Reload
	movq	$4, -1248(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1256(%rbp)
	movq	%rax, -1288(%rbp)
	leaq	-1248(%rbp), %rcx
	movq	%rcx, -1296(%rbp)
	movq	%rax, -1272(%rbp)
	leaq	-1256(%rbp), %rax
	movq	%rax, -1280(%rbp)
	leaq	-1296(%rbp), %rax
	movq	%rax, -1312(%rbp)
	movq	$2, -1304(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1312(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp463:
.LBB5_506:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB5_507:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-4024(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1328(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1336(%rbp)
	movq	%rax, -1368(%rbp)
	leaq	-1328(%rbp), %rcx
	movq	%rcx, -1376(%rbp)
	movq	%rax, -1352(%rbp)
	leaq	-1336(%rbp), %rax
	movq	%rax, -1360(%rbp)
	leaq	-1376(%rbp), %rax
	movq	%rax, -1392(%rbp)
	movq	$2, -1384(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1392(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp464:
.LBB5_508:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB5_509:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-4072(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1416(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1424(%rbp)
	movq	%rax, -1448(%rbp)
	leaq	-1416(%rbp), %rcx
	movq	%rcx, -1456(%rbp)
	movq	%rax, -1432(%rbp)
	leaq	-1424(%rbp), %rax
	movq	%rax, -1440(%rbp)
	leaq	-1456(%rbp), %rax
	movq	%rax, -1472(%rbp)
	movq	$2, -1464(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1472(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp465:
.LBB5_510:
	.loc	5 0 17                          # types.c3:0:17
	movq	-4112(%rbp), %rcx               # 8-byte Reload
	movq	-4128(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1584(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1592(%rbp)
	movq	%rax, -1624(%rbp)
	leaq	-1584(%rbp), %rcx
	movq	%rcx, -1632(%rbp)
	movq	%rax, -1608(%rbp)
	leaq	-1592(%rbp), %rax
	movq	%rax, -1616(%rbp)
	leaq	-1632(%rbp), %rax
	movq	%rax, -1648(%rbp)
	movq	$2, -1640(%rbp)
	.loc	3 194 42 is_stmt 1              # formatter.c3:194:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1648(%rbp), %rax
	movl	$194, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_511:
	.loc	3 0 42 is_stmt 0                # formatter.c3:0:42
	movq	-4136(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1656(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1664(%rbp)
	movq	%rax, -1688(%rbp)
	leaq	-1656(%rbp), %rcx
	movq	%rcx, -1696(%rbp)
	movq	%rax, -1672(%rbp)
	leaq	-1664(%rbp), %rax
	movq	%rax, -1680(%rbp)
	leaq	-1696(%rbp), %rax
	movq	%rax, -1712(%rbp)
	movq	$2, -1704(%rbp)
	.loc	3 194 27                        # formatter.c3:194:27
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1712(%rbp), %rax
	movl	$194, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp466:
.LBB5_512:
	.loc	3 215 29 is_stmt 1              # formatter.c3:215:29
	leaq	.panic_msg.59(%rip), %rdi
	movl	$53, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$215, (%rsp)
	callq	*(%rax)
.LBB5_513:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4216(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1824(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1832(%rbp)
	movq	%rax, -1864(%rbp)
	leaq	-1824(%rbp), %rcx
	movq	%rcx, -1872(%rbp)
	movq	%rax, -1848(%rbp)
	leaq	-1832(%rbp), %rax
	movq	%rax, -1856(%rbp)
	leaq	-1872(%rbp), %rax
	movq	%rax, -1888(%rbp)
	movq	$2, -1880(%rbp)
	.loc	3 215 29                        # formatter.c3:215:29
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1888(%rbp), %rax
	movl	$215, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp467:
.LBB5_514:
	.loc	3 219 29 is_stmt 1              # formatter.c3:219:29
	leaq	.panic_msg.60(%rip), %rdi
	movl	$54, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$219, (%rsp)
	callq	*(%rax)
.LBB5_515:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4240(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1912(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1920(%rbp)
	movq	%rax, -1944(%rbp)
	leaq	-1912(%rbp), %rcx
	movq	%rcx, -1952(%rbp)
	movq	%rax, -1928(%rbp)
	leaq	-1920(%rbp), %rax
	movq	%rax, -1936(%rbp)
	leaq	-1952(%rbp), %rax
	movq	%rax, -1968(%rbp)
	movq	$2, -1960(%rbp)
	.loc	3 219 29                        # formatter.c3:219:29
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-1968(%rbp), %rax
	movl	$219, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_516:
	.loc	3 219 46                        # formatter.c3:219:46
	leaq	.panic_msg.60(%rip), %rdi
	movl	$54, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$219, (%rsp)
	callq	*(%rax)
.LBB5_517:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4256(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1976(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1984(%rbp)
	movq	%rax, -2008(%rbp)
	leaq	-1976(%rbp), %rcx
	movq	%rcx, -2016(%rbp)
	movq	%rax, -1992(%rbp)
	leaq	-1984(%rbp), %rax
	movq	%rax, -2000(%rbp)
	leaq	-2016(%rbp), %rax
	movq	%rax, -2032(%rbp)
	movq	$2, -2024(%rbp)
	.loc	3 219 46                        # formatter.c3:219:46
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2032(%rbp), %rax
	movl	$219, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp468:
.LBB5_518:
	.loc	3 223 29 is_stmt 1              # formatter.c3:223:29
	leaq	.panic_msg.62(%rip), %rdi
	movl	$54, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$223, (%rsp)
	callq	*(%rax)
.LBB5_519:
	.loc	3 0 29 is_stmt 0                # formatter.c3:0:29
	movq	-4296(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2072(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2080(%rbp)
	movq	%rax, -2104(%rbp)
	leaq	-2072(%rbp), %rcx
	movq	%rcx, -2112(%rbp)
	movq	%rax, -2088(%rbp)
	leaq	-2080(%rbp), %rax
	movq	%rax, -2096(%rbp)
	leaq	-2112(%rbp), %rax
	movq	%rax, -2128(%rbp)
	movq	$2, -2120(%rbp)
	.loc	3 223 29                        # formatter.c3:223:29
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2128(%rbp), %rax
	movl	$223, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_520:
	.loc	3 223 46                        # formatter.c3:223:46
	leaq	.panic_msg.62(%rip), %rdi
	movl	$54, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$223, (%rsp)
	callq	*(%rax)
.LBB5_521:
	.loc	3 0 46                          # formatter.c3:0:46
	movq	-4312(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2136(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2144(%rbp)
	movq	%rax, -2168(%rbp)
	leaq	-2136(%rbp), %rcx
	movq	%rcx, -2176(%rbp)
	movq	%rax, -2152(%rbp)
	leaq	-2144(%rbp), %rax
	movq	%rax, -2160(%rbp)
	leaq	-2176(%rbp), %rax
	movq	%rax, -2192(%rbp)
	movq	$2, -2184(%rbp)
	.loc	3 223 46                        # formatter.c3:223:46
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2192(%rbp), %rax
	movl	$223, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp469:
.LBB5_522:
	.loc	6 280 20 is_stmt 1              # builtin.c3:280:20
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_523:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-4352(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2240(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2248(%rbp)
	movq	%rax, -2280(%rbp)
	leaq	-2240(%rbp), %rcx
	movq	%rcx, -2288(%rbp)
	movq	%rax, -2264(%rbp)
	leaq	-2248(%rbp), %rax
	movq	%rax, -2272(%rbp)
	leaq	-2288(%rbp), %rax
	movq	%rax, -2304(%rbp)
	movq	$2, -2296(%rbp)
	.loc	6 280 20                        # builtin.c3:280:20
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2304(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_524:
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB5_525:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-4376(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2312(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2320(%rbp)
	movq	%rax, -2344(%rbp)
	leaq	-2312(%rbp), %rcx
	movq	%rcx, -2352(%rbp)
	movq	%rax, -2328(%rbp)
	leaq	-2320(%rbp), %rax
	movq	%rax, -2336(%rbp)
	leaq	-2352(%rbp), %rax
	movq	%rax, -2368(%rbp)
	movq	$2, -2360(%rbp)
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2368(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp470:
.LBB5_526:
	.loc	3 231 27 is_stmt 1              # formatter.c3:231:27
	leaq	.panic_msg.64(%rip), %rdi
	movl	$48, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$231, (%rsp)
	callq	*(%rax)
.LBB5_527:
	.loc	3 0 27 is_stmt 0                # formatter.c3:0:27
	movq	-4448(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2432(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2440(%rbp)
	movq	%rax, -2472(%rbp)
	leaq	-2432(%rbp), %rcx
	movq	%rcx, -2480(%rbp)
	movq	%rax, -2456(%rbp)
	leaq	-2440(%rbp), %rax
	movq	%rax, -2464(%rbp)
	leaq	-2480(%rbp), %rax
	movq	%rax, -2496(%rbp)
	movq	$2, -2488(%rbp)
	.loc	3 231 27                        # formatter.c3:231:27
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-2496(%rbp), %rax
	movl	$231, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp471:
.LBB5_528:
	.loc	3 311 23 is_stmt 1              # formatter.c3:311:23
	leaq	.panic_msg.71(%rip), %rdi
	movl	$45, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$311, (%rsp)                    # imm = 0x137
	callq	*(%rax)
.LBB5_529:
	.loc	3 0 23 is_stmt 0                # formatter.c3:0:23
	movq	-4704(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2976(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2984(%rbp)
	movq	%rax, -3016(%rbp)
	leaq	-2976(%rbp), %rcx
	movq	%rcx, -3024(%rbp)
	movq	%rax, -3000(%rbp)
	leaq	-2984(%rbp), %rax
	movq	%rax, -3008(%rbp)
	leaq	-3024(%rbp), %rax
	movq	%rax, -3040(%rbp)
	movq	$2, -3032(%rbp)
	.loc	3 311 23                        # formatter.c3:311:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-3040(%rbp), %rax
	movl	$311, (%rsp)                    # imm = 0x137
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB5_530:
	.loc	3 312 15 is_stmt 1              # formatter.c3:312:15
	leaq	.panic_msg.71(%rip), %rdi
	movl	$45, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$312, (%rsp)                    # imm = 0x138
	callq	*(%rax)
.LBB5_531:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4720(%rbp), %rcx               # 8-byte Reload
	movq	$8, -3056(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3064(%rbp)
	movq	%rax, -3096(%rbp)
	leaq	-3056(%rbp), %rcx
	movq	%rcx, -3104(%rbp)
	movq	%rax, -3080(%rbp)
	leaq	-3064(%rbp), %rax
	movq	%rax, -3088(%rbp)
	leaq	-3104(%rbp), %rax
	movq	%rax, -3120(%rbp)
	movq	$2, -3112(%rbp)
	.loc	3 312 15                        # formatter.c3:312:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.16(%rip), %r8
	movl	$7, %r9d
	leaq	-3120(%rbp), %rax
	movl	$312, (%rsp)                    # imm = 0x138
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp472:
.Lfunc_end5:
	.size	std.io.Formatter.out_str, .Lfunc_end5-std.io.Formatter.out_str
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI5_0:
	.long	.LBB5_7-.LJTI5_0
	.long	.LBB5_61-.LJTI5_0
	.long	.LBB5_46-.LJTI5_0
	.long	.LBB5_46-.LJTI5_0
	.long	.LBB5_53-.LJTI5_0
	.long	.LBB5_3-.LJTI5_0
	.long	.LBB5_11-.LJTI5_0
	.long	.LBB5_34-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_45-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_66-.LJTI5_0
	.long	.LBB5_23-.LJTI5_0
.LJTI5_1:
	.long	.LBB5_475-.LJTI5_1
	.long	.LBB5_86-.LJTI5_1
	.long	.LBB5_268-.LJTI5_1
	.long	.LBB5_248-.LJTI5_1
	.long	.LBB5_252-.LJTI5_1
	.long	.LBB5_256-.LJTI5_1
	.long	.LBB5_260-.LJTI5_1
	.long	.LBB5_476-.LJTI5_1
	.long	.LBB5_366-.LJTI5_1
	.long	.LBB5_438-.LJTI5_1
	.long	.LBB5_402-.LJTI5_1
	.long	.LBB5_268-.LJTI5_1
	.long	.LBB5_318-.LJTI5_1
	.long	.LBB5_475-.LJTI5_1
                                        # -- End function
	.section	.text.std.io.Formatter.vprintf,"axG",@progbits,std.io.Formatter.vprintf,comdat
	.weak	std.io.Formatter.vprintf        # -- Begin function std.io.Formatter.vprintf
	.p2align	4, 0x90
	.type	std.io.Formatter.vprintf,@function
std.io.Formatter.vprintf:               # @std.io.Formatter.vprintf
.Lfunc_begin6:
	.loc	3 362 0 is_stmt 1               # formatter.c3:362:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$8208, %rsp                     # imm = 0x2010
	movq	%rdi, -5744(%rbp)               # 8-byte Spill
	movq	%rsi, -5736(%rbp)               # 8-byte Spill
	movq	%rdx, -5728(%rbp)               # 8-byte Spill
	movq	%rcx, -5720(%rbp)               # 8-byte Spill
	movq	%r8, -5712(%rbp)                # 8-byte Spill
	movq	%r9, -5704(%rbp)                # 8-byte Spill
.Ltmp473:
	.loc	3 363 1 prologue_end            # formatter.c3:363:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB6_851
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-5704(%rbp), %rax               # 8-byte Reload
	movq	-5712(%rbp), %rcx               # 8-byte Reload
	movq	-5720(%rbp), %rdx               # 8-byte Reload
	movq	-5728(%rbp), %rsi               # 8-byte Reload
	movq	-5736(%rbp), %rdi               # 8-byte Reload
	movq	%rdi, -3696(%rbp)
	movq	%rsi, -3712(%rbp)
	movq	%rdx, -3704(%rbp)
	movq	%rcx, -3728(%rbp)
	movq	%rax, -3720(%rbp)
	.loc	3 364 2 is_stmt 1               # formatter.c3:364:2
	movq	-3696(%rbp), %rax
	movq	$0, 32(%rax)
	.loc	3 365 7                         # formatter.c3:365:7
	movq	-3696(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB6_3
# %bb.2:
.Ltmp474:
	.loc	3 368 3                         # formatter.c3:368:3
	movq	-3696(%rbp), %rax
	leaq	std.io.out_null_fn(%rip), %rcx
	movq	%rcx, 8(%rax)
.Ltmp475:
.LBB6_3:
	.loc	3 370 6                         # formatter.c3:370:6
	movq	$0, -3736(%rbp)
	.loc	3 371 19                        # formatter.c3:371:19
	movq	-3704(%rbp), %rax
	movq	%rax, -3744(%rbp)
	.loc	3 372 22                        # formatter.c3:372:22
	movq	$0, -3752(%rbp)
.Ltmp476:
	.loc	3 373 15                        # formatter.c3:373:15
	movq	$0, -3760(%rbp)
.LBB6_4:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB6_23 Depth 2
                                        #     Child Loop BB6_43 Depth 2
                                        #     Child Loop BB6_76 Depth 2
                                        #     Child Loop BB6_86 Depth 2
                                        #     Child Loop BB6_101 Depth 2
                                        #     Child Loop BB6_116 Depth 2
                                        #     Child Loop BB6_131 Depth 2
                                        #     Child Loop BB6_146 Depth 2
                                        #     Child Loop BB6_154 Depth 2
                                        #     Child Loop BB6_165 Depth 2
                                        #     Child Loop BB6_176 Depth 2
                                        #     Child Loop BB6_187 Depth 2
                                        #     Child Loop BB6_254 Depth 2
                                        #     Child Loop BB6_287 Depth 2
                                        #     Child Loop BB6_297 Depth 2
                                        #     Child Loop BB6_312 Depth 2
                                        #     Child Loop BB6_327 Depth 2
                                        #     Child Loop BB6_342 Depth 2
                                        #     Child Loop BB6_357 Depth 2
                                        #     Child Loop BB6_365 Depth 2
                                        #     Child Loop BB6_376 Depth 2
                                        #     Child Loop BB6_387 Depth 2
                                        #     Child Loop BB6_398 Depth 2
                                        #     Child Loop BB6_759 Depth 2
                                        #     Child Loop BB6_780 Depth 2
                                        #     Child Loop BB6_622 Depth 2
                                        #     Child Loop BB6_626 Depth 2
                                        #     Child Loop BB6_679 Depth 2
                                        #     Child Loop BB6_700 Depth 2
                                        #     Child Loop BB6_717 Depth 2
                                        #     Child Loop BB6_732 Depth 2
	.loc	3 373 18 is_stmt 0              # formatter.c3:373:18
	movq	-3760(%rbp), %rax
	cmpq	-3744(%rbp), %rax
	jae	.LBB6_848
# %bb.5:                                #   in Loop: Header=BB6_4 Depth=1
.Ltmp477:
	.loc	3 376 12 is_stmt 1              # formatter.c3:376:12
	movq	-3704(%rbp), %rcx
	movq	%rcx, -5768(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -5760(%rbp)               # 8-byte Spill
	.loc	3 376 19 is_stmt 0              # formatter.c3:376:19
	movq	-3760(%rbp), %rax
	movq	%rax, -5752(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_852
# %bb.6:                                #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-5760(%rbp), %rax               # 8-byte Reload
	movq	-5752(%rbp), %rcx               # 8-byte Reload
	.loc	3 376 19                        # formatter.c3:376:19
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 377 7 is_stmt 1               # formatter.c3:377:7
	cmpb	$37, -3761(%rbp)
	je	.LBB6_12
# %bb.7:                                #   in Loop: Header=BB6_4 Depth=1
.Ltmp478:
	.loc	3 380 4                         # formatter.c3:380:4
	movq	-3736(%rbp), %rax
	movq	%rax, -5784(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 380 17 is_stmt 0              # formatter.c3:380:17
	leaq	-3856(%rbp), %rdi
	movzbl	-3761(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5776(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_9
# %bb.8:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5776(%rbp), %rax               # 8-byte Reload
	.loc	3 380 17                        # formatter.c3:380:17
	movq	%rax, -3848(%rbp)
	jmp	.LBB6_10
.LBB6_9:                                #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_11
.LBB6_10:
	movq	-3848(%rbp), %rax
	.loc	3 380 17 epilogue_begin         # formatter.c3:380:17
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5784(%rbp), %rax               # 8-byte Reload
	.loc	3 380 4                         # formatter.c3:380:4
	addq	-3856(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 381 4 is_stmt 1               # formatter.c3:381:4
	jmp	.LBB6_847
.Ltmp479:
.LBB6_12:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	3 383 3                         # formatter.c3:383:3
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 384 7                         # formatter.c3:384:7
	movq	-3760(%rbp), %rax
	cmpq	-3744(%rbp), %rax
	jb	.LBB6_15
# %bb.13:
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-3696(%rbp), %rax
	movq	%rax, -3872(%rbp)
	movq	-3872(%rbp), %rsi
.Ltmp480:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-3880(%rbp), %rdi
	leaq	.L.str.78(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -3864(%rbp)
# %bb.14:
	movq	-3864(%rbp), %rax
	.loc	3 340 9 epilogue_begin is_stmt 0 # formatter.c3:340:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp481:
.LBB6_15:                               #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 385 7 is_stmt 1               # formatter.c3:385:7
	movq	-3704(%rbp), %rcx
	movq	%rcx, -5808(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -5800(%rbp)               # 8-byte Spill
	.loc	3 385 14 is_stmt 0              # formatter.c3:385:14
	movq	-3760(%rbp), %rax
	movq	%rax, -5792(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_853
# %bb.16:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-5800(%rbp), %rax               # 8-byte Reload
	movq	-5792(%rbp), %rcx               # 8-byte Reload
	.loc	3 385 14                        # formatter.c3:385:14
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 386 7 is_stmt 1               # formatter.c3:386:7
	cmpb	$37, -3761(%rbp)
	jne	.LBB6_22
# %bb.17:                               #   in Loop: Header=BB6_4 Depth=1
.Ltmp482:
	.loc	3 388 4                         # formatter.c3:388:4
	movq	-3736(%rbp), %rax
	movq	%rax, -5824(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 388 17 is_stmt 0              # formatter.c3:388:17
	leaq	-3968(%rbp), %rdi
	movzbl	-3761(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5816(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_19
# %bb.18:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5816(%rbp), %rax               # 8-byte Reload
	.loc	3 388 17                        # formatter.c3:388:17
	movq	%rax, -3960(%rbp)
	jmp	.LBB6_20
.LBB6_19:                               #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_21
.LBB6_20:
	movq	-3960(%rbp), %rax
	.loc	3 388 17 epilogue_begin         # formatter.c3:388:17
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_21:                               #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-5824(%rbp), %rax               # 8-byte Reload
	.loc	3 388 4                         # formatter.c3:388:4
	addq	-3968(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 389 4 is_stmt 1               # formatter.c3:389:4
	jmp	.LBB6_847
.Ltmp483:
.LBB6_22:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	3 392 3                         # formatter.c3:392:3
	movq	-3696(%rbp), %rax
	movl	$0, 16(%rax)
.LBB6_23:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	3 0 3 is_stmt 0                 # formatter.c3:0:3
	movb	-3761(%rbp), %al
	movb	%al, -3969(%rbp)
# %bb.24:                               #   in Loop: Header=BB6_23 Depth=2
	movb	-3969(%rbp), %al
	addb	$-32, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -5832(%rbp)               # 8-byte Spill
	subb	$16, %al
	ja	.LBB6_30
# %bb.865:                              #   in Loop: Header=BB6_23 Depth=2
	movq	-5832(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI6_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB6_25:                               #   in Loop: Header=BB6_23 Depth=2
.Ltmp484:
	.loc	3 397 15 is_stmt 1              # formatter.c3:397:15
	movq	-3696(%rbp), %rax
	.loc	3 397 36 is_stmt 0              # formatter.c3:397:36
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	orl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_31
.Ltmp485:
.LBB6_26:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 398 15 is_stmt 1              # formatter.c3:398:15
	movq	-3696(%rbp), %rax
	.loc	3 398 33 is_stmt 0              # formatter.c3:398:33
	movl	16(%rax), %ecx
	andl	$-3, %ecx
	orl	$2, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_31
.Ltmp486:
.LBB6_27:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 399 15 is_stmt 1              # formatter.c3:399:15
	movq	-3696(%rbp), %rax
	.loc	3 399 33 is_stmt 0              # formatter.c3:399:33
	movl	16(%rax), %ecx
	andl	$-5, %ecx
	orl	$4, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_31
.Ltmp487:
.LBB6_28:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 400 15 is_stmt 1              # formatter.c3:400:15
	movq	-3696(%rbp), %rax
	.loc	3 400 34 is_stmt 0              # formatter.c3:400:34
	movl	16(%rax), %ecx
	andl	$-9, %ecx
	orl	$8, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_31
.Ltmp488:
.LBB6_29:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 401 15 is_stmt 1              # formatter.c3:401:15
	movq	-3696(%rbp), %rax
	.loc	3 401 33 is_stmt 0              # formatter.c3:401:33
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	orl	$16, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_31
.Ltmp489:
.LBB6_30:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	3 402 14 is_stmt 1              # formatter.c3:402:14
	jmp	.LBB6_36
.Ltmp490:
.LBB6_31:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 404 10                        # formatter.c3:404:10
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 404 8 is_stmt 0               # formatter.c3:404:8
	cmpq	-3744(%rbp), %rax
	jb	.LBB6_34
# %bb.32:
	.loc	3 0 8                           # formatter.c3:0:8
	movq	-3696(%rbp), %rax
	movq	%rax, -3992(%rbp)
	movq	-3992(%rbp), %rsi
.Ltmp491:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4000(%rbp), %rdi
	leaq	.L.str.79(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -3984(%rbp)
# %bb.33:
	movq	-3984(%rbp), %rax
	.loc	3 340 9 epilogue_begin is_stmt 0 # formatter.c3:340:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp492:
.LBB6_34:                               #   in Loop: Header=BB6_23 Depth=2
	.cfi_def_cfa %rbp, 16
	.loc	3 405 8 is_stmt 1               # formatter.c3:405:8
	movq	-3704(%rbp), %rcx
	movq	%rcx, -5856(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -5848(%rbp)               # 8-byte Spill
	.loc	3 405 15 is_stmt 0              # formatter.c3:405:15
	movq	-3760(%rbp), %rax
	movq	%rax, -5840(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_854
# %bb.35:                               #   in Loop: Header=BB6_23 Depth=2
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-5848(%rbp), %rax               # 8-byte Reload
	movq	-5840(%rbp), %rcx               # 8-byte Reload
	.loc	3 405 15                        # formatter.c3:405:15
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	jmp	.LBB6_23
.Ltmp493:
.LBB6_36:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-3728(%rbp), %rsi
	movq	-3720(%rbp), %rdx
	movq	-3712(%rbp), %rcx
	movq	-3704(%rbp), %rax
	movq	%rsi, -264(%rbp)
	movq	%rdx, -272(%rbp)
	leaq	-3752(%rbp), %rdx
	movq	%rdx, -280(%rbp)
	movq	%rcx, -288(%rbp)
	movq	%rax, -296(%rbp)
	leaq	-3760(%rbp), %rax
	movq	%rax, -304(%rbp)
.Ltmp494:
	.loc	1 682 11 is_stmt 1              # formatter_private.c3:682:11
	movq	-288(%rbp), %rax
	movq	%rax, -5872(%rbp)               # 8-byte Spill
	.loc	1 682 23 is_stmt 0              # formatter_private.c3:682:23
	movq	-304(%rbp), %rax
	movq	%rax, -5864(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_202
# %bb.37:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5864(%rbp), %rax               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	andq	$7, %rax
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_203
# %bb.38:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5872(%rbp), %rax               # 8-byte Reload
	movq	-5864(%rbp), %rcx               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	movq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -305(%rbp)
	movb	-305(%rbp), %al
	movb	%al, -385(%rbp)
	movb	-385(%rbp), %al
	movb	%al, -386(%rbp)
.Ltmp495:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-386(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5888(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB6_204
# %bb.39:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-5888(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	je	.LBB6_56
.Ltmp496:
# %bb.40:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 683 63 is_stmt 1              # formatter_private.c3:683:63
	movq	-288(%rbp), %rdx
	movq	-296(%rbp), %rcx
	movq	-304(%rbp), %rax
	movq	%rdx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%rax, -24(%rbp)
.Ltmp497:
	.loc	1 146 11                        # formatter_private.c3:146:11
	movl	$0, -28(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-24(%rbp), %rax
	movq	%rax, -5896(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_50
# %bb.41:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-5896(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -5904(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_51
# %bb.42:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-5896(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB6_43:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp498:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-40(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB6_48
# %bb.44:                               #   in Loop: Header=BB6_43 Depth=2
.Ltmp499:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-8(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -113(%rbp)
	movb	-113(%rbp), %al
	movb	%al, -114(%rbp)
	movb	-114(%rbp), %al
	movb	%al, -115(%rbp)
.Ltmp500:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-115(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5912(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB6_52
# %bb.45:                               #   in Loop: Header=BB6_43 Depth=2
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-5912(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB6_47
.Ltmp501:
# %bb.46:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB6_48
.LBB6_47:                               #   in Loop: Header=BB6_43 Depth=2
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -28(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-113(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -28(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB6_43
.Ltmp502:
.LBB6_48:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-24(%rbp), %rax
	movq	%rax, -5920(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_53
# %bb.49:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-5920(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -5928(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_54
	jmp	.LBB6_55
.LBB6_50:
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB6_51:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-5904(%rbp), %rcx               # 8-byte Reload
	movq	$8, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-112(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_52:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-5912(%rbp), %rcx               # 8-byte Reload
	movq	$256, -128(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -136(%rbp)
	movq	%rax, -168(%rbp)
	leaq	-128(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-136(%rbp), %rax
	movq	%rax, -160(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	$2, -184(%rbp)
.Ltmp503:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-192(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp504:
.LBB6_53:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB6_54:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-5928(%rbp), %rcx               # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-256(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_55:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-5920(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-40(%rbp), %rcx
	movq	%rcx, (%rax)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-28(%rbp), %eax
.Ltmp505:
	.loc	1 683 27                        # formatter_private.c3:683:27
	movl	%eax, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_56:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 684 6                         # formatter_private.c3:684:6
	cmpb	$42, -305(%rbp)
	je	.LBB6_58
# %bb.57:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 684 23 is_stmt 0              # formatter_private.c3:684:23
	movl	$0, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_58:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 685 16 is_stmt 1              # formatter_private.c3:685:16
	movq	-304(%rbp), %rax
	movq	%rax, -5944(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_205
# %bb.59:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-5944(%rbp), %rax               # 8-byte Reload
	.loc	1 685 16                        # formatter_private.c3:685:16
	andq	$7, %rax
	movq	%rax, -5952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_206
# %bb.60:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-5944(%rbp), %rcx               # 8-byte Reload
	.loc	1 685 15                        # formatter_private.c3:685:15
	movq	(%rcx), %rax
	addq	$1, %rax
	movq	%rax, (%rcx)
	movq	%rax, -472(%rbp)
	.loc	1 686 6 is_stmt 1               # formatter_private.c3:686:6
	movq	-472(%rbp), %rax
	cmpq	-296(%rbp), %rax
	jb	.LBB6_62
# %bb.61:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 686 32 is_stmt 0              # formatter_private.c3:686:32
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_62:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	movq	-280(%rbp), %rax
	movq	%rax, -5960(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_207
# %bb.63:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-5960(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	andq	$7, %rax
	movq	%rax, -5968(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_208
# %bb.64:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-5960(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	movq	(%rax), %rax
	.loc	1 687 6                         # formatter_private.c3:687:6
	cmpq	-272(%rbp), %rax
	jb	.LBB6_66
# %bb.65:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 687 42                        # formatter_private.c3:687:42
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_66:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 688 12 is_stmt 1              # formatter_private.c3:688:12
	movq	-264(%rbp), %rax
	movq	%rax, -5984(%rbp)               # 8-byte Spill
	.loc	1 688 23 is_stmt 0              # formatter_private.c3:688:23
	movq	-280(%rbp), %rax
	movq	%rax, -5976(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_209
# %bb.67:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5976(%rbp), %rax               # 8-byte Reload
	.loc	1 688 23                        # formatter_private.c3:688:23
	andq	$7, %rax
	movq	%rax, -5992(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_210
# %bb.68:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5984(%rbp), %rax               # 8-byte Reload
	movq	-5976(%rbp), %rdx               # 8-byte Reload
	.loc	1 688 22                        # formatter_private.c3:688:22
	movq	(%rdx), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -6000(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_211
# %bb.69:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6008(%rbp), %rax               # 8-byte Reload
	.loc	1 688 12                        # formatter_private.c3:688:12
	movq	(%rax), %rcx
	movq	%rcx, -624(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -616(%rbp)
	.loc	1 689 7 is_stmt 1               # formatter_private.c3:689:7
	movq	-616(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_71
# %bb.70:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 689 40 is_stmt 0              # formatter_private.c3:689:40
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_71:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-624(%rbp), %rax
	movq	%rax, -784(%rbp)
	movq	-616(%rbp), %rax
	movq	%rax, -776(%rbp)
.Ltmp506:
	.loc	5 690 17 is_stmt 1              # types.c3:690:17
	movl	$2, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_73
# %bb.72:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.LBB6_73:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 19 11                         # types.c3:19:11
	movq	-776(%rbp), %rax
	.loc	5 690 17                        # types.c3:690:17
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_75
# %bb.74:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.Ltmp507:
.LBB6_75:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 23 20                         # types.c3:23:20
	movq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-800(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -801(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-800(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$2, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -802(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$2147483647, -808(%rbp)         # imm = 0x7FFFFFFF
	.loc	5 27 14                         # types.c3:27:14
	movl	$-2147483648, -812(%rbp)        # imm = 0x80000000
	movq	-800(%rbp), %rax
	movq	%rax, -824(%rbp)
	movq	-824(%rbp), %rax
	movq	%rax, -6024(%rbp)               # 8-byte Spill
	movq	%rax, -6016(%rbp)               # 8-byte Spill
.LBB6_76:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6016(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6040(%rbp)               # 8-byte Spill
.Ltmp508:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6025(%rbp)                # 1-byte Spill
	je	.LBB6_78
# %bb.77:                               #   in Loop: Header=BB6_76 Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6040(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6016(%rbp)               # 8-byte Spill
	movb	%al, -6025(%rbp)                # 1-byte Spill
	jne	.LBB6_76
.LBB6_78:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6025(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB6_79
	jmp	.LBB6_85
.LBB6_79:                               #   in Loop: Header=BB6_4 Depth=1
.Ltmp509:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-784(%rbp), %rax
	movq	%rax, -6048(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_212
# %bb.80:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-6048(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -825(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6049(%rbp)                # 1-byte Spill
	je	.LBB6_82
# %bb.81:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-825(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6049(%rbp)                # 1-byte Spill
.LBB6_82:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6049(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB6_83
	jmp	.LBB6_84
.LBB6_83:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_84:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-825(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp510:
.LBB6_85:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6064(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB6_86
.LBB6_86:                               #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6064(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6080(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6065(%rbp)                # 1-byte Spill
	je	.LBB6_88
# %bb.87:                               #   in Loop: Header=BB6_86 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6080(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6064(%rbp)               # 8-byte Spill
	movb	%al, -6065(%rbp)                # 1-byte Spill
	jne	.LBB6_86
.LBB6_88:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6065(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB6_89
	jmp	.LBB6_100
.LBB6_89:                               #   in Loop: Header=BB6_4 Depth=1
.Ltmp511:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-784(%rbp), %rax
	movq	%rax, -6088(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_213
# %bb.90:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6088(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -6096(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_214
# %bb.91:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6088(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -828(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6097(%rbp)                # 1-byte Spill
	je	.LBB6_93
# %bb.92:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-828(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6097(%rbp)                # 1-byte Spill
.LBB6_93:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6097(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB6_94
	jmp	.LBB6_95
.LBB6_94:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_95:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-828(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -6098(%rbp)                # 1-byte Spill
	jg	.LBB6_97
# %bb.96:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 19 is_stmt 0               # types.c3:37:19
	movswl	-828(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -6098(%rbp)                # 1-byte Spill
.LBB6_97:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6098(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB6_98
	jmp	.LBB6_99
.LBB6_98:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_99:                               #   in Loop: Header=BB6_4 Depth=1
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-828(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp512:
.LBB6_100:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6112(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB6_101
.LBB6_101:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6112(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6128(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6113(%rbp)                # 1-byte Spill
	je	.LBB6_103
# %bb.102:                              #   in Loop: Header=BB6_101 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6128(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6112(%rbp)               # 8-byte Spill
	movb	%al, -6113(%rbp)                # 1-byte Spill
	jne	.LBB6_101
.LBB6_103:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6113(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB6_104
	jmp	.LBB6_115
.LBB6_104:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp513:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-784(%rbp), %rax
	movq	%rax, -6136(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_215
# %bb.105:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-6136(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -6144(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_216
# %bb.106:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 13                          # types.c3:0:13
	movq	-6136(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -900(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6145(%rbp)                # 1-byte Spill
	je	.LBB6_108
# %bb.107:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -900(%rbp)
	setl	%al
	movb	%al, -6145(%rbp)                # 1-byte Spill
.LBB6_108:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6145(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB6_109
	jmp	.LBB6_110
.LBB6_109:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_110:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-900(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -6146(%rbp)                # 1-byte Spill
	jg	.LBB6_112
# %bb.111:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 19 is_stmt 0               # types.c3:42:19
	movl	-900(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -6146(%rbp)                # 1-byte Spill
.LBB6_112:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6146(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB6_113
	jmp	.LBB6_114
.LBB6_113:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_114:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-900(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp514:
.LBB6_115:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6160(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB6_116
.LBB6_116:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6160(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6176(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6161(%rbp)                # 1-byte Spill
	je	.LBB6_118
# %bb.117:                              #   in Loop: Header=BB6_116 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6176(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6160(%rbp)               # 8-byte Spill
	movb	%al, -6161(%rbp)                # 1-byte Spill
	jne	.LBB6_116
.LBB6_118:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6161(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB6_119
	jmp	.LBB6_130
.LBB6_119:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp515:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-784(%rbp), %rax
	movq	%rax, -6184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_217
# %bb.120:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6184(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -6192(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_218
# %bb.121:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6184(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -984(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6193(%rbp)                # 1-byte Spill
	je	.LBB6_123
# %bb.122:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -984(%rbp)
	setl	%al
	movb	%al, -6193(%rbp)                # 1-byte Spill
.LBB6_123:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6193(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB6_124
	jmp	.LBB6_125
.LBB6_124:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_125:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-984(%rbp), %rcx
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movslq	-808(%rbp), %rdx
	.loc	5 47 8                          # types.c3:47:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -6194(%rbp)                # 1-byte Spill
	jg	.LBB6_127
# %bb.126:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 19                         # types.c3:47:19
	movq	-984(%rbp), %rax
	.loc	5 47 23                         # types.c3:47:23
	movslq	-812(%rbp), %rcx
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rcx, %rax
	setl	%al
	movb	%al, -6194(%rbp)                # 1-byte Spill
.LBB6_127:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6194(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB6_128
	jmp	.LBB6_129
.LBB6_128:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_129:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-984(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp516:
.LBB6_130:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6208(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB6_131
.LBB6_131:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6208(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6224(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6209(%rbp)                # 1-byte Spill
	je	.LBB6_133
# %bb.132:                              #   in Loop: Header=BB6_131 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6224(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6208(%rbp)               # 8-byte Spill
	movb	%al, -6209(%rbp)                # 1-byte Spill
	jne	.LBB6_131
.LBB6_133:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6209(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB6_134
	jmp	.LBB6_145
.LBB6_134:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp517:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-784(%rbp), %rax
	movq	%rax, -6232(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_219
# %bb.135:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6232(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -6240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_220
# %bb.136:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6232(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1064(%rbp)
	movq	%rax, -1072(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -6241(%rbp)                # 1-byte Spill
	je	.LBB6_138
# %bb.137:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-1064(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -6241(%rbp)                # 1-byte Spill
.LBB6_138:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6241(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB6_139
	jmp	.LBB6_140
.LBB6_139:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_140:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-1072(%rbp), %rdi
	movq	-1064(%rbp), %rdx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movslq	-808(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	movb	$1, %al
	.loc	5 52 8                          # types.c3:52:8
	subq	%rdi, %rsi
	sbbq	%rdx, %rcx
	movb	%al, -6242(%rbp)                # 1-byte Spill
	jl	.LBB6_142
	jmp	.LBB6_141
.LBB6_141:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 19                         # types.c3:52:19
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	movb	%al, -6242(%rbp)                # 1-byte Spill
.LBB6_142:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6242(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB6_143
	jmp	.LBB6_144
.LBB6_143:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_144:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-1072(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp518:
.LBB6_145:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6256(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB6_146
.LBB6_146:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6256(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6272(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6257(%rbp)                # 1-byte Spill
	je	.LBB6_148
# %bb.147:                              #   in Loop: Header=BB6_146 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6272(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6256(%rbp)               # 8-byte Spill
	movb	%al, -6257(%rbp)                # 1-byte Spill
	jne	.LBB6_146
.LBB6_148:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6257(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB6_149
	jmp	.LBB6_153
.LBB6_149:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp519:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-784(%rbp), %rax
	movq	%rax, -6280(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_221
# %bb.150:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6280(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -1137(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-1137(%rbp), %eax
	cmpl	%eax, -808(%rbp)
	jge	.LBB6_152
# %bb.151:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_152:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-1137(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp520:
.LBB6_153:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6288(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB6_154
.LBB6_154:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6288(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6304(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6289(%rbp)                # 1-byte Spill
	je	.LBB6_156
# %bb.155:                              #   in Loop: Header=BB6_154 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6304(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6288(%rbp)               # 8-byte Spill
	movb	%al, -6289(%rbp)                # 1-byte Spill
	jne	.LBB6_154
.LBB6_156:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6289(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB6_157
	jmp	.LBB6_164
.LBB6_157:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp521:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-784(%rbp), %rax
	movq	%rax, -6312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_222
# %bb.158:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6312(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -6320(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_223
# %bb.159:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6312(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -1140(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-1140(%rbp), %ecx
	movb	$1, %al
	cmpl	%ecx, -808(%rbp)
	movb	%al, -6321(%rbp)                # 1-byte Spill
	jl	.LBB6_161
# %bb.160:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-1140(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%al
	movb	%al, -6321(%rbp)                # 1-byte Spill
.LBB6_161:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6321(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB6_162
	jmp	.LBB6_163
.LBB6_162:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_163:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-1140(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp522:
.LBB6_164:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6336(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB6_165
.LBB6_165:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6336(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6352(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6337(%rbp)                # 1-byte Spill
	je	.LBB6_167
# %bb.166:                              #   in Loop: Header=BB6_165 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6352(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6336(%rbp)               # 8-byte Spill
	movb	%al, -6337(%rbp)                # 1-byte Spill
	jne	.LBB6_165
.LBB6_167:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6337(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB6_168
	jmp	.LBB6_175
.LBB6_168:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp523:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-784(%rbp), %rax
	movq	%rax, -6360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_224
# %bb.169:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6360(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -6368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_225
# %bb.170:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6360(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -1220(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-1220(%rbp), %ecx
	cmpl	%ecx, -808(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6369(%rbp)                # 1-byte Spill
	jne	.LBB6_172
# %bb.171:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-1220(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -6369(%rbp)                # 1-byte Spill
.LBB6_172:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6369(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB6_173
	jmp	.LBB6_174
.LBB6_173:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_174:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-1220(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp524:
.LBB6_175:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6384(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB6_176
.LBB6_176:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6384(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6400(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6385(%rbp)                # 1-byte Spill
	je	.LBB6_178
# %bb.177:                              #   in Loop: Header=BB6_176 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6400(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6384(%rbp)               # 8-byte Spill
	movb	%al, -6385(%rbp)                # 1-byte Spill
	jne	.LBB6_176
.LBB6_178:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6385(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB6_179
	jmp	.LBB6_186
.LBB6_179:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp525:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-784(%rbp), %rax
	movq	%rax, -6408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_226
# %bb.180:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6408(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -6416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_227
# %bb.181:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6408(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -1304(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-1304(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movslq	-808(%rbp), %rax
	.loc	5 68 8                          # types.c3:68:8
	cmpq	%rcx, %rax
	setl	%al
	cmpq	$0, %rcx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6417(%rbp)                # 1-byte Spill
	jne	.LBB6_183
# %bb.182:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 68 19                         # types.c3:68:19
	movq	-1304(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movslq	-812(%rbp), %rcx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rax, %rcx
	setg	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	movb	%al, -6417(%rbp)                # 1-byte Spill
.LBB6_183:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6417(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB6_184
	jmp	.LBB6_185
.LBB6_184:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_185:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-1304(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp526:
.LBB6_186:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6432(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB6_187
.LBB6_187:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6432(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6448(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6433(%rbp)                # 1-byte Spill
	je	.LBB6_189
# %bb.188:                              #   in Loop: Header=BB6_187 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6448(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6432(%rbp)               # 8-byte Spill
	movb	%al, -6433(%rbp)                # 1-byte Spill
	jne	.LBB6_187
.LBB6_189:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6433(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB6_190
	jmp	.LBB6_197
.LBB6_190:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp527:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-784(%rbp), %rax
	movq	%rax, -6456(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_228
# %bb.191:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-6456(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -6464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_229
# %bb.192:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-6456(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1384(%rbp)
	movq	%rax, -1392(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-1392(%rbp), %rsi
	movq	-1384(%rbp), %rcx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movslq	-808(%rbp), %rdx
	movq	%rdx, %rax
	sarq	$63, %rax
	.loc	5 72 8                          # types.c3:72:8
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	shrq	$63, %rcx
                                        # kill: def $cl killed $cl killed $rcx
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -6465(%rbp)                # 1-byte Spill
	jne	.LBB6_194
# %bb.193:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 72 19                         # types.c3:72:19
	movq	-1392(%rbp), %rcx
	movq	-1384(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rdx
	sarq	$63, %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rsi, %rcx
	movq	%rax, %rcx
	sbbq	%rdx, %rcx
	setl	%cl
	testq	%rax, %rax
	setns	%al
	andb	%cl, %al
	movb	%al, -6465(%rbp)                # 1-byte Spill
.LBB6_194:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6465(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB6_195
	jmp	.LBB6_196
.LBB6_195:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB6_199
.LBB6_196:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-1392(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB6_198
.Ltmp528:
.LBB6_197:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.123(%rip), %rax
	movq	%rax, -1472(%rbp)
	movq	$30, -1464(%rbp)
.Ltmp529:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-1472(%rbp), %rdi
	movq	-1464(%rbp), %rsi
	movq	$0, -1480(%rbp)
	movq	$0, -1488(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.124(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.125(%rip), %r8
	movl	$25, %r9d
	leaq	-1488(%rbp), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_198:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-788(%rbp), %eax
	movl	%eax, -756(%rbp)
	movq	$0, -768(%rbp)
.Ltmp530:
.LBB6_199:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 691 9 is_stmt 1               # formatter_private.c3:691:9
	cmpq	$0, -768(%rbp)
	sete	%al
	testb	$1, %al
	jne	.LBB6_200
	jmp	.LBB6_201
.LBB6_200:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-756(%rbp), %eax
	.loc	1 691 19 is_stmt 0              # formatter_private.c3:691:19
	movl	%eax, -4084(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_201:                              #   in Loop: Header=BB6_4 Depth=1
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -1496(%rbp)
	movq	-1496(%rbp), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	jmp	.LBB6_230
.LBB6_202:
	.loc	1 682 23 is_stmt 1              # formatter_private.c3:682:23
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	callq	*(%rax)
.LBB6_203:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5880(%rbp), %rcx               # 8-byte Reload
	movq	$8, -320(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -328(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-320(%rbp), %rcx
	movq	%rcx, -368(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-328(%rbp), %rax
	movq	%rax, -352(%rbp)
	leaq	-368(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	$2, -376(%rbp)
	.loc	1 682 23                        # formatter_private.c3:682:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-384(%rbp), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_204:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5888(%rbp), %rcx               # 8-byte Reload
	movq	$256, -400(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -408(%rbp)
	movq	%rax, -440(%rbp)
	leaq	-400(%rbp), %rcx
	movq	%rcx, -448(%rbp)
	movq	%rax, -424(%rbp)
	leaq	-408(%rbp), %rax
	movq	%rax, -432(%rbp)
	leaq	-448(%rbp), %rax
	movq	%rax, -464(%rbp)
	movq	$2, -456(%rbp)
.Ltmp531:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-464(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp532:
.LBB6_205:
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	callq	*(%rax)
.LBB6_206:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-5952(%rbp), %rcx               # 8-byte Reload
	movq	$8, -480(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -488(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-480(%rbp), %rcx
	movq	%rcx, -528(%rbp)
	movq	%rax, -504(%rbp)
	leaq	-488(%rbp), %rax
	movq	%rax, -512(%rbp)
	leaq	-528(%rbp), %rax
	movq	%rax, -544(%rbp)
	movq	$2, -536(%rbp)
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-544(%rbp), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_207:
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	callq	*(%rax)
.LBB6_208:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-5968(%rbp), %rcx               # 8-byte Reload
	movq	$8, -552(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -560(%rbp)
	movq	%rax, -584(%rbp)
	leaq	-552(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	%rax, -568(%rbp)
	leaq	-560(%rbp), %rax
	movq	%rax, -576(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	$2, -600(%rbp)
	.loc	1 687 7                         # formatter_private.c3:687:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-608(%rbp), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_209:
	.loc	1 688 23 is_stmt 1              # formatter_private.c3:688:23
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	callq	*(%rax)
.LBB6_210:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5992(%rbp), %rcx               # 8-byte Reload
	movq	$8, -632(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -640(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-632(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	%rax, -648(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -688(%rbp)
	movq	$2, -680(%rbp)
	.loc	1 688 23                        # formatter_private.c3:688:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-688(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_211:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6000(%rbp), %rcx               # 8-byte Reload
	movq	$8, -696(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -704(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-696(%rbp), %rcx
	movq	%rcx, -736(%rbp)
	movq	%rax, -712(%rbp)
	leaq	-704(%rbp), %rax
	movq	%rax, -720(%rbp)
	leaq	-736(%rbp), %rax
	movq	%rax, -752(%rbp)
	movq	$2, -744(%rbp)
	.loc	1 688 12                        # formatter_private.c3:688:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-752(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_212:
.Ltmp533:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp534:
.LBB6_213:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB6_214:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6096(%rbp), %rcx               # 8-byte Reload
	movq	$2, -840(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -848(%rbp)
	movq	%rax, -872(%rbp)
	leaq	-840(%rbp), %rcx
	movq	%rcx, -880(%rbp)
	movq	%rax, -856(%rbp)
	leaq	-848(%rbp), %rax
	movq	%rax, -864(%rbp)
	leaq	-880(%rbp), %rax
	movq	%rax, -896(%rbp)
	movq	$2, -888(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-896(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp535:
.LBB6_215:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB6_216:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-6144(%rbp), %rcx               # 8-byte Reload
	movq	$4, -912(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -920(%rbp)
	movq	%rax, -952(%rbp)
	leaq	-912(%rbp), %rcx
	movq	%rcx, -960(%rbp)
	movq	%rax, -936(%rbp)
	leaq	-920(%rbp), %rax
	movq	%rax, -944(%rbp)
	leaq	-960(%rbp), %rax
	movq	%rax, -976(%rbp)
	movq	$2, -968(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-976(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp536:
.LBB6_217:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB6_218:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6192(%rbp), %rcx               # 8-byte Reload
	movq	$8, -992(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1000(%rbp)
	movq	%rax, -1032(%rbp)
	leaq	-992(%rbp), %rcx
	movq	%rcx, -1040(%rbp)
	movq	%rax, -1016(%rbp)
	leaq	-1000(%rbp), %rax
	movq	%rax, -1024(%rbp)
	leaq	-1040(%rbp), %rax
	movq	%rax, -1056(%rbp)
	movq	$2, -1048(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1056(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp537:
.LBB6_219:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB6_220:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6240(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1080(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1088(%rbp)
	movq	%rax, -1112(%rbp)
	leaq	-1080(%rbp), %rcx
	movq	%rcx, -1120(%rbp)
	movq	%rax, -1096(%rbp)
	leaq	-1088(%rbp), %rax
	movq	%rax, -1104(%rbp)
	leaq	-1120(%rbp), %rax
	movq	%rax, -1136(%rbp)
	movq	$2, -1128(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1136(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp538:
.LBB6_221:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp539:
.LBB6_222:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB6_223:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6320(%rbp), %rcx               # 8-byte Reload
	movq	$2, -1152(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1160(%rbp)
	movq	%rax, -1192(%rbp)
	leaq	-1152(%rbp), %rcx
	movq	%rcx, -1200(%rbp)
	movq	%rax, -1176(%rbp)
	leaq	-1160(%rbp), %rax
	movq	%rax, -1184(%rbp)
	leaq	-1200(%rbp), %rax
	movq	%rax, -1216(%rbp)
	movq	$2, -1208(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1216(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp540:
.LBB6_224:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB6_225:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6368(%rbp), %rcx               # 8-byte Reload
	movq	$4, -1232(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1240(%rbp)
	movq	%rax, -1272(%rbp)
	leaq	-1232(%rbp), %rcx
	movq	%rcx, -1280(%rbp)
	movq	%rax, -1256(%rbp)
	leaq	-1240(%rbp), %rax
	movq	%rax, -1264(%rbp)
	leaq	-1280(%rbp), %rax
	movq	%rax, -1296(%rbp)
	movq	$2, -1288(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1296(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp541:
.LBB6_226:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB6_227:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6416(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1312(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1320(%rbp)
	movq	%rax, -1352(%rbp)
	leaq	-1312(%rbp), %rcx
	movq	%rcx, -1360(%rbp)
	movq	%rax, -1336(%rbp)
	leaq	-1320(%rbp), %rax
	movq	%rax, -1344(%rbp)
	leaq	-1360(%rbp), %rax
	movq	%rax, -1376(%rbp)
	movq	$2, -1368(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1376(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp542:
.LBB6_228:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB6_229:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-6464(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1400(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1408(%rbp)
	movq	%rax, -1432(%rbp)
	leaq	-1400(%rbp), %rcx
	movq	%rcx, -1440(%rbp)
	movq	%rax, -1416(%rbp)
	leaq	-1408(%rbp), %rax
	movq	%rax, -1424(%rbp)
	leaq	-1440(%rbp), %rax
	movq	%rax, -1456(%rbp)
	movq	$2, -1448(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1456(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp543:
.LBB6_230:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-5936(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6480(%rbp)               # 8-byte Spill
	.loc	3 408 12 is_stmt 1              # formatter.c3:408:12
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_232
# %bb.231:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-6480(%rbp), %rax               # 8-byte Reload
	.loc	3 408 12                        # formatter.c3:408:12
	movq	%rax, -4080(%rbp)
	jmp	.LBB6_233
.LBB6_232:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-4084(%rbp), %eax
	movl	%eax, -4068(%rbp)
	movq	$0, -4080(%rbp)
.LBB6_233:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 12                          # formatter.c3:0:12
	jmp	.LBB6_234
.LBB6_234:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 409 13 is_stmt 1              # formatter.c3:409:13
	movq	-4080(%rbp), %rax
	movq	%rax, -6488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_236
# %bb.235:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-6488(%rbp), %rax               # 8-byte Reload
	.loc	3 409 13                        # formatter.c3:409:13
	movq	%rax, -4096(%rbp)
	jmp	.LBB6_237
.LBB6_236:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4096(%rbp)
.LBB6_237:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4096(%rbp)
	je	.LBB6_240
# %bb.238:
	.loc	3 0 13                          # formatter.c3:0:13
	movq	-3696(%rbp), %rax
	movq	%rax, -4112(%rbp)
	movq	-4112(%rbp), %rsi
.Ltmp544:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4120(%rbp), %rdi
	leaq	.L.str.80(%rip), %rdx
	movl	$4, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4104(%rbp)
# %bb.239:
	movq	-4104(%rbp), %rax
	.loc	3 340 9 epilogue_begin is_stmt 0 # formatter.c3:340:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp545:
.LBB6_240:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 410 7 is_stmt 1               # formatter.c3:410:7
	movq	-3704(%rbp), %rcx
	movq	%rcx, -6512(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -6504(%rbp)               # 8-byte Spill
	.loc	3 410 14 is_stmt 0              # formatter.c3:410:14
	movq	-3760(%rbp), %rax
	movq	%rax, -6496(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_855
# %bb.241:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-6504(%rbp), %rax               # 8-byte Reload
	movq	-6496(%rbp), %rcx               # 8-byte Reload
	.loc	3 410 14                        # formatter.c3:410:14
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
	.loc	3 411 7 is_stmt 1               # formatter.c3:411:7
	cmpl	$0, -4068(%rbp)
	jge	.LBB6_243
# %bb.242:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp546:
	.loc	3 413 4                         # formatter.c3:413:4
	movq	-3696(%rbp), %rax
	.loc	3 413 22 is_stmt 0              # formatter.c3:413:22
	movl	16(%rax), %ecx
	andl	$-3, %ecx
	orl	$2, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 414 9 is_stmt 1               # formatter.c3:414:9
	xorl	%eax, %eax
	subl	-4068(%rbp), %eax
	movl	%eax, -4068(%rbp)
	movq	$0, -4080(%rbp)
.Ltmp547:
.LBB6_243:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 416 16                        # formatter.c3:416:16
	movl	-4068(%rbp), %ecx
	.loc	3 416 3 is_stmt 0               # formatter.c3:416:3
	movq	-3696(%rbp), %rax
	movl	%ecx, 20(%rax)
	.loc	3 418 3 is_stmt 1               # formatter.c3:418:3
	movq	-3696(%rbp), %rax
	movl	$0, 24(%rax)
	.loc	3 419 7                         # formatter.c3:419:7
	cmpb	$46, -3761(%rbp)
	jne	.LBB6_456
# %bb.244:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp548:
	.loc	3 421 4                         # formatter.c3:421:4
	movq	-3696(%rbp), %rax
	.loc	3 421 27 is_stmt 0              # formatter.c3:421:27
	movl	16(%rax), %ecx
	andl	$-65, %ecx
	orl	$64, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 422 10 is_stmt 1              # formatter.c3:422:10
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	.loc	3 422 8 is_stmt 0               # formatter.c3:422:8
	cmpq	-3744(%rbp), %rax
	jb	.LBB6_247
# %bb.245:
	.loc	3 0 8                           # formatter.c3:0:8
	movq	-3696(%rbp), %rax
	movq	%rax, -4208(%rbp)
	movq	-4208(%rbp), %rsi
.Ltmp549:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4216(%rbp), %rdi
	leaq	.L.str.81(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4200(%rbp)
# %bb.246:
	movq	-4200(%rbp), %rax
	.loc	3 340 9 epilogue_begin is_stmt 0 # formatter.c3:340:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp550:
.LBB6_247:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-3728(%rbp), %rsi
	movq	-3720(%rbp), %rdx
	movq	-3712(%rbp), %rcx
	movq	-3704(%rbp), %rax
	movq	%rsi, -1752(%rbp)
	movq	%rdx, -1760(%rbp)
	leaq	-3752(%rbp), %rdx
	movq	%rdx, -1768(%rbp)
	movq	%rcx, -1776(%rbp)
	movq	%rax, -1784(%rbp)
	leaq	-3760(%rbp), %rax
	movq	%rax, -1792(%rbp)
.Ltmp551:
	.loc	1 682 11 is_stmt 1              # formatter_private.c3:682:11
	movq	-1776(%rbp), %rax
	movq	%rax, -6528(%rbp)               # 8-byte Spill
	.loc	1 682 23 is_stmt 0              # formatter_private.c3:682:23
	movq	-1792(%rbp), %rax
	movq	%rax, -6520(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_413
# %bb.248:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6520(%rbp), %rax               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	andq	$7, %rax
	movq	%rax, -6536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_414
# %bb.249:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6528(%rbp), %rax               # 8-byte Reload
	movq	-6520(%rbp), %rcx               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	movq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1793(%rbp)
	movb	-1793(%rbp), %al
	movb	%al, -1873(%rbp)
	movb	-1873(%rbp), %al
	movb	%al, -1874(%rbp)
.Ltmp552:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-1874(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6544(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB6_415
# %bb.250:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-6544(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	je	.LBB6_267
.Ltmp553:
# %bb.251:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 683 63 is_stmt 1              # formatter_private.c3:683:63
	movq	-1776(%rbp), %rdx
	movq	-1784(%rbp), %rcx
	movq	-1792(%rbp), %rax
	movq	%rdx, -1504(%rbp)
	movq	%rcx, -1512(%rbp)
	movq	%rax, -1520(%rbp)
.Ltmp554:
	.loc	1 146 11                        # formatter_private.c3:146:11
	movl	$0, -1524(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-1520(%rbp), %rax
	movq	%rax, -6552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_261
# %bb.252:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-6552(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -6560(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_262
# %bb.253:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6552(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -1536(%rbp)
.LBB6_254:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp555:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-1536(%rbp), %rax
	cmpq	-1512(%rbp), %rax
	jae	.LBB6_259
# %bb.255:                              #   in Loop: Header=BB6_254 Depth=2
.Ltmp556:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-1504(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-1536(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -1601(%rbp)
	movb	-1601(%rbp), %al
	movb	%al, -1602(%rbp)
	movb	-1602(%rbp), %al
	movb	%al, -1603(%rbp)
.Ltmp557:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-1603(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6568(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB6_263
# %bb.256:                              #   in Loop: Header=BB6_254 Depth=2
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-6568(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB6_258
.Ltmp558:
# %bb.257:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB6_259
.LBB6_258:                              #   in Loop: Header=BB6_254 Depth=2
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -1524(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-1601(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -1524(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-1536(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -1536(%rbp)
	jmp	.LBB6_254
.Ltmp559:
.LBB6_259:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-1520(%rbp), %rax
	movq	%rax, -6576(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_264
# %bb.260:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-6576(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -6584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_265
	jmp	.LBB6_266
.LBB6_261:
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB6_262:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-6560(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1544(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1552(%rbp)
	movq	%rax, -1576(%rbp)
	leaq	-1544(%rbp), %rcx
	movq	%rcx, -1584(%rbp)
	movq	%rax, -1560(%rbp)
	leaq	-1552(%rbp), %rax
	movq	%rax, -1568(%rbp)
	leaq	-1584(%rbp), %rax
	movq	%rax, -1600(%rbp)
	movq	$2, -1592(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1600(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_263:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6568(%rbp), %rcx               # 8-byte Reload
	movq	$256, -1616(%rbp)               # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1624(%rbp)
	movq	%rax, -1656(%rbp)
	leaq	-1616(%rbp), %rcx
	movq	%rcx, -1664(%rbp)
	movq	%rax, -1640(%rbp)
	leaq	-1624(%rbp), %rax
	movq	%rax, -1648(%rbp)
	leaq	-1664(%rbp), %rax
	movq	%rax, -1680(%rbp)
	movq	$2, -1672(%rbp)
.Ltmp560:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1680(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp561:
.LBB6_264:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB6_265:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-6584(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1688(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1696(%rbp)
	movq	%rax, -1720(%rbp)
	leaq	-1688(%rbp), %rcx
	movq	%rcx, -1728(%rbp)
	movq	%rax, -1704(%rbp)
	leaq	-1696(%rbp), %rax
	movq	%rax, -1712(%rbp)
	leaq	-1728(%rbp), %rax
	movq	%rax, -1744(%rbp)
	movq	$2, -1736(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-1744(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_266:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-6576(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-1536(%rbp), %rcx
	movq	%rcx, (%rax)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-1524(%rbp), %eax
.Ltmp562:
	.loc	1 683 27                        # formatter_private.c3:683:27
	movl	%eax, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_267:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 684 6                         # formatter_private.c3:684:6
	cmpb	$42, -1793(%rbp)
	je	.LBB6_269
# %bb.268:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 684 23 is_stmt 0              # formatter_private.c3:684:23
	movl	$0, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_269:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 685 16 is_stmt 1              # formatter_private.c3:685:16
	movq	-1792(%rbp), %rax
	movq	%rax, -6600(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_416
# %bb.270:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6600(%rbp), %rax               # 8-byte Reload
	.loc	1 685 16                        # formatter_private.c3:685:16
	andq	$7, %rax
	movq	%rax, -6608(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_417
# %bb.271:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-6600(%rbp), %rcx               # 8-byte Reload
	.loc	1 685 15                        # formatter_private.c3:685:15
	movq	(%rcx), %rax
	addq	$1, %rax
	movq	%rax, (%rcx)
	movq	%rax, -1960(%rbp)
	.loc	1 686 6 is_stmt 1               # formatter_private.c3:686:6
	movq	-1960(%rbp), %rax
	cmpq	-1784(%rbp), %rax
	jb	.LBB6_273
# %bb.272:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 686 32 is_stmt 0              # formatter_private.c3:686:32
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_273:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	movq	-1768(%rbp), %rax
	movq	%rax, -6616(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_418
# %bb.274:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6616(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	andq	$7, %rax
	movq	%rax, -6624(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_419
# %bb.275:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-6616(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	movq	(%rax), %rax
	.loc	1 687 6                         # formatter_private.c3:687:6
	cmpq	-1760(%rbp), %rax
	jb	.LBB6_277
# %bb.276:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 687 42                        # formatter_private.c3:687:42
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_277:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 688 12 is_stmt 1              # formatter_private.c3:688:12
	movq	-1752(%rbp), %rax
	movq	%rax, -6640(%rbp)               # 8-byte Spill
	.loc	1 688 23 is_stmt 0              # formatter_private.c3:688:23
	movq	-1768(%rbp), %rax
	movq	%rax, -6632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_420
# %bb.278:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6632(%rbp), %rax               # 8-byte Reload
	.loc	1 688 23                        # formatter_private.c3:688:23
	andq	$7, %rax
	movq	%rax, -6648(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_421
# %bb.279:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6640(%rbp), %rax               # 8-byte Reload
	movq	-6632(%rbp), %rdx               # 8-byte Reload
	.loc	1 688 22                        # formatter_private.c3:688:22
	movq	(%rdx), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -6664(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -6656(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_422
# %bb.280:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6664(%rbp), %rax               # 8-byte Reload
	.loc	1 688 12                        # formatter_private.c3:688:12
	movq	(%rax), %rcx
	movq	%rcx, -2112(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -2104(%rbp)
	.loc	1 689 7 is_stmt 1               # formatter_private.c3:689:7
	movq	-2104(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_282
# %bb.281:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 689 40 is_stmt 0              # formatter_private.c3:689:40
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_282:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-2112(%rbp), %rax
	movq	%rax, -2272(%rbp)
	movq	-2104(%rbp), %rax
	movq	%rax, -2264(%rbp)
.Ltmp563:
	.loc	5 690 17 is_stmt 1              # types.c3:690:17
	movl	$2, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_284
# %bb.283:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.LBB6_284:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 19 11                         # types.c3:19:11
	movq	-2264(%rbp), %rax
	.loc	5 690 17                        # types.c3:690:17
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB6_286
# %bb.285:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.Ltmp564:
.LBB6_286:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 23 20                         # types.c3:23:20
	movq	-2264(%rbp), %rax
	movq	%rax, -2288(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-2288(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -2289(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-2288(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$2, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -2290(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$2147483647, -2296(%rbp)        # imm = 0x7FFFFFFF
	.loc	5 27 14                         # types.c3:27:14
	movl	$-2147483648, -2300(%rbp)       # imm = 0x80000000
	movq	-2288(%rbp), %rax
	movq	%rax, -2312(%rbp)
	movq	-2312(%rbp), %rax
	movq	%rax, -6680(%rbp)               # 8-byte Spill
	movq	%rax, -6672(%rbp)               # 8-byte Spill
.LBB6_287:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6672(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6696(%rbp)               # 8-byte Spill
.Ltmp565:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6681(%rbp)                # 1-byte Spill
	je	.LBB6_289
# %bb.288:                              #   in Loop: Header=BB6_287 Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6696(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6672(%rbp)               # 8-byte Spill
	movb	%al, -6681(%rbp)                # 1-byte Spill
	jne	.LBB6_287
.LBB6_289:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6681(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB6_290
	jmp	.LBB6_296
.LBB6_290:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp566:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-2272(%rbp), %rax
	movq	%rax, -6704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_423
# %bb.291:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-6704(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -2313(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6705(%rbp)                # 1-byte Spill
	je	.LBB6_293
# %bb.292:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-2313(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6705(%rbp)                # 1-byte Spill
.LBB6_293:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6705(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB6_294
	jmp	.LBB6_295
.LBB6_294:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_295:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-2313(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp567:
.LBB6_296:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6720(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB6_297
.LBB6_297:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6720(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6736(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6721(%rbp)                # 1-byte Spill
	je	.LBB6_299
# %bb.298:                              #   in Loop: Header=BB6_297 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6736(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6720(%rbp)               # 8-byte Spill
	movb	%al, -6721(%rbp)                # 1-byte Spill
	jne	.LBB6_297
.LBB6_299:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6721(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB6_300
	jmp	.LBB6_311
.LBB6_300:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp568:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-2272(%rbp), %rax
	movq	%rax, -6744(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_424
# %bb.301:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-6744(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -6752(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_425
# %bb.302:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-6744(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -2316(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6753(%rbp)                # 1-byte Spill
	je	.LBB6_304
# %bb.303:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-2316(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -6753(%rbp)                # 1-byte Spill
.LBB6_304:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6753(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB6_305
	jmp	.LBB6_306
.LBB6_305:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_306:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-2316(%rbp), %ecx
	movb	$1, %al
	cmpl	-2296(%rbp), %ecx
	movb	%al, -6754(%rbp)                # 1-byte Spill
	jg	.LBB6_308
# %bb.307:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 19 is_stmt 0               # types.c3:37:19
	movswl	-2316(%rbp), %eax
	cmpl	-2300(%rbp), %eax
	setl	%al
	movb	%al, -6754(%rbp)                # 1-byte Spill
.LBB6_308:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6754(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB6_309
	jmp	.LBB6_310
.LBB6_309:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_310:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-2316(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp569:
.LBB6_311:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6768(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB6_312
.LBB6_312:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6768(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6784(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6769(%rbp)                # 1-byte Spill
	je	.LBB6_314
# %bb.313:                              #   in Loop: Header=BB6_312 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6784(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6768(%rbp)               # 8-byte Spill
	movb	%al, -6769(%rbp)                # 1-byte Spill
	jne	.LBB6_312
.LBB6_314:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6769(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB6_315
	jmp	.LBB6_326
.LBB6_315:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp570:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-2272(%rbp), %rax
	movq	%rax, -6792(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_426
# %bb.316:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-6792(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -6800(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_427
# %bb.317:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 13                          # types.c3:0:13
	movq	-6792(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -2388(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6801(%rbp)                # 1-byte Spill
	je	.LBB6_319
# %bb.318:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -2388(%rbp)
	setl	%al
	movb	%al, -6801(%rbp)                # 1-byte Spill
.LBB6_319:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6801(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB6_320
	jmp	.LBB6_321
.LBB6_320:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_321:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-2388(%rbp), %ecx
	movb	$1, %al
	cmpl	-2296(%rbp), %ecx
	movb	%al, -6802(%rbp)                # 1-byte Spill
	jg	.LBB6_323
# %bb.322:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 19 is_stmt 0               # types.c3:42:19
	movl	-2388(%rbp), %eax
	cmpl	-2300(%rbp), %eax
	setl	%al
	movb	%al, -6802(%rbp)                # 1-byte Spill
.LBB6_323:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6802(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB6_324
	jmp	.LBB6_325
.LBB6_324:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_325:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-2388(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp571:
.LBB6_326:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6816(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB6_327
.LBB6_327:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6816(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6832(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6817(%rbp)                # 1-byte Spill
	je	.LBB6_329
# %bb.328:                              #   in Loop: Header=BB6_327 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6832(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6816(%rbp)               # 8-byte Spill
	movb	%al, -6817(%rbp)                # 1-byte Spill
	jne	.LBB6_327
.LBB6_329:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6817(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB6_330
	jmp	.LBB6_341
.LBB6_330:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp572:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-2272(%rbp), %rax
	movq	%rax, -6840(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_428
# %bb.331:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6840(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -6848(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_429
# %bb.332:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-6840(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -2472(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6849(%rbp)                # 1-byte Spill
	je	.LBB6_334
# %bb.333:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -2472(%rbp)
	setl	%al
	movb	%al, -6849(%rbp)                # 1-byte Spill
.LBB6_334:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6849(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB6_335
	jmp	.LBB6_336
.LBB6_335:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_336:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-2472(%rbp), %rcx
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movslq	-2296(%rbp), %rdx
	.loc	5 47 8                          # types.c3:47:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -6850(%rbp)                # 1-byte Spill
	jg	.LBB6_338
# %bb.337:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 19                         # types.c3:47:19
	movq	-2472(%rbp), %rax
	.loc	5 47 23                         # types.c3:47:23
	movslq	-2300(%rbp), %rcx
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rcx, %rax
	setl	%al
	movb	%al, -6850(%rbp)                # 1-byte Spill
.LBB6_338:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6850(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB6_339
	jmp	.LBB6_340
.LBB6_339:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_340:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-2472(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp573:
.LBB6_341:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6864(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB6_342
.LBB6_342:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6864(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6880(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6865(%rbp)                # 1-byte Spill
	je	.LBB6_344
# %bb.343:                              #   in Loop: Header=BB6_342 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6880(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6864(%rbp)               # 8-byte Spill
	movb	%al, -6865(%rbp)                # 1-byte Spill
	jne	.LBB6_342
.LBB6_344:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6865(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB6_345
	jmp	.LBB6_356
.LBB6_345:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp574:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-2272(%rbp), %rax
	movq	%rax, -6888(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_430
# %bb.346:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6888(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -6896(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_431
# %bb.347:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6888(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -2552(%rbp)
	movq	%rax, -2560(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -2290(%rbp)
	movb	%al, -6897(%rbp)                # 1-byte Spill
	je	.LBB6_349
# %bb.348:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-2552(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -6897(%rbp)                # 1-byte Spill
.LBB6_349:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27                          # types.c3:0:27
	movb	-6897(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB6_350
	jmp	.LBB6_351
.LBB6_350:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_351:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-2560(%rbp), %rdi
	movq	-2552(%rbp), %rdx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movslq	-2296(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	movb	$1, %al
	.loc	5 52 8                          # types.c3:52:8
	subq	%rdi, %rsi
	sbbq	%rdx, %rcx
	movb	%al, -6898(%rbp)                # 1-byte Spill
	jl	.LBB6_353
	jmp	.LBB6_352
.LBB6_352:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 19                         # types.c3:52:19
	movq	-2560(%rbp), %rdx
	movq	-2552(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movslq	-2300(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	movb	%al, -6898(%rbp)                # 1-byte Spill
.LBB6_353:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6898(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB6_354
	jmp	.LBB6_355
.LBB6_354:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_355:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-2560(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp575:
.LBB6_356:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6912(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB6_357
.LBB6_357:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6912(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6928(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6913(%rbp)                # 1-byte Spill
	je	.LBB6_359
# %bb.358:                              #   in Loop: Header=BB6_357 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6928(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6912(%rbp)               # 8-byte Spill
	movb	%al, -6913(%rbp)                # 1-byte Spill
	jne	.LBB6_357
.LBB6_359:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6913(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB6_360
	jmp	.LBB6_364
.LBB6_360:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp576:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-2272(%rbp), %rax
	movq	%rax, -6936(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_432
# %bb.361:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-6936(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -2625(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-2625(%rbp), %eax
	cmpl	%eax, -2296(%rbp)
	jge	.LBB6_363
# %bb.362:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_363:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-2625(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp577:
.LBB6_364:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6944(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB6_365
.LBB6_365:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6944(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -6960(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6945(%rbp)                # 1-byte Spill
	je	.LBB6_367
# %bb.366:                              #   in Loop: Header=BB6_365 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-6960(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6944(%rbp)               # 8-byte Spill
	movb	%al, -6945(%rbp)                # 1-byte Spill
	jne	.LBB6_365
.LBB6_367:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6945(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB6_368
	jmp	.LBB6_375
.LBB6_368:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp578:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-2272(%rbp), %rax
	movq	%rax, -6968(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_433
# %bb.369:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-6968(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -6976(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_434
# %bb.370:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 16                          # types.c3:0:16
	movq	-6968(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -2628(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-2628(%rbp), %ecx
	movb	$1, %al
	cmpl	%ecx, -2296(%rbp)
	movb	%al, -6977(%rbp)                # 1-byte Spill
	jl	.LBB6_372
# %bb.371:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-2628(%rbp), %eax
	cmpl	%eax, -2300(%rbp)
	setg	%al
	movb	%al, -6977(%rbp)                # 1-byte Spill
.LBB6_372:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-6977(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB6_373
	jmp	.LBB6_374
.LBB6_373:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_374:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-2628(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp579:
.LBB6_375:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6992(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB6_376
.LBB6_376:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-6992(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7008(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -6993(%rbp)                # 1-byte Spill
	je	.LBB6_378
# %bb.377:                              #   in Loop: Header=BB6_376 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7008(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -6992(%rbp)               # 8-byte Spill
	movb	%al, -6993(%rbp)                # 1-byte Spill
	jne	.LBB6_376
.LBB6_378:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-6993(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB6_379
	jmp	.LBB6_386
.LBB6_379:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp580:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-2272(%rbp), %rax
	movq	%rax, -7016(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_435
# %bb.380:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-7016(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -7024(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_436
# %bb.381:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 14                          # types.c3:0:14
	movq	-7016(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -2708(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-2708(%rbp), %ecx
	cmpl	%ecx, -2296(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7025(%rbp)                # 1-byte Spill
	jne	.LBB6_383
# %bb.382:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-2708(%rbp), %eax
	cmpl	%eax, -2300(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -7025(%rbp)                # 1-byte Spill
.LBB6_383:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7025(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB6_384
	jmp	.LBB6_385
.LBB6_384:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_385:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-2708(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp581:
.LBB6_386:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7040(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB6_387
.LBB6_387:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7040(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7056(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7041(%rbp)                # 1-byte Spill
	je	.LBB6_389
# %bb.388:                              #   in Loop: Header=BB6_387 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7056(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7040(%rbp)               # 8-byte Spill
	movb	%al, -7041(%rbp)                # 1-byte Spill
	jne	.LBB6_387
.LBB6_389:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7041(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB6_390
	jmp	.LBB6_397
.LBB6_390:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp582:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-2272(%rbp), %rax
	movq	%rax, -7064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_437
# %bb.391:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-7064(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -7072(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_438
# %bb.392:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 15                          # types.c3:0:15
	movq	-7064(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -2792(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-2792(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movslq	-2296(%rbp), %rax
	.loc	5 68 8                          # types.c3:68:8
	cmpq	%rcx, %rax
	setl	%al
	cmpq	$0, %rcx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7073(%rbp)                # 1-byte Spill
	jne	.LBB6_394
# %bb.393:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 68 19                         # types.c3:68:19
	movq	-2792(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movslq	-2300(%rbp), %rcx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rax, %rcx
	setg	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	movb	%al, -7073(%rbp)                # 1-byte Spill
.LBB6_394:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7073(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB6_395
	jmp	.LBB6_396
.LBB6_395:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_396:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-2792(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp583:
.LBB6_397:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-6680(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7088(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB6_398
.LBB6_398:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-7088(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7104(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7089(%rbp)                # 1-byte Spill
	je	.LBB6_400
# %bb.399:                              #   in Loop: Header=BB6_398 Depth=2
	.loc	5 0 8                           # types.c3:0:8
	movq	-7104(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7088(%rbp)               # 8-byte Spill
	movb	%al, -7089(%rbp)                # 1-byte Spill
	jne	.LBB6_398
.LBB6_400:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movb	-7089(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB6_401
	jmp	.LBB6_408
.LBB6_401:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp584:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-2272(%rbp), %rax
	movq	%rax, -7112(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_439
# %bb.402:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-7112(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -7120(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_440
# %bb.403:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-7112(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -2872(%rbp)
	movq	%rax, -2880(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-2880(%rbp), %rsi
	movq	-2872(%rbp), %rcx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movslq	-2296(%rbp), %rdx
	movq	%rdx, %rax
	sarq	$63, %rax
	.loc	5 72 8                          # types.c3:72:8
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	shrq	$63, %rcx
                                        # kill: def $cl killed $cl killed $rcx
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -7121(%rbp)                # 1-byte Spill
	jne	.LBB6_405
# %bb.404:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 72 19                         # types.c3:72:19
	movq	-2880(%rbp), %rcx
	movq	-2872(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movslq	-2300(%rbp), %rsi
	movq	%rsi, %rdx
	sarq	$63, %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rsi, %rcx
	movq	%rax, %rcx
	sbbq	%rdx, %rcx
	setl	%cl
	testq	%rax, %rax
	setns	%al
	andb	%cl, %al
	movb	%al, -7121(%rbp)                # 1-byte Spill
.LBB6_405:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 19                          # types.c3:0:19
	movb	-7121(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB6_406
	jmp	.LBB6_407
.LBB6_406:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -2256(%rbp)
	jmp	.LBB6_410
.LBB6_407:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-2880(%rbp), %eax
	movl	%eax, -2276(%rbp)
	jmp	.LBB6_409
.Ltmp585:
.LBB6_408:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.123(%rip), %rax
	movq	%rax, -2960(%rbp)
	movq	$30, -2952(%rbp)
.Ltmp586:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-2960(%rbp), %rdi
	movq	-2952(%rbp), %rsi
	movq	$0, -2968(%rbp)
	movq	$0, -2976(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.124(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.125(%rip), %r8
	movl	$25, %r9d
	leaq	-2976(%rbp), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_409:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-2276(%rbp), %eax
	movl	%eax, -2244(%rbp)
	movq	$0, -2256(%rbp)
.Ltmp587:
.LBB6_410:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 691 9 is_stmt 1               # formatter_private.c3:691:9
	cmpq	$0, -2256(%rbp)
	sete	%al
	testb	$1, %al
	jne	.LBB6_411
	jmp	.LBB6_412
.LBB6_411:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-2244(%rbp), %eax
	.loc	1 691 19 is_stmt 0              # formatter_private.c3:691:19
	movl	%eax, -4236(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_412:                              #   in Loop: Header=BB6_4 Depth=1
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -2984(%rbp)
	movq	-2984(%rbp), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	jmp	.LBB6_441
.LBB6_413:
	.loc	1 682 23 is_stmt 1              # formatter_private.c3:682:23
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	callq	*(%rax)
.LBB6_414:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6536(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1808(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1816(%rbp)
	movq	%rax, -1848(%rbp)
	leaq	-1808(%rbp), %rcx
	movq	%rcx, -1856(%rbp)
	movq	%rax, -1832(%rbp)
	leaq	-1816(%rbp), %rax
	movq	%rax, -1840(%rbp)
	leaq	-1856(%rbp), %rax
	movq	%rax, -1872(%rbp)
	movq	$2, -1864(%rbp)
	.loc	1 682 23                        # formatter_private.c3:682:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1872(%rbp), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_415:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6544(%rbp), %rcx               # 8-byte Reload
	movq	$256, -1888(%rbp)               # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1896(%rbp)
	movq	%rax, -1928(%rbp)
	leaq	-1888(%rbp), %rcx
	movq	%rcx, -1936(%rbp)
	movq	%rax, -1912(%rbp)
	leaq	-1896(%rbp), %rax
	movq	%rax, -1920(%rbp)
	leaq	-1936(%rbp), %rax
	movq	%rax, -1952(%rbp)
	movq	$2, -1944(%rbp)
.Ltmp588:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1952(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp589:
.LBB6_416:
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	callq	*(%rax)
.LBB6_417:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-6608(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1968(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1976(%rbp)
	movq	%rax, -2008(%rbp)
	leaq	-1968(%rbp), %rcx
	movq	%rcx, -2016(%rbp)
	movq	%rax, -1992(%rbp)
	leaq	-1976(%rbp), %rax
	movq	%rax, -2000(%rbp)
	leaq	-2016(%rbp), %rax
	movq	%rax, -2032(%rbp)
	movq	$2, -2024(%rbp)
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2032(%rbp), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_418:
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	callq	*(%rax)
.LBB6_419:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6624(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2040(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2048(%rbp)
	movq	%rax, -2072(%rbp)
	leaq	-2040(%rbp), %rcx
	movq	%rcx, -2080(%rbp)
	movq	%rax, -2056(%rbp)
	leaq	-2048(%rbp), %rax
	movq	%rax, -2064(%rbp)
	leaq	-2080(%rbp), %rax
	movq	%rax, -2096(%rbp)
	movq	$2, -2088(%rbp)
	.loc	1 687 7                         # formatter_private.c3:687:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2096(%rbp), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_420:
	.loc	1 688 23 is_stmt 1              # formatter_private.c3:688:23
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	callq	*(%rax)
.LBB6_421:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6648(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2120(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2128(%rbp)
	movq	%rax, -2152(%rbp)
	leaq	-2120(%rbp), %rcx
	movq	%rcx, -2160(%rbp)
	movq	%rax, -2136(%rbp)
	leaq	-2128(%rbp), %rax
	movq	%rax, -2144(%rbp)
	leaq	-2160(%rbp), %rax
	movq	%rax, -2176(%rbp)
	movq	$2, -2168(%rbp)
	.loc	1 688 23                        # formatter_private.c3:688:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2176(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_422:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-6656(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2184(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2192(%rbp)
	movq	%rax, -2216(%rbp)
	leaq	-2184(%rbp), %rcx
	movq	%rcx, -2224(%rbp)
	movq	%rax, -2200(%rbp)
	leaq	-2192(%rbp), %rax
	movq	%rax, -2208(%rbp)
	leaq	-2224(%rbp), %rax
	movq	%rax, -2240(%rbp)
	movq	$2, -2232(%rbp)
	.loc	1 688 12                        # formatter_private.c3:688:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2240(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_423:
.Ltmp590:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp591:
.LBB6_424:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB6_425:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-6752(%rbp), %rcx               # 8-byte Reload
	movq	$2, -2328(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2336(%rbp)
	movq	%rax, -2360(%rbp)
	leaq	-2328(%rbp), %rcx
	movq	%rcx, -2368(%rbp)
	movq	%rax, -2344(%rbp)
	leaq	-2336(%rbp), %rax
	movq	%rax, -2352(%rbp)
	leaq	-2368(%rbp), %rax
	movq	%rax, -2384(%rbp)
	movq	$2, -2376(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2384(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp592:
.LBB6_426:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB6_427:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-6800(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2400(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2408(%rbp)
	movq	%rax, -2440(%rbp)
	leaq	-2400(%rbp), %rcx
	movq	%rcx, -2448(%rbp)
	movq	%rax, -2424(%rbp)
	leaq	-2408(%rbp), %rax
	movq	%rax, -2432(%rbp)
	leaq	-2448(%rbp), %rax
	movq	%rax, -2464(%rbp)
	movq	$2, -2456(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2464(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp593:
.LBB6_428:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB6_429:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-6848(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2480(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2488(%rbp)
	movq	%rax, -2520(%rbp)
	leaq	-2480(%rbp), %rcx
	movq	%rcx, -2528(%rbp)
	movq	%rax, -2504(%rbp)
	leaq	-2488(%rbp), %rax
	movq	%rax, -2512(%rbp)
	leaq	-2528(%rbp), %rax
	movq	%rax, -2544(%rbp)
	movq	$2, -2536(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2544(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp594:
.LBB6_430:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB6_431:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6896(%rbp), %rcx               # 8-byte Reload
	movq	$16, -2568(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2576(%rbp)
	movq	%rax, -2600(%rbp)
	leaq	-2568(%rbp), %rcx
	movq	%rcx, -2608(%rbp)
	movq	%rax, -2584(%rbp)
	leaq	-2576(%rbp), %rax
	movq	%rax, -2592(%rbp)
	leaq	-2608(%rbp), %rax
	movq	%rax, -2624(%rbp)
	movq	$2, -2616(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2624(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp595:
.LBB6_432:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp596:
.LBB6_433:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB6_434:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-6976(%rbp), %rcx               # 8-byte Reload
	movq	$2, -2640(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2648(%rbp)
	movq	%rax, -2680(%rbp)
	leaq	-2640(%rbp), %rcx
	movq	%rcx, -2688(%rbp)
	movq	%rax, -2664(%rbp)
	leaq	-2648(%rbp), %rax
	movq	%rax, -2672(%rbp)
	leaq	-2688(%rbp), %rax
	movq	%rax, -2704(%rbp)
	movq	$2, -2696(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2704(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp597:
.LBB6_435:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB6_436:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-7024(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2720(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2728(%rbp)
	movq	%rax, -2760(%rbp)
	leaq	-2720(%rbp), %rcx
	movq	%rcx, -2768(%rbp)
	movq	%rax, -2744(%rbp)
	leaq	-2728(%rbp), %rax
	movq	%rax, -2752(%rbp)
	leaq	-2768(%rbp), %rax
	movq	%rax, -2784(%rbp)
	movq	$2, -2776(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2784(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp598:
.LBB6_437:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB6_438:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-7072(%rbp), %rcx               # 8-byte Reload
	movq	$8, -2800(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2808(%rbp)
	movq	%rax, -2840(%rbp)
	leaq	-2800(%rbp), %rcx
	movq	%rcx, -2848(%rbp)
	movq	%rax, -2824(%rbp)
	leaq	-2808(%rbp), %rax
	movq	%rax, -2832(%rbp)
	leaq	-2848(%rbp), %rax
	movq	%rax, -2864(%rbp)
	movq	$2, -2856(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2864(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp599:
.LBB6_439:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB6_440:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-7120(%rbp), %rcx               # 8-byte Reload
	movq	$16, -2888(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2896(%rbp)
	movq	%rax, -2920(%rbp)
	leaq	-2888(%rbp), %rcx
	movq	%rcx, -2928(%rbp)
	movq	%rax, -2904(%rbp)
	leaq	-2896(%rbp), %rax
	movq	%rax, -2912(%rbp)
	leaq	-2928(%rbp), %rax
	movq	%rax, -2944(%rbp)
	movq	$2, -2936(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-2944(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp600:
.LBB6_441:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	5 0 17                          # types.c3:0:17
	movq	-6592(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7136(%rbp)               # 8-byte Spill
	.loc	3 423 16 is_stmt 1              # formatter.c3:423:16
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_443
# %bb.442:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-7136(%rbp), %rax               # 8-byte Reload
	.loc	3 423 16                        # formatter.c3:423:16
	movq	%rax, -4232(%rbp)
	jmp	.LBB6_444
.LBB6_443:                              #   in Loop: Header=BB6_4 Depth=1
	movl	-4236(%rbp), %eax
	movl	%eax, -4220(%rbp)
	movq	$0, -4232(%rbp)
.LBB6_444:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 16                          # formatter.c3:0:16
	jmp	.LBB6_445
.LBB6_445:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 424 14 is_stmt 1              # formatter.c3:424:14
	movq	-4232(%rbp), %rax
	movq	%rax, -7144(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_447
# %bb.446:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7144(%rbp), %rax               # 8-byte Reload
	.loc	3 424 14                        # formatter.c3:424:14
	movq	%rax, -4248(%rbp)
	jmp	.LBB6_448
.LBB6_447:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4248(%rbp)
.LBB6_448:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4248(%rbp)
	je	.LBB6_451
# %bb.449:
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-3696(%rbp), %rax
	movq	%rax, -4264(%rbp)
	movq	-4264(%rbp), %rsi
.Ltmp601:
	.loc	3 339 2 is_stmt 1               # formatter.c3:339:2
	leaq	-4272(%rbp), %rdi
	leaq	.L.str.82(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	.loc	3 340 9                         # formatter.c3:340:9
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -4256(%rbp)
# %bb.450:
	movq	-4256(%rbp), %rax
	.loc	3 340 9 epilogue_begin is_stmt 0 # formatter.c3:340:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp602:
.LBB6_451:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 425 16 is_stmt 1              # formatter.c3:425:16
	cmpl	$0, -4220(%rbp)
	jge	.LBB6_453
# %bb.452:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 425 27 is_stmt 0              # formatter.c3:425:27
	xorl	%eax, %eax
	movl	%eax, -7148(%rbp)               # 4-byte Spill
	jmp	.LBB6_454
.LBB6_453:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 425 31                        # formatter.c3:425:31
	movl	-4220(%rbp), %eax
	movl	%eax, -7148(%rbp)               # 4-byte Spill
.LBB6_454:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 31                          # formatter.c3:0:31
	movl	-7148(%rbp), %ecx               # 4-byte Reload
	.loc	3 425 4                         # formatter.c3:425:4
	movq	-3696(%rbp), %rax
	movl	%ecx, 24(%rax)
	.loc	3 426 8 is_stmt 1               # formatter.c3:426:8
	movq	-3704(%rbp), %rcx
	movq	%rcx, -7176(%rbp)               # 8-byte Spill
	movq	-3712(%rbp), %rax
	movq	%rax, -7168(%rbp)               # 8-byte Spill
	.loc	3 426 15 is_stmt 0              # formatter.c3:426:15
	movq	-3760(%rbp), %rax
	movq	%rax, -7160(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_856
# %bb.455:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-7168(%rbp), %rax               # 8-byte Reload
	movq	-7160(%rbp), %rcx               # 8-byte Reload
	.loc	3 426 15                        # formatter.c3:426:15
	movb	(%rax,%rcx), %al
	movb	%al, -3761(%rbp)
.Ltmp603:
.LBB6_456:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 430 15 is_stmt 1              # formatter.c3:430:15
	movl	$0, -4340(%rbp)
	.loc	3 431 7                         # formatter.c3:431:7
	movq	-3752(%rbp), %rax
	cmpq	-3720(%rbp), %rax
	jb	.LBB6_467
# %bb.457:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 7 is_stmt 0                 # formatter.c3:0:7
	movq	-3696(%rbp), %rax
	movq	%rax, -4352(%rbp)
	movq	std.io.NOT_ENOUGH_ARGUMENTS@GOTPCREL(%rip), %rax
	movq	%rax, -4360(%rbp)
.Ltmp604:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4352(%rbp)
	jne	.LBB6_459
# %bb.458:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp605:
.LBB6_459:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4352(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_461
# %bb.460:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4352(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4368(%rbp)
	jmp	.LBB6_462
.LBB6_461:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4352(%rbp), %rax
	movq	-4360(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4360(%rbp), %rax
	movq	%rax, -4368(%rbp)
.Ltmp606:
.LBB6_462:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 434 4                         # formatter.c3:434:4
	movq	-3736(%rbp), %rax
	movq	%rax, -7192(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 434 17 is_stmt 0              # formatter.c3:434:17
	leaq	-4384(%rbp), %rdi
	leaq	.L.str.84(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_464
# %bb.463:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7184(%rbp), %rax               # 8-byte Reload
	.loc	3 434 17                        # formatter.c3:434:17
	movq	%rax, -4376(%rbp)
	jmp	.LBB6_465
.LBB6_464:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_466
.LBB6_465:
	movq	-4376(%rbp), %rax
	.loc	3 434 17 epilogue_begin         # formatter.c3:434:17
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_466:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7192(%rbp), %rax               # 8-byte Reload
	.loc	3 434 4                         # formatter.c3:434:4
	addq	-4384(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 435 4 is_stmt 1               # formatter.c3:435:4
	jmp	.LBB6_847
.Ltmp607:
.LBB6_467:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 437 17                        # formatter.c3:437:17
	movq	-3720(%rbp), %rcx
	movq	%rcx, -7216(%rbp)               # 8-byte Spill
	movq	-3728(%rbp), %rax
	movq	%rax, -7208(%rbp)               # 8-byte Spill
	.loc	3 437 22 is_stmt 0              # formatter.c3:437:22
	movq	-3752(%rbp), %rax
	movq	%rax, -7200(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -3752(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_857
# %bb.468:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 22                          # formatter.c3:0:22
	movq	-7208(%rbp), %rax               # 8-byte Reload
	movq	-7200(%rbp), %rcx               # 8-byte Reload
	.loc	3 437 22                        # formatter.c3:437:22
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -7232(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -7224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_858
# %bb.469:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 22                          # formatter.c3:0:22
	movq	-7232(%rbp), %rax               # 8-byte Reload
	.loc	3 437 17                        # formatter.c3:437:17
	movq	(%rax), %rcx
	movq	%rcx, -4400(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -4392(%rbp)
	movb	-3761(%rbp), %al
	movb	%al, -4529(%rbp)
# %bb.470:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movb	-4529(%rbp), %al
	addb	$-65, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -7240(%rbp)               # 8-byte Spill
	subb	$55, %al
	ja	.LBB6_800
# %bb.866:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-7240(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI6_1(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB6_471:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp608:
	.loc	3 441 12 is_stmt 1              # formatter.c3:441:12
	movl	$10, -4340(%rbp)
	.loc	3 442 5                         # formatter.c3:442:5
	movq	-3696(%rbp), %rax
	.loc	3 442 23 is_stmt 0              # formatter.c3:442:23
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB6_810
.Ltmp609:
.LBB6_472:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 444 5 is_stmt 1               # formatter.c3:444:5
	movq	-3696(%rbp), %rax
	.loc	3 444 28 is_stmt 0              # formatter.c3:444:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp610:
.LBB6_473:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 447 12 is_stmt 1              # formatter.c3:447:12
	movl	$16, -4340(%rbp)
	jmp	.LBB6_810
.Ltmp611:
.LBB6_474:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 449 5                         # formatter.c3:449:5
	movq	-3696(%rbp), %rax
	.loc	3 449 28 is_stmt 0              # formatter.c3:449:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp612:
.LBB6_475:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 452 12 is_stmt 1              # formatter.c3:452:12
	movl	$8, -4340(%rbp)
	jmp	.LBB6_810
.Ltmp613:
.LBB6_476:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 454 5                         # formatter.c3:454:5
	movq	-3696(%rbp), %rax
	.loc	3 454 28 is_stmt 0              # formatter.c3:454:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp614:
.LBB6_477:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 457 12 is_stmt 1              # formatter.c3:457:12
	movl	$2, -4340(%rbp)
	jmp	.LBB6_810
.Ltmp615:
.LBB6_478:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 459 5                         # formatter.c3:459:5
	movq	-3696(%rbp), %rax
	.loc	3 459 28 is_stmt 0              # formatter.c3:459:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp616:
.LBB6_479:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 462 5 is_stmt 1               # formatter.c3:462:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7256(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4552(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp617:
	.loc	3 462 44 is_stmt 0              # formatter.c3:462:44
	leaq	-4576(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7248(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_481
# %bb.480:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7248(%rbp), %rax               # 8-byte Reload
	.loc	3 462 44                        # formatter.c3:462:44
	movq	%rax, -4568(%rbp)
	jmp	.LBB6_484
.LBB6_481:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4576(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4584(%rbp), %rdi
	callq	std.io.Formatter.atoa@PLT
	movq	%rax, -7264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_483
# %bb.482:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7264(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4568(%rbp)
	jmp	.LBB6_484
.LBB6_483:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-4584(%rbp), %rax
	movq	%rax, -4560(%rbp)
	movq	$0, -4568(%rbp)
.LBB6_484:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 12 is_stmt 1              # formatter.c3:346:12
	jmp	.LBB6_485
.LBB6_485:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 18 is_stmt 0              # formatter.c3:346:18
	movq	-4568(%rbp), %rax
	movq	%rax, -7272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_487
# %bb.486:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7272(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4592(%rbp)
	jmp	.LBB6_488
.LBB6_487:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4592(%rbp)
.LBB6_488:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4592(%rbp)
	je	.LBB6_509
# %bb.489:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4592(%rbp), %rax
	movq	%rax, -4600(%rbp)
# %bb.490:
	movq	-4600(%rbp), %rcx
	movq	%rcx, -7280(%rbp)               # 8-byte Spill
.Ltmp618:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB6_492
# %bb.491:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7280(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB6_498
.LBB6_492:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4552(%rbp), %rax
	movq	%rax, -4608(%rbp)
	movq	-4592(%rbp), %rax
	movq	%rax, -4616(%rbp)
.Ltmp619:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4608(%rbp)
	jne	.LBB6_494
# %bb.493:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp620:
.LBB6_494:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4608(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_496
# %bb.495:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4608(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4624(%rbp)
	jmp	.LBB6_497
.LBB6_496:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4608(%rbp), %rax
	movq	-4616(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4616(%rbp), %rax
	movq	%rax, -4624(%rbp)
.LBB6_497:
	movq	-4624(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB6_510
.LBB6_498:
	jmp	.LBB6_499
.Ltmp621:
.LBB6_499:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4552(%rbp), %rax
	movq	%rax, -4632(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4640(%rbp)
.Ltmp622:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4632(%rbp)
	jne	.LBB6_501
# %bb.500:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp623:
.LBB6_501:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4632(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_503
# %bb.502:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4632(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4648(%rbp)
	jmp	.LBB6_504
.LBB6_503:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4632(%rbp), %rax
	movq	-4640(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4640(%rbp), %rax
	movq	%rax, -4648(%rbp)
.LBB6_504:
	movq	-4648(%rbp), %rax
	movq	%rax, -4592(%rbp)
	movq	-4552(%rbp), %rsi
.Ltmp624:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4664(%rbp), %rdi
	leaq	.L.str.85(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7288(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_506
# %bb.505:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7288(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4656(%rbp)
	jmp	.LBB6_507
.LBB6_506:
	jmp	.LBB6_508
.LBB6_507:
	movq	-4656(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB6_510
.LBB6_508:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4592(%rbp), %rax
	movq	%rax, -4544(%rbp)
	jmp	.LBB6_510
.Ltmp625:
.LBB6_509:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 359 9                         # formatter.c3:359:9
	jmp	.LBB6_511
.LBB6_510:
	movq	-4544(%rbp), %rax
	.loc	3 359 9 epilogue_begin is_stmt 0 # formatter.c3:359:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp626:
.LBB6_511:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-7256(%rbp), %rax               # 8-byte Reload
	.loc	3 462 5 is_stmt 1               # formatter.c3:462:5
	addq	-4560(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 463 5                         # formatter.c3:463:5
	jmp	.LBB6_847
.Ltmp627:
.LBB6_512:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 465 5                         # formatter.c3:465:5
	movq	-3696(%rbp), %rax
	.loc	3 465 28 is_stmt 0              # formatter.c3:465:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp628:
.LBB6_513:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 468 5 is_stmt 1               # formatter.c3:468:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7304(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4680(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp629:
	.loc	3 468 44 is_stmt 0              # formatter.c3:468:44
	leaq	-4704(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7296(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_515
# %bb.514:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7296(%rbp), %rax               # 8-byte Reload
	.loc	3 468 44                        # formatter.c3:468:44
	movq	%rax, -4696(%rbp)
	jmp	.LBB6_518
.LBB6_515:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4704(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4712(%rbp), %rdi
	callq	std.io.Formatter.ftoa@PLT
	movq	%rax, -7312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_517
# %bb.516:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7312(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4696(%rbp)
	jmp	.LBB6_518
.LBB6_517:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-4712(%rbp), %rax
	movq	%rax, -4688(%rbp)
	movq	$0, -4696(%rbp)
.LBB6_518:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 12 is_stmt 1              # formatter.c3:346:12
	jmp	.LBB6_519
.LBB6_519:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 18 is_stmt 0              # formatter.c3:346:18
	movq	-4696(%rbp), %rax
	movq	%rax, -7320(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_521
# %bb.520:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7320(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4720(%rbp)
	jmp	.LBB6_522
.LBB6_521:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4720(%rbp)
.LBB6_522:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4720(%rbp)
	je	.LBB6_543
# %bb.523:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4720(%rbp), %rax
	movq	%rax, -4728(%rbp)
# %bb.524:
	movq	-4728(%rbp), %rcx
	movq	%rcx, -7328(%rbp)               # 8-byte Spill
.Ltmp630:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB6_526
# %bb.525:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7328(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB6_532
.LBB6_526:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4680(%rbp), %rax
	movq	%rax, -4736(%rbp)
	movq	-4720(%rbp), %rax
	movq	%rax, -4744(%rbp)
.Ltmp631:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4736(%rbp)
	jne	.LBB6_528
# %bb.527:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp632:
.LBB6_528:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4736(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_530
# %bb.529:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4736(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4752(%rbp)
	jmp	.LBB6_531
.LBB6_530:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4736(%rbp), %rax
	movq	-4744(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4744(%rbp), %rax
	movq	%rax, -4752(%rbp)
.LBB6_531:
	movq	-4752(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB6_544
.LBB6_532:
	jmp	.LBB6_533
.Ltmp633:
.LBB6_533:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4680(%rbp), %rax
	movq	%rax, -4760(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4768(%rbp)
.Ltmp634:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4760(%rbp)
	jne	.LBB6_535
# %bb.534:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp635:
.LBB6_535:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4760(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_537
# %bb.536:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4760(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4776(%rbp)
	jmp	.LBB6_538
.LBB6_537:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4760(%rbp), %rax
	movq	-4768(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4768(%rbp), %rax
	movq	%rax, -4776(%rbp)
.LBB6_538:
	movq	-4776(%rbp), %rax
	movq	%rax, -4720(%rbp)
	movq	-4680(%rbp), %rsi
.Ltmp636:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4792(%rbp), %rdi
	leaq	.L.str.86(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7336(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_540
# %bb.539:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7336(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4784(%rbp)
	jmp	.LBB6_541
.LBB6_540:
	jmp	.LBB6_542
.LBB6_541:
	movq	-4784(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB6_544
.LBB6_542:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4720(%rbp), %rax
	movq	%rax, -4672(%rbp)
	jmp	.LBB6_544
.Ltmp637:
.LBB6_543:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 359 9                         # formatter.c3:359:9
	jmp	.LBB6_545
.LBB6_544:
	movq	-4672(%rbp), %rax
	.loc	3 359 9 epilogue_begin is_stmt 0 # formatter.c3:359:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp638:
.LBB6_545:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-7304(%rbp), %rax               # 8-byte Reload
	.loc	3 468 5 is_stmt 1               # formatter.c3:468:5
	addq	-4688(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 469 5                         # formatter.c3:469:5
	jmp	.LBB6_847
.Ltmp639:
.LBB6_546:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 471 5                         # formatter.c3:471:5
	movq	-3696(%rbp), %rax
	.loc	3 471 28 is_stmt 0              # formatter.c3:471:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp640:
.LBB6_547:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 474 5 is_stmt 1               # formatter.c3:474:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7352(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4808(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp641:
	.loc	3 474 44 is_stmt 0              # formatter.c3:474:44
	leaq	-4832(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7344(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_549
# %bb.548:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7344(%rbp), %rax               # 8-byte Reload
	.loc	3 474 44                        # formatter.c3:474:44
	movq	%rax, -4824(%rbp)
	jmp	.LBB6_552
.LBB6_549:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4832(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4840(%rbp), %rdi
	callq	std.io.Formatter.etoa@PLT
	movq	%rax, -7360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_551
# %bb.550:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7360(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4824(%rbp)
	jmp	.LBB6_552
.LBB6_551:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-4840(%rbp), %rax
	movq	%rax, -4816(%rbp)
	movq	$0, -4824(%rbp)
.LBB6_552:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 12 is_stmt 1              # formatter.c3:346:12
	jmp	.LBB6_553
.LBB6_553:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 18 is_stmt 0              # formatter.c3:346:18
	movq	-4824(%rbp), %rax
	movq	%rax, -7368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_555
# %bb.554:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7368(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4848(%rbp)
	jmp	.LBB6_556
.LBB6_555:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4848(%rbp)
.LBB6_556:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4848(%rbp)
	je	.LBB6_577
# %bb.557:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4848(%rbp), %rax
	movq	%rax, -4856(%rbp)
# %bb.558:
	movq	-4856(%rbp), %rcx
	movq	%rcx, -7376(%rbp)               # 8-byte Spill
.Ltmp642:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB6_560
# %bb.559:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7376(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB6_566
.LBB6_560:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4808(%rbp), %rax
	movq	%rax, -4864(%rbp)
	movq	-4848(%rbp), %rax
	movq	%rax, -4872(%rbp)
.Ltmp643:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4864(%rbp)
	jne	.LBB6_562
# %bb.561:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp644:
.LBB6_562:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4864(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_564
# %bb.563:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4864(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4880(%rbp)
	jmp	.LBB6_565
.LBB6_564:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4864(%rbp), %rax
	movq	-4872(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4872(%rbp), %rax
	movq	%rax, -4880(%rbp)
.LBB6_565:
	movq	-4880(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB6_578
.LBB6_566:
	jmp	.LBB6_567
.Ltmp645:
.LBB6_567:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4808(%rbp), %rax
	movq	%rax, -4888(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -4896(%rbp)
.Ltmp646:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4888(%rbp)
	jne	.LBB6_569
# %bb.568:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp647:
.LBB6_569:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4888(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_571
# %bb.570:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4888(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -4904(%rbp)
	jmp	.LBB6_572
.LBB6_571:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4888(%rbp), %rax
	movq	-4896(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-4896(%rbp), %rax
	movq	%rax, -4904(%rbp)
.LBB6_572:
	movq	-4904(%rbp), %rax
	movq	%rax, -4848(%rbp)
	movq	-4808(%rbp), %rsi
.Ltmp648:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-4920(%rbp), %rdi
	leaq	.L.str.87(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7384(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_574
# %bb.573:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7384(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -4912(%rbp)
	jmp	.LBB6_575
.LBB6_574:
	jmp	.LBB6_576
.LBB6_575:
	movq	-4912(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB6_578
.LBB6_576:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4848(%rbp), %rax
	movq	%rax, -4800(%rbp)
	jmp	.LBB6_578
.Ltmp649:
.LBB6_577:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 359 9                         # formatter.c3:359:9
	jmp	.LBB6_579
.LBB6_578:
	movq	-4800(%rbp), %rax
	.loc	3 359 9 epilogue_begin is_stmt 0 # formatter.c3:359:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp650:
.LBB6_579:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-7352(%rbp), %rax               # 8-byte Reload
	.loc	3 474 5 is_stmt 1               # formatter.c3:474:5
	addq	-4816(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 475 5                         # formatter.c3:475:5
	jmp	.LBB6_847
.Ltmp651:
.LBB6_580:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 477 5                         # formatter.c3:477:5
	movq	-3696(%rbp), %rax
	.loc	3 477 28 is_stmt 0              # formatter.c3:477:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp652:
.LBB6_581:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 480 5 is_stmt 1               # formatter.c3:480:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7400(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -4936(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp653:
	.loc	3 480 44 is_stmt 0              # formatter.c3:480:44
	leaq	-4960(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -7392(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_583
# %bb.582:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7392(%rbp), %rax               # 8-byte Reload
	.loc	3 480 44                        # formatter.c3:480:44
	movq	%rax, -4952(%rbp)
	jmp	.LBB6_586
.LBB6_583:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-3696(%rbp), %rsi
	vmovsd	-4960(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-4968(%rbp), %rdi
	callq	std.io.Formatter.gtoa@PLT
	movq	%rax, -7408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_585
# %bb.584:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-7408(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -4952(%rbp)
	jmp	.LBB6_586
.LBB6_585:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-4968(%rbp), %rax
	movq	%rax, -4944(%rbp)
	movq	$0, -4952(%rbp)
.LBB6_586:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 12 is_stmt 1              # formatter.c3:346:12
	jmp	.LBB6_587
.LBB6_587:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 18 is_stmt 0              # formatter.c3:346:18
	movq	-4952(%rbp), %rax
	movq	%rax, -7416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_589
# %bb.588:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7416(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -4976(%rbp)
	jmp	.LBB6_590
.LBB6_589:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -4976(%rbp)
.LBB6_590:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -4976(%rbp)
	je	.LBB6_611
# %bb.591:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-4976(%rbp), %rax
	movq	%rax, -4984(%rbp)
# %bb.592:
	movq	-4984(%rbp), %rcx
	movq	%rcx, -7424(%rbp)               # 8-byte Spill
.Ltmp654:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB6_594
# %bb.593:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-7424(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB6_600
.LBB6_594:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-4936(%rbp), %rax
	movq	%rax, -4992(%rbp)
	movq	-4976(%rbp), %rax
	movq	%rax, -5000(%rbp)
.Ltmp655:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -4992(%rbp)
	jne	.LBB6_596
# %bb.595:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp656:
.LBB6_596:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-4992(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_598
# %bb.597:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-4992(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5008(%rbp)
	jmp	.LBB6_599
.LBB6_598:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-4992(%rbp), %rax
	movq	-5000(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5000(%rbp), %rax
	movq	%rax, -5008(%rbp)
.LBB6_599:
	movq	-5008(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB6_612
.LBB6_600:
	jmp	.LBB6_601
.Ltmp657:
.LBB6_601:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-4936(%rbp), %rax
	movq	%rax, -5016(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -5024(%rbp)
.Ltmp658:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5016(%rbp)
	jne	.LBB6_603
# %bb.602:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp659:
.LBB6_603:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5016(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_605
# %bb.604:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5016(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5032(%rbp)
	jmp	.LBB6_606
.LBB6_605:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5016(%rbp), %rax
	movq	-5024(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5024(%rbp), %rax
	movq	%rax, -5032(%rbp)
.LBB6_606:
	movq	-5032(%rbp), %rax
	movq	%rax, -4976(%rbp)
	movq	-4936(%rbp), %rsi
.Ltmp660:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-5048(%rbp), %rdi
	leaq	.L.str.88(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7432(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_608
# %bb.607:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7432(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -5040(%rbp)
	jmp	.LBB6_609
.LBB6_608:
	jmp	.LBB6_610
.LBB6_609:
	movq	-5040(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB6_612
.LBB6_610:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-4976(%rbp), %rax
	movq	%rax, -4928(%rbp)
	jmp	.LBB6_612
.Ltmp661:
.LBB6_611:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 359 9                         # formatter.c3:359:9
	jmp	.LBB6_613
.LBB6_612:
	movq	-4928(%rbp), %rax
	.loc	3 359 9 epilogue_begin is_stmt 0 # formatter.c3:359:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp662:
.LBB6_613:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-7400(%rbp), %rax               # 8-byte Reload
	.loc	3 480 5 is_stmt 1               # formatter.c3:480:5
	addq	-4944(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 481 5                         # formatter.c3:481:5
	jmp	.LBB6_847
.Ltmp663:
.LBB6_614:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 483 5                         # formatter.c3:483:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7448(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 483 18 is_stmt 0              # formatter.c3:483:18
	leaq	-5064(%rbp), %rdi
	callq	std.io.Formatter.out_char
	movq	%rax, -7440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_616
# %bb.615:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7440(%rbp), %rax               # 8-byte Reload
	.loc	3 483 18                        # formatter.c3:483:18
	movq	%rax, -5056(%rbp)
	jmp	.LBB6_617
.LBB6_616:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_618
.LBB6_617:
	movq	-5056(%rbp), %rax
	.loc	3 483 18 epilogue_begin         # formatter.c3:483:18
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_618:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7448(%rbp), %rax               # 8-byte Reload
	.loc	3 483 5                         # formatter.c3:483:5
	addq	-5064(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 484 5 is_stmt 1               # formatter.c3:484:5
	jmp	.LBB6_847
.Ltmp664:
.LBB6_619:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 486 5                         # formatter.c3:486:5
	movq	-3696(%rbp), %rax
	.loc	3 486 28 is_stmt 0              # formatter.c3:486:28
	movl	16(%rax), %ecx
	andl	$-33, %ecx
	orl	$32, %ecx
	movl	%ecx, 16(%rax)
.Ltmp665:
.LBB6_620:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 28                          # formatter.c3:0:28
	movq	-4392(%rbp), %rax
	movq	%rax, -5088(%rbp)
# %bb.621:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-5088(%rbp), %rax
	movq	%rax, -7464(%rbp)               # 8-byte Spill
	movq	%rax, -7456(%rbp)               # 8-byte Spill
.LBB6_622:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-7456(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7480(%rbp)               # 8-byte Spill
.Ltmp666:
	.loc	3 492 11 is_stmt 1              # formatter.c3:492:11
	movb	$1, %al
	movq	($ct.sa$char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7465(%rbp)                # 1-byte Spill
	je	.LBB6_624
# %bb.623:                              #   in Loop: Header=BB6_622 Depth=2
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7480(%rbp), %rax               # 8-byte Reload
	.loc	3 492 11                        # formatter.c3:492:11
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7456(%rbp)               # 8-byte Spill
	movb	%al, -7465(%rbp)                # 1-byte Spill
	jne	.LBB6_622
.LBB6_624:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movb	-7465(%rbp), %al                # 1-byte Reload
	.loc	3 492 11                        # formatter.c3:492:11
	testb	$1, %al
	jne	.LBB6_629
# %bb.625:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-7464(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7488(%rbp)               # 8-byte Spill
	.loc	3 493 11 is_stmt 1              # formatter.c3:493:11
	jmp	.LBB6_626
.LBB6_626:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-7488(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -7504(%rbp)               # 8-byte Spill
	.loc	3 493 11                        # formatter.c3:493:11
	movb	$1, %al
	movq	($ct.sa$ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -7489(%rbp)                # 1-byte Spill
	je	.LBB6_628
# %bb.627:                              #   in Loop: Header=BB6_626 Depth=2
	.loc	3 0 11                          # formatter.c3:0:11
	movq	-7504(%rbp), %rax               # 8-byte Reload
	.loc	3 493 11                        # formatter.c3:493:11
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -7488(%rbp)               # 8-byte Spill
	movb	%al, -7489(%rbp)                # 1-byte Spill
	jne	.LBB6_626
.LBB6_628:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 11                          # formatter.c3:0:11
	movb	-7489(%rbp), %al                # 1-byte Reload
	.loc	3 493 11                        # formatter.c3:493:11
	testb	$1, %al
	jne	.LBB6_629
	jmp	.LBB6_632
.LBB6_629:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp667:
	.loc	3 494 14 is_stmt 1              # formatter.c3:494:14
	movq	-4400(%rbp), %rax
	movq	%rax, -7512(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_859
# %bb.630:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7512(%rbp), %rax               # 8-byte Reload
	.loc	3 494 14                        # formatter.c3:494:14
	andq	$7, %rax
	movq	%rax, -7520(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_860
# %bb.631:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-7512(%rbp), %rax               # 8-byte Reload
	.loc	3 494 14                        # formatter.c3:494:14
	movq	(%rax), %rcx
	movq	%rcx, -5080(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -5072(%rbp)
	jmp	.LBB6_677
.LBB6_632:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_633
.Ltmp668:
.LBB6_633:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 496 11 is_stmt 1              # formatter.c3:496:11
	movq	-4392(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpb	$15, (%rcx)
	movb	%al, -7521(%rbp)                # 1-byte Spill
	jne	.LBB6_655
# %bb.634:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 496 44 is_stmt 0              # formatter.c3:496:44
	movq	-4392(%rbp), %rax
	movq	%rax, -7536(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7522(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB6_643
# %bb.635:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$19, %al
	je	.LBB6_643
# %bb.636:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$17, %al
	je	.LBB6_643
# %bb.637:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$8, %al
	je	.LBB6_643
# %bb.638:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$16, %al
	je	.LBB6_643
# %bb.639:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$18, %al
	je	.LBB6_643
# %bb.640:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$9, %al
	je	.LBB6_643
# %bb.641:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movb	-7522(%rbp), %al                # 1-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	cmpb	$12, %al
	je	.LBB6_643
# %bb.642:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$496, (%rsp)                    # imm = 0x1F0
	callq	*(%rax)
.LBB6_643:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 44                          # formatter.c3:0:44
	movq	-7536(%rbp), %rcx               # 8-byte Reload
	.loc	3 496 44                        # formatter.c3:496:44
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rdx
	cmpq	%rdx, 32(%rcx)
	movb	%al, -7537(%rbp)                # 1-byte Spill
	je	.LBB6_654
# %bb.644:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 496 81                        # formatter.c3:496:81
	movq	-4392(%rbp), %rax
	movq	%rax, -7552(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7538(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB6_653
# %bb.645:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$19, %al
	je	.LBB6_653
# %bb.646:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$17, %al
	je	.LBB6_653
# %bb.647:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$8, %al
	je	.LBB6_653
# %bb.648:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$16, %al
	je	.LBB6_653
# %bb.649:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$18, %al
	je	.LBB6_653
# %bb.650:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$9, %al
	je	.LBB6_653
# %bb.651:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7538(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	cmpb	$12, %al
	je	.LBB6_653
# %bb.652:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$496, (%rsp)                    # imm = 0x1F0
	callq	*(%rax)
.LBB6_653:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movq	-7552(%rbp), %rax               # 8-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rcx, 32(%rax)
	sete	%al
	movb	%al, -7537(%rbp)                # 1-byte Spill
.LBB6_654:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 81                          # formatter.c3:0:81
	movb	-7537(%rbp), %al                # 1-byte Reload
	movb	%al, -7521(%rbp)                # 1-byte Spill
.LBB6_655:                              #   in Loop: Header=BB6_4 Depth=1
	movb	-7521(%rbp), %al                # 1-byte Reload
	.loc	3 496 81                        # formatter.c3:496:81
	testb	$1, %al
	jne	.LBB6_656
	jmp	.LBB6_658
.LBB6_656:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp669:
	.loc	3 498 22 is_stmt 1              # formatter.c3:498:22
	movq	-4400(%rbp), %rax
	movq	%rax, -7576(%rbp)               # 8-byte Spill
	.loc	3 498 36 is_stmt 0              # formatter.c3:498:36
	movq	-4392(%rbp), %rax
	movq	24(%rax), %rcx
	addq	$0, %rcx
	movq	%rcx, -7568(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	seta	%al
	subq	$0, %rcx
	movq	%rcx, -7560(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB6_861
# %bb.657:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 36                          # formatter.c3:0:36
	movq	-7576(%rbp), %rax               # 8-byte Reload
	movq	-7568(%rbp), %rcx               # 8-byte Reload
	.loc	3 498 14                        # formatter.c3:498:14
	movq	%rcx, -5072(%rbp)
	movq	%rax, -5080(%rbp)
	.loc	3 499 8 is_stmt 1               # formatter.c3:499:8
	jmp	.LBB6_677
.Ltmp670:
.LBB6_658:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 501 11                        # formatter.c3:501:11
	movq	-4392(%rbp), %rax
	cmpb	$19, (%rax)
	jne	.LBB6_672
# %bb.659:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp671:
	.loc	3 503 25                        # formatter.c3:503:25
	movq	-4400(%rbp), %rax
	movq	%rax, -7584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_862
# %bb.660:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 25 is_stmt 0                # formatter.c3:0:25
	movq	-7584(%rbp), %rax               # 8-byte Reload
	.loc	3 503 17                        # formatter.c3:503:17
	andq	$7, %rax
	movq	%rax, -7592(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB6_863
# %bb.661:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7584(%rbp), %rax               # 8-byte Reload
	.loc	3 503 17                        # formatter.c3:503:17
	movq	(%rax), %rax
	movq	%rax, -7616(%rbp)               # 8-byte Spill
	.loc	3 503 40                        # formatter.c3:503:40
	movq	-4392(%rbp), %rax
	movq	%rax, -7608(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -7593(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB6_670
# %bb.662:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$19, %al
	je	.LBB6_670
# %bb.663:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$17, %al
	je	.LBB6_670
# %bb.664:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$8, %al
	je	.LBB6_670
# %bb.665:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$16, %al
	je	.LBB6_670
# %bb.666:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$18, %al
	je	.LBB6_670
# %bb.667:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$9, %al
	je	.LBB6_670
# %bb.668:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movb	-7593(%rbp), %al                # 1-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	cmpb	$12, %al
	je	.LBB6_670
# %bb.669:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	callq	*(%rax)
.LBB6_670:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movq	-7608(%rbp), %rax               # 8-byte Reload
	.loc	3 503 40                        # formatter.c3:503:40
	movq	32(%rax), %rax
	movq	24(%rax), %rcx
	addq	$0, %rcx
	movq	%rcx, -7632(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	seta	%al
	subq	$0, %rcx
	movq	%rcx, -7624(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB6_864
# %bb.671:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 40                          # formatter.c3:0:40
	movq	-7616(%rbp), %rax               # 8-byte Reload
	movq	-7632(%rbp), %rcx               # 8-byte Reload
	.loc	3 503 14                        # formatter.c3:503:14
	movq	%rcx, -5072(%rbp)
	movq	%rax, -5080(%rbp)
	.loc	3 504 8 is_stmt 1               # formatter.c3:504:8
	jmp	.LBB6_677
.Ltmp672:
.LBB6_672:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 506 7                         # formatter.c3:506:7
	movq	-3736(%rbp), %rax
	movq	%rax, -7648(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 506 20 is_stmt 0              # formatter.c3:506:20
	leaq	-5328(%rbp), %rdi
	leaq	.L.str.92(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -7640(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_674
# %bb.673:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-7640(%rbp), %rax               # 8-byte Reload
	.loc	3 506 20                        # formatter.c3:506:20
	movq	%rax, -5320(%rbp)
	jmp	.LBB6_675
.LBB6_674:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_676
.LBB6_675:
	movq	-5320(%rbp), %rax
	.loc	3 506 20 epilogue_begin         # formatter.c3:506:20
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_676:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-7648(%rbp), %rax               # 8-byte Reload
	.loc	3 506 7                         # formatter.c3:506:7
	addq	-5328(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 507 7 is_stmt 1               # formatter.c3:507:7
	jmp	.LBB6_847
.Ltmp673:
.LBB6_677:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 509 9                         # formatter.c3:509:9
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB6_714
# %bb.678:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp674:
	.loc	3 511 43                        # formatter.c3:511:43
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3696(%rbp), %rsi
	movq	-5080(%rbp), %rdx
	movq	-5072(%rbp), %rcx
	movq	%rsi, -2992(%rbp)
	movq	%rdx, -3008(%rbp)
	movq	%rcx, -3000(%rbp)
	movb	%al, -3009(%rbp)
.Ltmp675:
	.loc	1 11 18                         # formatter_private.c3:11:18
	movb	-3009(%rbp), %cl
	.loc	1 11 36 is_stmt 0               # formatter_private.c3:11:36
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -7650(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -7649(%rbp)                # 1-byte Spill
	jne	.LBB6_868
# %bb.867:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 36                          # formatter_private.c3:0:36
	movb	-7650(%rbp), %al                # 1-byte Reload
	movb	%al, -7649(%rbp)                # 1-byte Spill
.LBB6_868:                              #   in Loop: Header=BB6_4 Depth=1
	movb	-7649(%rbp), %al                # 1-byte Reload
	.loc	1 11 36                         # formatter_private.c3:11:36
	movzbl	%al, %eax
	.loc	1 11 17                         # formatter_private.c3:11:17
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3010(%rbp)
	.loc	1 12 12 is_stmt 1               # formatter_private.c3:12:12
	movq	$0, -3024(%rbp)
.Ltmp676:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3000(%rbp), %rax
	movq	%rax, -7664(%rbp)               # 8-byte Spill
	movq	$0, -3032(%rbp)
.LBB6_679:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7664(%rbp), %rax               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	cmpq	%rax, -3032(%rbp)
	jae	.LBB6_692
# %bb.680:                              #   in Loop: Header=BB6_679 Depth=2
.Ltmp677:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3000(%rbp), %rcx
	movq	%rcx, -7688(%rbp)               # 8-byte Spill
	movq	-3008(%rbp), %rax
	movq	%rax, -7680(%rbp)               # 8-byte Spill
	movq	-3032(%rbp), %rax
	movq	%rax, -7672(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_693
# %bb.681:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-7680(%rbp), %rax               # 8-byte Reload
	movq	-7672(%rbp), %rcx               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	movb	(%rax,%rcx), %al
	movb	%al, -3033(%rbp)
.Ltmp678:
	.loc	1 15 16 is_stmt 1               # formatter_private.c3:15:16
	movzbl	-3033(%rbp), %eax
	shrl	$4, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3105(%rbp)
	.loc	1 16 9                          # formatter_private.c3:16:9
	movzbl	-3105(%rbp), %eax
	movl	%eax, -7692(%rbp)               # 4-byte Spill
	.loc	1 16 18 is_stmt 0               # formatter_private.c3:16:18
	movzbl	-3105(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB6_683
# %bb.682:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 16 31                         # formatter_private.c3:16:31
	movb	$48, %al
	movb	%al, -7693(%rbp)                # 1-byte Spill
	jmp	.LBB6_684
.LBB6_683:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 16 37                         # formatter_private.c3:16:37
	movb	-3010(%rbp), %al
	movb	%al, -7693(%rbp)                # 1-byte Spill
.LBB6_684:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7692(%rbp), %eax               # 4-byte Reload
	movb	-7693(%rbp), %cl                # 1-byte Reload
	.loc	1 16 37                         # formatter_private.c3:16:37
	movzbl	%cl, %ecx
	.loc	1 16 9                          # formatter_private.c3:16:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-2992(%rbp), %rsi
	.loc	1 16 3                          # formatter_private.c3:16:3
	leaq	-3128(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_686
# %bb.685:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7704(%rbp), %rax               # 8-byte Reload
	.loc	1 16 3                          # formatter_private.c3:16:3
	movq	%rax, -3120(%rbp)
	movq	-3120(%rbp), %rax
	movq	%rax, -7712(%rbp)               # 8-byte Spill
	jmp	.LBB6_694
.LBB6_686:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 17 3 is_stmt 1                # formatter_private.c3:17:3
	movq	-3024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3024(%rbp)
	.loc	1 18 11                         # formatter_private.c3:18:11
	movzbl	-3033(%rbp), %eax
	andl	$15, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3105(%rbp)
	.loc	1 19 9                          # formatter_private.c3:19:9
	movzbl	-3105(%rbp), %eax
	movl	%eax, -7716(%rbp)               # 4-byte Spill
	.loc	1 19 18 is_stmt 0               # formatter_private.c3:19:18
	movzbl	-3105(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB6_688
# %bb.687:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 19 31                         # formatter_private.c3:19:31
	movb	$48, %al
	movb	%al, -7717(%rbp)                # 1-byte Spill
	jmp	.LBB6_689
.LBB6_688:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 19 37                         # formatter_private.c3:19:37
	movb	-3010(%rbp), %al
	movb	%al, -7717(%rbp)                # 1-byte Spill
.LBB6_689:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7716(%rbp), %eax               # 4-byte Reload
	movb	-7717(%rbp), %cl                # 1-byte Reload
	.loc	1 19 37                         # formatter_private.c3:19:37
	movzbl	%cl, %ecx
	.loc	1 19 9                          # formatter_private.c3:19:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-2992(%rbp), %rsi
	.loc	1 19 3                          # formatter_private.c3:19:3
	leaq	-3144(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7728(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_691
# %bb.690:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7728(%rbp), %rax               # 8-byte Reload
	.loc	1 19 3                          # formatter_private.c3:19:3
	movq	%rax, -3136(%rbp)
	movq	-3136(%rbp), %rax
	movq	%rax, -7712(%rbp)               # 8-byte Spill
	jmp	.LBB6_694
.LBB6_691:                              #   in Loop: Header=BB6_679 Depth=2
	.loc	1 20 3 is_stmt 1                # formatter_private.c3:20:3
	movq	-3024(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3024(%rbp)
.Ltmp679:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3032(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3032(%rbp)
	jmp	.LBB6_679
.Ltmp680:
.LBB6_692:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 22 9                          # formatter_private.c3:22:9
	movq	-3024(%rbp), %rax
	movq	%rax, -5352(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7712(%rbp)               # 8-byte Spill
	jmp	.LBB6_694
.LBB6_693:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-7672(%rbp), %rcx               # 8-byte Reload
	movq	-7688(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3048(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3056(%rbp)
	movq	%rax, -3080(%rbp)
	leaq	-3048(%rbp), %rcx
	movq	%rcx, -3088(%rbp)
	movq	%rax, -3064(%rbp)
	leaq	-3056(%rbp), %rax
	movq	%rax, -3072(%rbp)
	leaq	-3088(%rbp), %rax
	movq	%rax, -3104(%rbp)
	movq	$2, -3096(%rbp)
.Ltmp681:
	.loc	1 13 15 is_stmt 1               # formatter_private.c3:13:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.97(%rip), %r8
	movl	$15, %r9d
	leaq	-3104(%rbp), %rax
	movl	$13, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp682:
.LBB6_694:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7712(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7736(%rbp)               # 8-byte Spill
	.loc	3 511 16 is_stmt 1              # formatter.c3:511:16
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_696
# %bb.695:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-7736(%rbp), %rax               # 8-byte Reload
	.loc	3 511 16                        # formatter.c3:511:16
	movq	%rax, -5344(%rbp)
	jmp	.LBB6_697
.LBB6_696:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_698
.LBB6_697:
	movq	-5344(%rbp), %rax
	.loc	3 511 16 epilogue_begin         # formatter.c3:511:16
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_698:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	movq	-5352(%rbp), %rax
	movq	%rax, -5336(%rbp)
	.loc	3 512 6 is_stmt 1               # formatter.c3:512:6
	movq	-3736(%rbp), %rax
	addq	-5336(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 513 6                         # formatter.c3:513:6
	movq	-3736(%rbp), %rax
	movq	%rax, -7768(%rbp)               # 8-byte Spill
	.loc	3 513 33 is_stmt 0              # formatter.c3:513:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7760(%rbp)               # 8-byte Spill
	.loc	3 513 45                        # formatter.c3:513:45
	movq	-5336(%rbp), %rax
	movq	%rax, -7752(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -7744(%rbp)               # 8-byte Spill
.Ltmp683:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_708
# %bb.699:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7752(%rbp), %rax               # 8-byte Reload
	movq	-7760(%rbp), %rcx               # 8-byte Reload
	movq	-7744(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3312(%rbp)
	movb	$32, -3313(%rbp)
	movq	%rcx, -3328(%rbp)
	movq	%rax, -3336(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3328(%rbp), %rax
	subq	-3336(%rbp), %rax
	movq	%rax, -3344(%rbp)
.Ltmp684:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3352(%rbp)
.LBB6_700:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3352(%rbp), %rax
	cmpq	-3344(%rbp), %rax
	jge	.LBB6_704
# %bb.701:                              #   in Loop: Header=BB6_700 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3312(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3368(%rbp), %rdi
	movzbl	-3313(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7776(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_703
# %bb.702:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7776(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3360(%rbp)
	movq	-3360(%rbp), %rax
	movq	%rax, -7784(%rbp)               # 8-byte Spill
	jmp	.LBB6_709
.LBB6_703:                              #   in Loop: Header=BB6_700 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3352(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3352(%rbp)
	jmp	.LBB6_700
.Ltmp685:
.LBB6_704:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3372(%rbp)
	movq	-3344(%rbp), %rax
	movq	%rax, -3384(%rbp)
	movl	-3372(%rbp), %eax
	movl	%eax, -3388(%rbp)
	movq	-3384(%rbp), %rax
	movq	%rax, -3400(%rbp)
.Ltmp686:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3388(%rbp), %rax
	cmpq	-3400(%rbp), %rax
	jle	.LBB6_706
.Ltmp687:
# %bb.705:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3372(%rbp), %rax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
	jmp	.LBB6_707
.LBB6_706:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3384(%rbp), %rax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
.LBB6_707:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7792(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5368(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7784(%rbp)               # 8-byte Spill
	jmp	.LBB6_709
.Ltmp688:
.LBB6_708:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp689:
.LBB6_709:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7784(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7800(%rbp)               # 8-byte Spill
	.loc	3 513 19 is_stmt 1              # formatter.c3:513:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_711
# %bb.710:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-7800(%rbp), %rax               # 8-byte Reload
	.loc	3 513 19                        # formatter.c3:513:19
	movq	%rax, -5360(%rbp)
	jmp	.LBB6_712
.LBB6_711:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_713
.LBB6_712:
	movq	-5360(%rbp), %rax
	.loc	3 513 19 epilogue_begin         # formatter.c3:513:19
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_713:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-7768(%rbp), %rax               # 8-byte Reload
	.loc	3 513 6                         # formatter.c3:513:6
	addq	-5368(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 514 6 is_stmt 1               # formatter.c3:514:6
	jmp	.LBB6_847
.Ltmp690:
.LBB6_714:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 516 9                         # formatter.c3:516:9
	movq	-3696(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB6_731
# %bb.715:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp691:
	.loc	3 518 6                         # formatter.c3:518:6
	movq	-3736(%rbp), %rax
	movq	%rax, -7832(%rbp)               # 8-byte Spill
	.loc	3 518 33 is_stmt 0              # formatter.c3:518:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7824(%rbp)               # 8-byte Spill
	.loc	3 518 45                        # formatter.c3:518:45
	movq	-5072(%rbp), %rax
	shlq	%rax
	movq	%rax, -7816(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -7808(%rbp)               # 8-byte Spill
.Ltmp692:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_725
# %bb.716:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7816(%rbp), %rax               # 8-byte Reload
	movq	-7824(%rbp), %rcx               # 8-byte Reload
	movq	-7808(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3408(%rbp)
	movb	$32, -3409(%rbp)
	movq	%rcx, -3424(%rbp)
	movq	%rax, -3432(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3424(%rbp), %rax
	subq	-3432(%rbp), %rax
	movq	%rax, -3440(%rbp)
.Ltmp693:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3448(%rbp)
.LBB6_717:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3448(%rbp), %rax
	cmpq	-3440(%rbp), %rax
	jge	.LBB6_721
# %bb.718:                              #   in Loop: Header=BB6_717 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3408(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3464(%rbp), %rdi
	movzbl	-3409(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7840(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_720
# %bb.719:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7840(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3456(%rbp)
	movq	-3456(%rbp), %rax
	movq	%rax, -7848(%rbp)               # 8-byte Spill
	jmp	.LBB6_726
.LBB6_720:                              #   in Loop: Header=BB6_717 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3448(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3448(%rbp)
	jmp	.LBB6_717
.Ltmp694:
.LBB6_721:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3468(%rbp)
	movq	-3440(%rbp), %rax
	movq	%rax, -3480(%rbp)
	movl	-3468(%rbp), %eax
	movl	%eax, -3484(%rbp)
	movq	-3480(%rbp), %rax
	movq	%rax, -3496(%rbp)
.Ltmp695:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3484(%rbp), %rax
	cmpq	-3496(%rbp), %rax
	jle	.LBB6_723
.Ltmp696:
# %bb.722:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3468(%rbp), %rax
	movq	%rax, -7856(%rbp)               # 8-byte Spill
	jmp	.LBB6_724
.LBB6_723:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3480(%rbp), %rax
	movq	%rax, -7856(%rbp)               # 8-byte Spill
.LBB6_724:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7856(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5384(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7848(%rbp)               # 8-byte Spill
	jmp	.LBB6_726
.Ltmp697:
.LBB6_725:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp698:
.LBB6_726:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7848(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7864(%rbp)               # 8-byte Spill
	.loc	3 518 19 is_stmt 1              # formatter.c3:518:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_728
# %bb.727:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-7864(%rbp), %rax               # 8-byte Reload
	.loc	3 518 19                        # formatter.c3:518:19
	movq	%rax, -5376(%rbp)
	jmp	.LBB6_729
.LBB6_728:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_730
.LBB6_729:
	movq	-5376(%rbp), %rax
	.loc	3 518 19 epilogue_begin         # formatter.c3:518:19
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_730:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-7832(%rbp), %rax               # 8-byte Reload
	.loc	3 518 6                         # formatter.c3:518:6
	addq	-5384(%rbp), %rax
	movq	%rax, -3736(%rbp)
.Ltmp699:
.LBB6_731:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 520 5 is_stmt 1               # formatter.c3:520:5
	movq	-3736(%rbp), %rax
	movq	%rax, -7880(%rbp)               # 8-byte Spill
	.loc	3 520 45 is_stmt 0              # formatter.c3:520:45
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3696(%rbp), %rsi
	movq	-5080(%rbp), %rdx
	movq	-5072(%rbp), %rcx
	movq	%rsi, -3152(%rbp)
	movq	%rdx, -3168(%rbp)
	movq	%rcx, -3160(%rbp)
	movb	%al, -3169(%rbp)
.Ltmp700:
	.loc	1 11 18 is_stmt 1               # formatter_private.c3:11:18
	movb	-3169(%rbp), %cl
	.loc	1 11 36 is_stmt 0               # formatter_private.c3:11:36
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -7866(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -7865(%rbp)                # 1-byte Spill
	jne	.LBB6_870
# %bb.869:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 36                          # formatter_private.c3:0:36
	movb	-7866(%rbp), %al                # 1-byte Reload
	movb	%al, -7865(%rbp)                # 1-byte Spill
.LBB6_870:                              #   in Loop: Header=BB6_4 Depth=1
	movb	-7865(%rbp), %al                # 1-byte Reload
	.loc	1 11 36                         # formatter_private.c3:11:36
	movzbl	%al, %eax
	.loc	1 11 17                         # formatter_private.c3:11:17
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3170(%rbp)
	.loc	1 12 12 is_stmt 1               # formatter_private.c3:12:12
	movq	$0, -3184(%rbp)
.Ltmp701:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3160(%rbp), %rax
	movq	%rax, -7888(%rbp)               # 8-byte Spill
	movq	$0, -3192(%rbp)
.LBB6_732:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7888(%rbp), %rax               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	cmpq	%rax, -3192(%rbp)
	jae	.LBB6_745
# %bb.733:                              #   in Loop: Header=BB6_732 Depth=2
.Ltmp702:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3160(%rbp), %rcx
	movq	%rcx, -7912(%rbp)               # 8-byte Spill
	movq	-3168(%rbp), %rax
	movq	%rax, -7904(%rbp)               # 8-byte Spill
	movq	-3192(%rbp), %rax
	movq	%rax, -7896(%rbp)               # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB6_746
# %bb.734:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-7904(%rbp), %rax               # 8-byte Reload
	movq	-7896(%rbp), %rcx               # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	movb	(%rax,%rcx), %al
	movb	%al, -3193(%rbp)
.Ltmp703:
	.loc	1 15 16 is_stmt 1               # formatter_private.c3:15:16
	movzbl	-3193(%rbp), %eax
	shrl	$4, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3265(%rbp)
	.loc	1 16 9                          # formatter_private.c3:16:9
	movzbl	-3265(%rbp), %eax
	movl	%eax, -7916(%rbp)               # 4-byte Spill
	.loc	1 16 18 is_stmt 0               # formatter_private.c3:16:18
	movzbl	-3265(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB6_736
# %bb.735:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 16 31                         # formatter_private.c3:16:31
	movb	$48, %al
	movb	%al, -7917(%rbp)                # 1-byte Spill
	jmp	.LBB6_737
.LBB6_736:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 16 37                         # formatter_private.c3:16:37
	movb	-3170(%rbp), %al
	movb	%al, -7917(%rbp)                # 1-byte Spill
.LBB6_737:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7916(%rbp), %eax               # 4-byte Reload
	movb	-7917(%rbp), %cl                # 1-byte Reload
	.loc	1 16 37                         # formatter_private.c3:16:37
	movzbl	%cl, %ecx
	.loc	1 16 9                          # formatter_private.c3:16:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3152(%rbp), %rsi
	.loc	1 16 3                          # formatter_private.c3:16:3
	leaq	-3288(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7928(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_739
# %bb.738:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7928(%rbp), %rax               # 8-byte Reload
	.loc	1 16 3                          # formatter_private.c3:16:3
	movq	%rax, -3280(%rbp)
	movq	-3280(%rbp), %rax
	movq	%rax, -7936(%rbp)               # 8-byte Spill
	jmp	.LBB6_747
.LBB6_739:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 17 3 is_stmt 1                # formatter_private.c3:17:3
	movq	-3184(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3184(%rbp)
	.loc	1 18 11                         # formatter_private.c3:18:11
	movzbl	-3193(%rbp), %eax
	andl	$15, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -3265(%rbp)
	.loc	1 19 9                          # formatter_private.c3:19:9
	movzbl	-3265(%rbp), %eax
	movl	%eax, -7940(%rbp)               # 4-byte Spill
	.loc	1 19 18 is_stmt 0               # formatter_private.c3:19:18
	movzbl	-3265(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB6_741
# %bb.740:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 19 31                         # formatter_private.c3:19:31
	movb	$48, %al
	movb	%al, -7941(%rbp)                # 1-byte Spill
	jmp	.LBB6_742
.LBB6_741:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 19 37                         # formatter_private.c3:19:37
	movb	-3170(%rbp), %al
	movb	%al, -7941(%rbp)                # 1-byte Spill
.LBB6_742:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-7940(%rbp), %eax               # 4-byte Reload
	movb	-7941(%rbp), %cl                # 1-byte Reload
	.loc	1 19 37                         # formatter_private.c3:19:37
	movzbl	%cl, %ecx
	.loc	1 19 9                          # formatter_private.c3:19:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-3152(%rbp), %rsi
	.loc	1 19 3                          # formatter_private.c3:19:3
	leaq	-3304(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_744
# %bb.743:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-7952(%rbp), %rax               # 8-byte Reload
	.loc	1 19 3                          # formatter_private.c3:19:3
	movq	%rax, -3296(%rbp)
	movq	-3296(%rbp), %rax
	movq	%rax, -7936(%rbp)               # 8-byte Spill
	jmp	.LBB6_747
.LBB6_744:                              #   in Loop: Header=BB6_732 Depth=2
	.loc	1 20 3 is_stmt 1                # formatter_private.c3:20:3
	movq	-3184(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3184(%rbp)
.Ltmp704:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-3192(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3192(%rbp)
	jmp	.LBB6_732
.Ltmp705:
.LBB6_745:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 22 9                          # formatter_private.c3:22:9
	movq	-3184(%rbp), %rax
	movq	%rax, -5400(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7936(%rbp)               # 8-byte Spill
	jmp	.LBB6_747
.LBB6_746:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-7896(%rbp), %rcx               # 8-byte Reload
	movq	-7912(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3208(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3216(%rbp)
	movq	%rax, -3240(%rbp)
	leaq	-3208(%rbp), %rcx
	movq	%rcx, -3248(%rbp)
	movq	%rax, -3224(%rbp)
	leaq	-3216(%rbp), %rax
	movq	%rax, -3232(%rbp)
	leaq	-3248(%rbp), %rax
	movq	%rax, -3264(%rbp)
	movq	$2, -3256(%rbp)
.Ltmp706:
	.loc	1 13 15 is_stmt 1               # formatter_private.c3:13:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.97(%rip), %r8
	movl	$15, %r9d
	leaq	-3264(%rbp), %rax
	movl	$13, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp707:
.LBB6_747:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7936(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7960(%rbp)               # 8-byte Spill
	.loc	3 520 18 is_stmt 1              # formatter.c3:520:18
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_749
# %bb.748:
	.loc	3 0 18 is_stmt 0                # formatter.c3:0:18
	movq	-7960(%rbp), %rax               # 8-byte Reload
	.loc	3 520 18                        # formatter.c3:520:18
	movq	%rax, -5392(%rbp)
	jmp	.LBB6_750
.LBB6_749:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_751
.LBB6_750:
	movq	-5392(%rbp), %rax
	.loc	3 520 18 epilogue_begin         # formatter.c3:520:18
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_751:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-7880(%rbp), %rax               # 8-byte Reload
	.loc	3 520 5                         # formatter.c3:520:5
	addq	-5400(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 521 5 is_stmt 1               # formatter.c3:521:5
	jmp	.LBB6_847
.Ltmp708:
.LBB6_752:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 523 9                         # formatter.c3:523:9
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB6_773
# %bb.753:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
.Ltmp709:
	.loc	3 525 16 is_stmt 1              # formatter.c3:525:16
	leaq	-5424(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -7968(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_755
# %bb.754:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-7968(%rbp), %rax               # 8-byte Reload
	.loc	3 525 16                        # formatter.c3:525:16
	movq	%rax, -5416(%rbp)
	jmp	.LBB6_756
.LBB6_755:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_757
.LBB6_756:
	movq	-5416(%rbp), %rax
	.loc	3 525 16 epilogue_begin         # formatter.c3:525:16
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_757:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	movq	-5424(%rbp), %rax
	movq	%rax, -5408(%rbp)
	.loc	3 526 6 is_stmt 1               # formatter.c3:526:6
	movq	-3736(%rbp), %rax
	addq	-5408(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 527 6                         # formatter.c3:527:6
	movq	-3736(%rbp), %rax
	movq	%rax, -8000(%rbp)               # 8-byte Spill
	.loc	3 527 33 is_stmt 0              # formatter.c3:527:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7992(%rbp)               # 8-byte Spill
	.loc	3 527 45                        # formatter.c3:527:45
	movq	-5408(%rbp), %rax
	movq	%rax, -7984(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -7976(%rbp)               # 8-byte Spill
.Ltmp710:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_767
# %bb.758:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7984(%rbp), %rax               # 8-byte Reload
	movq	-7992(%rbp), %rcx               # 8-byte Reload
	movq	-7976(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3504(%rbp)
	movb	$32, -3505(%rbp)
	movq	%rcx, -3520(%rbp)
	movq	%rax, -3528(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3520(%rbp), %rax
	subq	-3528(%rbp), %rax
	movq	%rax, -3536(%rbp)
.Ltmp711:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3544(%rbp)
.LBB6_759:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3544(%rbp), %rax
	cmpq	-3536(%rbp), %rax
	jge	.LBB6_763
# %bb.760:                              #   in Loop: Header=BB6_759 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3504(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3560(%rbp), %rdi
	movzbl	-3505(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -8008(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_762
# %bb.761:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-8008(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3552(%rbp)
	movq	-3552(%rbp), %rax
	movq	%rax, -8016(%rbp)               # 8-byte Spill
	jmp	.LBB6_768
.LBB6_762:                              #   in Loop: Header=BB6_759 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3544(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3544(%rbp)
	jmp	.LBB6_759
.Ltmp712:
.LBB6_763:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3564(%rbp)
	movq	-3536(%rbp), %rax
	movq	%rax, -3576(%rbp)
	movl	-3564(%rbp), %eax
	movl	%eax, -3580(%rbp)
	movq	-3576(%rbp), %rax
	movq	%rax, -3592(%rbp)
.Ltmp713:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3580(%rbp), %rax
	cmpq	-3592(%rbp), %rax
	jle	.LBB6_765
.Ltmp714:
# %bb.764:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3564(%rbp), %rax
	movq	%rax, -8024(%rbp)               # 8-byte Spill
	jmp	.LBB6_766
.LBB6_765:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3576(%rbp), %rax
	movq	%rax, -8024(%rbp)               # 8-byte Spill
.LBB6_766:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-8024(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5440(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8016(%rbp)               # 8-byte Spill
	jmp	.LBB6_768
.Ltmp715:
.LBB6_767:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp716:
.LBB6_768:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-8016(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8032(%rbp)               # 8-byte Spill
	.loc	3 527 19 is_stmt 1              # formatter.c3:527:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_770
# %bb.769:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-8032(%rbp), %rax               # 8-byte Reload
	.loc	3 527 19                        # formatter.c3:527:19
	movq	%rax, -5432(%rbp)
	jmp	.LBB6_771
.LBB6_770:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_772
.LBB6_771:
	movq	-5432(%rbp), %rax
	.loc	3 527 19 epilogue_begin         # formatter.c3:527:19
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_772:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-8000(%rbp), %rax               # 8-byte Reload
	.loc	3 527 6                         # formatter.c3:527:6
	addq	-5440(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 528 6 is_stmt 1               # formatter.c3:528:6
	jmp	.LBB6_847
.Ltmp717:
.LBB6_773:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 530 9                         # formatter.c3:530:9
	movq	-3696(%rbp), %rax
	cmpl	$0, 20(%rax)
	je	.LBB6_794
# %bb.774:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp718:
	.loc	3 532 24                        # formatter.c3:532:24
	movq	-3696(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -5448(%rbp)
	.loc	3 533 6                         # formatter.c3:533:6
	movq	-3696(%rbp), %rax
	leaq	std.io.out_null_fn(%rip), %rcx
	movq	%rcx, 8(%rax)
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 534 16                        # formatter.c3:534:16
	leaq	-5472(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -8040(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_776
# %bb.775:
	.loc	3 0 16 is_stmt 0                # formatter.c3:0:16
	movq	-8040(%rbp), %rax               # 8-byte Reload
	.loc	3 534 16                        # formatter.c3:534:16
	movq	%rax, -5464(%rbp)
	jmp	.LBB6_777
.LBB6_776:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_778
.LBB6_777:
	movq	-5464(%rbp), %rax
	.loc	3 534 16 epilogue_begin         # formatter.c3:534:16
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_778:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	movq	-5472(%rbp), %rax
	movq	%rax, -5456(%rbp)
	.loc	3 535 6 is_stmt 1               # formatter.c3:535:6
	movq	-3696(%rbp), %rax
	movq	-5448(%rbp), %rcx
	movq	%rcx, 8(%rax)
	.loc	3 536 6                         # formatter.c3:536:6
	movq	-3736(%rbp), %rax
	movq	%rax, -8072(%rbp)               # 8-byte Spill
	.loc	3 536 33 is_stmt 0              # formatter.c3:536:33
	movq	-3696(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8064(%rbp)               # 8-byte Spill
	.loc	3 536 45                        # formatter.c3:536:45
	movq	-5456(%rbp), %rax
	movq	%rax, -8056(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -8048(%rbp)               # 8-byte Spill
.Ltmp719:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_788
# %bb.779:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-8056(%rbp), %rax               # 8-byte Reload
	movq	-8064(%rbp), %rcx               # 8-byte Reload
	movq	-8048(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -3600(%rbp)
	movb	$32, -3601(%rbp)
	movq	%rcx, -3616(%rbp)
	movq	%rax, -3624(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-3616(%rbp), %rax
	subq	-3624(%rbp), %rax
	movq	%rax, -3632(%rbp)
.Ltmp720:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -3640(%rbp)
.LBB6_780:                              #   Parent Loop BB6_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-3640(%rbp), %rax
	cmpq	-3632(%rbp), %rax
	jge	.LBB6_784
# %bb.781:                              #   in Loop: Header=BB6_780 Depth=2
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-3600(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-3656(%rbp), %rdi
	movzbl	-3601(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -8080(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_783
# %bb.782:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-8080(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -3648(%rbp)
	movq	-3648(%rbp), %rax
	movq	%rax, -8088(%rbp)               # 8-byte Spill
	jmp	.LBB6_789
.LBB6_783:                              #   in Loop: Header=BB6_780 Depth=2
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-3640(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3640(%rbp)
	jmp	.LBB6_780
.Ltmp721:
.LBB6_784:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -3660(%rbp)
	movq	-3632(%rbp), %rax
	movq	%rax, -3672(%rbp)
	movl	-3660(%rbp), %eax
	movl	%eax, -3676(%rbp)
	movq	-3672(%rbp), %rax
	movq	%rax, -3688(%rbp)
.Ltmp722:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-3676(%rbp), %rax
	cmpq	-3688(%rbp), %rax
	jle	.LBB6_786
.Ltmp723:
# %bb.785:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-3660(%rbp), %rax
	movq	%rax, -8096(%rbp)               # 8-byte Spill
	jmp	.LBB6_787
.LBB6_786:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-3672(%rbp), %rax
	movq	%rax, -8096(%rbp)               # 8-byte Spill
.LBB6_787:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-8096(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5488(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -8088(%rbp)               # 8-byte Spill
	jmp	.LBB6_789
.Ltmp724:
.LBB6_788:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp725:
.LBB6_789:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-8088(%rbp), %rax               # 8-byte Reload
	movq	%rax, -8104(%rbp)               # 8-byte Spill
	.loc	3 536 19 is_stmt 1              # formatter.c3:536:19
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_791
# %bb.790:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-8104(%rbp), %rax               # 8-byte Reload
	.loc	3 536 19                        # formatter.c3:536:19
	movq	%rax, -5480(%rbp)
	jmp	.LBB6_792
.LBB6_791:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_793
.LBB6_792:
	movq	-5480(%rbp), %rax
	.loc	3 536 19 epilogue_begin         # formatter.c3:536:19
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_793:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 19                          # formatter.c3:0:19
	movq	-8072(%rbp), %rax               # 8-byte Reload
	.loc	3 536 6                         # formatter.c3:536:6
	addq	-5488(%rbp), %rax
	movq	%rax, -3736(%rbp)
.Ltmp726:
.LBB6_794:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 538 5 is_stmt 1               # formatter.c3:538:5
	movq	-3736(%rbp), %rax
	movq	%rax, -8120(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	movq	-4400(%rbp), %rdx
	movq	-4392(%rbp), %rcx
	.loc	3 538 18 is_stmt 0              # formatter.c3:538:18
	leaq	-5504(%rbp), %rdi
	callq	std.io.Formatter.out_str
	movq	%rax, -8112(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_796
# %bb.795:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8112(%rbp), %rax               # 8-byte Reload
	.loc	3 538 18                        # formatter.c3:538:18
	movq	%rax, -5496(%rbp)
	jmp	.LBB6_797
.LBB6_796:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_798
.LBB6_797:
	movq	-5496(%rbp), %rax
	.loc	3 538 18 epilogue_begin         # formatter.c3:538:18
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_798:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8120(%rbp), %rax               # 8-byte Reload
	.loc	3 538 5                         # formatter.c3:538:5
	addq	-5504(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 539 5 is_stmt 1               # formatter.c3:539:5
	jmp	.LBB6_847
.Ltmp727:
.LBB6_799:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 541 5                         # formatter.c3:541:5
	movq	-3696(%rbp), %rax
	.loc	3 541 26 is_stmt 0              # formatter.c3:541:26
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	orl	$1, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 542 5 is_stmt 1               # formatter.c3:542:5
	movq	-3696(%rbp), %rax
	.loc	3 542 23 is_stmt 0              # formatter.c3:542:23
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	orl	$16, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 543 12 is_stmt 1              # formatter.c3:543:12
	movl	$16, -4340(%rbp)
	jmp	.LBB6_810
.Ltmp728:
.LBB6_800:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 12 is_stmt 0                # formatter.c3:0:12
	movq	-3696(%rbp), %rax
	movq	%rax, -5512(%rbp)
	movq	std.io.INVALID_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -5520(%rbp)
.Ltmp729:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5512(%rbp)
	jne	.LBB6_802
# %bb.801:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp730:
.LBB6_802:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5512(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_804
# %bb.803:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5512(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5528(%rbp)
	jmp	.LBB6_805
.LBB6_804:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5512(%rbp), %rax
	movq	-5520(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5520(%rbp), %rax
	movq	%rax, -5528(%rbp)
.Ltmp731:
.LBB6_805:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 546 5                         # formatter.c3:546:5
	movq	-3736(%rbp), %rax
	movq	%rax, -8136(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rsi
	.loc	3 546 18 is_stmt 0              # formatter.c3:546:18
	leaq	-5544(%rbp), %rdi
	leaq	.L.str.93(%rip), %rdx
	movl	$12, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -8128(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_807
# %bb.806:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8128(%rbp), %rax               # 8-byte Reload
	.loc	3 546 18                        # formatter.c3:546:18
	movq	%rax, -5536(%rbp)
	jmp	.LBB6_808
.LBB6_807:                              #   in Loop: Header=BB6_4 Depth=1
	jmp	.LBB6_809
.LBB6_808:
	movq	-5536(%rbp), %rax
	.loc	3 546 18 epilogue_begin         # formatter.c3:546:18
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_809:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8136(%rbp), %rax               # 8-byte Reload
	.loc	3 546 5                         # formatter.c3:546:5
	addq	-5544(%rbp), %rax
	movq	%rax, -3736(%rbp)
	.loc	3 547 5 is_stmt 1               # formatter.c3:547:5
	jmp	.LBB6_847
.Ltmp732:
.LBB6_810:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 549 7                         # formatter.c3:549:7
	movl	$10, %eax
	cmpl	-4340(%rbp), %eax
	je	.LBB6_812
# %bb.811:                              #   in Loop: Header=BB6_4 Depth=1
.Ltmp733:
	.loc	3 551 4                         # formatter.c3:551:4
	movq	-3696(%rbp), %rax
	.loc	3 551 22 is_stmt 0              # formatter.c3:551:22
	movl	16(%rax), %ecx
	andl	$-5, %ecx
	movl	%ecx, 16(%rax)
	.loc	3 552 4 is_stmt 1               # formatter.c3:552:4
	movq	-3696(%rbp), %rax
	.loc	3 552 23 is_stmt 0              # formatter.c3:552:23
	movl	16(%rax), %ecx
	andl	$-9, %ecx
	movl	%ecx, 16(%rax)
.Ltmp734:
.LBB6_812:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 555 7 is_stmt 1               # formatter.c3:555:7
	movq	-3696(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB6_814
# %bb.813:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 555 29 is_stmt 0              # formatter.c3:555:29
	movq	-3696(%rbp), %rax
	.loc	3 555 50                        # formatter.c3:555:50
	movl	16(%rax), %ecx
	andl	$-2, %ecx
	movl	%ecx, 16(%rax)
.LBB6_814:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 557 8 is_stmt 1               # formatter.c3:557:8
	movb	$0, -5545(%rbp)
	.loc	3 558 3                         # formatter.c3:558:3
	movq	-3736(%rbp), %rax
	movq	%rax, -8152(%rbp)               # 8-byte Spill
	movq	-3696(%rbp), %rax
	movq	%rax, -5568(%rbp)
	movq	-4400(%rbp), %rsi
	movq	-4392(%rbp), %rdx
.Ltmp735:
	.loc	3 558 42 is_stmt 0              # formatter.c3:558:42
	leaq	-5600(%rbp), %rdi
	leaq	-5545(%rbp), %rcx
	callq	std.io.int_from_any
	movq	%rax, -8144(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_816
# %bb.815:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-8144(%rbp), %rax               # 8-byte Reload
	.loc	3 558 42                        # formatter.c3:558:42
	movq	%rax, -5584(%rbp)
	jmp	.LBB6_819
.LBB6_816:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 42                          # formatter.c3:0:42
	movq	-3696(%rbp), %rsi
	movq	-5600(%rbp), %rdx
	movq	-5592(%rbp), %rcx
	movb	-5545(%rbp), %al
	movl	-4340(%rbp), %r9d
	.loc	3 345 13 is_stmt 1              # formatter.c3:345:13
	leaq	-5608(%rbp), %rdi
	movzbl	%al, %r8d
	callq	std.io.Formatter.ntoa
	movq	%rax, -8160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_818
# %bb.817:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 13 is_stmt 0                # formatter.c3:0:13
	movq	-8160(%rbp), %rax               # 8-byte Reload
	.loc	3 345 13                        # formatter.c3:345:13
	movq	%rax, -5584(%rbp)
	jmp	.LBB6_819
.LBB6_818:                              #   in Loop: Header=BB6_4 Depth=1
	movq	-5608(%rbp), %rax
	movq	%rax, -5576(%rbp)
	movq	$0, -5584(%rbp)
.LBB6_819:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 12 is_stmt 1              # formatter.c3:346:12
	jmp	.LBB6_820
.LBB6_820:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 346 18 is_stmt 0              # formatter.c3:346:18
	movq	-5584(%rbp), %rax
	movq	%rax, -8168(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_822
# %bb.821:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-8168(%rbp), %rax               # 8-byte Reload
	.loc	3 346 18                        # formatter.c3:346:18
	movq	%rax, -5616(%rbp)
	jmp	.LBB6_823
.LBB6_822:                              #   in Loop: Header=BB6_4 Depth=1
	movq	$0, -5616(%rbp)
.LBB6_823:                              #   in Loop: Header=BB6_4 Depth=1
	cmpq	$0, -5616(%rbp)
	je	.LBB6_844
# %bb.824:
	.loc	3 0 18                          # formatter.c3:0:18
	movq	-5616(%rbp), %rax
	movq	%rax, -5624(%rbp)
# %bb.825:
	movq	-5624(%rbp), %rcx
	movq	%rcx, -8176(%rbp)               # 8-byte Spill
.Ltmp736:
	.loc	3 350 9 is_stmt 1               # formatter.c3:350:9
	movq	std.io.BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	je	.LBB6_827
# %bb.826:
	.loc	3 0 9 is_stmt 0                 # formatter.c3:0:9
	movq	-8176(%rbp), %rcx               # 8-byte Reload
	.loc	3 351 15 is_stmt 1              # formatter.c3:351:15
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	cmpq	%rcx, %rax
	jne	.LBB6_833
.LBB6_827:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-5568(%rbp), %rax
	movq	%rax, -5632(%rbp)
	movq	-5616(%rbp), %rax
	movq	%rax, -5640(%rbp)
.Ltmp737:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5632(%rbp)
	jne	.LBB6_829
# %bb.828:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp738:
.LBB6_829:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5632(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_831
# %bb.830:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5632(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5648(%rbp)
	jmp	.LBB6_832
.LBB6_831:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5632(%rbp), %rax
	movq	-5640(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5640(%rbp), %rax
	movq	%rax, -5648(%rbp)
.LBB6_832:
	movq	-5648(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB6_845
.LBB6_833:
	jmp	.LBB6_834
.Ltmp739:
.LBB6_834:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-5568(%rbp), %rax
	movq	%rax, -5656(%rbp)
	movq	std.io.INVALID_ARGUMENT@GOTPCREL(%rip), %rax
	movq	%rax, -5664(%rbp)
.Ltmp740:
	.loc	1 25 27 is_stmt 1               # formatter_private.c3:25:27
	cmpq	$0, -5656(%rbp)
	jne	.LBB6_836
# %bb.835:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$25, (%rsp)
	callq	*(%rax)
.Ltmp741:
.LBB6_836:
	.loc	1 27 6                          # formatter_private.c3:27:6
	movq	-5656(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_838
# %bb.837:
	.loc	1 27 31 is_stmt 0               # formatter_private.c3:27:31
	movq	-5656(%rbp), %rax
	movq	32(%rax), %rax
	movq	%rax, -5672(%rbp)
	jmp	.LBB6_839
.LBB6_838:
	.loc	1 28 2 is_stmt 1                # formatter_private.c3:28:2
	movq	-5656(%rbp), %rax
	movq	-5664(%rbp), %rcx
	movq	%rcx, 32(%rax)
	.loc	1 29 9                          # formatter_private.c3:29:9
	movq	-5664(%rbp), %rax
	movq	%rax, -5672(%rbp)
.LBB6_839:
	movq	-5672(%rbp), %rax
	movq	%rax, -5616(%rbp)
	movq	-5568(%rbp), %rsi
.Ltmp742:
	.loc	3 355 11                        # formatter.c3:355:11
	leaq	-5688(%rbp), %rdi
	leaq	.L.str.94(%rip), %rdx
	movl	$9, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -8184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB6_841
# %bb.840:
	.loc	3 0 11 is_stmt 0                # formatter.c3:0:11
	movq	-8184(%rbp), %rax               # 8-byte Reload
	.loc	3 355 11                        # formatter.c3:355:11
	movq	%rax, -5680(%rbp)
	jmp	.LBB6_842
.LBB6_841:
	jmp	.LBB6_843
.LBB6_842:
	movq	-5680(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB6_845
.LBB6_843:
	.loc	3 356 18 is_stmt 1              # formatter.c3:356:18
	movq	-5616(%rbp), %rax
	movq	%rax, -5560(%rbp)
	jmp	.LBB6_845
.Ltmp743:
.LBB6_844:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 359 9                         # formatter.c3:359:9
	jmp	.LBB6_846
.LBB6_845:
	movq	-5560(%rbp), %rax
	.loc	3 359 9 epilogue_begin is_stmt 0 # formatter.c3:359:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp744:
.LBB6_846:                              #   in Loop: Header=BB6_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 0 9                           # formatter.c3:0:9
	movq	-8152(%rbp), %rax               # 8-byte Reload
	.loc	3 558 3 is_stmt 1               # formatter.c3:558:3
	addq	-5576(%rbp), %rax
	movq	%rax, -3736(%rbp)
.Ltmp745:
.LBB6_847:                              #   in Loop: Header=BB6_4 Depth=1
	.loc	3 373 34                        # formatter.c3:373:34
	movq	-3760(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -3760(%rbp)
	jmp	.LBB6_4
.Ltmp746:
.LBB6_848:
	.loc	3 564 6                         # formatter.c3:564:6
	movq	-3696(%rbp), %rax
	cmpq	$0, 32(%rax)
	je	.LBB6_850
# %bb.849:
	.loc	3 564 31 is_stmt 0              # formatter.c3:564:31
	movq	-3696(%rbp), %rax
	movq	32(%rax), %rax
	.loc	3 564 31 epilogue_begin         # formatter.c3:564:31
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_850:
	.cfi_def_cfa %rbp, 16
	.loc	3 0 31                          # formatter.c3:0:31
	movq	-5744(%rbp), %rax               # 8-byte Reload
	.loc	3 565 9 is_stmt 1               # formatter.c3:565:9
	movq	-3736(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 565 9 epilogue_begin is_stmt 0 # formatter.c3:565:9
	addq	$8208, %rsp                     # imm = 0x2010
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_851:
	.cfi_def_cfa %rbp, 16
	.loc	3 362 27 is_stmt 1              # formatter.c3:362:27
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$362, (%rsp)                    # imm = 0x16A
	callq	*(%rax)
.LBB6_852:
	.loc	3 0 27 is_stmt 0                # formatter.c3:0:27
	movq	-5752(%rbp), %rcx               # 8-byte Reload
	movq	-5768(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3776(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3784(%rbp)
	movq	%rax, -3816(%rbp)
	leaq	-3776(%rbp), %rcx
	movq	%rcx, -3824(%rbp)
	movq	%rax, -3800(%rbp)
	leaq	-3784(%rbp), %rax
	movq	%rax, -3808(%rbp)
	leaq	-3824(%rbp), %rax
	movq	%rax, -3840(%rbp)
	movq	$2, -3832(%rbp)
.Ltmp747:
	.loc	3 376 19 is_stmt 1              # formatter.c3:376:19
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-3840(%rbp), %rax
	movl	$376, (%rsp)                    # imm = 0x178
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_853:
	.loc	3 0 19 is_stmt 0                # formatter.c3:0:19
	movq	-5792(%rbp), %rcx               # 8-byte Reload
	movq	-5808(%rbp), %rax               # 8-byte Reload
	movq	%rax, -3888(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3896(%rbp)
	movq	%rax, -3928(%rbp)
	leaq	-3888(%rbp), %rcx
	movq	%rcx, -3936(%rbp)
	movq	%rax, -3912(%rbp)
	leaq	-3896(%rbp), %rax
	movq	%rax, -3920(%rbp)
	leaq	-3936(%rbp), %rax
	movq	%rax, -3952(%rbp)
	movq	$2, -3944(%rbp)
	.loc	3 385 14 is_stmt 1              # formatter.c3:385:14
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-3952(%rbp), %rax
	movl	$385, (%rsp)                    # imm = 0x181
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_854:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-5840(%rbp), %rcx               # 8-byte Reload
	movq	-5856(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4008(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4016(%rbp)
	movq	%rax, -4040(%rbp)
	leaq	-4008(%rbp), %rcx
	movq	%rcx, -4048(%rbp)
	movq	%rax, -4024(%rbp)
	leaq	-4016(%rbp), %rax
	movq	%rax, -4032(%rbp)
	leaq	-4048(%rbp), %rax
	movq	%rax, -4064(%rbp)
	movq	$2, -4056(%rbp)
.Ltmp748:
	.loc	3 405 15 is_stmt 1              # formatter.c3:405:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4064(%rbp), %rax
	movl	$405, (%rsp)                    # imm = 0x195
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp749:
.LBB6_855:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-6496(%rbp), %rcx               # 8-byte Reload
	movq	-6512(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4128(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4136(%rbp)
	movq	%rax, -4168(%rbp)
	leaq	-4128(%rbp), %rcx
	movq	%rcx, -4176(%rbp)
	movq	%rax, -4152(%rbp)
	leaq	-4136(%rbp), %rax
	movq	%rax, -4160(%rbp)
	leaq	-4176(%rbp), %rax
	movq	%rax, -4192(%rbp)
	movq	$2, -4184(%rbp)
	.loc	3 410 14 is_stmt 1              # formatter.c3:410:14
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4192(%rbp), %rax
	movl	$410, (%rsp)                    # imm = 0x19A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_856:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7160(%rbp), %rcx               # 8-byte Reload
	movq	-7176(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4280(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4288(%rbp)
	movq	%rax, -4312(%rbp)
	leaq	-4280(%rbp), %rcx
	movq	%rcx, -4320(%rbp)
	movq	%rax, -4296(%rbp)
	leaq	-4288(%rbp), %rax
	movq	%rax, -4304(%rbp)
	leaq	-4320(%rbp), %rax
	movq	%rax, -4336(%rbp)
	movq	$2, -4328(%rbp)
.Ltmp750:
	.loc	3 426 15 is_stmt 1              # formatter.c3:426:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4336(%rbp), %rax
	movl	$426, (%rsp)                    # imm = 0x1AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp751:
.LBB6_857:
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-7200(%rbp), %rcx               # 8-byte Reload
	movq	-7216(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4408(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4416(%rbp)
	movq	%rax, -4440(%rbp)
	leaq	-4408(%rbp), %rcx
	movq	%rcx, -4448(%rbp)
	movq	%rax, -4424(%rbp)
	leaq	-4416(%rbp), %rax
	movq	%rax, -4432(%rbp)
	leaq	-4448(%rbp), %rax
	movq	%rax, -4464(%rbp)
	movq	$2, -4456(%rbp)
	.loc	3 437 22 is_stmt 1              # formatter.c3:437:22
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4464(%rbp), %rax
	movl	$437, (%rsp)                    # imm = 0x1B5
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_858:
	.loc	3 0 22 is_stmt 0                # formatter.c3:0:22
	movq	-7224(%rbp), %rcx               # 8-byte Reload
	movq	$8, -4472(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4480(%rbp)
	movq	%rax, -4504(%rbp)
	leaq	-4472(%rbp), %rcx
	movq	%rcx, -4512(%rbp)
	movq	%rax, -4488(%rbp)
	leaq	-4480(%rbp), %rax
	movq	%rax, -4496(%rbp)
	leaq	-4512(%rbp), %rax
	movq	%rax, -4528(%rbp)
	movq	$2, -4520(%rbp)
	.loc	3 437 17                        # formatter.c3:437:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-4528(%rbp), %rax
	movl	$437, (%rsp)                    # imm = 0x1B5
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_859:
.Ltmp752:
	.loc	3 494 14 is_stmt 1              # formatter.c3:494:14
	leaq	.panic_msg.89(%rip), %rdi
	movl	$57, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$494, (%rsp)                    # imm = 0x1EE
	callq	*(%rax)
.LBB6_860:
	.loc	3 0 14 is_stmt 0                # formatter.c3:0:14
	movq	-7520(%rbp), %rcx               # 8-byte Reload
	movq	$8, -5096(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -5104(%rbp)
	movq	%rax, -5128(%rbp)
	leaq	-5096(%rbp), %rcx
	movq	%rcx, -5136(%rbp)
	movq	%rax, -5112(%rbp)
	leaq	-5104(%rbp), %rax
	movq	%rax, -5120(%rbp)
	leaq	-5136(%rbp), %rax
	movq	%rax, -5152(%rbp)
	movq	$2, -5144(%rbp)
	.loc	3 494 14                        # formatter.c3:494:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5152(%rbp), %rax
	movl	$494, (%rsp)                    # imm = 0x1EE
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp753:
.LBB6_861:
	.loc	3 0 14                          # formatter.c3:0:14
	movq	-7560(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5160(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5176(%rbp)
	leaq	-5160(%rbp), %rax
	movq	%rax, -5184(%rbp)
	leaq	-5184(%rbp), %rax
	movq	%rax, -5200(%rbp)
	movq	$1, -5192(%rbp)
.Ltmp754:
	.loc	3 498 14 is_stmt 1              # formatter.c3:498:14
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5200(%rbp), %rax
	movl	$498, (%rsp)                    # imm = 0x1F2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp755:
.LBB6_862:
	.loc	3 503 17                        # formatter.c3:503:17
	leaq	.panic_msg.91(%rip), %rdi
	movl	$60, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	callq	*(%rax)
.LBB6_863:
	.loc	3 0 17 is_stmt 0                # formatter.c3:0:17
	movq	-7592(%rbp), %rcx               # 8-byte Reload
	movq	$8, -5208(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -5216(%rbp)
	movq	%rax, -5240(%rbp)
	leaq	-5208(%rbp), %rcx
	movq	%rcx, -5248(%rbp)
	movq	%rax, -5224(%rbp)
	leaq	-5216(%rbp), %rax
	movq	%rax, -5232(%rbp)
	leaq	-5248(%rbp), %rax
	movq	%rax, -5264(%rbp)
	movq	$2, -5256(%rbp)
	.loc	3 503 17                        # formatter.c3:503:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5264(%rbp), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB6_864:
	.loc	3 0 17                          # formatter.c3:0:17
	movq	-7624(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5272(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5288(%rbp)
	leaq	-5272(%rbp), %rax
	movq	%rax, -5296(%rbp)
	leaq	-5296(%rbp), %rax
	movq	%rax, -5312(%rbp)
	movq	$1, -5304(%rbp)
	.loc	3 503 14                        # formatter.c3:503:14
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.77(%rip), %r8
	movl	$7, %r9d
	leaq	-5312(%rbp), %rax
	movl	$503, (%rsp)                    # imm = 0x1F7
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp756:
.Lfunc_end6:
	.size	std.io.Formatter.vprintf, .Lfunc_end6-std.io.Formatter.vprintf
	.cfi_endproc
	.section	.rodata.std.io.Formatter.vprintf,"aG",@progbits,std.io.Formatter.vprintf,comdat
	.p2align	2, 0x0
.LJTI6_0:
	.long	.LBB6_28-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_29-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_27-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_26-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_30-.LJTI6_0
	.long	.LBB6_25-.LJTI6_0
.LJTI6_1:
	.long	.LBB6_478-.LJTI6_1
	.long	.LBB6_476-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_546-.LJTI6_1
	.long	.LBB6_512-.LJTI6_1
	.long	.LBB6_580-.LJTI6_1
	.long	.LBB6_619-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_474-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_472-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_479-.LJTI6_1
	.long	.LBB6_477-.LJTI6_1
	.long	.LBB6_614-.LJTI6_1
	.long	.LBB6_471-.LJTI6_1
	.long	.LBB6_547-.LJTI6_1
	.long	.LBB6_513-.LJTI6_1
	.long	.LBB6_581-.LJTI6_1
	.long	.LBB6_620-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_475-.LJTI6_1
	.long	.LBB6_799-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_752-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_800-.LJTI6_1
	.long	.LBB6_473-.LJTI6_1
                                        # -- End function
	.section	.text.std.io.Formatter.print,"axG",@progbits,std.io.Formatter.print,comdat
	.weak	std.io.Formatter.print          # -- Begin function std.io.Formatter.print
	.p2align	4, 0x90
	.type	std.io.Formatter.print,@function
std.io.Formatter.print:                 # @std.io.Formatter.print
.Lfunc_begin7:
	.loc	3 569 0 is_stmt 1               # formatter.c3:569:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -168(%rbp)                # 8-byte Spill
	movq	%rsi, -160(%rbp)                # 8-byte Spill
	movq	%rdx, -152(%rbp)                # 8-byte Spill
	movq	%rcx, -144(%rbp)                # 8-byte Spill
.Ltmp757:
	.loc	3 570 1 prologue_end            # formatter.c3:570:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB7_12
# %bb.1:
	.loc	3 0 1 is_stmt 0                 # formatter.c3:0:1
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	-152(%rbp), %rcx                # 8-byte Reload
	movq	-160(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -16(%rbp)
	.loc	3 571 7 is_stmt 1               # formatter.c3:571:7
	movq	-8(%rbp), %rax
	cmpq	$0, 8(%rax)
	jne	.LBB7_3
# %bb.2:
.Ltmp758:
	.loc	3 574 3                         # formatter.c3:574:3
	movq	-8(%rbp), %rax
	leaq	std.io.out_null_fn(%rip), %rcx
	movq	%rcx, 8(%rax)
.Ltmp759:
.LBB7_3:
	.loc	3 576 15                        # formatter.c3:576:15
	movq	-16(%rbp), %rax
	movq	%rax, -176(%rbp)                # 8-byte Spill
	movq	$0, -32(%rbp)
.LBB7_4:                                # =>This Inner Loop Header: Depth=1
	.loc	3 0 15 is_stmt 0                # formatter.c3:0:15
	movq	-176(%rbp), %rax                # 8-byte Reload
	.loc	3 576 15                        # formatter.c3:576:15
	cmpq	%rax, -32(%rbp)
	jae	.LBB7_11
# %bb.5:                                #   in Loop: Header=BB7_4 Depth=1
.Ltmp760:
	.loc	3 576 15                        # formatter.c3:576:15
	movq	-16(%rbp), %rcx
	movq	%rcx, -200(%rbp)                # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -192(%rbp)                # 8-byte Spill
	movq	-32(%rbp), %rax
	movq	%rax, -184(%rbp)                # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB7_13
# %bb.6:                                #   in Loop: Header=BB7_4 Depth=1
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-192(%rbp), %rax                # 8-byte Reload
	movq	-184(%rbp), %rcx                # 8-byte Reload
	.loc	3 576 15                        # formatter.c3:576:15
	movb	(%rax,%rcx), %al
	movb	%al, -33(%rbp)
	movq	-8(%rbp), %rsi
	.loc	3 576 20                        # formatter.c3:576:20
	leaq	-128(%rbp), %rdi
	movzbl	-33(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -208(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB7_8
# %bb.7:
	.loc	3 0 20                          # formatter.c3:0:20
	movq	-208(%rbp), %rax                # 8-byte Reload
	.loc	3 576 20                        # formatter.c3:576:20
	movq	%rax, -120(%rbp)
	jmp	.LBB7_9
.LBB7_8:                                #   in Loop: Header=BB7_4 Depth=1
	jmp	.LBB7_10
.LBB7_9:
	movq	-120(%rbp), %rax
	.loc	3 576 20 epilogue_begin         # formatter.c3:576:20
	addq	$240, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp761:
.LBB7_10:                               #   in Loop: Header=BB7_4 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	3 576 15                        # formatter.c3:576:15
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB7_4
.Ltmp762:
.LBB7_11:
	.loc	3 0 15                          # formatter.c3:0:15
	movq	-168(%rbp), %rax                # 8-byte Reload
	.loc	3 577 9 is_stmt 1               # formatter.c3:577:9
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	3 577 9 epilogue_begin is_stmt 0 # formatter.c3:577:9
	addq	$240, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:
	.cfi_def_cfa %rbp, 16
	.loc	3 569 25 is_stmt 1              # formatter.c3:569:25
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.95(%rip), %r8
	movl	$5, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$569, (%rsp)                    # imm = 0x239
	callq	*(%rax)
.LBB7_13:
	.loc	3 0 25 is_stmt 0                # formatter.c3:0:25
	movq	-184(%rbp), %rcx                # 8-byte Reload
	movq	-200(%rbp), %rax                # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
.Ltmp763:
	.loc	3 576 15 is_stmt 1              # formatter.c3:576:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file(%rip), %rdx
	movl	$12, %ecx
	leaq	.func.95(%rip), %r8
	movl	$5, %r9d
	leaq	-112(%rbp), %rax
	movl	$576, (%rsp)                    # imm = 0x240
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp764:
.Lfunc_end7:
	.size	std.io.Formatter.print, .Lfunc_end7-std.io.Formatter.print
	.cfi_endproc
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function std.io.out_null_fn
	.type	std.io.out_null_fn,@function
std.io.out_null_fn:                     # @std.io.out_null_fn
.Lfunc_begin8:
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	movb	%al, -9(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	std.io.out_null_fn, .Lfunc_end8-std.io.out_null_fn
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.adjust
	.type	std.io.Formatter.adjust,@function
std.io.Formatter.adjust:                # @std.io.Formatter.adjust
.Lfunc_begin9:
	.loc	1 32 0                          # formatter_private.c3:32:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movq	%rdi, -160(%rbp)                # 8-byte Spill
	movq	%rsi, -152(%rbp)                # 8-byte Spill
	movq	%rdx, -144(%rbp)                # 8-byte Spill
.Ltmp765:
	.loc	1 33 1 prologue_end             # formatter_private.c3:33:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB9_18
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	-152(%rbp), %rcx                # 8-byte Reload
	movq	%rcx, -104(%rbp)
	movq	%rax, -112(%rbp)
	.loc	1 34 7 is_stmt 1                # formatter_private.c3:34:7
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB9_3
# %bb.2:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	1 34 31                         # formatter_private.c3:34:31
	movq	$0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 34 31 epilogue_begin          # formatter_private.c3:34:31
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:
	.cfi_def_cfa %rbp, 16
	.loc	1 35 23 is_stmt 1               # formatter_private.c3:35:23
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -184(%rbp)                # 8-byte Spill
	.loc	1 35 35 is_stmt 0               # formatter_private.c3:35:35
	movq	-112(%rbp), %rax
	movq	%rax, -176(%rbp)                # 8-byte Spill
	movq	-104(%rbp), %rax
	movq	%rax, -168(%rbp)                # 8-byte Spill
.Ltmp766:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB9_13
# %bb.4:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-176(%rbp), %rax                # 8-byte Reload
	movq	-184(%rbp), %rcx                # 8-byte Reload
	movq	-168(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movb	$32, -9(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -32(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-24(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.Ltmp767:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -48(%rbp)
.LBB9_5:                                # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB9_9
# %bb.6:                                #   in Loop: Header=BB9_5 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-8(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-64(%rbp), %rdi
	movzbl	-9(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -192(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB9_8
# %bb.7:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-192(%rbp), %rax                # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -200(%rbp)                # 8-byte Spill
	jmp	.LBB9_14
.LBB9_8:                                #   in Loop: Header=BB9_5 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB9_5
.Ltmp768:
.LBB9_9:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -68(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
.Ltmp769:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-84(%rbp), %rax
	cmpq	-96(%rbp), %rax
	jle	.LBB9_11
.Ltmp770:
# %bb.10:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-68(%rbp), %rax
	movq	%rax, -208(%rbp)                # 8-byte Spill
	jmp	.LBB9_12
.LBB9_11:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-80(%rbp), %rax
	movq	%rax, -208(%rbp)                # 8-byte Spill
.LBB9_12:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-208(%rbp), %rax                # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -136(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -200(%rbp)                # 8-byte Spill
	jmp	.LBB9_14
.Ltmp771:
.LBB9_13:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp772:
.LBB9_14:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-200(%rbp), %rax                # 8-byte Reload
	movq	%rax, -216(%rbp)                # 8-byte Spill
	.loc	1 35 9 is_stmt 1                # formatter_private.c3:35:9
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB9_16
# %bb.15:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-216(%rbp), %rax                # 8-byte Reload
	.loc	1 35 9                          # formatter_private.c3:35:9
	movq	%rax, -128(%rbp)
	jmp	.LBB9_17
.LBB9_16:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	1 35 9                          # formatter_private.c3:35:9
	movq	-136(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 35 9 epilogue_begin           # formatter_private.c3:35:9
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_17:
	.cfi_def_cfa %rbp, 16
	movq	-128(%rbp), %rax
	.loc	1 35 9 epilogue_begin           # formatter_private.c3:35:9
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_18:
	.cfi_def_cfa %rbp, 16
	.loc	1 32 26 is_stmt 1               # formatter_private.c3:32:26
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.126(%rip), %r8
	movl	$6, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$32, (%rsp)
	callq	*(%rax)
.Ltmp773:
.Lfunc_end9:
	.size	std.io.Formatter.adjust, .Lfunc_end9-std.io.Formatter.adjust
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out_substr
	.type	std.io.Formatter.out_substr,@function
std.io.Formatter.out_substr:            # @std.io.Formatter.out_substr
.Lfunc_begin10:
	.loc	1 159 0                         # formatter_private.c3:159:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movq	%rdi, -128(%rbp)                # 8-byte Spill
	movq	%rsi, -120(%rbp)                # 8-byte Spill
	movq	%rdx, -112(%rbp)                # 8-byte Spill
	movq	%rcx, -104(%rbp)                # 8-byte Spill
.Ltmp774:
	.loc	1 160 1 prologue_end            # formatter_private.c3:160:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB10_19
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-104(%rbp), %rax                # 8-byte Reload
	movq	-112(%rbp), %rcx                # 8-byte Reload
	movq	-120(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -16(%rbp)
	.loc	1 161 32 is_stmt 1              # formatter_private.c3:161:32
	movq	-24(%rbp), %rdi
	movq	-16(%rbp), %rsi
	.loc	1 161 10 is_stmt 0              # formatter_private.c3:161:10
	callq	std.core.string.conv.utf8_codepoints@PLT
	movq	%rax, -32(%rbp)
	.loc	1 162 14 is_stmt 1              # formatter_private.c3:162:14
	movq	-8(%rbp), %rax
	movl	24(%rax), %eax
	movl	%eax, -36(%rbp)
	.loc	1 163 6                         # formatter_private.c3:163:6
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
	movb	%al, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -129(%rbp)                 # 1-byte Spill
	je	.LBB10_3
# %bb.2:
	.loc	1 163 30 is_stmt 0              # formatter_private.c3:163:30
	movq	-32(%rbp), %rax
	.loc	1 163 34                        # formatter_private.c3:163:34
	movl	-36(%rbp), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 163 30                        # formatter_private.c3:163:30
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, -129(%rbp)                 # 1-byte Spill
.LBB10_3:
	.loc	1 0 30                          # formatter_private.c3:0:30
	movb	-129(%rbp), %al                 # 1-byte Reload
	.loc	1 163 30                        # formatter_private.c3:163:30
	testb	$1, %al
	jne	.LBB10_4
	jmp	.LBB10_5
.LBB10_4:
	.loc	1 163 44                        # formatter_private.c3:163:44
	movl	-36(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -32(%rbp)
.LBB10_5:
	.loc	1 164 14 is_stmt 1              # formatter_private.c3:164:14
	movq	$0, -48(%rbp)
	.loc	1 165 14                        # formatter_private.c3:165:14
	movq	-16(%rbp), %rax
	movq	%rax, -56(%rbp)
	.loc	1 166 14                        # formatter_private.c3:166:14
	movq	-24(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB10_6:                               # =>This Inner Loop Header: Depth=1
.Ltmp775:
	.loc	1 167 9                         # formatter_private.c3:167:9
	movq	-48(%rbp), %rax
	cmpq	-56(%rbp), %rax
	jae	.LBB10_18
# %bb.7:                                #   in Loop: Header=BB10_6 Depth=1
.Ltmp776:
	.loc	1 169 12                        # formatter_private.c3:169:12
	movq	-64(%rbp), %rax
	.loc	1 169 16 is_stmt 0              # formatter_private.c3:169:16
	movq	-48(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -65(%rbp)
	.loc	1 171 7 is_stmt 1               # formatter_private.c3:171:7
	movzbl	-65(%rbp), %ecx
	andl	$192, %ecx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpl	$128, %ecx
	movb	%al, -130(%rbp)                 # 1-byte Spill
	je	.LBB10_9
# %bb.8:                                #   in Loop: Header=BB10_6 Depth=1
	.loc	1 171 27 is_stmt 0              # formatter_private.c3:171:27
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -130(%rbp)                 # 1-byte Spill
.LBB10_9:                               #   in Loop: Header=BB10_6 Depth=1
	.loc	1 0 27                          # formatter_private.c3:0:27
	movb	-130(%rbp), %cl                 # 1-byte Reload
	.loc	1 171 27                        # formatter_private.c3:171:27
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -131(%rbp)                 # 1-byte Spill
	jne	.LBB10_10
	jmp	.LBB10_11
.LBB10_10:                              #   in Loop: Header=BB10_6 Depth=1
	.loc	1 171 52                        # formatter_private.c3:171:52
	movl	-36(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$0, %eax
	sete	%al
	movb	%al, -131(%rbp)                 # 1-byte Spill
.LBB10_11:                              #   in Loop: Header=BB10_6 Depth=1
	.loc	1 0 52                          # formatter_private.c3:0:52
	movb	-131(%rbp), %al                 # 1-byte Reload
	.loc	1 171 52                        # formatter_private.c3:171:52
	testb	$1, %al
	jne	.LBB10_12
	jmp	.LBB10_13
.LBB10_12:
	.loc	1 171 60                        # formatter_private.c3:171:60
	jmp	.LBB10_18
.LBB10_13:                              #   in Loop: Header=BB10_6 Depth=1
	.loc	1 0 60                          # formatter_private.c3:0:60
	movq	-8(%rbp), %rsi
	.loc	1 172 3 is_stmt 1               # formatter_private.c3:172:3
	leaq	-88(%rbp), %rdi
	movzbl	-65(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -144(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB10_15
# %bb.14:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-144(%rbp), %rax                # 8-byte Reload
	.loc	1 172 3                         # formatter_private.c3:172:3
	movq	%rax, -80(%rbp)
	jmp	.LBB10_16
.LBB10_15:                              #   in Loop: Header=BB10_6 Depth=1
	jmp	.LBB10_17
.LBB10_16:
	movq	-80(%rbp), %rax
	.loc	1 172 3 epilogue_begin          # formatter_private.c3:172:3
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              #   in Loop: Header=BB10_6 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 173 3 is_stmt 1               # formatter_private.c3:173:3
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB10_6
.Ltmp777:
.LBB10_18:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-128(%rbp), %rax                # 8-byte Reload
	.loc	1 175 9 is_stmt 1               # formatter_private.c3:175:9
	movq	-48(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 175 9 epilogue_begin is_stmt 0 # formatter_private.c3:175:9
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_19:
	.cfi_def_cfa %rbp, 16
	.loc	1 159 30 is_stmt 1              # formatter_private.c3:159:30
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.127(%rip), %r8
	movl	$10, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$159, (%rsp)
	callq	*(%rax)
.Ltmp778:
.Lfunc_end10:
	.size	std.io.Formatter.out_substr, .Lfunc_end10-std.io.Formatter.out_substr
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.pad,"axG",@progbits,std.io.Formatter.pad,comdat
	.weak	std.io.Formatter.pad            # -- Begin function std.io.Formatter.pad
	.p2align	4, 0x90
	.type	std.io.Formatter.pad,@function
std.io.Formatter.pad:                   # @std.io.Formatter.pad
.Lfunc_begin11:
	.loc	1 178 0                         # formatter_private.c3:178:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%r8, -144(%rbp)                 # 8-byte Spill
	movq	%rcx, -136(%rbp)                # 8-byte Spill
	movq	%rsi, -128(%rbp)                # 8-byte Spill
	movq	%rdi, -120(%rbp)                # 8-byte Spill
	movb	%dl, %al
	movb	%al, -105(%rbp)                 # 1-byte Spill
.Ltmp779:
	.loc	1 179 1 prologue_end            # formatter_private.c3:179:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB11_12
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	-136(%rbp), %rcx                # 8-byte Reload
	movb	-105(%rbp), %dl                 # 1-byte Reload
	movq	-128(%rbp), %rsi                # 8-byte Reload
	movq	%rsi, -8(%rbp)
	movb	%dl, -9(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -32(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-24(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.Ltmp780:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -48(%rbp)
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB11_8
# %bb.3:                                #   in Loop: Header=BB11_2 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-8(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-64(%rbp), %rdi
	movzbl	-9(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -152(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB11_5
# %bb.4:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-152(%rbp), %rax                # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -56(%rbp)
	jmp	.LBB11_6
.LBB11_5:                               #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_7
.LBB11_6:
	movq	-56(%rbp), %rax
	.loc	1 181 34 epilogue_begin         # formatter_private.c3:181:34
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               #   in Loop: Header=BB11_2 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB11_2
.Ltmp781:
.LBB11_8:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -76(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -104(%rbp)
.Ltmp782:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-92(%rbp), %rax
	cmpq	-104(%rbp), %rax
	jle	.LBB11_10
.Ltmp783:
# %bb.9:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-76(%rbp), %rax
	movq	%rax, -160(%rbp)                # 8-byte Spill
	jmp	.LBB11_11
.LBB11_10:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-88(%rbp), %rax
	movq	%rax, -160(%rbp)                # 8-byte Spill
.LBB11_11:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-120(%rbp), %rax                # 8-byte Reload
	movq	-160(%rbp), %rcx                # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	7 116 38 epilogue_begin         # builtin_comparison.c3:116:38
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp784:
.LBB11_12:
	.cfi_def_cfa %rbp, 16
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp785:
.Lfunc_end11:
	.size	std.io.Formatter.pad, .Lfunc_end11-std.io.Formatter.pad
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.out_chars,"axG",@progbits,std.io.Formatter.out_chars,comdat
	.weak	std.io.Formatter.out_chars      # -- Begin function std.io.Formatter.out_chars
	.p2align	4, 0x90
	.type	std.io.Formatter.out_chars,@function
std.io.Formatter.out_chars:             # @std.io.Formatter.out_chars
.Lfunc_begin12:
	.loc	1 192 0                         # formatter_private.c3:192:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$240, %rsp
	movq	%rdi, -168(%rbp)                # 8-byte Spill
	movq	%rsi, -160(%rbp)                # 8-byte Spill
	movq	%rdx, -152(%rbp)                # 8-byte Spill
	movq	%rcx, -144(%rbp)                # 8-byte Spill
.Ltmp786:
	.loc	1 193 1 prologue_end            # formatter_private.c3:193:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB12_10
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	-152(%rbp), %rcx                # 8-byte Reload
	movq	-160(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -16(%rbp)
.Ltmp787:
	.loc	1 194 15 is_stmt 1              # formatter_private.c3:194:15
	movq	-16(%rbp), %rax
	movq	%rax, -176(%rbp)                # 8-byte Spill
	movq	$0, -32(%rbp)
.LBB12_2:                               # =>This Inner Loop Header: Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-176(%rbp), %rax                # 8-byte Reload
	.loc	1 194 15                        # formatter_private.c3:194:15
	cmpq	%rax, -32(%rbp)
	jae	.LBB12_9
# %bb.3:                                #   in Loop: Header=BB12_2 Depth=1
.Ltmp788:
	.loc	1 194 15                        # formatter_private.c3:194:15
	movq	-16(%rbp), %rcx
	movq	%rcx, -200(%rbp)                # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -192(%rbp)                # 8-byte Spill
	movq	-32(%rbp), %rax
	movq	%rax, -184(%rbp)                # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB12_11
# %bb.4:                                #   in Loop: Header=BB12_2 Depth=1
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-192(%rbp), %rax                # 8-byte Reload
	movq	-184(%rbp), %rcx                # 8-byte Reload
	.loc	1 194 15                        # formatter_private.c3:194:15
	movb	(%rax,%rcx), %al
	movb	%al, -33(%rbp)
	movq	-8(%rbp), %rsi
	.loc	1 194 18                        # formatter_private.c3:194:18
	leaq	-128(%rbp), %rdi
	movzbl	-33(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -208(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB12_6
# %bb.5:
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-208(%rbp), %rax                # 8-byte Reload
	.loc	1 194 18                        # formatter_private.c3:194:18
	movq	%rax, -120(%rbp)
	jmp	.LBB12_7
.LBB12_6:                               #   in Loop: Header=BB12_2 Depth=1
	jmp	.LBB12_8
.LBB12_7:
	movq	-120(%rbp), %rax
	.loc	1 194 18 epilogue_begin         # formatter_private.c3:194:18
	addq	$240, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp789:
.LBB12_8:                               #   in Loop: Header=BB12_2 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 194 15                        # formatter_private.c3:194:15
	movq	-32(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB12_2
.Ltmp790:
.LBB12_9:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-168(%rbp), %rax                # 8-byte Reload
	.loc	1 195 9 is_stmt 1               # formatter_private.c3:195:9
	movq	-16(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 195 9 epilogue_begin is_stmt 0 # formatter_private.c3:195:9
	addq	$240, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_10:
	.cfi_def_cfa %rbp, 16
	.loc	1 192 29 is_stmt 1              # formatter_private.c3:192:29
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.129(%rip), %r8
	movl	$9, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$192, (%rsp)
	callq	*(%rax)
.LBB12_11:
	.loc	1 0 29 is_stmt 0                # formatter_private.c3:0:29
	movq	-184(%rbp), %rcx                # 8-byte Reload
	movq	-200(%rbp), %rax                # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
.Ltmp791:
	.loc	1 194 15 is_stmt 1              # formatter_private.c3:194:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.129(%rip), %r8
	movl	$9, %r9d
	leaq	-112(%rbp), %rax
	movl	$194, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp792:
.Lfunc_end12:
	.size	std.io.Formatter.out_chars, .Lfunc_end12-std.io.Formatter.out_chars
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.etoa,"axG",@progbits,std.io.Formatter.etoa,comdat
	.weak	std.io.Formatter.etoa           # -- Begin function std.io.Formatter.etoa
	.p2align	4, 0x90
	.type	std.io.Formatter.etoa,@function
std.io.Formatter.etoa:                  # @std.io.Formatter.etoa
.Lfunc_begin13:
	.loc	1 206 0                         # formatter_private.c3:206:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
.Ltmp793:
	.loc	1 206 44 prologue_end           # formatter_private.c3:206:44
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB13_5
# %bb.1:
	.loc	1 0 44 is_stmt 0                # formatter_private.c3:0:44
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -8(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rsi
	vmovsd	-16(%rbp), %xmm0                # xmm0 = mem[0],zero
	.loc	1 206 44                        # formatter_private.c3:206:44
	leaq	-32(%rbp), %rdi
	movl	$1, %edx
	callq	std.io.Formatter.floatformat
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB13_3
# %bb.2:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-64(%rbp), %rax                 # 8-byte Reload
	.loc	1 206 44                        # formatter_private.c3:206:44
	movq	%rax, -24(%rbp)
	jmp	.LBB13_4
.LBB13_3:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-56(%rbp), %rax                 # 8-byte Reload
	.loc	1 206 44                        # formatter_private.c3:206:44
	movq	-32(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 206 44 epilogue_begin         # formatter_private.c3:206:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:
	.cfi_def_cfa %rbp, 16
	movq	-24(%rbp), %rax
	.loc	1 206 44 epilogue_begin         # formatter_private.c3:206:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:
	.cfi_def_cfa %rbp, 16
	.loc	1 206 24                        # formatter_private.c3:206:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.130(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$206, (%rsp)
	callq	*(%rax)
.Ltmp794:
.Lfunc_end13:
	.size	std.io.Formatter.etoa, .Lfunc_end13-std.io.Formatter.etoa
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.ftoa,"axG",@progbits,std.io.Formatter.ftoa,comdat
	.weak	std.io.Formatter.ftoa           # -- Begin function std.io.Formatter.ftoa
	.p2align	4, 0x90
	.type	std.io.Formatter.ftoa,@function
std.io.Formatter.ftoa:                  # @std.io.Formatter.ftoa
.Lfunc_begin14:
	.loc	1 207 0 is_stmt 1               # formatter_private.c3:207:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
.Ltmp795:
	.loc	1 207 44 prologue_end           # formatter_private.c3:207:44
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB14_5
# %bb.1:
	.loc	1 0 44 is_stmt 0                # formatter_private.c3:0:44
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -8(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rsi
	vmovsd	-16(%rbp), %xmm0                # xmm0 = mem[0],zero
	.loc	1 207 44                        # formatter_private.c3:207:44
	leaq	-32(%rbp), %rdi
	xorl	%edx, %edx
	callq	std.io.Formatter.floatformat
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB14_3
# %bb.2:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-64(%rbp), %rax                 # 8-byte Reload
	.loc	1 207 44                        # formatter_private.c3:207:44
	movq	%rax, -24(%rbp)
	jmp	.LBB14_4
.LBB14_3:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-56(%rbp), %rax                 # 8-byte Reload
	.loc	1 207 44                        # formatter_private.c3:207:44
	movq	-32(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 207 44 epilogue_begin         # formatter_private.c3:207:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:
	.cfi_def_cfa %rbp, 16
	movq	-24(%rbp), %rax
	.loc	1 207 44 epilogue_begin         # formatter_private.c3:207:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:
	.cfi_def_cfa %rbp, 16
	.loc	1 207 24                        # formatter_private.c3:207:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.131(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$207, (%rsp)
	callq	*(%rax)
.Ltmp796:
.Lfunc_end14:
	.size	std.io.Formatter.ftoa, .Lfunc_end14-std.io.Formatter.ftoa
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.gtoa,"axG",@progbits,std.io.Formatter.gtoa,comdat
	.weak	std.io.Formatter.gtoa           # -- Begin function std.io.Formatter.gtoa
	.p2align	4, 0x90
	.type	std.io.Formatter.gtoa,@function
std.io.Formatter.gtoa:                  # @std.io.Formatter.gtoa
.Lfunc_begin15:
	.loc	1 208 0 is_stmt 1               # formatter_private.c3:208:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
.Ltmp797:
	.loc	1 208 44 prologue_end           # formatter_private.c3:208:44
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB15_5
# %bb.1:
	.loc	1 0 44 is_stmt 0                # formatter_private.c3:0:44
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -8(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rsi
	vmovsd	-16(%rbp), %xmm0                # xmm0 = mem[0],zero
	.loc	1 208 44                        # formatter_private.c3:208:44
	leaq	-32(%rbp), %rdi
	movl	$2, %edx
	callq	std.io.Formatter.floatformat
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB15_3
# %bb.2:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-64(%rbp), %rax                 # 8-byte Reload
	.loc	1 208 44                        # formatter_private.c3:208:44
	movq	%rax, -24(%rbp)
	jmp	.LBB15_4
.LBB15_3:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-56(%rbp), %rax                 # 8-byte Reload
	.loc	1 208 44                        # formatter_private.c3:208:44
	movq	-32(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 208 44 epilogue_begin         # formatter_private.c3:208:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:
	.cfi_def_cfa %rbp, 16
	movq	-24(%rbp), %rax
	.loc	1 208 44 epilogue_begin         # formatter_private.c3:208:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:
	.cfi_def_cfa %rbp, 16
	.loc	1 208 24                        # formatter_private.c3:208:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.132(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$208, (%rsp)
	callq	*(%rax)
.Ltmp798:
.Lfunc_end15:
	.size	std.io.Formatter.gtoa, .Lfunc_end15-std.io.Formatter.gtoa
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.Formatter.atoa,"axG",@progbits,std.io.Formatter.atoa,comdat
	.weak	std.io.Formatter.atoa           # -- Begin function std.io.Formatter.atoa
	.p2align	4, 0x90
	.type	std.io.Formatter.atoa,@function
std.io.Formatter.atoa:                  # @std.io.Formatter.atoa
.Lfunc_begin16:
	.loc	1 209 0 is_stmt 1               # formatter_private.c3:209:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movq	%rdi, -56(%rbp)                 # 8-byte Spill
	movq	%rsi, -48(%rbp)                 # 8-byte Spill
	vmovsd	%xmm0, -40(%rbp)                # 8-byte Spill
.Ltmp799:
	.loc	1 209 44 prologue_end           # formatter_private.c3:209:44
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB16_5
# %bb.1:
	.loc	1 0 44 is_stmt 0                # formatter_private.c3:0:44
	vmovsd	-40(%rbp), %xmm0                # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	-48(%rbp), %rax                 # 8-byte Reload
	movq	%rax, -8(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	movq	-8(%rbp), %rsi
	vmovsd	-16(%rbp), %xmm0                # xmm0 = mem[0],zero
	.loc	1 209 44                        # formatter_private.c3:209:44
	leaq	-32(%rbp), %rdi
	movl	$3, %edx
	callq	std.io.Formatter.floatformat
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB16_3
# %bb.2:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-64(%rbp), %rax                 # 8-byte Reload
	.loc	1 209 44                        # formatter_private.c3:209:44
	movq	%rax, -24(%rbp)
	jmp	.LBB16_4
.LBB16_3:
	.loc	1 0 44                          # formatter_private.c3:0:44
	movq	-56(%rbp), %rax                 # 8-byte Reload
	.loc	1 209 44                        # formatter_private.c3:209:44
	movq	-32(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 209 44 epilogue_begin         # formatter_private.c3:209:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:
	.cfi_def_cfa %rbp, 16
	movq	-24(%rbp), %rax
	.loc	1 209 44 epilogue_begin         # formatter_private.c3:209:44
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:
	.cfi_def_cfa %rbp, 16
	.loc	1 209 24                        # formatter_private.c3:209:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.133(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$209, (%rsp)
	callq	*(%rax)
.Ltmp800:
.Lfunc_end16:
	.size	std.io.Formatter.atoa, .Lfunc_end16-std.io.Formatter.atoa
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3, 0x0                          # -- Begin function std.io.Formatter.floatformat
.LCPI17_0:
	.quad	0x4000000000000000              # double 2
.LCPI17_1:
	.quad	0x41b0000000000000              # double 268435456
.LCPI17_2:
	.quad	0x41cdcd6500000000              # double 1.0E+9
.LCPI17_3:
	.quad	0x4340000000000000              # double 9007199254740992
.LCPI17_4:
	.quad	0x3ff8000000000000              # double 1.5
.LCPI17_5:
	.quad	0x3ff0000000000000              # double 1
.LCPI17_6:
	.quad	0x3fe0000000000000              # double 0.5
.LCPI17_7:
	.quad	0xbff0000000000000              # double -1
.LCPI17_8:
	.quad	0x4020000000000000              # double 8
.LCPI17_9:
	.quad	0x4030000000000000              # double 16
	.text
	.p2align	4, 0x90
	.type	std.io.Formatter.floatformat,@function
std.io.Formatter.floatformat:           # @std.io.Formatter.floatformat
.Lfunc_begin17:
	.loc	1 211 0 is_stmt 1               # formatter_private.c3:211:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$7872, %rsp                     # imm = 0x1EC0
	movq	%rdi, -5344(%rbp)               # 8-byte Spill
	movq	%rsi, -5336(%rbp)               # 8-byte Spill
	movl	%edx, -5324(%rbp)               # 4-byte Spill
	vmovsd	%xmm0, -5320(%rbp)              # 8-byte Spill
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
.Ltmp801:
	.loc	1 212 1 prologue_end            # formatter_private.c3:212:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB17_600
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	vmovsd	-5320(%rbp), %xmm0              # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	-5324(%rbp), %eax               # 4-byte Reload
	movq	-5336(%rbp), %rcx               # 8-byte Reload
	movq	%rcx, -1112(%rbp)
	movl	%eax, -1116(%rbp)
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 216 17 is_stmt 1              # formatter_private.c3:216:17
	leaq	-1632(%rbp), %rdi
	xorl	%esi, %esi
	movl	$504, %edx                      # imm = 0x1F8
	callq	memset@PLT
	.loc	1 217 16                        # formatter_private.c3:217:16
	movb	$0, -1633(%rbp)
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1648(%rbp)
	vmovsd	-1648(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1656(%rbp)
.Ltmp802:
	.loc	6 293 20                        # builtin.c3:293:20
	leaq	-1656(%rbp), %rax
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_602
# %bb.2:
	.loc	6 293 11 is_stmt 0              # builtin.c3:293:11
	leaq	-1656(%rbp), %rax
	andq	$7, %rax
	movq	%rax, -5352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_604
# %bb.3:
	movq	-1656(%rbp), %rax
.Ltmp803:
	.file	8 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/math" "math.c3"
	.loc	8 451 10 is_stmt 1              # math.c3:451:10
	shrq	$63, %rax
                                        # kill: def $eax killed $eax killed $rax
	cmpl	$0, %eax
	je	.LBB17_5
.Ltmp804:
# %bb.4:
	.loc	1 220 12                        # formatter_private.c3:220:12
	movb	$1, -1633(%rbp)
	.loc	1 221 8                         # formatter_private.c3:221:8
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
.Ltmp805:
.LBB17_5:
	.loc	1 223 11                        # formatter_private.c3:223:11
	movb	$1, %al
	testb	$1, -1633(%rbp)
	movb	%al, -5353(%rbp)                # 1-byte Spill
	jne	.LBB17_7
# %bb.6:
	.loc	1 223 21 is_stmt 0              # formatter_private.c3:223:21
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$2, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -5353(%rbp)                # 1-byte Spill
.LBB17_7:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movb	-5353(%rbp), %dl                # 1-byte Reload
	.loc	1 223 43                        # formatter_private.c3:223:43
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movl	$1, %ecx
	testb	$1, %dl
	cmovneq	%rcx, %rax
	movq	%rax, -1736(%rbp)
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1744(%rbp)
	vmovsd	-1744(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1752(%rbp)
.Ltmp806:
	.loc	6 293 20 is_stmt 1              # builtin.c3:293:20
	leaq	-1752(%rbp), %rax
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_605
# %bb.8:
	.loc	6 293 11 is_stmt 0              # builtin.c3:293:11
	leaq	-1752(%rbp), %rax
	andq	$7, %rax
	movq	%rax, -5368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_607
.Ltmp807:
# %bb.9:
	.loc	8 536 11 is_stmt 1              # math.c3:536:11
	movabsq	$9223372036854775807, %rax      # imm = 0x7FFFFFFFFFFFFFFF
	andq	-1752(%rbp), %rax
	movabsq	$9218868437227405312, %rcx      # imm = 0x7FF0000000000000
	cmpq	%rcx, %rax
	jb	.LBB17_64
.Ltmp808:
# %bb.10:
	.loc	1 227 7                         # formatter_private.c3:227:7
	movq	$0, -1832(%rbp)
	.loc	1 229 8                         # formatter_private.c3:229:8
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB17_28
# %bb.11:
	.loc	1 229 25 is_stmt 0              # formatter_private.c3:229:25
	movq	-1832(%rbp), %rax
	movq	%rax, -5400(%rbp)               # 8-byte Spill
	.loc	1 229 46                        # formatter_private.c3:229:46
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5392(%rbp)               # 8-byte Spill
	.loc	1 229 62                        # formatter_private.c3:229:62
	movq	-1736(%rbp), %rax
	.loc	1 229 58                        # formatter_private.c3:229:58
	addq	$3, %rax
	movq	%rax, -5384(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -5376(%rbp)               # 8-byte Spill
.Ltmp809:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_21
# %bb.12:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-5384(%rbp), %rax               # 8-byte Reload
	movq	-5392(%rbp), %rcx               # 8-byte Reload
	movq	-5376(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -56(%rbp)
	movb	$32, -57(%rbp)
	movq	%rcx, -72(%rbp)
	movq	%rax, -80(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-72(%rbp), %rax
	subq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
.Ltmp810:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -96(%rbp)
.LBB17_13:                              # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-96(%rbp), %rax
	cmpq	-88(%rbp), %rax
	jge	.LBB17_17
# %bb.14:                               #   in Loop: Header=BB17_13 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-56(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-112(%rbp), %rdi
	movzbl	-57(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_16
# %bb.15:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5408(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	%rax, -5416(%rbp)               # 8-byte Spill
	jmp	.LBB17_22
.LBB17_16:                              #   in Loop: Header=BB17_13 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-96(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -96(%rbp)
	jmp	.LBB17_13
.Ltmp811:
.LBB17_17:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -116(%rbp)
	movq	-88(%rbp), %rax
	movq	%rax, -128(%rbp)
	movl	-116(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	-128(%rbp), %rax
	movq	%rax, -144(%rbp)
.Ltmp812:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-132(%rbp), %rax
	cmpq	-144(%rbp), %rax
	jle	.LBB17_19
.Ltmp813:
# %bb.18:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-116(%rbp), %rax
	movq	%rax, -5424(%rbp)               # 8-byte Spill
	jmp	.LBB17_20
.LBB17_19:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-128(%rbp), %rax
	movq	%rax, -5424(%rbp)               # 8-byte Spill
.LBB17_20:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-5424(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -1848(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5416(%rbp)               # 8-byte Spill
	jmp	.LBB17_22
.Ltmp814:
.LBB17_21:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp815:
.LBB17_22:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5416(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5432(%rbp)               # 8-byte Spill
	.loc	1 229 32 is_stmt 1              # formatter_private.c3:229:32
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_24
# %bb.23:
	.loc	1 0 32 is_stmt 0                # formatter_private.c3:0:32
	movq	-5432(%rbp), %rax               # 8-byte Reload
	.loc	1 229 32                        # formatter_private.c3:229:32
	movq	%rax, -1840(%rbp)
	jmp	.LBB17_25
.LBB17_24:
	jmp	.LBB17_27
.LBB17_25:
	movq	-1840(%rbp), %rax
	movq	%rax, -5440(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.26:
	.loc	1 0 32                          # formatter_private.c3:0:32
	movq	-5440(%rbp), %rax               # 8-byte Reload
	.loc	1 229 32 epilogue_begin         # formatter_private.c3:229:32
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_27:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 32                          # formatter_private.c3:0:32
	movq	-5400(%rbp), %rax               # 8-byte Reload
	.loc	1 229 25                        # formatter_private.c3:229:25
	addq	-1848(%rbp), %rax
	movq	%rax, -1832(%rbp)
.LBB17_28:
	.loc	1 230 14 is_stmt 1              # formatter_private.c3:230:14
	movq	-1112(%rbp), %rax
	.loc	1 230 45 is_stmt 0              # formatter_private.c3:230:45
	movl	16(%rax), %edx
	leaq	.L.str.136(%rip), %rcx
	leaq	.L.str.137(%rip), %rax
	btl	$5, %edx
	cmovbq	%rcx, %rax
	movq	%rax, -1864(%rbp)
	movq	$3, -1856(%rbp)
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1872(%rbp)
	vmovsd	-1872(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1880(%rbp)
.Ltmp816:
	.loc	6 293 20 is_stmt 1              # builtin.c3:293:20
	leaq	-1880(%rbp), %rax
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_608
# %bb.29:
	.loc	6 293 11 is_stmt 0              # builtin.c3:293:11
	leaq	-1880(%rbp), %rax
	andq	$7, %rax
	movq	%rax, -5448(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_610
.Ltmp817:
# %bb.30:
	.loc	8 550 10 is_stmt 1              # math.c3:550:10
	movabsq	$9223372036854775807, %rax      # imm = 0x7FFFFFFFFFFFFFFF
	andq	-1880(%rbp), %rax
	movabsq	$9218868437227405312, %rcx      # imm = 0x7FF0000000000000
	cmpq	%rcx, %rax
	jbe	.LBB17_32
.Ltmp818:
# %bb.31:
	.loc	1 231 28                        # formatter_private.c3:231:28
	movq	-1112(%rbp), %rax
	.loc	1 231 59 is_stmt 0              # formatter_private.c3:231:59
	movl	16(%rax), %edx
	leaq	.L.str.138(%rip), %rcx
	leaq	.L.str.139(%rip), %rax
	btl	$5, %edx
	cmovbq	%rcx, %rax
	movq	%rax, -1864(%rbp)
	movq	$3, -1856(%rbp)
.LBB17_32:
	.loc	1 232 7 is_stmt 1               # formatter_private.c3:232:7
	cmpq	$0, -1736(%rbp)
	je	.LBB17_39
# %bb.33:
	.loc	1 232 11 is_stmt 0              # formatter_private.c3:232:11
	movq	-1832(%rbp), %rax
	movq	%rax, -5464(%rbp)               # 8-byte Spill
	.loc	1 232 27                        # formatter_private.c3:232:27
	movb	-1633(%rbp), %cl
	.loc	1 232 42                        # formatter_private.c3:232:42
	movb	$45, %al
	movb	$43, %dl
	movb	%dl, -5450(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -5449(%rbp)                # 1-byte Spill
	jne	.LBB17_717
# %bb.716:
	.loc	1 0 42                          # formatter_private.c3:0:42
	movb	-5450(%rbp), %al                # 1-byte Reload
	movb	%al, -5449(%rbp)                # 1-byte Spill
.LBB17_717:
	movb	-5449(%rbp), %al                # 1-byte Reload
	movq	-1112(%rbp), %rsi
	.loc	1 232 18                        # formatter_private.c3:232:18
	leaq	-1968(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -5472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_35
# %bb.34:
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-5472(%rbp), %rax               # 8-byte Reload
	.loc	1 232 18                        # formatter_private.c3:232:18
	movq	%rax, -1960(%rbp)
	jmp	.LBB17_36
.LBB17_35:
	jmp	.LBB17_38
.LBB17_36:
	movq	-1960(%rbp), %rax
	movq	%rax, -5480(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.37:
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-5480(%rbp), %rax               # 8-byte Reload
	.loc	1 232 18 epilogue_begin         # formatter_private.c3:232:18
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_38:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-5464(%rbp), %rax               # 8-byte Reload
	.loc	1 232 11                        # formatter_private.c3:232:11
	addq	-1968(%rbp), %rax
	movq	%rax, -1832(%rbp)
.LBB17_39:
	.loc	1 233 3 is_stmt 1               # formatter_private.c3:233:3
	movq	-1832(%rbp), %rax
	movq	%rax, -5496(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rsi
	movq	-1864(%rbp), %rdx
	movq	-1856(%rbp), %rcx
	.loc	1 233 10 is_stmt 0              # formatter_private.c3:233:10
	leaq	-1984(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -5488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_41
# %bb.40:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5488(%rbp), %rax               # 8-byte Reload
	.loc	1 233 10                        # formatter_private.c3:233:10
	movq	%rax, -1976(%rbp)
	jmp	.LBB17_42
.LBB17_41:
	jmp	.LBB17_44
.LBB17_42:
	movq	-1976(%rbp), %rax
	movq	%rax, -5504(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.43:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5504(%rbp), %rax               # 8-byte Reload
	.loc	1 233 10 epilogue_begin         # formatter_private.c3:233:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_44:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5496(%rbp), %rax               # 8-byte Reload
	.loc	1 233 3                         # formatter_private.c3:233:3
	addq	-1984(%rbp), %rax
	movq	%rax, -1832(%rbp)
	.loc	1 234 7 is_stmt 1               # formatter_private.c3:234:7
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_62
# %bb.45:
	.loc	1 234 24 is_stmt 0              # formatter_private.c3:234:24
	movq	-1832(%rbp), %rax
	movq	%rax, -5536(%rbp)               # 8-byte Spill
	.loc	1 234 45                        # formatter_private.c3:234:45
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5528(%rbp)               # 8-byte Spill
	.loc	1 234 61                        # formatter_private.c3:234:61
	movq	-1736(%rbp), %rax
	.loc	1 234 57                        # formatter_private.c3:234:57
	addq	$3, %rax
	movq	%rax, -5520(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -5512(%rbp)               # 8-byte Spill
.Ltmp819:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_55
# %bb.46:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-5520(%rbp), %rax               # 8-byte Reload
	movq	-5528(%rbp), %rcx               # 8-byte Reload
	movq	-5512(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -152(%rbp)
	movb	$32, -153(%rbp)
	movq	%rcx, -168(%rbp)
	movq	%rax, -176(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-168(%rbp), %rax
	subq	-176(%rbp), %rax
	movq	%rax, -184(%rbp)
.Ltmp820:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -192(%rbp)
.LBB17_47:                              # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-192(%rbp), %rax
	cmpq	-184(%rbp), %rax
	jge	.LBB17_51
# %bb.48:                               #   in Loop: Header=BB17_47 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-152(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-208(%rbp), %rdi
	movzbl	-153(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_50
# %bb.49:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5544(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -5552(%rbp)               # 8-byte Spill
	jmp	.LBB17_56
.LBB17_50:                              #   in Loop: Header=BB17_47 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-192(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -192(%rbp)
	jmp	.LBB17_47
.Ltmp821:
.LBB17_51:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -212(%rbp)
	movq	-184(%rbp), %rax
	movq	%rax, -224(%rbp)
	movl	-212(%rbp), %eax
	movl	%eax, -228(%rbp)
	movq	-224(%rbp), %rax
	movq	%rax, -240(%rbp)
.Ltmp822:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-228(%rbp), %rax
	cmpq	-240(%rbp), %rax
	jle	.LBB17_53
.Ltmp823:
# %bb.52:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-212(%rbp), %rax
	movq	%rax, -5560(%rbp)               # 8-byte Spill
	jmp	.LBB17_54
.LBB17_53:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-224(%rbp), %rax
	movq	%rax, -5560(%rbp)               # 8-byte Spill
.LBB17_54:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-5560(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -2000(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5552(%rbp)               # 8-byte Spill
	jmp	.LBB17_56
.Ltmp824:
.LBB17_55:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp825:
.LBB17_56:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5552(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5568(%rbp)               # 8-byte Spill
	.loc	1 234 31 is_stmt 1              # formatter_private.c3:234:31
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_58
# %bb.57:
	.loc	1 0 31 is_stmt 0                # formatter_private.c3:0:31
	movq	-5568(%rbp), %rax               # 8-byte Reload
	.loc	1 234 31                        # formatter_private.c3:234:31
	movq	%rax, -1992(%rbp)
	jmp	.LBB17_59
.LBB17_58:
	jmp	.LBB17_61
.LBB17_59:
	movq	-1992(%rbp), %rax
	movq	%rax, -5576(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.60:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-5576(%rbp), %rax               # 8-byte Reload
	.loc	1 234 31 epilogue_begin         # formatter_private.c3:234:31
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_61:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-5536(%rbp), %rax               # 8-byte Reload
	.loc	1 234 24                        # formatter_private.c3:234:24
	addq	-2000(%rbp), %rax
	movq	%rax, -1832(%rbp)
.LBB17_62:
	.loc	1 0 24                          # formatter_private.c3:0:24
	movq	-5344(%rbp), %rax               # 8-byte Reload
	.loc	1 235 10 is_stmt 1              # formatter_private.c3:235:10
	movq	-1832(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.63:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 235 10 epilogue_begin is_stmt 0 # formatter_private.c3:235:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp826:
.LBB17_64:
	.cfi_def_cfa %rbp, 16
	.loc	1 238 6 is_stmt 1               # formatter_private.c3:238:6
	movl	$0, -2012(%rbp)
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -2024(%rbp)
	leaq	-2012(%rbp), %rax
	movq	%rax, -2032(%rbp)
.Ltmp827:
	.loc	8 437 28                        # math.c3:437:28
	vmovsd	-2024(%rbp), %xmm0              # xmm0 = mem[0],zero
	movq	-2032(%rbp), %rdi
	.loc	8 437 10 is_stmt 0              # math.c3:437:10
	callq	std.math._frexp@PLT
.Ltmp828:
	.loc	1 240 6 is_stmt 1               # formatter_private.c3:240:6
	vmovsd	.LCPI17_0(%rip), %xmm1          # xmm1 = [2.0E+0,0.0E+0]
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 241 6                         # formatter_private.c3:241:6
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	je	.LBB17_66
# %bb.65:
	.loc	1 241 9 is_stmt 0               # formatter_private.c3:241:9
	movl	-2012(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -2012(%rbp)
.LBB17_66:
	.loc	1 242 11 is_stmt 1              # formatter_private.c3:242:11
	movb	$0, -20(%rbp)
	movb	$0, -19(%rbp)
	movb	$0, -18(%rbp)
	movb	$0, -17(%rbp)
	movb	$0, -16(%rbp)
	movb	$0, -15(%rbp)
	movb	$0, -14(%rbp)
	movb	$0, -13(%rbp)
	movb	$0, -12(%rbp)
	movb	$0, -11(%rbp)
	movb	$0, -10(%rbp)
	movb	$0, -9(%rbp)
	.loc	1 243 15                        # formatter_private.c3:243:15
	leaq	-20(%rbp), %rax
	addq	$12, %rax
	movq	%rax, -2040(%rbp)
	.loc	1 244 38                        # formatter_private.c3:244:38
	leaq	-48(%rbp), %rdi
	xorl	%esi, %esi
	movl	$22, %edx
	callq	memset@PLT
	.loc	1 245 15                        # formatter_private.c3:245:15
	leaq	-48(%rbp), %rax
	movq	%rax, -2048(%rbp)
	.loc	1 246 10                        # formatter_private.c3:246:10
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_68
# %bb.67:
	.loc	1 246 33 is_stmt 0              # formatter_private.c3:246:33
	movq	-1112(%rbp), %rax
	movl	24(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5584(%rbp)               # 8-byte Spill
	jmp	.LBB17_69
.LBB17_68:
	.loc	1 246 45                        # formatter_private.c3:246:45
	movq	$-1, %rax
	movq	%rax, -5584(%rbp)               # 8-byte Spill
	jmp	.LBB17_69
.LBB17_69:
	.loc	1 0 45                          # formatter_private.c3:0:45
	movq	-5584(%rbp), %rax               # 8-byte Reload
	.loc	1 246 45                        # formatter_private.c3:246:45
	movq	%rax, -2056(%rbp)
	.loc	1 247 6 is_stmt 1               # formatter_private.c3:247:6
	cmpl	$3, -1116(%rbp)
	jne	.LBB17_209
# %bb.70:
.Ltmp829:
	.loc	1 249 18                        # formatter_private.c3:249:18
	vmovsd	.LCPI17_8(%rip), %xmm0          # xmm0 = [8.0E+0,0.0E+0]
	vmovsd	%xmm0, -2064(%rbp)
	.loc	1 251 3                         # formatter_private.c3:251:3
	movq	-1736(%rbp), %rax
	addq	$2, %rax
	movq	%rax, -1736(%rbp)
	.loc	1 252 7                         # formatter_private.c3:252:7
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, -2056(%rbp)
	movb	%al, -5585(%rbp)                # 1-byte Spill
	jle	.LBB17_72
# %bb.71:
	.loc	1 252 16 is_stmt 0              # formatter_private.c3:252:16
	cmpq	$12, -2056(%rbp)
	setl	%al
	movb	%al, -5585(%rbp)                # 1-byte Spill
.LBB17_72:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movb	-5585(%rbp), %al                # 1-byte Reload
	.loc	1 252 16                        # formatter_private.c3:252:16
	testb	$1, %al
	jne	.LBB17_73
	jmp	.LBB17_80
.LBB17_73:
.Ltmp830:
	.loc	1 254 45 is_stmt 1              # formatter_private.c3:254:45
	movq	-2056(%rbp), %rax
	movl	%eax, %ecx
	.loc	1 254 13 is_stmt 0              # formatter_private.c3:254:13
	movl	$12, %eax
	subl	%ecx, %eax
	movl	%eax, -2068(%rbp)
	.loc	1 255 4 is_stmt 1               # formatter_private.c3:255:4
	vmovsd	.LCPI17_0(%rip), %xmm0          # xmm0 = [2.0E+0,0.0E+0]
	vmulsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -2064(%rbp)
.LBB17_74:                              # =>This Inner Loop Header: Depth=1
.Ltmp831:
	.loc	1 256 11                        # formatter_private.c3:256:11
	movl	-2068(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%ecx, -2068(%rbp)
	cmpl	$0, %eax
	je	.LBB17_76
# %bb.75:                               #   in Loop: Header=BB17_74 Depth=1
	.loc	1 256 17 is_stmt 0              # formatter_private.c3:256:17
	vmovsd	.LCPI17_9(%rip), %xmm0          # xmm0 = [1.6E+1,0.0E+0]
	vmulsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -2064(%rbp)
	jmp	.LBB17_74
.Ltmp832:
.LBB17_76:
	.loc	1 257 8 is_stmt 1               # formatter_private.c3:257:8
	testb	$1, -1633(%rbp)
	je	.LBB17_78
# %bb.77:
.Ltmp833:
	.loc	1 259 10                        # formatter_private.c3:259:10
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 260 5                         # formatter_private.c3:260:5
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vsubsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 261 5                         # formatter_private.c3:261:5
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vaddsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 262 10                        # formatter_private.c3:262:10
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	jmp	.LBB17_79
.Ltmp834:
.LBB17_78:
	.loc	1 266 5                         # formatter_private.c3:266:5
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vaddsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 267 5                         # formatter_private.c3:267:5
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vsubsd	-2064(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
.LBB17_79:
	jmp	.LBB17_80
.Ltmp835:
.LBB17_80:
	.loc	1 271 22                        # formatter_private.c3:271:22
	cmpl	$0, -2012(%rbp)
	jge	.LBB17_82
# %bb.81:
	.loc	1 271 40 is_stmt 0              # formatter_private.c3:271:40
	movl	-2012(%rbp), %eax
	negl	%eax
	movslq	%eax, %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -5608(%rbp)               # 8-byte Spill
	movq	%rax, -5600(%rbp)               # 8-byte Spill
	jmp	.LBB17_83
.LBB17_82:
	.loc	1 271 45                        # formatter_private.c3:271:45
	movslq	-2012(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -5608(%rbp)               # 8-byte Spill
	movq	%rax, -5600(%rbp)               # 8-byte Spill
	jmp	.LBB17_83
.LBB17_83:
	.loc	1 0 45                          # formatter_private.c3:0:45
	movq	-5608(%rbp), %rcx               # 8-byte Reload
	movq	-5600(%rbp), %rax               # 8-byte Reload
	movq	%rcx, -2096(%rbp)
	movq	%rax, -2088(%rbp)
	movq	-2096(%rbp), %rdi
	movq	-2088(%rbp), %rsi
	movq	-2040(%rbp), %rdx
	.loc	1 271 16                        # formatter_private.c3:271:16
	callq	std.io.fmt_u@PLT
	movq	%rax, -2080(%rbp)
	.loc	1 272 7 is_stmt 1               # formatter_private.c3:272:7
	movq	-2080(%rbp), %rax
	cmpq	-2040(%rbp), %rax
	jne	.LBB17_86
# %bb.84:
	.loc	1 272 24 is_stmt 0              # formatter_private.c3:272:24
	movq	-2080(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -5616(%rbp)               # 8-byte Spill
	movq	%rax, -2080(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_611
# %bb.85:
	.loc	1 0 24                          # formatter_private.c3:0:24
	movq	-5616(%rbp), %rax               # 8-byte Reload
	.loc	1 272 22                        # formatter_private.c3:272:22
	movb	$48, (%rax)
.LBB17_86:
	.loc	1 273 29 is_stmt 1              # formatter_private.c3:273:29
	movb	$45, %al
	movb	$43, %cl
	movb	%cl, -5618(%rbp)                # 1-byte Spill
	.loc	1 273 14 is_stmt 0              # formatter_private.c3:273:14
	cmpl	$0, -2012(%rbp)
	movb	%al, -5617(%rbp)                # 1-byte Spill
	.loc	1 273 29                        # formatter_private.c3:273:29
	jl	.LBB17_719
# %bb.718:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movb	-5618(%rbp), %al                # 1-byte Reload
	movb	%al, -5617(%rbp)                # 1-byte Spill
.LBB17_719:
	movb	-5617(%rbp), %al                # 1-byte Reload
	movb	%al, -5633(%rbp)                # 1-byte Spill
	.loc	1 273 6                         # formatter_private.c3:273:6
	movq	-2080(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -5632(%rbp)               # 8-byte Spill
	movq	%rax, -2080(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_613
# %bb.87:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-5632(%rbp), %rax               # 8-byte Reload
	movb	-5633(%rbp), %cl                # 1-byte Reload
	.loc	1 273 4                         # formatter_private.c3:273:4
	movb	%cl, (%rax)
	.loc	1 274 13 is_stmt 1              # formatter_private.c3:274:13
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 274 42 is_stmt 0              # formatter_private.c3:274:42
	movb	$80, %al
	movb	$112, %dl
	movb	%dl, -5635(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -5634(%rbp)                # 1-byte Spill
	jne	.LBB17_721
# %bb.720:
	.loc	1 0 42                          # formatter_private.c3:0:42
	movb	-5635(%rbp), %al                # 1-byte Reload
	movb	%al, -5634(%rbp)                # 1-byte Spill
.LBB17_721:
	movb	-5634(%rbp), %al                # 1-byte Reload
	movb	%al, -5649(%rbp)                # 1-byte Spill
	.loc	1 274 6                         # formatter_private.c3:274:6
	movq	-2080(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -5648(%rbp)               # 8-byte Spill
	movq	%rax, -2080(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_615
# %bb.88:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-5648(%rbp), %rax               # 8-byte Reload
	movb	-5649(%rbp), %cl                # 1-byte Reload
	.loc	1 274 4                         # formatter_private.c3:274:4
	movb	%cl, (%rax)
	.loc	1 275 13 is_stmt 1              # formatter_private.c3:275:13
	movq	-2048(%rbp), %rax
	movq	%rax, -2104(%rbp)
	.loc	1 276 19                        # formatter_private.c3:276:19
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %dl
	.loc	1 276 55 is_stmt 0              # formatter_private.c3:276:55
	movq	std.io.XDIGITS_L@GOTPCREL(%rip), %rax
	movq	std.io.XDIGITS_H@GOTPCREL(%rip), %rcx
	testb	$1, %dl
	cmovneq	%rcx, %rax
	movq	%rax, -2112(%rbp)
.LBB17_89:                              # =>This Inner Loop Header: Depth=1
.Ltmp836:
	.loc	1 279 12 is_stmt 1              # formatter_private.c3:279:12
	vcvttsd2si	-1128(%rbp), %eax
	movl	%eax, -2116(%rbp)
	.loc	1 280 11                        # formatter_private.c3:280:11
	movq	-2112(%rbp), %rax
	.loc	1 280 19 is_stmt 0              # formatter_private.c3:280:19
	movslq	-2116(%rbp), %rcx
	addq	%rcx, %rax
	movq	%rax, -5672(%rbp)               # 8-byte Spill
	.loc	1 280 5                         # formatter_private.c3:280:5
	movq	-2104(%rbp), %rax
	movq	%rax, -5664(%rbp)               # 8-byte Spill
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -2104(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_617
# %bb.90:                               #   in Loop: Header=BB17_89 Depth=1
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-5664(%rbp), %rax               # 8-byte Reload
	movq	-5672(%rbp), %rcx               # 8-byte Reload
	.loc	1 280 5                         # formatter_private.c3:280:5
	movb	(%rcx), %cl
	movb	%cl, (%rax)
	.loc	1 281 14 is_stmt 1              # formatter_private.c3:281:14
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
                                        # implicit-def: $xmm1
	.loc	1 281 18 is_stmt 0              # formatter_private.c3:281:18
	vcvtsi2sdl	-2116(%rbp), %xmm1, %xmm1
	.loc	1 281 14                        # formatter_private.c3:281:14
	vsubsd	%xmm1, %xmm0, %xmm1
	.loc	1 281 8                         # formatter_private.c3:281:8
	vmovsd	.LCPI17_9(%rip), %xmm0          # xmm0 = [1.6E+1,0.0E+0]
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 282 8 is_stmt 1               # formatter_private.c3:282:8
	movq	-2104(%rbp), %rcx
	.loc	1 282 12 is_stmt 0              # formatter_private.c3:282:12
	movq	-2048(%rbp), %rax
	.loc	1 282 8                         # formatter_private.c3:282:8
	subq	%rax, %rcx
	sarq	$0, %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$1, %rcx
	movb	%al, -5673(%rbp)                # 1-byte Spill
	jne	.LBB17_96
# %bb.91:                               #   in Loop: Header=BB17_89 Depth=1
	.loc	1 282 25                        # formatter_private.c3:282:25
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	movb	$1, %al
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	movb	%al, -5674(%rbp)                # 1-byte Spill
	jne	.LBB17_93
# %bb.92:                               #   in Loop: Header=BB17_89 Depth=1
	.loc	1 282 30                        # formatter_private.c3:282:30
	cmpq	$0, -2056(%rbp)
	setg	%al
	movb	%al, -5674(%rbp)                # 1-byte Spill
.LBB17_93:                              #   in Loop: Header=BB17_89 Depth=1
	.loc	1 0 30                          # formatter_private.c3:0:30
	movb	-5674(%rbp), %cl                # 1-byte Reload
	.loc	1 282 30                        # formatter_private.c3:282:30
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -5675(%rbp)                # 1-byte Spill
	jne	.LBB17_95
# %bb.94:                               #   in Loop: Header=BB17_89 Depth=1
	.loc	1 282 39                        # formatter_private.c3:282:39
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -5675(%rbp)                # 1-byte Spill
.LBB17_95:                              #   in Loop: Header=BB17_89 Depth=1
	.loc	1 0 39                          # formatter_private.c3:0:39
	movb	-5675(%rbp), %al                # 1-byte Reload
	movb	%al, -5673(%rbp)                # 1-byte Spill
.LBB17_96:                              #   in Loop: Header=BB17_89 Depth=1
	movb	-5673(%rbp), %al                # 1-byte Reload
	.loc	1 282 39                        # formatter_private.c3:282:39
	testb	$1, %al
	jne	.LBB17_97
	jmp	.LBB17_99
.LBB17_97:                              #   in Loop: Header=BB17_89 Depth=1
	.loc	1 282 58                        # formatter_private.c3:282:58
	movq	-2104(%rbp), %rax
	movq	%rax, -5688(%rbp)               # 8-byte Spill
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -2104(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_619
# %bb.98:                               #   in Loop: Header=BB17_89 Depth=1
	.loc	1 0 58                          # formatter_private.c3:0:58
	movq	-5688(%rbp), %rax               # 8-byte Reload
	.loc	1 282 58                        # formatter_private.c3:282:58
	movb	$46, (%rax)
.LBB17_99:                              #   in Loop: Header=BB17_89 Depth=1
	jmp	.LBB17_100
.Ltmp837:
.LBB17_100:                             #   in Loop: Header=BB17_89 Depth=1
	.loc	1 283 12 is_stmt 1              # formatter_private.c3:283:12
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_89
.Ltmp838:
# %bb.101:
	.loc	1 284 16                        # formatter_private.c3:284:16
	movq	-2104(%rbp), %rax
	.loc	1 284 20 is_stmt 0              # formatter_private.c3:284:20
	movq	-2048(%rbp), %rcx
	.loc	1 284 16                        # formatter_private.c3:284:16
	subq	%rcx, %rax
	sarq	$0, %rax
	movq	%rax, -2128(%rbp)
	.loc	1 285 16 is_stmt 1              # formatter_private.c3:285:16
	movq	-2040(%rbp), %rax
	.loc	1 285 23 is_stmt 0              # formatter_private.c3:285:23
	movq	-2080(%rbp), %rcx
	.loc	1 285 16                        # formatter_private.c3:285:16
	subq	%rcx, %rax
	sarq	$0, %rax
	movq	%rax, -2136(%rbp)
	.loc	1 286 7 is_stmt 1               # formatter_private.c3:286:7
	movq	-2056(%rbp), %rax
	.loc	1 286 11 is_stmt 0              # formatter_private.c3:286:11
	movl	$2147483645, %ecx               # imm = 0x7FFFFFFD
	subq	-2136(%rbp), %rcx
	subq	-1736(%rbp), %rcx
	.loc	1 286 7                         # formatter_private.c3:286:7
	cmpq	%rcx, %rax
	jle	.LBB17_104
# %bb.102:
	.loc	1 286 45                        # formatter_private.c3:286:45
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.103:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 286 45 epilogue_begin         # formatter_private.c3:286:45
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_104:
	.cfi_def_cfa %rbp, 16
	.loc	1 287 7 is_stmt 1               # formatter_private.c3:287:7
	movq	$0, -2144(%rbp)
	.loc	1 288 11                        # formatter_private.c3:288:11
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, -2056(%rbp)
	movb	%al, -5689(%rbp)                # 1-byte Spill
	je	.LBB17_106
# %bb.105:
	.loc	1 288 16 is_stmt 0              # formatter_private.c3:288:16
	movq	-2128(%rbp), %rax
	subq	$2, %rax
	cmpq	-2056(%rbp), %rax
	setl	%al
	movb	%al, -5689(%rbp)                # 1-byte Spill
.LBB17_106:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movb	-5689(%rbp), %al                # 1-byte Reload
	.loc	1 288 16                        # formatter_private.c3:288:16
	testb	$1, %al
	jne	.LBB17_107
	jmp	.LBB17_108
.LBB17_107:
	.loc	1 289 7 is_stmt 1               # formatter_private.c3:289:7
	movq	-2056(%rbp), %rax
	addq	$2, %rax
	addq	-2136(%rbp), %rax
	movq	%rax, -5704(%rbp)               # 8-byte Spill
	jmp	.LBB17_109
.LBB17_108:
	.loc	1 290 7                         # formatter_private.c3:290:7
	movq	-2128(%rbp), %rax
	addq	-2136(%rbp), %rax
	movq	%rax, -5704(%rbp)               # 8-byte Spill
.LBB17_109:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-5704(%rbp), %rax               # 8-byte Reload
	.loc	1 290 7                         # formatter_private.c3:290:7
	movq	%rax, -2152(%rbp)
	.loc	1 291 8 is_stmt 1               # formatter_private.c3:291:8
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -5705(%rbp)                # 1-byte Spill
	jne	.LBB17_110
	jmp	.LBB17_111
.LBB17_110:
	.loc	1 291 28 is_stmt 0              # formatter_private.c3:291:28
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	xorb	$-1, %al
	movb	%al, -5705(%rbp)                # 1-byte Spill
.LBB17_111:
	.loc	1 0 28                          # formatter_private.c3:0:28
	movb	-5705(%rbp), %al                # 1-byte Reload
	.loc	1 291 28                        # formatter_private.c3:291:28
	testb	$1, %al
	jne	.LBB17_112
	jmp	.LBB17_129
.LBB17_112:
	.loc	1 291 48                        # formatter_private.c3:291:48
	movq	-2144(%rbp), %rax
	movq	%rax, -5744(%rbp)               # 8-byte Spill
	.loc	1 291 69                        # formatter_private.c3:291:69
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5736(%rbp)               # 8-byte Spill
	.loc	1 291 81                        # formatter_private.c3:291:81
	movq	-1736(%rbp), %rax
	addq	-2152(%rbp), %rax
	movq	%rax, -5728(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -5720(%rbp)               # 8-byte Spill
.Ltmp839:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_122
# %bb.113:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-5728(%rbp), %rax               # 8-byte Reload
	movq	-5736(%rbp), %rcx               # 8-byte Reload
	movq	-5720(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -248(%rbp)
	movb	$32, -249(%rbp)
	movq	%rcx, -264(%rbp)
	movq	%rax, -272(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-264(%rbp), %rax
	subq	-272(%rbp), %rax
	movq	%rax, -280(%rbp)
.Ltmp840:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -288(%rbp)
.LBB17_114:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-288(%rbp), %rax
	cmpq	-280(%rbp), %rax
	jge	.LBB17_118
# %bb.115:                              #   in Loop: Header=BB17_114 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-248(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-304(%rbp), %rdi
	movzbl	-249(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5752(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_117
# %bb.116:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5752(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -5760(%rbp)               # 8-byte Spill
	jmp	.LBB17_123
.LBB17_117:                             #   in Loop: Header=BB17_114 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-288(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -288(%rbp)
	jmp	.LBB17_114
.Ltmp841:
.LBB17_118:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -308(%rbp)
	movq	-280(%rbp), %rax
	movq	%rax, -320(%rbp)
	movl	-308(%rbp), %eax
	movl	%eax, -324(%rbp)
	movq	-320(%rbp), %rax
	movq	%rax, -336(%rbp)
.Ltmp842:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-324(%rbp), %rax
	cmpq	-336(%rbp), %rax
	jle	.LBB17_120
.Ltmp843:
# %bb.119:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-308(%rbp), %rax
	movq	%rax, -5768(%rbp)               # 8-byte Spill
	jmp	.LBB17_121
.LBB17_120:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-320(%rbp), %rax
	movq	%rax, -5768(%rbp)               # 8-byte Spill
.LBB17_121:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-5768(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -2168(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5760(%rbp)               # 8-byte Spill
	jmp	.LBB17_123
.Ltmp844:
.LBB17_122:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp845:
.LBB17_123:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5760(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5776(%rbp)               # 8-byte Spill
	.loc	1 291 55 is_stmt 1              # formatter_private.c3:291:55
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_125
# %bb.124:
	.loc	1 0 55 is_stmt 0                # formatter_private.c3:0:55
	movq	-5776(%rbp), %rax               # 8-byte Reload
	.loc	1 291 55                        # formatter_private.c3:291:55
	movq	%rax, -2160(%rbp)
	jmp	.LBB17_126
.LBB17_125:
	jmp	.LBB17_128
.LBB17_126:
	movq	-2160(%rbp), %rax
	movq	%rax, -5784(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.127:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-5784(%rbp), %rax               # 8-byte Reload
	.loc	1 291 55 epilogue_begin         # formatter_private.c3:291:55
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_128:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-5744(%rbp), %rax               # 8-byte Reload
	.loc	1 291 48                        # formatter_private.c3:291:48
	addq	-2168(%rbp), %rax
	movq	%rax, -2144(%rbp)
.LBB17_129:
	.loc	1 292 7 is_stmt 1               # formatter_private.c3:292:7
	movb	$1, %al
	testb	$1, -1633(%rbp)
	movb	%al, -5785(%rbp)                # 1-byte Spill
	jne	.LBB17_131
# %bb.130:
	.loc	1 292 17 is_stmt 0              # formatter_private.c3:292:17
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$2, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -5785(%rbp)                # 1-byte Spill
.LBB17_131:
	.loc	1 0 17                          # formatter_private.c3:0:17
	movb	-5785(%rbp), %al                # 1-byte Reload
	.loc	1 292 17                        # formatter_private.c3:292:17
	testb	$1, %al
	jne	.LBB17_132
	jmp	.LBB17_138
.LBB17_132:
	.loc	1 292 34                        # formatter_private.c3:292:34
	movq	-2144(%rbp), %rax
	movq	%rax, -5800(%rbp)               # 8-byte Spill
	.loc	1 292 50                        # formatter_private.c3:292:50
	movb	-1633(%rbp), %cl
	.loc	1 292 65                        # formatter_private.c3:292:65
	movb	$45, %al
	movb	$43, %dl
	movb	%dl, -5787(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -5786(%rbp)                # 1-byte Spill
	jne	.LBB17_723
# %bb.722:
	.loc	1 0 65                          # formatter_private.c3:0:65
	movb	-5787(%rbp), %al                # 1-byte Reload
	movb	%al, -5786(%rbp)                # 1-byte Spill
.LBB17_723:
	movb	-5786(%rbp), %al                # 1-byte Reload
	movq	-1112(%rbp), %rsi
	.loc	1 292 41                        # formatter_private.c3:292:41
	leaq	-2184(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -5808(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_134
# %bb.133:
	.loc	1 0 41                          # formatter_private.c3:0:41
	movq	-5808(%rbp), %rax               # 8-byte Reload
	.loc	1 292 41                        # formatter_private.c3:292:41
	movq	%rax, -2176(%rbp)
	jmp	.LBB17_135
.LBB17_134:
	jmp	.LBB17_137
.LBB17_135:
	movq	-2176(%rbp), %rax
	movq	%rax, -5816(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.136:
	.loc	1 0 41                          # formatter_private.c3:0:41
	movq	-5816(%rbp), %rax               # 8-byte Reload
	.loc	1 292 41 epilogue_begin         # formatter_private.c3:292:41
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_137:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 41                          # formatter_private.c3:0:41
	movq	-5800(%rbp), %rax               # 8-byte Reload
	.loc	1 292 34                        # formatter_private.c3:292:34
	addq	-2184(%rbp), %rax
	movq	%rax, -2144(%rbp)
.LBB17_138:
	.loc	1 293 3 is_stmt 1               # formatter_private.c3:293:3
	movq	-2144(%rbp), %rax
	movq	%rax, -5832(%rbp)               # 8-byte Spill
	.loc	1 293 25 is_stmt 0              # formatter_private.c3:293:25
	movq	-1112(%rbp), %rax
	.loc	1 293 55                        # formatter_private.c3:293:55
	movl	16(%rax), %ecx
	leaq	.L.str.142(%rip), %rax
	leaq	.L.str.143(%rip), %rdx
	btl	$5, %ecx
	cmovbq	%rax, %rdx
	movl	$2, %ecx
	movq	-1112(%rbp), %rsi
	.loc	1 293 10                        # formatter_private.c3:293:10
	leaq	-2200(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -5824(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_140
# %bb.139:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5824(%rbp), %rax               # 8-byte Reload
	.loc	1 293 10                        # formatter_private.c3:293:10
	movq	%rax, -2192(%rbp)
	jmp	.LBB17_141
.LBB17_140:
	jmp	.LBB17_143
.LBB17_141:
	movq	-2192(%rbp), %rax
	movq	%rax, -5840(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.142:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5840(%rbp), %rax               # 8-byte Reload
	.loc	1 293 10 epilogue_begin         # formatter_private.c3:293:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_143:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5832(%rbp), %rax               # 8-byte Reload
	.loc	1 293 3                         # formatter_private.c3:293:3
	addq	-2200(%rbp), %rax
	movq	%rax, -2144(%rbp)
	.loc	1 294 7 is_stmt 1               # formatter_private.c3:294:7
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_161
# %bb.144:
	.loc	1 294 27 is_stmt 0              # formatter_private.c3:294:27
	movq	-2144(%rbp), %rax
	movq	%rax, -5872(%rbp)               # 8-byte Spill
	.loc	1 294 48                        # formatter_private.c3:294:48
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5864(%rbp)               # 8-byte Spill
	.loc	1 294 60                        # formatter_private.c3:294:60
	movq	-1736(%rbp), %rax
	addq	-2152(%rbp), %rax
	movq	%rax, -5856(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -5848(%rbp)               # 8-byte Spill
.Ltmp846:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_154
# %bb.145:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-5856(%rbp), %rax               # 8-byte Reload
	movq	-5864(%rbp), %rcx               # 8-byte Reload
	movq	-5848(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -344(%rbp)
	movb	$48, -345(%rbp)
	movq	%rcx, -360(%rbp)
	movq	%rax, -368(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-360(%rbp), %rax
	subq	-368(%rbp), %rax
	movq	%rax, -376(%rbp)
.Ltmp847:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -384(%rbp)
.LBB17_146:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-384(%rbp), %rax
	cmpq	-376(%rbp), %rax
	jge	.LBB17_150
# %bb.147:                              #   in Loop: Header=BB17_146 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-344(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-400(%rbp), %rdi
	movzbl	-345(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5880(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_149
# %bb.148:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5880(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -392(%rbp)
	movq	-392(%rbp), %rax
	movq	%rax, -5888(%rbp)               # 8-byte Spill
	jmp	.LBB17_155
.LBB17_149:                             #   in Loop: Header=BB17_146 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-384(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -384(%rbp)
	jmp	.LBB17_146
.Ltmp848:
.LBB17_150:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -404(%rbp)
	movq	-376(%rbp), %rax
	movq	%rax, -416(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -420(%rbp)
	movq	-416(%rbp), %rax
	movq	%rax, -432(%rbp)
.Ltmp849:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-420(%rbp), %rax
	cmpq	-432(%rbp), %rax
	jle	.LBB17_152
.Ltmp850:
# %bb.151:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-404(%rbp), %rax
	movq	%rax, -5896(%rbp)               # 8-byte Spill
	jmp	.LBB17_153
.LBB17_152:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-416(%rbp), %rax
	movq	%rax, -5896(%rbp)               # 8-byte Spill
.LBB17_153:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-5896(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -2216(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -5888(%rbp)               # 8-byte Spill
	jmp	.LBB17_155
.Ltmp851:
.LBB17_154:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp852:
.LBB17_155:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-5888(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5904(%rbp)               # 8-byte Spill
	.loc	1 294 34 is_stmt 1              # formatter_private.c3:294:34
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_157
# %bb.156:
	.loc	1 0 34 is_stmt 0                # formatter_private.c3:0:34
	movq	-5904(%rbp), %rax               # 8-byte Reload
	.loc	1 294 34                        # formatter_private.c3:294:34
	movq	%rax, -2208(%rbp)
	jmp	.LBB17_158
.LBB17_157:
	jmp	.LBB17_160
.LBB17_158:
	movq	-2208(%rbp), %rax
	movq	%rax, -5912(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.159:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5912(%rbp), %rax               # 8-byte Reload
	.loc	1 294 34 epilogue_begin         # formatter_private.c3:294:34
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_160:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5872(%rbp), %rax               # 8-byte Reload
	.loc	1 294 27                        # formatter_private.c3:294:27
	addq	-2216(%rbp), %rax
	movq	%rax, -2144(%rbp)
.LBB17_161:
	.loc	1 295 3 is_stmt 1               # formatter_private.c3:295:3
	movq	-2144(%rbp), %rax
	movq	%rax, -5944(%rbp)               # 8-byte Spill
	.loc	1 295 25 is_stmt 0              # formatter_private.c3:295:25
	movq	-2048(%rbp), %rax
	movq	%rax, -5936(%rbp)               # 8-byte Spill
	.loc	1 295 30                        # formatter_private.c3:295:30
	movq	-2128(%rbp), %rcx
	addq	$0, %rcx
	movq	%rcx, -5928(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -5920(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_621
# %bb.162:
	.loc	1 0 30                          # formatter_private.c3:0:30
	movq	-5936(%rbp), %rdx               # 8-byte Reload
	movq	-5928(%rbp), %rcx               # 8-byte Reload
	.loc	1 295 25                        # formatter_private.c3:295:25
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 295 10                        # formatter_private.c3:295:10
	leaq	-2280(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -5952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_164
# %bb.163:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5952(%rbp), %rax               # 8-byte Reload
	.loc	1 295 10                        # formatter_private.c3:295:10
	movq	%rax, -2224(%rbp)
	jmp	.LBB17_165
.LBB17_164:
	jmp	.LBB17_167
.LBB17_165:
	movq	-2224(%rbp), %rax
	movq	%rax, -5960(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.166:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5960(%rbp), %rax               # 8-byte Reload
	.loc	1 295 10 epilogue_begin         # formatter_private.c3:295:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_167:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5944(%rbp), %rax               # 8-byte Reload
	.loc	1 295 3                         # formatter_private.c3:295:3
	addq	-2280(%rbp), %rax
	movq	%rax, -2144(%rbp)
	.loc	1 296 3 is_stmt 1               # formatter_private.c3:296:3
	movq	-2144(%rbp), %rax
	movq	%rax, -5984(%rbp)               # 8-byte Spill
	.loc	1 296 24 is_stmt 0              # formatter_private.c3:296:24
	movq	-2152(%rbp), %rax
	subq	-2128(%rbp), %rax
	subq	-2136(%rbp), %rax
	movq	%rax, -5976(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -5968(%rbp)               # 8-byte Spill
.Ltmp853:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_177
# %bb.168:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-5976(%rbp), %rax               # 8-byte Reload
	movq	-5968(%rbp), %rcx               # 8-byte Reload
	movq	%rcx, -440(%rbp)
	movb	$48, -441(%rbp)
	movq	%rax, -456(%rbp)
	movq	$0, -464(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-456(%rbp), %rax
	subq	-464(%rbp), %rax
	movq	%rax, -472(%rbp)
.Ltmp854:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -480(%rbp)
.LBB17_169:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-480(%rbp), %rax
	cmpq	-472(%rbp), %rax
	jge	.LBB17_173
# %bb.170:                              #   in Loop: Header=BB17_169 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-440(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-496(%rbp), %rdi
	movzbl	-441(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -5992(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_172
# %bb.171:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-5992(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -488(%rbp)
	movq	-488(%rbp), %rax
	movq	%rax, -6000(%rbp)               # 8-byte Spill
	jmp	.LBB17_178
.LBB17_172:                             #   in Loop: Header=BB17_169 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-480(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -480(%rbp)
	jmp	.LBB17_169
.Ltmp855:
.LBB17_173:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -500(%rbp)
	movq	-472(%rbp), %rax
	movq	%rax, -512(%rbp)
	movl	-500(%rbp), %eax
	movl	%eax, -516(%rbp)
	movq	-512(%rbp), %rax
	movq	%rax, -528(%rbp)
.Ltmp856:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-516(%rbp), %rax
	cmpq	-528(%rbp), %rax
	jle	.LBB17_175
.Ltmp857:
# %bb.174:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-500(%rbp), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
	jmp	.LBB17_176
.LBB17_175:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-512(%rbp), %rax
	movq	%rax, -6008(%rbp)               # 8-byte Spill
.LBB17_176:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-6008(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -2296(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6000(%rbp)               # 8-byte Spill
	jmp	.LBB17_178
.Ltmp858:
.LBB17_177:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp859:
.LBB17_178:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6000(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6016(%rbp)               # 8-byte Spill
	.loc	1 296 10 is_stmt 1              # formatter_private.c3:296:10
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_180
# %bb.179:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-6016(%rbp), %rax               # 8-byte Reload
	.loc	1 296 10                        # formatter_private.c3:296:10
	movq	%rax, -2288(%rbp)
	jmp	.LBB17_181
.LBB17_180:
	jmp	.LBB17_183
.LBB17_181:
	movq	-2288(%rbp), %rax
	movq	%rax, -6024(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.182:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6024(%rbp), %rax               # 8-byte Reload
	.loc	1 296 10 epilogue_begin         # formatter_private.c3:296:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_183:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-5984(%rbp), %rax               # 8-byte Reload
	.loc	1 296 3                         # formatter_private.c3:296:3
	addq	-2296(%rbp), %rax
	movq	%rax, -2144(%rbp)
	.loc	1 297 3 is_stmt 1               # formatter_private.c3:297:3
	movq	-2144(%rbp), %rax
	movq	%rax, -6056(%rbp)               # 8-byte Spill
	.loc	1 297 25 is_stmt 0              # formatter_private.c3:297:25
	movq	-2080(%rbp), %rax
	movq	%rax, -6048(%rbp)               # 8-byte Spill
	.loc	1 297 31                        # formatter_private.c3:297:31
	movq	-2136(%rbp), %rcx
	addq	$0, %rcx
	movq	%rcx, -6040(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -6032(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_622
# %bb.184:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-6048(%rbp), %rdx               # 8-byte Reload
	movq	-6040(%rbp), %rcx               # 8-byte Reload
	.loc	1 297 25                        # formatter_private.c3:297:25
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 297 10                        # formatter_private.c3:297:10
	leaq	-2360(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -6064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_186
# %bb.185:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6064(%rbp), %rax               # 8-byte Reload
	.loc	1 297 10                        # formatter_private.c3:297:10
	movq	%rax, -2304(%rbp)
	jmp	.LBB17_187
.LBB17_186:
	jmp	.LBB17_189
.LBB17_187:
	movq	-2304(%rbp), %rax
	movq	%rax, -6072(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.188:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6072(%rbp), %rax               # 8-byte Reload
	.loc	1 297 10 epilogue_begin         # formatter_private.c3:297:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_189:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6056(%rbp), %rax               # 8-byte Reload
	.loc	1 297 3                         # formatter_private.c3:297:3
	addq	-2360(%rbp), %rax
	movq	%rax, -2144(%rbp)
	.loc	1 298 7 is_stmt 1               # formatter_private.c3:298:7
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_207
# %bb.190:
	.loc	1 298 24 is_stmt 0              # formatter_private.c3:298:24
	movq	-2144(%rbp), %rax
	movq	%rax, -6104(%rbp)               # 8-byte Spill
	.loc	1 298 45                        # formatter_private.c3:298:45
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6096(%rbp)               # 8-byte Spill
	.loc	1 298 57                        # formatter_private.c3:298:57
	movq	-1736(%rbp), %rax
	addq	-2152(%rbp), %rax
	movq	%rax, -6088(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -6080(%rbp)               # 8-byte Spill
.Ltmp860:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_200
# %bb.191:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-6088(%rbp), %rax               # 8-byte Reload
	movq	-6096(%rbp), %rcx               # 8-byte Reload
	movq	-6080(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -536(%rbp)
	movb	$32, -537(%rbp)
	movq	%rcx, -552(%rbp)
	movq	%rax, -560(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-552(%rbp), %rax
	subq	-560(%rbp), %rax
	movq	%rax, -568(%rbp)
.Ltmp861:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -576(%rbp)
.LBB17_192:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-576(%rbp), %rax
	cmpq	-568(%rbp), %rax
	jge	.LBB17_196
# %bb.193:                              #   in Loop: Header=BB17_192 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-536(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-592(%rbp), %rdi
	movzbl	-537(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -6112(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_195
# %bb.194:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-6112(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -584(%rbp)
	movq	-584(%rbp), %rax
	movq	%rax, -6120(%rbp)               # 8-byte Spill
	jmp	.LBB17_201
.LBB17_195:                             #   in Loop: Header=BB17_192 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-576(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -576(%rbp)
	jmp	.LBB17_192
.Ltmp862:
.LBB17_196:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -596(%rbp)
	movq	-568(%rbp), %rax
	movq	%rax, -608(%rbp)
	movl	-596(%rbp), %eax
	movl	%eax, -612(%rbp)
	movq	-608(%rbp), %rax
	movq	%rax, -624(%rbp)
.Ltmp863:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-612(%rbp), %rax
	cmpq	-624(%rbp), %rax
	jle	.LBB17_198
.Ltmp864:
# %bb.197:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-596(%rbp), %rax
	movq	%rax, -6128(%rbp)               # 8-byte Spill
	jmp	.LBB17_199
.LBB17_198:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-608(%rbp), %rax
	movq	%rax, -6128(%rbp)               # 8-byte Spill
.LBB17_199:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-6128(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -2376(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6120(%rbp)               # 8-byte Spill
	jmp	.LBB17_201
.Ltmp865:
.LBB17_200:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp866:
.LBB17_201:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6120(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6136(%rbp)               # 8-byte Spill
	.loc	1 298 31 is_stmt 1              # formatter_private.c3:298:31
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_203
# %bb.202:
	.loc	1 0 31 is_stmt 0                # formatter_private.c3:0:31
	movq	-6136(%rbp), %rax               # 8-byte Reload
	.loc	1 298 31                        # formatter_private.c3:298:31
	movq	%rax, -2368(%rbp)
	jmp	.LBB17_204
.LBB17_203:
	jmp	.LBB17_206
.LBB17_204:
	movq	-2368(%rbp), %rax
	movq	%rax, -6144(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.205:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-6144(%rbp), %rax               # 8-byte Reload
	.loc	1 298 31 epilogue_begin         # formatter_private.c3:298:31
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_206:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-6104(%rbp), %rax               # 8-byte Reload
	.loc	1 298 24                        # formatter_private.c3:298:24
	addq	-2376(%rbp), %rax
	movq	%rax, -2144(%rbp)
.LBB17_207:
	.loc	1 0 24                          # formatter_private.c3:0:24
	movq	-5344(%rbp), %rax               # 8-byte Reload
	.loc	1 299 10 is_stmt 1              # formatter_private.c3:299:10
	movq	-2144(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.208:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 299 10 epilogue_begin is_stmt 0 # formatter_private.c3:299:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp867:
.LBB17_209:
	.cfi_def_cfa %rbp, 16
	.loc	1 301 6 is_stmt 1               # formatter_private.c3:301:6
	cmpq	$0, -2056(%rbp)
	jge	.LBB17_211
# %bb.210:
	.loc	1 301 17 is_stmt 0              # formatter_private.c3:301:17
	movq	$6, -2056(%rbp)
.LBB17_211:
	.loc	1 302 6 is_stmt 1               # formatter_private.c3:302:6
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	je	.LBB17_213
# %bb.212:
.Ltmp868:
	.loc	1 304 3                         # formatter_private.c3:304:3
	vmovsd	.LCPI17_1(%rip), %xmm0          # xmm0 = [2.68435456E+8,0.0E+0]
	vmulsd	-1128(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
	.loc	1 305 3                         # formatter_private.c3:305:3
	movl	-2012(%rbp), %eax
	subl	$28, %eax
	movl	%eax, -2012(%rbp)
.Ltmp869:
.LBB17_213:
	.loc	1 308 8                         # formatter_private.c3:308:8
	movq	$0, -2392(%rbp)
	.loc	1 308 11 is_stmt 0              # formatter_private.c3:308:11
	movq	$0, -2400(%rbp)
	.loc	1 308 14                        # formatter_private.c3:308:14
	movq	$0, -2408(%rbp)
	.loc	1 309 6 is_stmt 1               # formatter_private.c3:309:6
	cmpl	$0, -2012(%rbp)
	jge	.LBB17_215
# %bb.214:
.Ltmp870:
	.loc	1 311 16                        # formatter_private.c3:311:16
	leaq	-1632(%rbp), %rax
	movq	%rax, -2400(%rbp)
	leaq	-1632(%rbp), %rax
	movq	%rax, -2408(%rbp)
	leaq	-1632(%rbp), %rax
	movq	%rax, -2392(%rbp)
	jmp	.LBB17_216
.Ltmp871:
.LBB17_215:
	.loc	1 315 15                        # formatter_private.c3:315:15
	leaq	-1632(%rbp), %rax
	addq	$288, %rax                      # imm = 0x120
	movq	%rax, -2400(%rbp)
	movq	%rax, -2408(%rbp)
	movq	%rax, -2392(%rbp)
.Ltmp872:
.LBB17_216:
	.loc	1 318 2                         # formatter_private.c3:318:2
	jmp	.LBB17_217
.LBB17_217:                             # =>This Inner Loop Header: Depth=1
.Ltmp873:
	.loc	1 320 21                        # formatter_private.c3:320:21
	vcvttsd2si	-1128(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -6164(%rbp)               # 4-byte Spill
	.loc	1 320 12 is_stmt 0              # formatter_private.c3:320:12
	movq	-2400(%rbp), %rax
	movq	%rax, -6160(%rbp)               # 8-byte Spill
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -2400(%rbp)
	.loc	1 320 16                        # formatter_private.c3:320:16
	andq	$3, %rax
	movq	%rax, -6152(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_623
# %bb.218:                              #   in Loop: Header=BB17_217 Depth=1
	.loc	1 0 16                          # formatter_private.c3:0:16
	movl	-6164(%rbp), %eax               # 4-byte Reload
	movq	-6160(%rbp), %rcx               # 8-byte Reload
	.loc	1 320 12                        # formatter_private.c3:320:12
	movl	%eax, (%rcx)
	movl	%eax, -2412(%rbp)
	.loc	1 321 21 is_stmt 1              # formatter_private.c3:321:21
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	.loc	1 321 25 is_stmt 0              # formatter_private.c3:321:25
	movl	-2412(%rbp), %eax
                                        # kill: def $rax killed $eax
                                        # implicit-def: $xmm1
	vcvtsi2sd	%rax, %xmm1, %xmm1
	.loc	1 321 21                        # formatter_private.c3:321:21
	vsubsd	%xmm1, %xmm0, %xmm1
	.loc	1 321 7                         # formatter_private.c3:321:7
	vmovsd	.LCPI17_2(%rip), %xmm0          # xmm0 = [1.0E+9,0.0E+0]
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -1128(%rbp)
.Ltmp874:
# %bb.219:                              #   in Loop: Header=BB17_217 Depth=1
	.loc	1 322 11 is_stmt 1              # formatter_private.c3:322:11
	vmovsd	-1128(%rbp), %xmm0              # xmm0 = mem[0],zero
	vxorps	%xmm1, %xmm1, %xmm1
	vucomisd	%xmm1, %xmm0
	jne	.LBB17_217
.Ltmp875:
# %bb.220:
	.loc	1 324 2                         # formatter_private.c3:324:2
	jmp	.LBB17_221
.LBB17_221:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_223 Depth 2
                                        #     Child Loop BB17_235 Depth 2
.Ltmp876:
	.loc	1 324 9 is_stmt 0               # formatter_private.c3:324:9
	cmpl	$0, -2012(%rbp)
	jle	.LBB17_241
# %bb.222:                              #   in Loop: Header=BB17_221 Depth=1
.Ltmp877:
	.loc	1 326 16 is_stmt 1              # formatter_private.c3:326:16
	movl	$0, -2484(%rbp)
	movl	$29, -2492(%rbp)
	movl	-2012(%rbp), %eax
	movl	%eax, -2496(%rbp)
.Ltmp878:
	.loc	8 393 16                        # math.c3:393:16
	movl	-2492(%rbp), %ecx
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movl	-2496(%rbp), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	cmovll	%ecx, %eax
	movl	%eax, -2488(%rbp)
.Ltmp879:
	.loc	1 328 18 is_stmt 1              # formatter_private.c3:328:18
	movq	-2400(%rbp), %rax
	.loc	1 328 22 is_stmt 0              # formatter_private.c3:328:22
	addq	$-4, %rax
	movq	%rax, -2504(%rbp)
.LBB17_223:                             #   Parent Loop BB17_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 328 25                        # formatter_private.c3:328:25
	movq	-2504(%rbp), %rax
	cmpq	-2392(%rbp), %rax
	jb	.LBB17_230
# %bb.224:                              #   in Loop: Header=BB17_223 Depth=2
.Ltmp880:
	.loc	1 330 22 is_stmt 1              # formatter_private.c3:330:22
	movq	-2504(%rbp), %rax
	movq	%rax, -6176(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_624
# %bb.225:                              #   in Loop: Header=BB17_223 Depth=2
	.loc	1 0 22 is_stmt 0                # formatter_private.c3:0:22
	movq	-6176(%rbp), %rax               # 8-byte Reload
	.loc	1 330 22                        # formatter_private.c3:330:22
	andq	$3, %rax
	movq	%rax, -6184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_626
# %bb.226:                              #   in Loop: Header=BB17_223 Depth=2
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6176(%rbp), %rax               # 8-byte Reload
	.loc	1 330 22                        # formatter_private.c3:330:22
	movl	(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6200(%rbp)               # 8-byte Spill
	.loc	1 330 14                        # formatter_private.c3:330:14
	movl	-2488(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6192(%rbp)               # 8-byte Spill
	cmpq	$64, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB17_627
# %bb.227:                              #   in Loop: Header=BB17_223 Depth=2
	.loc	1 0 14                          # formatter_private.c3:0:14
	movq	-6200(%rbp), %rax               # 8-byte Reload
	movq	-6192(%rbp), %rcx               # 8-byte Reload
                                        # kill: def $cl killed $rcx
	.loc	1 330 14                        # formatter_private.c3:330:14
	shlq	%cl, %rax
	.loc	1 330 32                        # formatter_private.c3:330:32
	movl	-2484(%rbp), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 330 14                        # formatter_private.c3:330:14
	addq	%rcx, %rax
	movq	%rax, -2512(%rbp)
	.loc	1 331 16 is_stmt 1              # formatter_private.c3:331:16
	movq	-2512(%rbp), %rax
	.loc	1 331 9 is_stmt 0               # formatter_private.c3:331:9
	movl	$1000000000, %ecx               # imm = 0x3B9ACA00
	cqto
	idivq	%rcx
	movl	%edx, %eax
	movl	%eax, -6212(%rbp)               # 4-byte Spill
	.loc	1 331 5                         # formatter_private.c3:331:5
	movq	-2504(%rbp), %rax
	movq	%rax, -6208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_628
# %bb.228:                              #   in Loop: Header=BB17_223 Depth=2
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6208(%rbp), %rax               # 8-byte Reload
	.loc	1 331 5                         # formatter_private.c3:331:5
	andq	$3, %rax
	movq	%rax, -6224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_630
# %bb.229:                              #   in Loop: Header=BB17_223 Depth=2
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6208(%rbp), %rax               # 8-byte Reload
	movl	-6212(%rbp), %ecx               # 4-byte Reload
	.loc	1 331 5                         # formatter_private.c3:331:5
	movl	%ecx, (%rax)
	.loc	1 332 19 is_stmt 1              # formatter_private.c3:332:19
	movq	-2512(%rbp), %rax
	.loc	1 332 12 is_stmt 0              # formatter_private.c3:332:12
	movl	$1000000000, %ecx               # imm = 0x3B9ACA00
	cqto
	idivq	%rcx
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2484(%rbp)
.Ltmp881:
	.loc	1 328 33 is_stmt 1              # formatter_private.c3:328:33
	movq	-2504(%rbp), %rax
	addq	$-4, %rax
	movq	%rax, -2504(%rbp)
	jmp	.LBB17_223
.Ltmp882:
.LBB17_230:                             #   in Loop: Header=BB17_221 Depth=1
	.loc	1 334 7                         # formatter_private.c3:334:7
	cmpl	$0, -2484(%rbp)
	je	.LBB17_234
# %bb.231:                              #   in Loop: Header=BB17_221 Depth=1
	.loc	1 334 17 is_stmt 0              # formatter_private.c3:334:17
	movq	-2392(%rbp), %rax
	addq	$-4, %rax
	movq	%rax, -6232(%rbp)               # 8-byte Spill
	movq	%rax, -2392(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_631
# %bb.232:                              #   in Loop: Header=BB17_221 Depth=1
	.loc	1 0 17                          # formatter_private.c3:0:17
	movq	-6232(%rbp), %rax               # 8-byte Reload
	.loc	1 334 15                        # formatter_private.c3:334:15
	andq	$3, %rax
	movq	%rax, -6240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_633
# %bb.233:                              #   in Loop: Header=BB17_221 Depth=1
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-6232(%rbp), %rax               # 8-byte Reload
	.loc	1 334 15                        # formatter_private.c3:334:15
	movl	-2484(%rbp), %ecx
	movl	%ecx, (%rax)
.LBB17_234:                             #   in Loop: Header=BB17_221 Depth=1
	.loc	1 335 3 is_stmt 1               # formatter_private.c3:335:3
	jmp	.LBB17_235
.LBB17_235:                             #   Parent Loop BB17_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp883:
	.loc	1 335 10 is_stmt 0              # formatter_private.c3:335:10
	movq	-2400(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	-2392(%rbp), %rcx
	movb	%al, -6241(%rbp)                # 1-byte Spill
	jbe	.LBB17_238
# %bb.236:                              #   in Loop: Header=BB17_235 Depth=2
	.loc	1 335 20                        # formatter_private.c3:335:20
	movq	-2400(%rbp), %rax
	.loc	1 335 22                        # formatter_private.c3:335:22
	addq	$-4, %rax
	movq	%rax, -6264(%rbp)               # 8-byte Spill
	andq	$3, %rax
	movq	%rax, -6256(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_634
# %bb.237:                              #   in Loop: Header=BB17_235 Depth=2
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6264(%rbp), %rax               # 8-byte Reload
	.loc	1 335 20                        # formatter_private.c3:335:20
	cmpl	$0, (%rax)
	sete	%al
	movb	%al, -6241(%rbp)                # 1-byte Spill
.LBB17_238:                             #   in Loop: Header=BB17_235 Depth=2
	.loc	1 0 20                          # formatter_private.c3:0:20
	movb	-6241(%rbp), %al                # 1-byte Reload
	.loc	1 335 20                        # formatter_private.c3:335:20
	testb	$1, %al
	jne	.LBB17_239
	jmp	.LBB17_240
.LBB17_239:                             #   in Loop: Header=BB17_235 Depth=2
	.loc	1 335 27                        # formatter_private.c3:335:27
	movq	-2400(%rbp), %rax
	addq	$-4, %rax
	movq	%rax, -2400(%rbp)
	jmp	.LBB17_235
.Ltmp884:
.LBB17_240:                             #   in Loop: Header=BB17_221 Depth=1
	.loc	1 336 3 is_stmt 1               # formatter_private.c3:336:3
	movl	-2012(%rbp), %eax
	subl	-2488(%rbp), %eax
	movl	%eax, -2012(%rbp)
	jmp	.LBB17_221
.Ltmp885:
.LBB17_241:
	.loc	1 339 2                         # formatter_private.c3:339:2
	jmp	.LBB17_242
.LBB17_242:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_244 Depth 2
.Ltmp886:
	.loc	1 339 9 is_stmt 0               # formatter_private.c3:339:9
	cmpl	$0, -2012(%rbp)
	jge	.LBB17_269
# %bb.243:                              #   in Loop: Header=BB17_242 Depth=1
.Ltmp887:
	.loc	1 341 16 is_stmt 1              # formatter_private.c3:341:16
	movl	$0, -2820(%rbp)
	.loc	1 342 9                         # formatter_private.c3:342:9
	movq	$0, -2832(%rbp)
	movl	$9, -2840(%rbp)
	.loc	1 343 26                        # formatter_private.c3:343:26
	xorl	%eax, %eax
	subl	-2012(%rbp), %eax
	movl	%eax, -2844(%rbp)
.Ltmp888:
	.loc	8 393 16                        # math.c3:393:16
	movl	-2840(%rbp), %ecx
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movl	-2844(%rbp), %eax
	movl	%ecx, %edx
	subl	%eax, %edx
	cmovll	%ecx, %eax
	movl	%eax, -2836(%rbp)
.Ltmp889:
	.loc	1 344 25 is_stmt 1              # formatter_private.c3:344:25
	movq	-2056(%rbp), %rax
	addq	$17, %rax
	addq	$8, %rax
	.loc	1 344 24 is_stmt 0              # formatter_private.c3:344:24
	movl	$9, %ecx
	cqto
	idivq	%rcx
	.loc	1 344 14                        # formatter_private.c3:344:14
	addq	$1, %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -2848(%rbp)
.Ltmp890:
	.loc	1 345 18 is_stmt 1              # formatter_private.c3:345:18
	movq	-2392(%rbp), %rax
	movq	%rax, -2856(%rbp)
.LBB17_244:                             #   Parent Loop BB17_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	.loc	1 345 21 is_stmt 0              # formatter_private.c3:345:21
	movq	-2856(%rbp), %rax
	cmpq	-2400(%rbp), %rax
	jae	.LBB17_257
# %bb.245:                              #   in Loop: Header=BB17_244 Depth=2
.Ltmp891:
	.loc	1 348 15 is_stmt 1              # formatter_private.c3:348:15
	movq	-2856(%rbp), %rax
	movq	%rax, -6272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_635
# %bb.246:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-6272(%rbp), %rax               # 8-byte Reload
	.loc	1 348 15                        # formatter_private.c3:348:15
	andq	$3, %rax
	movq	%rax, -6280(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_637
# %bb.247:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-6272(%rbp), %rax               # 8-byte Reload
	.loc	1 348 15                        # formatter_private.c3:348:15
	movl	(%rax), %eax
	movl	%eax, -6288(%rbp)               # 4-byte Spill
	.loc	1 348 26                        # formatter_private.c3:348:26
	movl	-2836(%rbp), %eax
	movl	%eax, -6284(%rbp)               # 4-byte Spill
	.loc	1 348 21                        # formatter_private.c3:348:21
	cmpl	$0, %eax
	setl	%al
	testb	$1, %al
	jne	.LBB17_638
# %bb.248:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 21                          # formatter_private.c3:0:21
	movl	-6284(%rbp), %eax               # 4-byte Reload
	.loc	1 348 21                        # formatter_private.c3:348:21
	cmpl	$32, %eax
	setge	%al
	testb	$1, %al
	jne	.LBB17_639
# %bb.249:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 21                          # formatter_private.c3:0:21
	movl	-6288(%rbp), %eax               # 4-byte Reload
	movl	-6284(%rbp), %ecx               # 4-byte Reload
	.loc	1 348 21                        # formatter_private.c3:348:21
	movl	$1, %edx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edx
	movl	%edx, %ecx
	.loc	1 348 20                        # formatter_private.c3:348:20
	subl	$1, %ecx
	.loc	1 348 14                        # formatter_private.c3:348:14
	andl	%ecx, %eax
	movl	%eax, -2860(%rbp)
	.loc	1 349 11 is_stmt 1              # formatter_private.c3:349:11
	movq	-2856(%rbp), %rax
	movq	%rax, -6296(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_640
# %bb.250:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-6296(%rbp), %rax               # 8-byte Reload
	.loc	1 349 11                        # formatter_private.c3:349:11
	andq	$3, %rax
	movq	%rax, -6304(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_642
# %bb.251:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6296(%rbp), %rax               # 8-byte Reload
	.loc	1 349 11                        # formatter_private.c3:349:11
	movl	(%rax), %eax
	movl	%eax, -6312(%rbp)               # 4-byte Spill
	.loc	1 349 16                        # formatter_private.c3:349:16
	movl	-2836(%rbp), %eax
	movl	%eax, -6308(%rbp)               # 4-byte Spill
	.loc	1 349 10                        # formatter_private.c3:349:10
	cmpl	$32, %eax
	setae	%al
	testb	$1, %al
	jne	.LBB17_643
# %bb.252:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 10                          # formatter_private.c3:0:10
	movl	-6312(%rbp), %eax               # 4-byte Reload
	movl	-6308(%rbp), %ecx               # 4-byte Reload
                                        # kill: def $cl killed $ecx
	.loc	1 349 10                        # formatter_private.c3:349:10
	shrl	%cl, %eax
	.loc	1 349 9                         # formatter_private.c3:349:9
	addl	-2820(%rbp), %eax
	movl	%eax, -6324(%rbp)               # 4-byte Spill
	.loc	1 349 5                         # formatter_private.c3:349:5
	movq	-2856(%rbp), %rax
	movq	%rax, -6320(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_644
# %bb.253:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6320(%rbp), %rax               # 8-byte Reload
	.loc	1 349 5                         # formatter_private.c3:349:5
	andq	$3, %rax
	movq	%rax, -6336(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_646
# %bb.254:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6320(%rbp), %rax               # 8-byte Reload
	movl	-6324(%rbp), %ecx               # 4-byte Reload
	.loc	1 349 5                         # formatter_private.c3:349:5
	movl	%ecx, (%rax)
	.loc	1 350 27 is_stmt 1              # formatter_private.c3:350:27
	movl	-2836(%rbp), %eax
	movl	%eax, -6340(%rbp)               # 4-byte Spill
	.loc	1 350 13 is_stmt 0              # formatter_private.c3:350:13
	cmpl	$0, %eax
	setl	%al
	testb	$1, %al
	jne	.LBB17_647
# %bb.255:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 13                          # formatter_private.c3:0:13
	movl	-6340(%rbp), %eax               # 4-byte Reload
	.loc	1 350 13                        # formatter_private.c3:350:13
	cmpl	$32, %eax
	setge	%al
	testb	$1, %al
	jne	.LBB17_648
# %bb.256:                              #   in Loop: Header=BB17_244 Depth=2
	.loc	1 0 13                          # formatter_private.c3:0:13
	movl	-6340(%rbp), %ecx               # 4-byte Reload
	.loc	1 350 13                        # formatter_private.c3:350:13
	movl	$1000000000, %eax               # imm = 0x3B9ACA00
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	.loc	1 350 12                        # formatter_private.c3:350:12
	imull	-2860(%rbp), %eax
	movl	%eax, -2820(%rbp)
.Ltmp892:
	.loc	1 345 28 is_stmt 1              # formatter_private.c3:345:28
	movq	-2856(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -2856(%rbp)
	jmp	.LBB17_244
.Ltmp893:
.LBB17_257:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 352 8                         # formatter_private.c3:352:8
	movq	-2392(%rbp), %rax
	movq	%rax, -6360(%rbp)               # 8-byte Spill
	.loc	1 352 10 is_stmt 0              # formatter_private.c3:352:10
	andq	$3, %rax
	movq	%rax, -6352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_649
# %bb.258:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6360(%rbp), %rax               # 8-byte Reload
	.loc	1 352 8                         # formatter_private.c3:352:8
	cmpl	$0, (%rax)
	jne	.LBB17_260
# %bb.259:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 352 14                        # formatter_private.c3:352:14
	movq	-2392(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -2392(%rbp)
.LBB17_260:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 353 7 is_stmt 1               # formatter_private.c3:353:7
	cmpl	$0, -2820(%rbp)
	je	.LBB17_263
# %bb.261:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 353 14 is_stmt 0              # formatter_private.c3:353:14
	movq	-2400(%rbp), %rax
	movq	%rax, -6376(%rbp)               # 8-byte Spill
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -2400(%rbp)
	.loc	1 353 18                        # formatter_private.c3:353:18
	andq	$3, %rax
	movq	%rax, -6368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_650
# %bb.262:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-6376(%rbp), %rax               # 8-byte Reload
	.loc	1 353 14                        # formatter_private.c3:353:14
	movl	-2820(%rbp), %ecx
	movl	%ecx, (%rax)
.LBB17_263:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 355 7 is_stmt 1               # formatter_private.c3:355:7
	cmpl	$0, -1116(%rbp)
	jne	.LBB17_265
# %bb.264:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 355 29 is_stmt 0              # formatter_private.c3:355:29
	movq	-2408(%rbp), %rax
	movq	%rax, -6384(%rbp)               # 8-byte Spill
	jmp	.LBB17_266
.LBB17_265:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 355 33                        # formatter_private.c3:355:33
	movq	-2392(%rbp), %rax
	movq	%rax, -6384(%rbp)               # 8-byte Spill
.LBB17_266:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 0 33                          # formatter_private.c3:0:33
	movq	-6384(%rbp), %rax               # 8-byte Reload
	.loc	1 355 33                        # formatter_private.c3:355:33
	movq	%rax, -2832(%rbp)
	.loc	1 356 7 is_stmt 1               # formatter_private.c3:356:7
	movq	-2400(%rbp), %rax
	.loc	1 356 11 is_stmt 0              # formatter_private.c3:356:11
	movq	-2832(%rbp), %rcx
	.loc	1 356 7                         # formatter_private.c3:356:7
	subq	%rcx, %rax
	sarq	$2, %rax
	.loc	1 356 15                        # formatter_private.c3:356:15
	movslq	-2848(%rbp), %rcx
	.loc	1 356 7                         # formatter_private.c3:356:7
	cmpq	%rcx, %rax
	jle	.LBB17_268
# %bb.267:                              #   in Loop: Header=BB17_242 Depth=1
	.loc	1 356 25                        # formatter_private.c3:356:25
	movq	-2832(%rbp), %rax
	.loc	1 356 29                        # formatter_private.c3:356:29
	movslq	-2848(%rbp), %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -2400(%rbp)
.LBB17_268:                             #   in Loop: Header=BB17_242 Depth=1
	.loc	1 357 3 is_stmt 1               # formatter_private.c3:357:3
	movl	-2012(%rbp), %eax
	addl	-2836(%rbp), %eax
	movl	%eax, -2012(%rbp)
	jmp	.LBB17_242
.Ltmp894:
.LBB17_269:
	.loc	1 360 6                         # formatter_private.c3:360:6
	movl	$0, -3428(%rbp)
	.loc	1 361 6                         # formatter_private.c3:361:6
	movq	-2392(%rbp), %rax
	cmpq	-2400(%rbp), %rax
	jae	.LBB17_276
# %bb.270:
.Ltmp895:
	.loc	1 363 16                        # formatter_private.c3:363:16
	movl	$10, -3432(%rbp)
	.loc	1 363 35 is_stmt 0              # formatter_private.c3:363:35
	movq	-2408(%rbp), %rax
	.loc	1 363 39                        # formatter_private.c3:363:39
	movq	-2392(%rbp), %rcx
	.loc	1 363 35                        # formatter_private.c3:363:35
	subq	%rcx, %rax
	sarq	$2, %rax
	.loc	1 363 24                        # formatter_private.c3:363:24
	imulq	$9, %rax, %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -3428(%rbp)
.LBB17_271:                             # =>This Inner Loop Header: Depth=1
	.loc	1 363 45                        # formatter_private.c3:363:45
	movq	-2392(%rbp), %rax
	movq	%rax, -6392(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_651
# %bb.272:                              #   in Loop: Header=BB17_271 Depth=1
	.loc	1 0 45                          # formatter_private.c3:0:45
	movq	-6392(%rbp), %rax               # 8-byte Reload
	.loc	1 363 45                        # formatter_private.c3:363:45
	andq	$3, %rax
	movq	%rax, -6400(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_653
# %bb.273:                              #   in Loop: Header=BB17_271 Depth=1
	.loc	1 0 45                          # formatter_private.c3:0:45
	movq	-6392(%rbp), %rax               # 8-byte Reload
	.loc	1 363 45                        # formatter_private.c3:363:45
	movl	(%rax), %eax
	.loc	1 363 44                        # formatter_private.c3:363:44
	cmpl	%eax, -3432(%rbp)
	setle	%cl
	cmpl	$0, %eax
	setl	%al
	orb	%cl, %al
	testb	$1, %al
	jne	.LBB17_274
	jmp	.LBB17_275
.LBB17_274:                             #   in Loop: Header=BB17_271 Depth=1
	.loc	1 363 53                        # formatter_private.c3:363:53
	imull	$10, -3432(%rbp), %eax
	movl	%eax, -3432(%rbp)
	.loc	1 363 62                        # formatter_private.c3:363:62
	movl	-3428(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3428(%rbp)
	jmp	.LBB17_271
.LBB17_275:
	jmp	.LBB17_276
.Ltmp896:
.LBB17_276:
	.loc	1 367 16 is_stmt 1              # formatter_private.c3:367:16
	movq	-2056(%rbp), %rax
	movq	%rax, -6408(%rbp)               # 8-byte Spill
	.loc	1 367 26 is_stmt 0              # formatter_private.c3:367:26
	cmpl	$0, -1116(%rbp)
	jne	.LBB17_278
# %bb.277:
	.loc	1 367 48                        # formatter_private.c3:367:48
	xorl	%eax, %eax
	movl	%eax, -6412(%rbp)               # 4-byte Spill
	jmp	.LBB17_281
.LBB17_278:
	.loc	1 367 52                        # formatter_private.c3:367:52
	movl	-3428(%rbp), %eax
	movl	%eax, -6420(%rbp)               # 4-byte Spill
	.loc	1 367 62                        # formatter_private.c3:367:62
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpl	$2, -1116(%rbp)
	movb	%al, -6413(%rbp)                # 1-byte Spill
	jne	.LBB17_280
# %bb.279:
	.loc	1 367 88                        # formatter_private.c3:367:88
	cmpq	$0, -2056(%rbp)
	setne	%al
	movb	%al, -6413(%rbp)                # 1-byte Spill
.LBB17_280:
	.loc	1 0 88                          # formatter_private.c3:0:88
	movl	-6420(%rbp), %eax               # 4-byte Reload
	movb	-6413(%rbp), %cl                # 1-byte Reload
	.loc	1 367 88                        # formatter_private.c3:367:88
	andb	$1, %cl
	movzbl	%cl, %ecx
	.loc	1 367 52                        # formatter_private.c3:367:52
	subl	%ecx, %eax
	movl	%eax, -6412(%rbp)               # 4-byte Spill
.LBB17_281:
	.loc	1 0 52                          # formatter_private.c3:0:52
	movq	-6408(%rbp), %rax               # 8-byte Reload
	movl	-6412(%rbp), %ecx               # 4-byte Reload
	.loc	1 367 52                        # formatter_private.c3:367:52
	movslq	%ecx, %rcx
	.loc	1 367 10                        # formatter_private.c3:367:10
	subq	%rcx, %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -3508(%rbp)
	.loc	1 368 6 is_stmt 1               # formatter_private.c3:368:6
	movslq	-3508(%rbp), %rax
	.loc	1 368 15 is_stmt 0              # formatter_private.c3:368:15
	movq	-2400(%rbp), %rcx
	.loc	1 368 19                        # formatter_private.c3:368:19
	movq	-2408(%rbp), %rdx
	.loc	1 368 15                        # formatter_private.c3:368:15
	subq	%rdx, %rcx
	sarq	$2, %rcx
	subq	$1, %rcx
	.loc	1 368 10                        # formatter_private.c3:368:10
	imulq	$9, %rcx, %rcx
	.loc	1 368 6                         # formatter_private.c3:368:6
	cmpq	%rcx, %rax
	jge	.LBB17_346
# %bb.282:
.Ltmp897:
	.loc	1 370 8 is_stmt 1               # formatter_private.c3:370:8
	movl	$0, -3512(%rbp)
	.loc	1 372 13                        # formatter_private.c3:372:13
	movq	-2408(%rbp), %rax
	movq	%rax, -6432(%rbp)               # 8-byte Spill
	.loc	1 372 23 is_stmt 0              # formatter_private.c3:372:23
	movl	-3508(%rbp), %eax
	addl	$9216, %eax                     # imm = 0x2400
	.loc	1 372 22                        # formatter_private.c3:372:22
	movl	$9, %ecx
	cltd
	idivl	%ecx
	movl	%eax, %ecx
	movq	-6432(%rbp), %rax               # 8-byte Reload
	subl	$1024, %ecx                     # imm = 0x400
	movslq	%ecx, %rcx
	.loc	1 372 13                        # formatter_private.c3:372:13
	addq	$1, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, -3520(%rbp)
	.loc	1 373 3 is_stmt 1               # formatter_private.c3:373:3
	movl	-3508(%rbp), %eax
	addl	$9216, %eax                     # imm = 0x2400
	movl	%eax, -3508(%rbp)
	.loc	1 374 3                         # formatter_private.c3:374:3
	movl	-3508(%rbp), %eax
	movl	$9, %ecx
	cltd
	idivl	%ecx
	movl	%edx, -3508(%rbp)
	.loc	1 375 7                         # formatter_private.c3:375:7
	movl	$0, -3524(%rbp)
.Ltmp898:
	.loc	1 376 12                        # formatter_private.c3:376:12
	movl	$10, -3524(%rbp)
	.loc	1 376 16 is_stmt 0              # formatter_private.c3:376:16
	movl	-3508(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3508(%rbp)
.LBB17_283:                             # =>This Inner Loop Header: Depth=1
	.loc	1 376 21                        # formatter_private.c3:376:21
	cmpl	$9, -3508(%rbp)
	jge	.LBB17_285
# %bb.284:                              #   in Loop: Header=BB17_283 Depth=1
	.loc	1 376 28                        # formatter_private.c3:376:28
	imull	$10, -3524(%rbp), %eax
	movl	%eax, -3524(%rbp)
	.loc	1 376 37                        # formatter_private.c3:376:37
	movl	-3508(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3508(%rbp)
	jmp	.LBB17_283
.Ltmp899:
.LBB17_285:
	.loc	1 377 8 is_stmt 1               # formatter_private.c3:377:8
	movq	-3520(%rbp), %rax
	movq	%rax, -6440(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_654
# %bb.286:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-6440(%rbp), %rax               # 8-byte Reload
	.loc	1 377 8                         # formatter_private.c3:377:8
	andq	$3, %rax
	movq	%rax, -6448(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_656
# %bb.287:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-6440(%rbp), %rax               # 8-byte Reload
	.loc	1 377 8                         # formatter_private.c3:377:8
	movl	(%rax), %eax
	movl	%eax, -6456(%rbp)               # 4-byte Spill
	.loc	1 377 12                        # formatter_private.c3:377:12
	movl	-3524(%rbp), %eax
	movl	%eax, -6452(%rbp)               # 4-byte Spill
	.loc	1 377 7                         # formatter_private.c3:377:7
	cmpl	$0, %eax
	sete	%al
	testb	$1, %al
	jne	.LBB17_657
# %bb.288:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movl	-6452(%rbp), %ecx               # 4-byte Reload
	movl	-6456(%rbp), %eax               # 4-byte Reload
	.loc	1 377 7                         # formatter_private.c3:377:7
	cltd
	idivl	%ecx
	movl	%edx, -3512(%rbp)
	.loc	1 379 7 is_stmt 1               # formatter_private.c3:379:7
	movb	$1, %al
	cmpl	$0, -3512(%rbp)
	movb	%al, -6457(%rbp)                # 1-byte Spill
	jne	.LBB17_290
# %bb.289:
	.loc	1 379 13 is_stmt 0              # formatter_private.c3:379:13
	movq	-3520(%rbp), %rax
	.loc	1 379 17                        # formatter_private.c3:379:17
	addq	$4, %rax
	.loc	1 379 12                        # formatter_private.c3:379:12
	cmpq	-2400(%rbp), %rax
	setne	%al
	movb	%al, -6457(%rbp)                # 1-byte Spill
.LBB17_290:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movb	-6457(%rbp), %al                # 1-byte Reload
	.loc	1 379 12                        # formatter_private.c3:379:12
	testb	$1, %al
	jne	.LBB17_291
	jmp	.LBB17_343
.LBB17_291:
.Ltmp900:
	.loc	1 381 19 is_stmt 1              # formatter_private.c3:381:19
	vmovsd	.LCPI17_3(%rip), %xmm0          # xmm0 = [9.007199254740992E+15,0.0E+0]
	vmovsd	%xmm0, -3608(%rbp)
	.loc	1 382 11                        # formatter_private.c3:382:11
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -3616(%rbp)
	.loc	1 383 11                        # formatter_private.c3:383:11
	movq	-3520(%rbp), %rax
	movq	%rax, -6472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_659
# %bb.292:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-6472(%rbp), %rax               # 8-byte Reload
	.loc	1 383 11                        # formatter_private.c3:383:11
	andq	$3, %rax
	movq	%rax, -6480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_661
# %bb.293:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6472(%rbp), %rax               # 8-byte Reload
	.loc	1 383 11                        # formatter_private.c3:383:11
	movl	(%rax), %eax
	movl	%eax, -6488(%rbp)               # 4-byte Spill
	.loc	1 383 15                        # formatter_private.c3:383:15
	movl	-3524(%rbp), %eax
	movl	%eax, -6484(%rbp)               # 4-byte Spill
	.loc	1 383 10                        # formatter_private.c3:383:10
	cmpl	$0, %eax
	sete	%al
	testb	$1, %al
	jne	.LBB17_662
# %bb.294:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movl	-6484(%rbp), %ecx               # 4-byte Reload
	movl	-6488(%rbp), %eax               # 4-byte Reload
	.loc	1 383 10                        # formatter_private.c3:383:10
	cltd
	idivl	%ecx
	movl	%eax, %ecx
	.loc	1 383 9                         # formatter_private.c3:383:9
	andl	$1, %ecx
	movb	$1, %al
	cmpl	$0, %ecx
	movb	%al, -6489(%rbp)                # 1-byte Spill
	jne	.LBB17_301
# %bb.295:
	.loc	1 383 27                        # formatter_private.c3:383:27
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpl	$1000000000, -3524(%rbp)        # imm = 0x3B9ACA00
	movb	%al, -6490(%rbp)                # 1-byte Spill
	jne	.LBB17_297
# %bb.296:
	.loc	1 383 46                        # formatter_private.c3:383:46
	movq	-3520(%rbp), %rax
	cmpq	-2392(%rbp), %rax
	seta	%al
	movb	%al, -6490(%rbp)                # 1-byte Spill
.LBB17_297:
	.loc	1 0 46                          # formatter_private.c3:0:46
	movb	-6490(%rbp), %cl                # 1-byte Reload
	.loc	1 383 46                        # formatter_private.c3:383:46
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -6491(%rbp)                # 1-byte Spill
	jne	.LBB17_298
	jmp	.LBB17_300
.LBB17_298:
	.loc	1 383 56                        # formatter_private.c3:383:56
	movq	-3520(%rbp), %rax
	.loc	1 383 58                        # formatter_private.c3:383:58
	addq	$-4, %rax
	movq	%rax, -6512(%rbp)               # 8-byte Spill
	andq	$3, %rax
	movq	%rax, -6504(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_664
# %bb.299:
	.loc	1 0 58                          # formatter_private.c3:0:58
	movq	-6512(%rbp), %rax               # 8-byte Reload
	.loc	1 383 56                        # formatter_private.c3:383:56
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	setne	%al
	movb	%al, -6491(%rbp)                # 1-byte Spill
.LBB17_300:
	.loc	1 0 56                          # formatter_private.c3:0:56
	movb	-6491(%rbp), %al                # 1-byte Reload
	movb	%al, -6489(%rbp)                # 1-byte Spill
.LBB17_301:
	movb	-6489(%rbp), %al                # 1-byte Reload
	.loc	1 383 56                        # formatter_private.c3:383:56
	testb	$1, %al
	jne	.LBB17_302
	jmp	.LBB17_303
.LBB17_302:
.Ltmp901:
	.loc	1 385 5 is_stmt 1               # formatter_private.c3:385:5
	vmovsd	.LCPI17_0(%rip), %xmm0          # xmm0 = [2.0E+0,0.0E+0]
	vaddsd	-3608(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -3608(%rbp)
.Ltmp902:
.LBB17_303:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movb	$1, -3745(%rbp)
# %bb.304:
	movb	-3745(%rbp), %cl
	movb	%cl, -6513(%rbp)                # 1-byte Spill
	andb	$1, %cl
.Ltmp903:
	.loc	1 389 10 is_stmt 1              # formatter_private.c3:389:10
	movl	-3512(%rbp), %eax
	.loc	1 389 14 is_stmt 0              # formatter_private.c3:389:14
	movl	-3524(%rbp), %edx
	movl	%edx, %esi
	shrl	$31, %esi
	addl	%esi, %edx
	sarl	%edx
	.loc	1 389 10                        # formatter_private.c3:389:10
	subl	%eax, %edx
	setg	%dl
	testl	%eax, %eax
	setns	%al
	andb	%dl, %al
	subb	%cl, %al
	jne	.LBB17_306
	jmp	.LBB17_305
.LBB17_305:
.Ltmp904:
	.loc	1 390 14 is_stmt 1              # formatter_private.c3:390:14
	vmovsd	.LCPI17_6(%rip), %xmm0          # xmm0 = [5.0E-1,0.0E+0]
	vmovsd	%xmm0, -3616(%rbp)
	jmp	.LBB17_312
.Ltmp905:
.LBB17_306:
	.loc	1 391 10                        # formatter_private.c3:391:10
	movl	-3512(%rbp), %eax
	movl	%eax, -6520(%rbp)               # 4-byte Spill
	.loc	1 391 15 is_stmt 0              # formatter_private.c3:391:15
	movl	-3524(%rbp), %eax
	movl	$2, %ecx
	cltd
	idivl	%ecx
	movl	%eax, %ecx
	movl	-6520(%rbp), %eax               # 4-byte Reload
	.loc	1 391 10                        # formatter_private.c3:391:10
	cmpl	%eax, %ecx
	sete	%al
	cmpl	$0, %ecx
	setge	%cl
	andb	%al, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -6514(%rbp)                # 1-byte Spill
	jne	.LBB17_307
	jmp	.LBB17_308
.LBB17_307:
	.loc	1 391 24                        # formatter_private.c3:391:24
	movq	-3520(%rbp), %rax
	.loc	1 391 28                        # formatter_private.c3:391:28
	addq	$4, %rax
	.loc	1 391 24                        # formatter_private.c3:391:24
	cmpq	-2400(%rbp), %rax
	sete	%al
	movb	%al, -6514(%rbp)                # 1-byte Spill
.LBB17_308:
	.loc	1 0 24                          # formatter_private.c3:0:24
	movb	-6513(%rbp), %cl                # 1-byte Reload
	movb	-6514(%rbp), %al                # 1-byte Reload
	.loc	1 391 24                        # formatter_private.c3:391:24
	andb	$1, %cl
	andb	$1, %al
	subb	%cl, %al
	jne	.LBB17_310
	jmp	.LBB17_309
.LBB17_309:
.Ltmp906:
	.loc	1 392 14 is_stmt 1              # formatter_private.c3:392:14
	vmovsd	.LCPI17_5(%rip), %xmm0          # xmm0 = [1.0E+0,0.0E+0]
	vmovsd	%xmm0, -3616(%rbp)
	jmp	.LBB17_312
.LBB17_310:
	jmp	.LBB17_311
.Ltmp907:
.LBB17_311:
	.loc	1 394 14                        # formatter_private.c3:394:14
	vmovsd	.LCPI17_4(%rip), %xmm0          # xmm0 = [1.5E+0,0.0E+0]
	vmovsd	%xmm0, -3616(%rbp)
.Ltmp908:
.LBB17_312:
	.loc	1 396 8                         # formatter_private.c3:396:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, -1736(%rbp)
	movb	%al, -6521(%rbp)                # 1-byte Spill
	je	.LBB17_314
# %bb.313:
	.loc	1 396 14 is_stmt 0              # formatter_private.c3:396:14
	movb	-1633(%rbp), %al
	movb	%al, -6521(%rbp)                # 1-byte Spill
.LBB17_314:
	.loc	1 0 14                          # formatter_private.c3:0:14
	movb	-6521(%rbp), %al                # 1-byte Reload
	.loc	1 396 14                        # formatter_private.c3:396:14
	testb	$1, %al
	jne	.LBB17_315
	jmp	.LBB17_316
.LBB17_315:
.Ltmp909:
	.loc	1 398 5 is_stmt 1               # formatter_private.c3:398:5
	vmovsd	.LCPI17_7(%rip), %xmm0          # xmm0 = [-1.0E+0,0.0E+0]
	vmulsd	-3608(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -3608(%rbp)
	.loc	1 399 5                         # formatter_private.c3:399:5
	vmovsd	.LCPI17_7(%rip), %xmm0          # xmm0 = [-1.0E+0,0.0E+0]
	vmulsd	-3616(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -3616(%rbp)
.Ltmp910:
.LBB17_316:
	.loc	1 401 5                         # formatter_private.c3:401:5
	movq	-3520(%rbp), %rax
	movq	%rax, -6536(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_665
# %bb.317:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movq	-6536(%rbp), %rax               # 8-byte Reload
	.loc	1 401 5                         # formatter_private.c3:401:5
	andq	$3, %rax
	movq	%rax, -6544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_667
# %bb.318:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6536(%rbp), %rax               # 8-byte Reload
	.loc	1 401 5                         # formatter_private.c3:401:5
	movl	(%rax), %ecx
	.loc	1 401 4                         # formatter_private.c3:401:4
	subl	-3512(%rbp), %ecx
	movl	%ecx, (%rax)
	.loc	1 403 8 is_stmt 1               # formatter_private.c3:403:8
	vmovsd	-3608(%rbp), %xmm0              # xmm0 = mem[0],zero
	vaddsd	-3616(%rbp), %xmm0, %xmm0
	vucomisd	-3608(%rbp), %xmm0
	je	.LBB17_342
# %bb.319:
.Ltmp911:
	.loc	1 405 11                        # formatter_private.c3:405:11
	movq	-3520(%rbp), %rax
	movq	%rax, -6552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_668
# %bb.320:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-6552(%rbp), %rax               # 8-byte Reload
	.loc	1 405 11                        # formatter_private.c3:405:11
	andq	$3, %rax
	movq	%rax, -6560(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_670
# %bb.321:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6552(%rbp), %rax               # 8-byte Reload
	.loc	1 405 11                        # formatter_private.c3:405:11
	movl	(%rax), %eax
	.loc	1 405 10                        # formatter_private.c3:405:10
	addl	-3524(%rbp), %eax
	movl	%eax, -6572(%rbp)               # 4-byte Spill
	.loc	1 405 6                         # formatter_private.c3:405:6
	movq	-3520(%rbp), %rax
	movq	%rax, -6568(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_671
# %bb.322:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-6568(%rbp), %rax               # 8-byte Reload
	.loc	1 405 6                         # formatter_private.c3:405:6
	andq	$3, %rax
	movq	%rax, -6584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_673
# %bb.323:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-6568(%rbp), %rax               # 8-byte Reload
	movl	-6572(%rbp), %ecx               # 4-byte Reload
	.loc	1 405 6                         # formatter_private.c3:405:6
	movl	%ecx, (%rax)
.LBB17_324:                             # =>This Inner Loop Header: Depth=1
.Ltmp912:
	.loc	1 406 13 is_stmt 1              # formatter_private.c3:406:13
	movq	-3520(%rbp), %rax
	movq	%rax, -6592(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_674
# %bb.325:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-6592(%rbp), %rax               # 8-byte Reload
	.loc	1 406 13                        # formatter_private.c3:406:13
	andq	$3, %rax
	movq	%rax, -6600(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_676
# %bb.326:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6592(%rbp), %rcx               # 8-byte Reload
	.loc	1 406 12                        # formatter_private.c3:406:12
	movl	$999999999, %eax                # imm = 0x3B9AC9FF
	cmpl	(%rcx), %eax
	jae	.LBB17_336
# %bb.327:                              #   in Loop: Header=BB17_324 Depth=1
.Ltmp913:
	.loc	1 408 7 is_stmt 1               # formatter_private.c3:408:7
	movq	-3520(%rbp), %rax
	movq	%rax, -6608(%rbp)               # 8-byte Spill
	movq	%rax, %rcx
	addq	$-4, %rcx
	movq	%rcx, -3520(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_677
# %bb.328:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-6608(%rbp), %rax               # 8-byte Reload
	.loc	1 408 7                         # formatter_private.c3:408:7
	andq	$3, %rax
	movq	%rax, -6616(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_679
# %bb.329:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-6608(%rbp), %rax               # 8-byte Reload
	.loc	1 408 7                         # formatter_private.c3:408:7
	movl	$0, (%rax)
	.loc	1 409 10 is_stmt 1              # formatter_private.c3:409:10
	movq	-3520(%rbp), %rax
	cmpq	-2392(%rbp), %rax
	jae	.LBB17_333
# %bb.330:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 409 20 is_stmt 0              # formatter_private.c3:409:20
	movq	-2392(%rbp), %rax
	addq	$-4, %rax
	movq	%rax, -6624(%rbp)               # 8-byte Spill
	movq	%rax, -2392(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_680
# %bb.331:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 20                          # formatter_private.c3:0:20
	movq	-6624(%rbp), %rax               # 8-byte Reload
	.loc	1 409 18                        # formatter_private.c3:409:18
	andq	$3, %rax
	movq	%rax, -6632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_682
# %bb.332:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-6624(%rbp), %rax               # 8-byte Reload
	.loc	1 409 18                        # formatter_private.c3:409:18
	movl	$0, (%rax)
.LBB17_333:                             #   in Loop: Header=BB17_324 Depth=1
	.loc	1 410 8 is_stmt 1               # formatter_private.c3:410:8
	movq	-3520(%rbp), %rax
	movq	%rax, -6640(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_683
# %bb.334:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-6640(%rbp), %rax               # 8-byte Reload
	.loc	1 410 8                         # formatter_private.c3:410:8
	andq	$3, %rax
	movq	%rax, -6648(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_685
# %bb.335:                              #   in Loop: Header=BB17_324 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-6640(%rbp), %rax               # 8-byte Reload
	.loc	1 410 7                         # formatter_private.c3:410:7
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB17_324
.Ltmp914:
.LBB17_336:
	.loc	1 412 14 is_stmt 1              # formatter_private.c3:412:14
	movl	$10, -3524(%rbp)
	.loc	1 412 33 is_stmt 0              # formatter_private.c3:412:33
	movq	-2408(%rbp), %rax
	.loc	1 412 37                        # formatter_private.c3:412:37
	movq	-2392(%rbp), %rcx
	.loc	1 412 33                        # formatter_private.c3:412:33
	subq	%rcx, %rax
	sarq	$2, %rax
	.loc	1 412 22                        # formatter_private.c3:412:22
	imulq	$9, %rax, %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -3428(%rbp)
.LBB17_337:                             # =>This Inner Loop Header: Depth=1
	.loc	1 412 43                        # formatter_private.c3:412:43
	movq	-2392(%rbp), %rax
	movq	%rax, -6656(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_686
# %bb.338:                              #   in Loop: Header=BB17_337 Depth=1
	.loc	1 0 43                          # formatter_private.c3:0:43
	movq	-6656(%rbp), %rax               # 8-byte Reload
	.loc	1 412 43                        # formatter_private.c3:412:43
	andq	$3, %rax
	movq	%rax, -6664(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_688
# %bb.339:                              #   in Loop: Header=BB17_337 Depth=1
	.loc	1 0 43                          # formatter_private.c3:0:43
	movq	-6656(%rbp), %rax               # 8-byte Reload
	.loc	1 412 43                        # formatter_private.c3:412:43
	movl	(%rax), %eax
	.loc	1 412 42                        # formatter_private.c3:412:42
	cmpl	%eax, -3524(%rbp)
	setle	%cl
	cmpl	$0, %eax
	setl	%al
	orb	%cl, %al
	testb	$1, %al
	jne	.LBB17_340
	jmp	.LBB17_341
.LBB17_340:                             #   in Loop: Header=BB17_337 Depth=1
	.loc	1 412 51                        # formatter_private.c3:412:51
	imull	$10, -3524(%rbp), %eax
	movl	%eax, -3524(%rbp)
	.loc	1 412 60                        # formatter_private.c3:412:60
	movl	-3428(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3428(%rbp)
	jmp	.LBB17_337
.LBB17_341:
	jmp	.LBB17_342
.LBB17_342:
	jmp	.LBB17_343
.Ltmp915:
.LBB17_343:
	.loc	1 415 7 is_stmt 1               # formatter_private.c3:415:7
	movq	-2400(%rbp), %rax
	.loc	1 415 11 is_stmt 0              # formatter_private.c3:415:11
	movq	-3520(%rbp), %rcx
	.loc	1 415 15                        # formatter_private.c3:415:15
	addq	$4, %rcx
	.loc	1 415 7                         # formatter_private.c3:415:7
	cmpq	%rcx, %rax
	jbe	.LBB17_345
# %bb.344:
	.loc	1 415 22                        # formatter_private.c3:415:22
	movq	-3520(%rbp), %rax
	.loc	1 415 26                        # formatter_private.c3:415:26
	addq	$4, %rax
	movq	%rax, -2400(%rbp)
.LBB17_345:
	jmp	.LBB17_346
.Ltmp916:
.LBB17_346:
	.loc	1 417 2 is_stmt 1               # formatter_private.c3:417:2
	jmp	.LBB17_347
.LBB17_347:                             # =>This Inner Loop Header: Depth=1
.Ltmp917:
	.loc	1 417 9 is_stmt 0               # formatter_private.c3:417:9
	movq	-2400(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	-2392(%rbp), %rcx
	movb	%al, -6665(%rbp)                # 1-byte Spill
	jbe	.LBB17_350
# %bb.348:                              #   in Loop: Header=BB17_347 Depth=1
	.loc	1 417 17                        # formatter_private.c3:417:17
	movq	-2400(%rbp), %rax
	.loc	1 417 19                        # formatter_private.c3:417:19
	addq	$-4, %rax
	movq	%rax, -6688(%rbp)               # 8-byte Spill
	andq	$3, %rax
	movq	%rax, -6680(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_689
# %bb.349:                              #   in Loop: Header=BB17_347 Depth=1
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-6688(%rbp), %rax               # 8-byte Reload
	.loc	1 417 17                        # formatter_private.c3:417:17
	cmpl	$0, (%rax)
	sete	%al
	movb	%al, -6665(%rbp)                # 1-byte Spill
.LBB17_350:                             #   in Loop: Header=BB17_347 Depth=1
	.loc	1 0 17                          # formatter_private.c3:0:17
	movb	-6665(%rbp), %al                # 1-byte Reload
	.loc	1 417 17                        # formatter_private.c3:417:17
	testb	$1, %al
	jne	.LBB17_351
	jmp	.LBB17_352
.LBB17_351:                             #   in Loop: Header=BB17_347 Depth=1
	.loc	1 417 24                        # formatter_private.c3:417:24
	movq	-2400(%rbp), %rax
	addq	$-4, %rax
	movq	%rax, -2400(%rbp)
	jmp	.LBB17_347
.Ltmp918:
.LBB17_352:
	.loc	1 419 6 is_stmt 1               # formatter_private.c3:419:6
	cmpl	$2, -1116(%rbp)
	jne	.LBB17_377
# %bb.353:
.Ltmp919:
	.loc	1 421 7                         # formatter_private.c3:421:7
	cmpq	$0, -2056(%rbp)
	jne	.LBB17_355
# %bb.354:
	.loc	1 421 11 is_stmt 0              # formatter_private.c3:421:11
	movq	-2056(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -2056(%rbp)
.LBB17_355:
	.loc	1 422 7 is_stmt 1               # formatter_private.c3:422:7
	movq	-2056(%rbp), %rcx
	.loc	1 422 11 is_stmt 0              # formatter_private.c3:422:11
	movslq	-3428(%rbp), %rdx
	.loc	1 422 7                         # formatter_private.c3:422:7
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	%rdx, %rcx
	movb	%al, -6689(%rbp)                # 1-byte Spill
	jle	.LBB17_357
# %bb.356:
	.loc	1 422 16                        # formatter_private.c3:422:16
	cmpl	$-4, -3428(%rbp)
	setge	%al
	movb	%al, -6689(%rbp)                # 1-byte Spill
.LBB17_357:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movb	-6689(%rbp), %al                # 1-byte Reload
	.loc	1 422 16                        # formatter_private.c3:422:16
	testb	$1, %al
	jne	.LBB17_358
	jmp	.LBB17_359
.LBB17_358:
.Ltmp920:
	.loc	1 424 17 is_stmt 1              # formatter_private.c3:424:17
	movl	$0, -1116(%rbp)
	.loc	1 425 4                         # formatter_private.c3:425:4
	movq	-2056(%rbp), %rax
	.loc	1 425 9 is_stmt 0               # formatter_private.c3:425:9
	movslq	-3428(%rbp), %rcx
	addq	$1, %rcx
	.loc	1 425 4                         # formatter_private.c3:425:4
	subq	%rcx, %rax
	movq	%rax, -2056(%rbp)
	jmp	.LBB17_360
.Ltmp921:
.LBB17_359:
	.loc	1 429 17 is_stmt 1              # formatter_private.c3:429:17
	movl	$1, -1116(%rbp)
	.loc	1 430 4                         # formatter_private.c3:430:4
	movq	-2056(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -2056(%rbp)
.Ltmp922:
.LBB17_360:
	.loc	1 432 8                         # formatter_private.c3:432:8
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB17_376
# %bb.361:
.Ltmp923:
	.loc	1 435 8                         # formatter_private.c3:435:8
	movq	-2400(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	-2392(%rbp), %rcx
	movb	%al, -6690(%rbp)                # 1-byte Spill
	jbe	.LBB17_364
# %bb.362:
	.loc	1 435 17 is_stmt 0              # formatter_private.c3:435:17
	movq	-2400(%rbp), %rax
	.loc	1 435 19                        # formatter_private.c3:435:19
	addq	$-4, %rax
	movq	%rax, -6712(%rbp)               # 8-byte Spill
	andq	$3, %rax
	movq	%rax, -6704(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_690
# %bb.363:
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-6712(%rbp), %rax               # 8-byte Reload
	.loc	1 435 17                        # formatter_private.c3:435:17
	cmpl	$0, (%rax)
	setne	%al
	movb	%al, -6690(%rbp)                # 1-byte Spill
.LBB17_364:
	.loc	1 0 17                          # formatter_private.c3:0:17
	movb	-6690(%rbp), %al                # 1-byte Reload
	.loc	1 435 17                        # formatter_private.c3:435:17
	testb	$1, %al
	jne	.LBB17_365
	jmp	.LBB17_371
.LBB17_365:
.Ltmp924:
	.loc	1 437 18 is_stmt 1              # formatter_private.c3:437:18
	movl	$10, -4404(%rbp)
	.loc	1 437 26 is_stmt 0              # formatter_private.c3:437:26
	movl	$0, -3508(%rbp)
.LBB17_366:                             # =>This Inner Loop Header: Depth=1
	.loc	1 437 29                        # formatter_private.c3:437:29
	movq	-2400(%rbp), %rax
	.loc	1 437 31                        # formatter_private.c3:437:31
	addq	$-4, %rax
	movq	%rax, -6728(%rbp)               # 8-byte Spill
	andq	$3, %rax
	movq	%rax, -6720(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_691
# %bb.367:                              #   in Loop: Header=BB17_366 Depth=1
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-6728(%rbp), %rax               # 8-byte Reload
	.loc	1 437 29                        # formatter_private.c3:437:29
	movl	(%rax), %eax
	movl	%eax, -6736(%rbp)               # 4-byte Spill
	.loc	1 437 37                        # formatter_private.c3:437:37
	movl	-4404(%rbp), %eax
	movl	%eax, -6732(%rbp)               # 4-byte Spill
	.loc	1 437 29                        # formatter_private.c3:437:29
	cmpl	$0, %eax
	sete	%al
	testb	$1, %al
	jne	.LBB17_692
# %bb.368:                              #   in Loop: Header=BB17_366 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	-6732(%rbp), %ecx               # 4-byte Reload
	movl	-6736(%rbp), %eax               # 4-byte Reload
	.loc	1 437 29                        # formatter_private.c3:437:29
	cltd
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB17_370
# %bb.369:                              #   in Loop: Header=BB17_366 Depth=1
	.loc	1 437 45                        # formatter_private.c3:437:45
	imull	$10, -4404(%rbp), %eax
	movl	%eax, -4404(%rbp)
	.loc	1 437 54                        # formatter_private.c3:437:54
	movl	-3508(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -3508(%rbp)
	jmp	.LBB17_366
.LBB17_370:
	jmp	.LBB17_372
.Ltmp925:
.LBB17_371:
	.loc	1 441 9 is_stmt 1               # formatter_private.c3:441:9
	movl	$9, -3508(%rbp)
.Ltmp926:
.LBB17_372:
	.loc	1 443 8                         # formatter_private.c3:443:8
	cmpl	$0, -1116(%rbp)
	jne	.LBB17_374
# %bb.373:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-2056(%rbp), %rax
	movq	%rax, -4488(%rbp)
	movq	$0, -4496(%rbp)
.Ltmp927:
	.loc	1 445 45 is_stmt 1              # formatter_private.c3:445:45
	movq	-2400(%rbp), %rax
	.loc	1 445 49 is_stmt 0              # formatter_private.c3:445:49
	movq	-2408(%rbp), %rcx
	.loc	1 445 45                        # formatter_private.c3:445:45
	subq	%rcx, %rax
	sarq	$2, %rax
	subq	$1, %rax
	.loc	1 445 40                        # formatter_private.c3:445:40
	imulq	$9, %rax, %rax
	.loc	1 445 58                        # formatter_private.c3:445:58
	movslq	-3508(%rbp), %rcx
	.loc	1 445 40                        # formatter_private.c3:445:40
	subq	%rcx, %rax
	movq	%rax, -4504(%rbp)
.Ltmp928:
	.loc	8 376 16 is_stmt 1              # math.c3:376:16
	movq	-4496(%rbp), %rcx
	.loc	8 376 19 is_stmt 0              # math.c3:376:19
	movq	-4504(%rbp), %rax
	movq	%rcx, %rdx
	subq	%rax, %rdx
	cmovgq	%rcx, %rax
	movq	%rax, -4512(%rbp)
.Ltmp929:
	.loc	8 393 16 is_stmt 1              # math.c3:393:16
	movq	-4488(%rbp), %rcx
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movq	-4512(%rbp), %rax
	movq	%rcx, %rdx
	subq	%rax, %rdx
	cmovlq	%rcx, %rax
	movq	%rax, -2056(%rbp)
	jmp	.LBB17_375
.Ltmp930:
.LBB17_374:
	.loc	8 0 19                          # math.c3:0:19
	movq	-2056(%rbp), %rax
	movq	%rax, -4520(%rbp)
	movq	$0, -4528(%rbp)
.Ltmp931:
	.loc	1 449 45 is_stmt 1              # formatter_private.c3:449:45
	movq	-2400(%rbp), %rax
	.loc	1 449 49 is_stmt 0              # formatter_private.c3:449:49
	movq	-2408(%rbp), %rcx
	.loc	1 449 45                        # formatter_private.c3:449:45
	subq	%rcx, %rax
	sarq	$2, %rax
	subq	$1, %rax
	.loc	1 449 40                        # formatter_private.c3:449:40
	imulq	$9, %rax, %rax
	.loc	1 449 58                        # formatter_private.c3:449:58
	movslq	-3428(%rbp), %rcx
	.loc	1 449 40                        # formatter_private.c3:449:40
	addq	%rcx, %rax
	.loc	1 449 62                        # formatter_private.c3:449:62
	movslq	-3508(%rbp), %rcx
	.loc	1 449 40                        # formatter_private.c3:449:40
	subq	%rcx, %rax
	movq	%rax, -4536(%rbp)
.Ltmp932:
	.loc	8 376 16 is_stmt 1              # math.c3:376:16
	movq	-4528(%rbp), %rcx
	.loc	8 376 19 is_stmt 0              # math.c3:376:19
	movq	-4536(%rbp), %rax
	movq	%rcx, %rdx
	subq	%rax, %rdx
	cmovgq	%rcx, %rax
	movq	%rax, -4544(%rbp)
.Ltmp933:
	.loc	8 393 16 is_stmt 1              # math.c3:393:16
	movq	-4520(%rbp), %rcx
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movq	-4544(%rbp), %rax
	movq	%rcx, %rdx
	subq	%rax, %rdx
	cmovlq	%rcx, %rax
	movq	%rax, -2056(%rbp)
.LBB17_375:
	jmp	.LBB17_376
.LBB17_376:
	jmp	.LBB17_377
.Ltmp934:
.LBB17_377:
	.loc	1 454 6 is_stmt 1               # formatter_private.c3:454:6
	movq	-2056(%rbp), %rax
	movq	%rax, -6752(%rbp)               # 8-byte Spill
	.loc	1 454 30 is_stmt 0              # formatter_private.c3:454:30
	movb	$1, %al
	cmpq	$0, -2056(%rbp)
	movb	%al, -6737(%rbp)                # 1-byte Spill
	jne	.LBB17_379
# %bb.378:
	.loc	1 454 35                        # formatter_private.c3:454:35
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -6737(%rbp)                # 1-byte Spill
.LBB17_379:
	.loc	1 0 35                          # formatter_private.c3:0:35
	movq	-6752(%rbp), %rax               # 8-byte Reload
	movb	-6737(%rbp), %cl                # 1-byte Reload
	.loc	1 454 35                        # formatter_private.c3:454:35
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	.loc	1 454 10                        # formatter_private.c3:454:10
	movl	$2147483646, %ecx               # imm = 0x7FFFFFFE
	subq	%rdx, %rcx
	.loc	1 454 6                         # formatter_private.c3:454:6
	cmpq	%rcx, %rax
	jle	.LBB17_382
# %bb.380:
	.loc	1 454 60                        # formatter_private.c3:454:60
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.381:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 454 60 epilogue_begin         # formatter_private.c3:454:60
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_382:
	.cfi_def_cfa %rbp, 16
	.loc	1 455 20 is_stmt 1              # formatter_private.c3:455:20
	movq	-2056(%rbp), %rax
	.loc	1 455 16 is_stmt 0              # formatter_private.c3:455:16
	addq	$1, %rax
	movq	%rax, -6768(%rbp)               # 8-byte Spill
	.loc	1 455 30                        # formatter_private.c3:455:30
	movb	$1, %al
	cmpq	$0, -2056(%rbp)
	movb	%al, -6753(%rbp)                # 1-byte Spill
	jne	.LBB17_384
# %bb.383:
	.loc	1 455 35                        # formatter_private.c3:455:35
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -6753(%rbp)                # 1-byte Spill
.LBB17_384:
	.loc	1 0 35                          # formatter_private.c3:0:35
	movq	-6768(%rbp), %rax               # 8-byte Reload
	movb	-6753(%rbp), %cl                # 1-byte Reload
	.loc	1 455 35                        # formatter_private.c3:455:35
	andb	$1, %cl
	movzbl	%cl, %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 455 10                        # formatter_private.c3:455:10
	addq	%rcx, %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -4548(%rbp)
	.loc	1 457 6 is_stmt 1               # formatter_private.c3:457:6
	cmpl	$0, -1116(%rbp)
	jne	.LBB17_391
# %bb.385:
.Ltmp935:
	.loc	1 459 7                         # formatter_private.c3:459:7
	movl	-3428(%rbp), %eax
	.loc	1 459 11 is_stmt 0              # formatter_private.c3:459:11
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	subl	-4548(%rbp), %ecx
	.loc	1 459 7                         # formatter_private.c3:459:7
	cmpl	%ecx, %eax
	jle	.LBB17_388
# %bb.386:
	.loc	1 459 31                        # formatter_private.c3:459:31
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.387:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 459 31 epilogue_begin         # formatter_private.c3:459:31
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_388:
	.cfi_def_cfa %rbp, 16
	.loc	1 460 7 is_stmt 1               # formatter_private.c3:460:7
	cmpl	$0, -3428(%rbp)
	jle	.LBB17_390
# %bb.389:
	.loc	1 460 14 is_stmt 0              # formatter_private.c3:460:14
	movl	-4548(%rbp), %eax
	addl	-3428(%rbp), %eax
	movl	%eax, -4548(%rbp)
.LBB17_390:
	jmp	.LBB17_403
.Ltmp936:
.LBB17_391:
	.loc	1 464 26 is_stmt 1              # formatter_private.c3:464:26
	cmpl	$0, -3428(%rbp)
	jge	.LBB17_393
# %bb.392:
	.loc	1 464 35 is_stmt 0              # formatter_private.c3:464:35
	xorl	%eax, %eax
	subl	-3428(%rbp), %eax
	movl	%eax, -6772(%rbp)               # 4-byte Spill
	jmp	.LBB17_394
.LBB17_393:
	.loc	1 464 39                        # formatter_private.c3:464:39
	movl	-3428(%rbp), %eax
	movl	%eax, -6772(%rbp)               # 4-byte Spill
.LBB17_394:
	.loc	1 0 39                          # formatter_private.c3:0:39
	movl	-6772(%rbp), %eax               # 4-byte Reload
	.loc	1 464 39                        # formatter_private.c3:464:39
	movslq	%eax, %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -4576(%rbp)
	movq	%rax, -4568(%rbp)
	movq	-4576(%rbp), %rdi
	movq	-4568(%rbp), %rsi
	movq	-2040(%rbp), %rdx
	.loc	1 464 10                        # formatter_private.c3:464:10
	callq	std.io.fmt_u@PLT
	movq	%rax, -4560(%rbp)
.LBB17_395:                             # =>This Inner Loop Header: Depth=1
.Ltmp937:
	.loc	1 465 10 is_stmt 1              # formatter_private.c3:465:10
	movq	-2040(%rbp), %rax
	.loc	1 465 17 is_stmt 0              # formatter_private.c3:465:17
	movq	-4560(%rbp), %rcx
	.loc	1 465 10                        # formatter_private.c3:465:10
	subq	%rcx, %rax
	sarq	$0, %rax
	cmpq	$2, %rax
	jge	.LBB17_397
# %bb.396:                              #   in Loop: Header=BB17_395 Depth=1
	.loc	1 465 30                        # formatter_private.c3:465:30
	movq	-4560(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -4560(%rbp)
	.loc	1 465 36                        # formatter_private.c3:465:36
	movb	$48, -1(%rax)
	jmp	.LBB17_395
.Ltmp938:
.LBB17_397:
	.loc	1 466 28 is_stmt 1              # formatter_private.c3:466:28
	movb	$45, %al
	movb	$43, %cl
	movb	%cl, -6774(%rbp)                # 1-byte Spill
	.loc	1 466 14 is_stmt 0              # formatter_private.c3:466:14
	cmpl	$0, -3428(%rbp)
	movb	%al, -6773(%rbp)                # 1-byte Spill
	.loc	1 466 28                        # formatter_private.c3:466:28
	jl	.LBB17_725
# %bb.724:
	.loc	1 0 28                          # formatter_private.c3:0:28
	movb	-6774(%rbp), %al                # 1-byte Reload
	movb	%al, -6773(%rbp)                # 1-byte Spill
.LBB17_725:
	movb	-6773(%rbp), %al                # 1-byte Reload
	movb	%al, -6785(%rbp)                # 1-byte Spill
	.loc	1 466 6                         # formatter_private.c3:466:6
	movq	-4560(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -6784(%rbp)               # 8-byte Spill
	movq	%rax, -4560(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_694
# %bb.398:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-6784(%rbp), %rax               # 8-byte Reload
	movb	-6785(%rbp), %cl                # 1-byte Reload
	.loc	1 466 4                         # formatter_private.c3:466:4
	movb	%cl, (%rax)
	.loc	1 467 13 is_stmt 1              # formatter_private.c3:467:13
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 467 42 is_stmt 0              # formatter_private.c3:467:42
	movb	$69, %al
	movb	$101, %dl
	movb	%dl, -6787(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -6786(%rbp)                # 1-byte Spill
	jne	.LBB17_727
# %bb.726:
	.loc	1 0 42                          # formatter_private.c3:0:42
	movb	-6787(%rbp), %al                # 1-byte Reload
	movb	%al, -6786(%rbp)                # 1-byte Spill
.LBB17_727:
	movb	-6786(%rbp), %al                # 1-byte Reload
	movb	%al, -6801(%rbp)                # 1-byte Spill
	.loc	1 467 6                         # formatter_private.c3:467:6
	movq	-4560(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -6800(%rbp)               # 8-byte Spill
	movq	%rax, -4560(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_696
# %bb.399:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-6800(%rbp), %rax               # 8-byte Reload
	movb	-6801(%rbp), %cl                # 1-byte Reload
	.loc	1 467 4                         # formatter_private.c3:467:4
	movb	%cl, (%rax)
	.loc	1 468 7 is_stmt 1               # formatter_private.c3:468:7
	movq	-2040(%rbp), %rax
	.loc	1 468 14 is_stmt 0              # formatter_private.c3:468:14
	movq	-4560(%rbp), %rcx
	.loc	1 468 7                         # formatter_private.c3:468:7
	subq	%rcx, %rax
	sarq	$0, %rax
	.loc	1 468 36                        # formatter_private.c3:468:36
	movslq	-4548(%rbp), %rdx
	.loc	1 468 21                        # formatter_private.c3:468:21
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	subq	%rdx, %rcx
	.loc	1 468 7                         # formatter_private.c3:468:7
	cmpq	%rcx, %rax
	jle	.LBB17_402
# %bb.400:
	.loc	1 468 46                        # formatter_private.c3:468:46
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.401:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 468 46 epilogue_begin         # formatter_private.c3:468:46
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_402:
	.cfi_def_cfa %rbp, 16
	.loc	1 469 3 is_stmt 1               # formatter_private.c3:469:3
	movl	-4548(%rbp), %eax
	.loc	1 469 14 is_stmt 0              # formatter_private.c3:469:14
	movq	-2040(%rbp), %rcx
	.loc	1 469 21                        # formatter_private.c3:469:21
	movq	-4560(%rbp), %rdx
	.loc	1 469 8                         # formatter_private.c3:469:8
	subq	%rdx, %rcx
	sarq	$0, %rcx
                                        # kill: def $ecx killed $ecx killed $rcx
	.loc	1 469 3                         # formatter_private.c3:469:3
	addl	%ecx, %eax
	movl	%eax, -4548(%rbp)
.Ltmp939:
.LBB17_403:
	.loc	1 471 6 is_stmt 1               # formatter_private.c3:471:6
	movslq	-4548(%rbp), %rax
	.loc	1 471 10 is_stmt 0              # formatter_private.c3:471:10
	movl	$2147483647, %ecx               # imm = 0x7FFFFFFF
	subq	-1736(%rbp), %rcx
	.loc	1 471 6                         # formatter_private.c3:471:6
	cmpq	%rcx, %rax
	jle	.LBB17_406
# %bb.404:
	.loc	1 471 31                        # formatter_private.c3:471:31
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.405:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 471 31 epilogue_begin         # formatter_private.c3:471:31
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_406:
	.cfi_def_cfa %rbp, 16
	.loc	1 472 6 is_stmt 1               # formatter_private.c3:472:6
	movq	$0, -4584(%rbp)
	.loc	1 473 7                         # formatter_private.c3:473:7
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -6802(%rbp)                # 1-byte Spill
	jne	.LBB17_407
	jmp	.LBB17_408
.LBB17_407:
	.loc	1 473 27 is_stmt 0              # formatter_private.c3:473:27
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	xorb	$-1, %al
	movb	%al, -6802(%rbp)                # 1-byte Spill
.LBB17_408:
	.loc	1 0 27                          # formatter_private.c3:0:27
	movb	-6802(%rbp), %al                # 1-byte Reload
	.loc	1 473 27                        # formatter_private.c3:473:27
	testb	$1, %al
	jne	.LBB17_409
	jmp	.LBB17_426
.LBB17_409:
	.loc	1 473 47                        # formatter_private.c3:473:47
	movq	-4584(%rbp), %rax
	movq	%rax, -6840(%rbp)               # 8-byte Spill
	.loc	1 473 68                        # formatter_private.c3:473:68
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6832(%rbp)               # 8-byte Spill
	.loc	1 473 80                        # formatter_private.c3:473:80
	movq	-1736(%rbp), %rax
	.loc	1 473 85                        # formatter_private.c3:473:85
	movslq	-4548(%rbp), %rcx
	.loc	1 473 80                        # formatter_private.c3:473:80
	addq	%rcx, %rax
	movq	%rax, -6824(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -6816(%rbp)               # 8-byte Spill
.Ltmp940:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_419
# %bb.410:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-6824(%rbp), %rax               # 8-byte Reload
	movq	-6832(%rbp), %rcx               # 8-byte Reload
	movq	-6816(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -632(%rbp)
	movb	$32, -633(%rbp)
	movq	%rcx, -648(%rbp)
	movq	%rax, -656(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-648(%rbp), %rax
	subq	-656(%rbp), %rax
	movq	%rax, -664(%rbp)
.Ltmp941:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -672(%rbp)
.LBB17_411:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-672(%rbp), %rax
	cmpq	-664(%rbp), %rax
	jge	.LBB17_415
# %bb.412:                              #   in Loop: Header=BB17_411 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-632(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-688(%rbp), %rdi
	movzbl	-633(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -6848(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_414
# %bb.413:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-6848(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -680(%rbp)
	movq	-680(%rbp), %rax
	movq	%rax, -6856(%rbp)               # 8-byte Spill
	jmp	.LBB17_420
.LBB17_414:                             #   in Loop: Header=BB17_411 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-672(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -672(%rbp)
	jmp	.LBB17_411
.Ltmp942:
.LBB17_415:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -692(%rbp)
	movq	-664(%rbp), %rax
	movq	%rax, -704(%rbp)
	movl	-692(%rbp), %eax
	movl	%eax, -708(%rbp)
	movq	-704(%rbp), %rax
	movq	%rax, -720(%rbp)
.Ltmp943:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-708(%rbp), %rax
	cmpq	-720(%rbp), %rax
	jle	.LBB17_417
.Ltmp944:
# %bb.416:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-692(%rbp), %rax
	movq	%rax, -6864(%rbp)               # 8-byte Spill
	jmp	.LBB17_418
.LBB17_417:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-704(%rbp), %rax
	movq	%rax, -6864(%rbp)               # 8-byte Spill
.LBB17_418:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-6864(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -4600(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6856(%rbp)               # 8-byte Spill
	jmp	.LBB17_420
.Ltmp945:
.LBB17_419:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp946:
.LBB17_420:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6856(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6872(%rbp)               # 8-byte Spill
	.loc	1 473 54 is_stmt 1              # formatter_private.c3:473:54
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_422
# %bb.421:
	.loc	1 0 54 is_stmt 0                # formatter_private.c3:0:54
	movq	-6872(%rbp), %rax               # 8-byte Reload
	.loc	1 473 54                        # formatter_private.c3:473:54
	movq	%rax, -4592(%rbp)
	jmp	.LBB17_423
.LBB17_422:
	jmp	.LBB17_425
.LBB17_423:
	movq	-4592(%rbp), %rax
	movq	%rax, -6880(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.424:
	.loc	1 0 54                          # formatter_private.c3:0:54
	movq	-6880(%rbp), %rax               # 8-byte Reload
	.loc	1 473 54 epilogue_begin         # formatter_private.c3:473:54
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_425:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 54                          # formatter_private.c3:0:54
	movq	-6840(%rbp), %rax               # 8-byte Reload
	.loc	1 473 47                        # formatter_private.c3:473:47
	addq	-4600(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_426:
	.loc	1 474 6 is_stmt 1               # formatter_private.c3:474:6
	movb	$1, %al
	testb	$1, -1633(%rbp)
	movb	%al, -6881(%rbp)                # 1-byte Spill
	jne	.LBB17_428
# %bb.427:
	.loc	1 474 16 is_stmt 0              # formatter_private.c3:474:16
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$2, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -6881(%rbp)                # 1-byte Spill
.LBB17_428:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movb	-6881(%rbp), %al                # 1-byte Reload
	.loc	1 474 16                        # formatter_private.c3:474:16
	testb	$1, %al
	jne	.LBB17_429
	jmp	.LBB17_435
.LBB17_429:
	.loc	1 474 33                        # formatter_private.c3:474:33
	movq	-4584(%rbp), %rax
	movq	%rax, -6896(%rbp)               # 8-byte Spill
	.loc	1 474 49                        # formatter_private.c3:474:49
	movb	-1633(%rbp), %cl
	.loc	1 474 64                        # formatter_private.c3:474:64
	movb	$45, %al
	movb	$43, %dl
	movb	%dl, -6883(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -6882(%rbp)                # 1-byte Spill
	jne	.LBB17_729
# %bb.728:
	.loc	1 0 64                          # formatter_private.c3:0:64
	movb	-6883(%rbp), %al                # 1-byte Reload
	movb	%al, -6882(%rbp)                # 1-byte Spill
.LBB17_729:
	movb	-6882(%rbp), %al                # 1-byte Reload
	movq	-1112(%rbp), %rsi
	.loc	1 474 40                        # formatter_private.c3:474:40
	leaq	-4616(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -6904(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_431
# %bb.430:
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-6904(%rbp), %rax               # 8-byte Reload
	.loc	1 474 40                        # formatter_private.c3:474:40
	movq	%rax, -4608(%rbp)
	jmp	.LBB17_432
.LBB17_431:
	jmp	.LBB17_434
.LBB17_432:
	movq	-4608(%rbp), %rax
	movq	%rax, -6912(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.433:
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-6912(%rbp), %rax               # 8-byte Reload
	.loc	1 474 40 epilogue_begin         # formatter_private.c3:474:40
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_434:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-6896(%rbp), %rax               # 8-byte Reload
	.loc	1 474 33                        # formatter_private.c3:474:33
	addq	-4616(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_435:
	.loc	1 475 6 is_stmt 1               # formatter_private.c3:475:6
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_453
# %bb.436:
	.loc	1 475 26 is_stmt 0              # formatter_private.c3:475:26
	movq	-4584(%rbp), %rax
	movq	%rax, -6944(%rbp)               # 8-byte Spill
	.loc	1 475 47                        # formatter_private.c3:475:47
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6936(%rbp)               # 8-byte Spill
	.loc	1 475 59                        # formatter_private.c3:475:59
	movq	-1736(%rbp), %rax
	.loc	1 475 64                        # formatter_private.c3:475:64
	movslq	-4548(%rbp), %rcx
	.loc	1 475 59                        # formatter_private.c3:475:59
	addq	%rcx, %rax
	movq	%rax, -6928(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -6920(%rbp)               # 8-byte Spill
.Ltmp947:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_446
# %bb.437:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-6928(%rbp), %rax               # 8-byte Reload
	movq	-6936(%rbp), %rcx               # 8-byte Reload
	movq	-6920(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -728(%rbp)
	movb	$48, -729(%rbp)
	movq	%rcx, -744(%rbp)
	movq	%rax, -752(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-744(%rbp), %rax
	subq	-752(%rbp), %rax
	movq	%rax, -760(%rbp)
.Ltmp948:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -768(%rbp)
.LBB17_438:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-768(%rbp), %rax
	cmpq	-760(%rbp), %rax
	jge	.LBB17_442
# %bb.439:                              #   in Loop: Header=BB17_438 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-728(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-784(%rbp), %rdi
	movzbl	-729(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -6952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_441
# %bb.440:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-6952(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -776(%rbp)
	movq	-776(%rbp), %rax
	movq	%rax, -6960(%rbp)               # 8-byte Spill
	jmp	.LBB17_447
.LBB17_441:                             #   in Loop: Header=BB17_438 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-768(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB17_438
.Ltmp949:
.LBB17_442:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -788(%rbp)
	movq	-760(%rbp), %rax
	movq	%rax, -800(%rbp)
	movl	-788(%rbp), %eax
	movl	%eax, -804(%rbp)
	movq	-800(%rbp), %rax
	movq	%rax, -816(%rbp)
.Ltmp950:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-804(%rbp), %rax
	cmpq	-816(%rbp), %rax
	jle	.LBB17_444
.Ltmp951:
# %bb.443:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-788(%rbp), %rax
	movq	%rax, -6968(%rbp)               # 8-byte Spill
	jmp	.LBB17_445
.LBB17_444:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-800(%rbp), %rax
	movq	%rax, -6968(%rbp)               # 8-byte Spill
.LBB17_445:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-6968(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -4632(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -6960(%rbp)               # 8-byte Spill
	jmp	.LBB17_447
.Ltmp952:
.LBB17_446:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp953:
.LBB17_447:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-6960(%rbp), %rax               # 8-byte Reload
	movq	%rax, -6976(%rbp)               # 8-byte Spill
	.loc	1 475 33 is_stmt 1              # formatter_private.c3:475:33
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_449
# %bb.448:
	.loc	1 0 33 is_stmt 0                # formatter_private.c3:0:33
	movq	-6976(%rbp), %rax               # 8-byte Reload
	.loc	1 475 33                        # formatter_private.c3:475:33
	movq	%rax, -4624(%rbp)
	jmp	.LBB17_450
.LBB17_449:
	jmp	.LBB17_452
.LBB17_450:
	movq	-4624(%rbp), %rax
	movq	%rax, -6984(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.451:
	.loc	1 0 33                          # formatter_private.c3:0:33
	movq	-6984(%rbp), %rax               # 8-byte Reload
	.loc	1 475 33 epilogue_begin         # formatter_private.c3:475:33
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_452:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 33                          # formatter_private.c3:0:33
	movq	-6944(%rbp), %rax               # 8-byte Reload
	.loc	1 475 26                        # formatter_private.c3:475:26
	addq	-4632(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_453:
	.loc	1 476 6 is_stmt 1               # formatter_private.c3:476:6
	cmpl	$0, -1116(%rbp)
	jne	.LBB17_520
# %bb.454:
.Ltmp954:
	.loc	1 478 7                         # formatter_private.c3:478:7
	movq	-2392(%rbp), %rax
	cmpq	-2408(%rbp), %rax
	jbe	.LBB17_456
# %bb.455:
	.loc	1 478 18 is_stmt 0              # formatter_private.c3:478:18
	movq	-2408(%rbp), %rax
	movq	%rax, -2392(%rbp)
.LBB17_456:
	.loc	1 479 13 is_stmt 1              # formatter_private.c3:479:13
	movq	-2392(%rbp), %rax
	movq	%rax, -4640(%rbp)
.LBB17_457:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_463 Depth 2
.Ltmp955:
	.loc	1 480 10                        # formatter_private.c3:480:10
	movq	-4640(%rbp), %rax
	cmpq	-2408(%rbp), %rax
	ja	.LBB17_477
# %bb.458:                              #   in Loop: Header=BB17_457 Depth=1
.Ltmp956:
	.loc	1 482 21                        # formatter_private.c3:482:21
	movq	-4640(%rbp), %rax
	movq	%rax, -6992(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_698
# %bb.459:                              #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-6992(%rbp), %rax               # 8-byte Reload
	.loc	1 482 21                        # formatter_private.c3:482:21
	andq	$3, %rax
	movq	%rax, -7000(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_700
# %bb.460:                              #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-6992(%rbp), %rax               # 8-byte Reload
	.loc	1 482 21                        # formatter_private.c3:482:21
	movl	(%rax), %eax
                                        # kill: def $rax killed $eax
	.loc	1 482 24                        # formatter_private.c3:482:24
	movq	-2048(%rbp), %rdx
	.loc	1 482 30                        # formatter_private.c3:482:30
	addq	$9, %rdx
	movq	%rax, -4736(%rbp)
	movq	$0, -4728(%rbp)
	movq	-4736(%rbp), %rdi
	movq	-4728(%rbp), %rsi
	.loc	1 482 14                        # formatter_private.c3:482:14
	callq	std.io.fmt_u@PLT
	movq	%rax, -4648(%rbp)
	movb	$1, -4737(%rbp)
# %bb.461:                              #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 14                          # formatter_private.c3:0:14
	movb	-4737(%rbp), %cl
	movb	%cl, -7001(%rbp)                # 1-byte Spill
	andb	$1, %cl
.Ltmp957:
	.loc	1 485 10 is_stmt 1              # formatter_private.c3:485:10
	movq	-4640(%rbp), %rax
	.loc	1 485 15 is_stmt 0              # formatter_private.c3:485:15
	movq	-2392(%rbp), %rdx
	.loc	1 485 10                        # formatter_private.c3:485:10
	subq	%rdx, %rax
	setne	%al
	subb	%cl, %al
	jne	.LBB17_466
	jmp	.LBB17_462
.LBB17_462:                             #   in Loop: Header=BB17_457 Depth=1
.Ltmp958:
	.loc	1 486 6 is_stmt 1               # formatter_private.c3:486:6
	jmp	.LBB17_463
.LBB17_463:                             #   Parent Loop BB17_457 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp959:
	.loc	1 486 13 is_stmt 0              # formatter_private.c3:486:13
	movq	-4648(%rbp), %rax
	cmpq	-2048(%rbp), %rax
	jbe	.LBB17_465
# %bb.464:                              #   in Loop: Header=BB17_463 Depth=2
	.loc	1 486 25                        # formatter_private.c3:486:25
	movq	-4648(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -4648(%rbp)
	.loc	1 486 28                        # formatter_private.c3:486:28
	movb	$48, -1(%rax)
	jmp	.LBB17_463
.LBB17_465:                             #   in Loop: Header=BB17_457 Depth=1
	jmp	.LBB17_470
.Ltmp960:
.LBB17_466:                             #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 28                          # formatter_private.c3:0:28
	movb	-7001(%rbp), %cl                # 1-byte Reload
	.loc	1 487 10 is_stmt 1              # formatter_private.c3:487:10
	movq	-4648(%rbp), %rax
	.loc	1 487 15 is_stmt 0              # formatter_private.c3:487:15
	movq	-2048(%rbp), %rdx
	.loc	1 487 21                        # formatter_private.c3:487:21
	addq	$9, %rdx
	.loc	1 487 10                        # formatter_private.c3:487:10
	subq	%rdx, %rax
	sete	%al
	andb	$1, %cl
	subb	%cl, %al
	jne	.LBB17_469
	jmp	.LBB17_467
.LBB17_467:                             #   in Loop: Header=BB17_457 Depth=1
.Ltmp961:
	.loc	1 488 9 is_stmt 1               # formatter_private.c3:488:9
	movq	-4648(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -7016(%rbp)               # 8-byte Spill
	movq	%rax, -4648(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_701
# %bb.468:                              #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-7016(%rbp), %rax               # 8-byte Reload
	.loc	1 488 7                         # formatter_private.c3:488:7
	movb	$48, (%rax)
	jmp	.LBB17_470
.LBB17_469:                             #   in Loop: Header=BB17_457 Depth=1
	jmp	.LBB17_470
.Ltmp962:
.LBB17_470:                             #   in Loop: Header=BB17_457 Depth=1
	.loc	1 490 4 is_stmt 1               # formatter_private.c3:490:4
	movq	-4584(%rbp), %rax
	movq	%rax, -7048(%rbp)               # 8-byte Spill
	.loc	1 490 26 is_stmt 0              # formatter_private.c3:490:26
	movq	-4648(%rbp), %rax
	movq	%rax, -7040(%rbp)               # 8-byte Spill
	.loc	1 490 29                        # formatter_private.c3:490:29
	movq	-2048(%rbp), %rcx
	.loc	1 490 35                        # formatter_private.c3:490:35
	addq	$9, %rcx
	.loc	1 490 39                        # formatter_private.c3:490:39
	movq	-4648(%rbp), %rax
	.loc	1 490 29                        # formatter_private.c3:490:29
	subq	%rax, %rcx
	sarq	$0, %rcx
	addq	$0, %rcx
	movq	%rcx, -7032(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -7024(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_703
# %bb.471:                              #   in Loop: Header=BB17_457 Depth=1
	.loc	1 0 29                          # formatter_private.c3:0:29
	movq	-7040(%rbp), %rdx               # 8-byte Reload
	movq	-7032(%rbp), %rcx               # 8-byte Reload
	.loc	1 490 26                        # formatter_private.c3:490:26
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 490 11                        # formatter_private.c3:490:11
	leaq	-4808(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -7056(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_473
# %bb.472:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7056(%rbp), %rax               # 8-byte Reload
	.loc	1 490 11                        # formatter_private.c3:490:11
	movq	%rax, -4752(%rbp)
	jmp	.LBB17_474
.LBB17_473:                             #   in Loop: Header=BB17_457 Depth=1
	jmp	.LBB17_476
.LBB17_474:
	movq	-4752(%rbp), %rax
	movq	%rax, -7064(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.475:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7064(%rbp), %rax               # 8-byte Reload
	.loc	1 490 11 epilogue_begin         # formatter_private.c3:490:11
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_476:                             #   in Loop: Header=BB17_457 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7048(%rbp), %rax               # 8-byte Reload
	.loc	1 490 4                         # formatter_private.c3:490:4
	addq	-4808(%rbp), %rax
	movq	%rax, -4584(%rbp)
.Ltmp963:
	.loc	1 480 18 is_stmt 1              # formatter_private.c3:480:18
	movq	-4640(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -4640(%rbp)
	jmp	.LBB17_457
.Ltmp964:
.LBB17_477:
	.loc	1 492 7                         # formatter_private.c3:492:7
	movb	$1, %al
	cmpq	$0, -2056(%rbp)
	movb	%al, -7065(%rbp)                # 1-byte Spill
	jne	.LBB17_479
# %bb.478:
	.loc	1 492 12 is_stmt 0              # formatter_private.c3:492:12
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -7065(%rbp)                # 1-byte Spill
.LBB17_479:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movb	-7065(%rbp), %al                # 1-byte Reload
	.loc	1 492 12                        # formatter_private.c3:492:12
	testb	$1, %al
	jne	.LBB17_480
	jmp	.LBB17_486
.LBB17_480:
	.loc	1 492 29                        # formatter_private.c3:492:29
	movq	-4584(%rbp), %rax
	movq	%rax, -7088(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rsi
	.loc	1 492 36                        # formatter_private.c3:492:36
	leaq	-4824(%rbp), %rdi
	movl	$46, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7080(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_482
# %bb.481:
	.loc	1 0 36                          # formatter_private.c3:0:36
	movq	-7080(%rbp), %rax               # 8-byte Reload
	.loc	1 492 36                        # formatter_private.c3:492:36
	movq	%rax, -4816(%rbp)
	jmp	.LBB17_483
.LBB17_482:
	jmp	.LBB17_485
.LBB17_483:
	movq	-4816(%rbp), %rax
	movq	%rax, -7096(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.484:
	.loc	1 0 36                          # formatter_private.c3:0:36
	movq	-7096(%rbp), %rax               # 8-byte Reload
	.loc	1 492 36 epilogue_begin         # formatter_private.c3:492:36
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_485:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 36                          # formatter_private.c3:0:36
	movq	-7088(%rbp), %rax               # 8-byte Reload
	.loc	1 492 29                        # formatter_private.c3:492:29
	addq	-4824(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_486:
	.loc	1 493 3 is_stmt 1               # formatter_private.c3:493:3
	jmp	.LBB17_487
.LBB17_487:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_493 Depth 2
.Ltmp965:
	.loc	1 493 10 is_stmt 0              # formatter_private.c3:493:10
	movq	-4640(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	-2400(%rbp), %rcx
	movb	%al, -7097(%rbp)                # 1-byte Spill
	jae	.LBB17_489
# %bb.488:                              #   in Loop: Header=BB17_487 Depth=1
	.loc	1 493 19                        # formatter_private.c3:493:19
	cmpq	$0, -2056(%rbp)
	setg	%al
	movb	%al, -7097(%rbp)                # 1-byte Spill
.LBB17_489:                             #   in Loop: Header=BB17_487 Depth=1
	.loc	1 0 19                          # formatter_private.c3:0:19
	movb	-7097(%rbp), %al                # 1-byte Reload
	.loc	1 493 19                        # formatter_private.c3:493:19
	testb	$1, %al
	jne	.LBB17_490
	jmp	.LBB17_503
.LBB17_490:                             #   in Loop: Header=BB17_487 Depth=1
.Ltmp966:
	.loc	1 495 21 is_stmt 1              # formatter_private.c3:495:21
	movq	-4640(%rbp), %rax
	movq	%rax, -7112(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_704
# %bb.491:                              #   in Loop: Header=BB17_487 Depth=1
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7112(%rbp), %rax               # 8-byte Reload
	.loc	1 495 21                        # formatter_private.c3:495:21
	andq	$3, %rax
	movq	%rax, -7120(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_706
# %bb.492:                              #   in Loop: Header=BB17_487 Depth=1
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7112(%rbp), %rax               # 8-byte Reload
	.loc	1 495 21                        # formatter_private.c3:495:21
	movl	(%rax), %eax
                                        # kill: def $rax killed $eax
	.loc	1 495 24                        # formatter_private.c3:495:24
	movq	-2048(%rbp), %rdx
	.loc	1 495 30                        # formatter_private.c3:495:30
	addq	$9, %rdx
	movq	%rax, -4912(%rbp)
	movq	$0, -4904(%rbp)
	movq	-4912(%rbp), %rdi
	movq	-4904(%rbp), %rsi
	.loc	1 495 14                        # formatter_private.c3:495:14
	callq	std.io.fmt_u@PLT
	movq	%rax, -4832(%rbp)
.LBB17_493:                             #   Parent Loop BB17_487 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp967:
	.loc	1 496 11 is_stmt 1              # formatter_private.c3:496:11
	movq	-4832(%rbp), %rax
	cmpq	-2048(%rbp), %rax
	jbe	.LBB17_496
# %bb.494:                              #   in Loop: Header=BB17_493 Depth=2
	.loc	1 496 23 is_stmt 0              # formatter_private.c3:496:23
	movq	-4832(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -7128(%rbp)               # 8-byte Spill
	movq	%rax, -4832(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_707
# %bb.495:                              #   in Loop: Header=BB17_493 Depth=2
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-7128(%rbp), %rax               # 8-byte Reload
	.loc	1 496 21                        # formatter_private.c3:496:21
	movb	$48, (%rax)
	jmp	.LBB17_493
.Ltmp968:
.LBB17_496:                             #   in Loop: Header=BB17_487 Depth=1
	.loc	1 497 4 is_stmt 1               # formatter_private.c3:497:4
	movq	-4584(%rbp), %rax
	movq	%rax, -7160(%rbp)               # 8-byte Spill
	.loc	1 497 26 is_stmt 0              # formatter_private.c3:497:26
	movq	-4832(%rbp), %rax
	movq	%rax, -7152(%rbp)               # 8-byte Spill
	movq	$9, -4928(%rbp)
	movq	-2056(%rbp), %rax
	movq	%rax, -4936(%rbp)
.Ltmp969:
	.loc	8 393 16 is_stmt 1              # math.c3:393:16
	movq	-4928(%rbp), %rax
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movq	-4936(%rbp), %rcx
	movq	%rax, %rdx
	subq	%rcx, %rdx
	cmovlq	%rax, %rcx
	addq	$0, %rcx
	movq	%rcx, -7144(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -7136(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_709
.Ltmp970:
# %bb.497:                              #   in Loop: Header=BB17_487 Depth=1
	.loc	8 0 19                          # math.c3:0:19
	movq	-7152(%rbp), %rdx               # 8-byte Reload
	movq	-7144(%rbp), %rcx               # 8-byte Reload
	.loc	1 497 26 is_stmt 1              # formatter_private.c3:497:26
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 497 11 is_stmt 0              # formatter_private.c3:497:11
	leaq	-4984(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -7168(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_499
# %bb.498:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7168(%rbp), %rax               # 8-byte Reload
	.loc	1 497 11                        # formatter_private.c3:497:11
	movq	%rax, -4920(%rbp)
	jmp	.LBB17_500
.LBB17_499:                             #   in Loop: Header=BB17_487 Depth=1
	jmp	.LBB17_502
.LBB17_500:
	movq	-4920(%rbp), %rax
	movq	%rax, -7176(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.501:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7176(%rbp), %rax               # 8-byte Reload
	.loc	1 497 11 epilogue_begin         # formatter_private.c3:497:11
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_502:                             #   in Loop: Header=BB17_487 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7160(%rbp), %rax               # 8-byte Reload
	.loc	1 497 4                         # formatter_private.c3:497:4
	addq	-4984(%rbp), %rax
	movq	%rax, -4584(%rbp)
.Ltmp971:
	.loc	1 493 26 is_stmt 1              # formatter_private.c3:493:26
	movq	-4640(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -4640(%rbp)
	.loc	1 493 31 is_stmt 0              # formatter_private.c3:493:31
	movq	-2056(%rbp), %rax
	subq	$9, %rax
	movq	%rax, -2056(%rbp)
	jmp	.LBB17_487
.Ltmp972:
.LBB17_503:
	.loc	1 499 3 is_stmt 1               # formatter_private.c3:499:3
	movq	-4584(%rbp), %rax
	movq	%rax, -7200(%rbp)               # 8-byte Spill
	.loc	1 499 24 is_stmt 0              # formatter_private.c3:499:24
	movq	-2056(%rbp), %rax
	addq	$9, %rax
	movq	%rax, -7192(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -7184(%rbp)               # 8-byte Spill
.Ltmp973:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_513
# %bb.504:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7192(%rbp), %rax               # 8-byte Reload
	movq	-7184(%rbp), %rcx               # 8-byte Reload
	movq	%rcx, -824(%rbp)
	movb	$48, -825(%rbp)
	movq	%rax, -840(%rbp)
	movq	$9, -848(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-840(%rbp), %rax
	subq	-848(%rbp), %rax
	movq	%rax, -856(%rbp)
.Ltmp974:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -864(%rbp)
.LBB17_505:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-864(%rbp), %rax
	cmpq	-856(%rbp), %rax
	jge	.LBB17_509
# %bb.506:                              #   in Loop: Header=BB17_505 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-824(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-880(%rbp), %rdi
	movzbl	-825(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_508
# %bb.507:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7208(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -872(%rbp)
	movq	-872(%rbp), %rax
	movq	%rax, -7216(%rbp)               # 8-byte Spill
	jmp	.LBB17_514
.LBB17_508:                             #   in Loop: Header=BB17_505 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-864(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -864(%rbp)
	jmp	.LBB17_505
.Ltmp975:
.LBB17_509:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -884(%rbp)
	movq	-856(%rbp), %rax
	movq	%rax, -896(%rbp)
	movl	-884(%rbp), %eax
	movl	%eax, -900(%rbp)
	movq	-896(%rbp), %rax
	movq	%rax, -912(%rbp)
.Ltmp976:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-900(%rbp), %rax
	cmpq	-912(%rbp), %rax
	jle	.LBB17_511
.Ltmp977:
# %bb.510:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-884(%rbp), %rax
	movq	%rax, -7224(%rbp)               # 8-byte Spill
	jmp	.LBB17_512
.LBB17_511:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-896(%rbp), %rax
	movq	%rax, -7224(%rbp)               # 8-byte Spill
.LBB17_512:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7224(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5000(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7216(%rbp)               # 8-byte Spill
	jmp	.LBB17_514
.Ltmp978:
.LBB17_513:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp979:
.LBB17_514:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7216(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7232(%rbp)               # 8-byte Spill
	.loc	1 499 10 is_stmt 1              # formatter_private.c3:499:10
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_516
# %bb.515:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-7232(%rbp), %rax               # 8-byte Reload
	.loc	1 499 10                        # formatter_private.c3:499:10
	movq	%rax, -4992(%rbp)
	jmp	.LBB17_517
.LBB17_516:
	jmp	.LBB17_519
.LBB17_517:
	movq	-4992(%rbp), %rax
	movq	%rax, -7240(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.518:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7240(%rbp), %rax               # 8-byte Reload
	.loc	1 499 10 epilogue_begin         # formatter_private.c3:499:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_519:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7200(%rbp), %rax               # 8-byte Reload
	.loc	1 499 3                         # formatter_private.c3:499:3
	addq	-5000(%rbp), %rax
	movq	%rax, -4584(%rbp)
	jmp	.LBB17_580
.Ltmp980:
.LBB17_520:
	.loc	1 503 7 is_stmt 1               # formatter_private.c3:503:7
	movq	-2400(%rbp), %rax
	cmpq	-2392(%rbp), %rax
	ja	.LBB17_522
# %bb.521:
	.loc	1 503 19 is_stmt 0              # formatter_private.c3:503:19
	movq	-2392(%rbp), %rax
	.loc	1 503 23                        # formatter_private.c3:503:23
	addq	$4, %rax
	movq	%rax, -2400(%rbp)
.LBB17_522:
.Ltmp981:
	.loc	1 504 18 is_stmt 1              # formatter_private.c3:504:18
	movq	-2392(%rbp), %rax
	movq	%rax, -5008(%rbp)
.LBB17_523:                             # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_532 Depth 2
	.loc	1 504 21 is_stmt 0              # formatter_private.c3:504:21
	movq	-5008(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	-2400(%rbp), %rcx
	movb	%al, -7241(%rbp)                # 1-byte Spill
	jae	.LBB17_525
# %bb.524:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	1 504 30                        # formatter_private.c3:504:30
	cmpq	$0, -2056(%rbp)
	setge	%al
	movb	%al, -7241(%rbp)                # 1-byte Spill
.LBB17_525:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 0 30                          # formatter_private.c3:0:30
	movb	-7241(%rbp), %al                # 1-byte Reload
	.loc	1 504 30                        # formatter_private.c3:504:30
	testb	$1, %al
	jne	.LBB17_526
	jmp	.LBB17_557
.LBB17_526:                             #   in Loop: Header=BB17_523 Depth=1
.Ltmp982:
	.loc	1 506 21 is_stmt 1              # formatter_private.c3:506:21
	movq	-5008(%rbp), %rax
	movq	%rax, -7256(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_710
# %bb.527:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7256(%rbp), %rax               # 8-byte Reload
	.loc	1 506 21                        # formatter_private.c3:506:21
	andq	$3, %rax
	movq	%rax, -7264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB17_712
# %bb.528:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7256(%rbp), %rax               # 8-byte Reload
	.loc	1 506 21                        # formatter_private.c3:506:21
	movl	(%rax), %eax
                                        # kill: def $rax killed $eax
	.loc	1 506 24                        # formatter_private.c3:506:24
	movq	-2048(%rbp), %rdx
	.loc	1 506 30                        # formatter_private.c3:506:30
	addq	$9, %rdx
	movq	%rax, -5104(%rbp)
	movq	$0, -5096(%rbp)
	movq	-5104(%rbp), %rdi
	movq	-5096(%rbp), %rsi
	.loc	1 506 14                        # formatter_private.c3:506:14
	callq	std.io.fmt_u@PLT
	movq	%rax, -5016(%rbp)
	.loc	1 507 8 is_stmt 1               # formatter_private.c3:507:8
	movq	-5016(%rbp), %rax
	.loc	1 507 13 is_stmt 0              # formatter_private.c3:507:13
	movq	-2048(%rbp), %rcx
	.loc	1 507 19                        # formatter_private.c3:507:19
	addq	$9, %rcx
	.loc	1 507 8                         # formatter_private.c3:507:8
	cmpq	%rcx, %rax
	jne	.LBB17_530
# %bb.529:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	1 507 25                        # formatter_private.c3:507:25
	movq	-5016(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -5016(%rbp)
	.loc	1 507 28                        # formatter_private.c3:507:28
	movb	$48, -1(%rax)
.LBB17_530:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 508 8 is_stmt 1               # formatter_private.c3:508:8
	movq	-5008(%rbp), %rax
	cmpq	-2392(%rbp), %rax
	je	.LBB17_535
# %bb.531:                              #   in Loop: Header=BB17_523 Depth=1
.Ltmp983:
	.loc	1 510 5                         # formatter_private.c3:510:5
	jmp	.LBB17_532
.LBB17_532:                             #   Parent Loop BB17_523 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
.Ltmp984:
	.loc	1 510 12 is_stmt 0              # formatter_private.c3:510:12
	movq	-5016(%rbp), %rax
	cmpq	-2048(%rbp), %rax
	jbe	.LBB17_534
# %bb.533:                              #   in Loop: Header=BB17_532 Depth=2
	.loc	1 510 24                        # formatter_private.c3:510:24
	movq	-5016(%rbp), %rax
	movq	%rax, %rcx
	addq	$-1, %rcx
	movq	%rcx, -5016(%rbp)
	.loc	1 510 27                        # formatter_private.c3:510:27
	movb	$48, -1(%rax)
	jmp	.LBB17_532
.LBB17_534:                             #   in Loop: Header=BB17_523 Depth=1
	jmp	.LBB17_550
.Ltmp985:
.LBB17_535:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 514 5 is_stmt 1               # formatter_private.c3:514:5
	movq	-4584(%rbp), %rax
	movq	%rax, -7280(%rbp)               # 8-byte Spill
	.loc	1 514 21 is_stmt 0              # formatter_private.c3:514:21
	movq	-5016(%rbp), %rax
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -5016(%rbp)
	movq	-1112(%rbp), %rsi
	.loc	1 514 12                        # formatter_private.c3:514:12
	leaq	-5120(%rbp), %rdi
	movzbl	(%rax), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_537
# %bb.536:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-7272(%rbp), %rax               # 8-byte Reload
	.loc	1 514 12                        # formatter_private.c3:514:12
	movq	%rax, -5112(%rbp)
	jmp	.LBB17_538
.LBB17_537:                             #   in Loop: Header=BB17_523 Depth=1
	jmp	.LBB17_540
.LBB17_538:
	movq	-5112(%rbp), %rax
	movq	%rax, -7288(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.539:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-7288(%rbp), %rax               # 8-byte Reload
	.loc	1 514 12 epilogue_begin         # formatter_private.c3:514:12
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_540:                             #   in Loop: Header=BB17_523 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-7280(%rbp), %rax               # 8-byte Reload
	.loc	1 514 5                         # formatter_private.c3:514:5
	addq	-5120(%rbp), %rax
	movq	%rax, -4584(%rbp)
	.loc	1 515 9 is_stmt 1               # formatter_private.c3:515:9
	movb	$1, %al
	cmpq	$0, -2056(%rbp)
	movb	%al, -7289(%rbp)                # 1-byte Spill
	jg	.LBB17_542
# %bb.541:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	1 515 18 is_stmt 0              # formatter_private.c3:515:18
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -7289(%rbp)                # 1-byte Spill
.LBB17_542:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movb	-7289(%rbp), %al                # 1-byte Reload
	.loc	1 515 18                        # formatter_private.c3:515:18
	testb	$1, %al
	jne	.LBB17_543
	jmp	.LBB17_549
.LBB17_543:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 515 35                        # formatter_private.c3:515:35
	movq	-4584(%rbp), %rax
	movq	%rax, -7312(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rsi
	.loc	1 515 42                        # formatter_private.c3:515:42
	leaq	-5136(%rbp), %rdi
	movl	$46, %edx
	callq	std.io.Formatter.out
	movq	%rax, -7304(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_545
# %bb.544:
	.loc	1 0 42                          # formatter_private.c3:0:42
	movq	-7304(%rbp), %rax               # 8-byte Reload
	.loc	1 515 42                        # formatter_private.c3:515:42
	movq	%rax, -5128(%rbp)
	jmp	.LBB17_546
.LBB17_545:                             #   in Loop: Header=BB17_523 Depth=1
	jmp	.LBB17_548
.LBB17_546:
	movq	-5128(%rbp), %rax
	movq	%rax, -7320(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.547:
	.loc	1 0 42                          # formatter_private.c3:0:42
	movq	-7320(%rbp), %rax               # 8-byte Reload
	.loc	1 515 42 epilogue_begin         # formatter_private.c3:515:42
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_548:                             #   in Loop: Header=BB17_523 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 42                          # formatter_private.c3:0:42
	movq	-7312(%rbp), %rax               # 8-byte Reload
	.loc	1 515 35                        # formatter_private.c3:515:35
	addq	-5136(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_549:                             #   in Loop: Header=BB17_523 Depth=1
	jmp	.LBB17_550
.Ltmp986:
.LBB17_550:                             #   in Loop: Header=BB17_523 Depth=1
	.loc	1 517 4 is_stmt 1               # formatter_private.c3:517:4
	movq	-4584(%rbp), %rax
	movq	%rax, -7352(%rbp)               # 8-byte Spill
	.loc	1 517 26 is_stmt 0              # formatter_private.c3:517:26
	movq	-5016(%rbp), %rax
	movq	%rax, -7344(%rbp)               # 8-byte Spill
	.loc	1 517 39                        # formatter_private.c3:517:39
	movq	-2048(%rbp), %rax
	.loc	1 517 45                        # formatter_private.c3:517:45
	addq	$9, %rax
	.loc	1 517 49                        # formatter_private.c3:517:49
	movq	-5016(%rbp), %rcx
	.loc	1 517 39                        # formatter_private.c3:517:39
	subq	%rcx, %rax
	sarq	$0, %rax
	movq	%rax, -5152(%rbp)
	movq	-2056(%rbp), %rax
	movq	%rax, -5160(%rbp)
.Ltmp987:
	.loc	8 393 16 is_stmt 1              # math.c3:393:16
	movq	-5152(%rbp), %rax
	.loc	8 393 19 is_stmt 0              # math.c3:393:19
	movq	-5160(%rbp), %rcx
	movq	%rax, %rdx
	subq	%rcx, %rdx
	cmovlq	%rax, %rcx
	addq	$0, %rcx
	movq	%rcx, -7336(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -7328(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_713
.Ltmp988:
# %bb.551:                              #   in Loop: Header=BB17_523 Depth=1
	.loc	8 0 19                          # math.c3:0:19
	movq	-7344(%rbp), %rdx               # 8-byte Reload
	movq	-7336(%rbp), %rcx               # 8-byte Reload
	.loc	1 517 26 is_stmt 1              # formatter_private.c3:517:26
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 517 11 is_stmt 0              # formatter_private.c3:517:11
	leaq	-5208(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -7360(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_553
# %bb.552:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7360(%rbp), %rax               # 8-byte Reload
	.loc	1 517 11                        # formatter_private.c3:517:11
	movq	%rax, -5144(%rbp)
	jmp	.LBB17_554
.LBB17_553:                             #   in Loop: Header=BB17_523 Depth=1
	jmp	.LBB17_556
.LBB17_554:
	movq	-5144(%rbp), %rax
	movq	%rax, -7368(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.555:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7368(%rbp), %rax               # 8-byte Reload
	.loc	1 517 11 epilogue_begin         # formatter_private.c3:517:11
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_556:                             #   in Loop: Header=BB17_523 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-7352(%rbp), %rax               # 8-byte Reload
	.loc	1 517 4                         # formatter_private.c3:517:4
	addq	-5208(%rbp), %rax
	movq	%rax, -4584(%rbp)
	.loc	1 518 4 is_stmt 1               # formatter_private.c3:518:4
	movq	-2056(%rbp), %rax
	.loc	1 518 9 is_stmt 0               # formatter_private.c3:518:9
	movq	-2048(%rbp), %rcx
	.loc	1 518 15                        # formatter_private.c3:518:15
	addq	$9, %rcx
	.loc	1 518 19                        # formatter_private.c3:518:19
	movq	-5016(%rbp), %rdx
	.loc	1 518 9                         # formatter_private.c3:518:9
	subq	%rdx, %rcx
	sarq	$0, %rcx
	.loc	1 518 4                         # formatter_private.c3:518:4
	subq	%rcx, %rax
	movq	%rax, -2056(%rbp)
.Ltmp989:
	.loc	1 504 38 is_stmt 1              # formatter_private.c3:504:38
	movq	-5008(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -5008(%rbp)
	jmp	.LBB17_523
.Ltmp990:
.LBB17_557:
	.loc	1 520 3                         # formatter_private.c3:520:3
	movq	-4584(%rbp), %rax
	movq	%rax, -7392(%rbp)               # 8-byte Spill
	.loc	1 520 24 is_stmt 0              # formatter_private.c3:520:24
	movq	-2056(%rbp), %rax
	addq	$18, %rax
	movq	%rax, -7384(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -7376(%rbp)               # 8-byte Spill
.Ltmp991:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_567
# %bb.558:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7384(%rbp), %rax               # 8-byte Reload
	movq	-7376(%rbp), %rcx               # 8-byte Reload
	movq	%rcx, -920(%rbp)
	movb	$48, -921(%rbp)
	movq	%rax, -936(%rbp)
	movq	$18, -944(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-936(%rbp), %rax
	subq	-944(%rbp), %rax
	movq	%rax, -952(%rbp)
.Ltmp992:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -960(%rbp)
.LBB17_559:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-960(%rbp), %rax
	cmpq	-952(%rbp), %rax
	jge	.LBB17_563
# %bb.560:                              #   in Loop: Header=BB17_559 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-920(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-976(%rbp), %rdi
	movzbl	-921(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7400(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_562
# %bb.561:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7400(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -968(%rbp)
	movq	-968(%rbp), %rax
	movq	%rax, -7408(%rbp)               # 8-byte Spill
	jmp	.LBB17_568
.LBB17_562:                             #   in Loop: Header=BB17_559 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-960(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -960(%rbp)
	jmp	.LBB17_559
.Ltmp993:
.LBB17_563:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -980(%rbp)
	movq	-952(%rbp), %rax
	movq	%rax, -992(%rbp)
	movl	-980(%rbp), %eax
	movl	%eax, -996(%rbp)
	movq	-992(%rbp), %rax
	movq	%rax, -1008(%rbp)
.Ltmp994:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-996(%rbp), %rax
	cmpq	-1008(%rbp), %rax
	jle	.LBB17_565
.Ltmp995:
# %bb.564:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-980(%rbp), %rax
	movq	%rax, -7416(%rbp)               # 8-byte Spill
	jmp	.LBB17_566
.LBB17_565:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-992(%rbp), %rax
	movq	%rax, -7416(%rbp)               # 8-byte Spill
.LBB17_566:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7416(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5224(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7408(%rbp)               # 8-byte Spill
	jmp	.LBB17_568
.Ltmp996:
.LBB17_567:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp997:
.LBB17_568:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7408(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7424(%rbp)               # 8-byte Spill
	.loc	1 520 10 is_stmt 1              # formatter_private.c3:520:10
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_570
# %bb.569:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-7424(%rbp), %rax               # 8-byte Reload
	.loc	1 520 10                        # formatter_private.c3:520:10
	movq	%rax, -5216(%rbp)
	jmp	.LBB17_571
.LBB17_570:
	jmp	.LBB17_573
.LBB17_571:
	movq	-5216(%rbp), %rax
	movq	%rax, -7432(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.572:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7432(%rbp), %rax               # 8-byte Reload
	.loc	1 520 10 epilogue_begin         # formatter_private.c3:520:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_573:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7392(%rbp), %rax               # 8-byte Reload
	.loc	1 520 3                         # formatter_private.c3:520:3
	addq	-5224(%rbp), %rax
	movq	%rax, -4584(%rbp)
	.loc	1 521 3 is_stmt 1               # formatter_private.c3:521:3
	movq	-4584(%rbp), %rax
	movq	%rax, -7464(%rbp)               # 8-byte Spill
	.loc	1 521 25 is_stmt 0              # formatter_private.c3:521:25
	movq	-4560(%rbp), %rax
	movq	%rax, -7456(%rbp)               # 8-byte Spill
	.loc	1 521 31                        # formatter_private.c3:521:31
	movq	-2040(%rbp), %rcx
	.loc	1 521 38                        # formatter_private.c3:521:38
	movq	-4560(%rbp), %rax
	.loc	1 521 31                        # formatter_private.c3:521:31
	subq	%rax, %rcx
	sarq	$0, %rcx
	addq	$0, %rcx
	movq	%rcx, -7448(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	setg	%al
	subq	$0, %rcx
	movq	%rcx, -7440(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB17_714
# %bb.574:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movq	-7456(%rbp), %rdx               # 8-byte Reload
	movq	-7448(%rbp), %rcx               # 8-byte Reload
	.loc	1 521 25                        # formatter_private.c3:521:25
	subq	$0, %rcx
	movq	-1112(%rbp), %rsi
	.loc	1 521 10                        # formatter_private.c3:521:10
	leaq	-5288(%rbp), %rdi
	callq	std.io.Formatter.out_chars@PLT
	movq	%rax, -7472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_576
# %bb.575:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7472(%rbp), %rax               # 8-byte Reload
	.loc	1 521 10                        # formatter_private.c3:521:10
	movq	%rax, -5232(%rbp)
	jmp	.LBB17_577
.LBB17_576:
	jmp	.LBB17_579
.LBB17_577:
	movq	-5232(%rbp), %rax
	movq	%rax, -7480(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.578:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7480(%rbp), %rax               # 8-byte Reload
	.loc	1 521 10 epilogue_begin         # formatter_private.c3:521:10
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_579:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7464(%rbp), %rax               # 8-byte Reload
	.loc	1 521 3                         # formatter_private.c3:521:3
	addq	-5288(%rbp), %rax
	movq	%rax, -4584(%rbp)
.Ltmp998:
.LBB17_580:
	.loc	1 524 6 is_stmt 1               # formatter_private.c3:524:6
	movq	-1112(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB17_598
# %bb.581:
	.loc	1 524 23 is_stmt 0              # formatter_private.c3:524:23
	movq	-4584(%rbp), %rax
	movq	%rax, -7512(%rbp)               # 8-byte Spill
	.loc	1 524 44                        # formatter_private.c3:524:44
	movq	-1112(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7504(%rbp)               # 8-byte Spill
	.loc	1 524 56                        # formatter_private.c3:524:56
	movq	-1736(%rbp), %rax
	.loc	1 524 61                        # formatter_private.c3:524:61
	movslq	-4548(%rbp), %rcx
	.loc	1 524 56                        # formatter_private.c3:524:56
	addq	%rcx, %rax
	movq	%rax, -7496(%rbp)               # 8-byte Spill
	movq	-1112(%rbp), %rax
	movq	%rax, -7488(%rbp)               # 8-byte Spill
.Ltmp999:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_591
# %bb.582:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-7496(%rbp), %rax               # 8-byte Reload
	movq	-7504(%rbp), %rcx               # 8-byte Reload
	movq	-7488(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1016(%rbp)
	movb	$32, -1017(%rbp)
	movq	%rcx, -1032(%rbp)
	movq	%rax, -1040(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-1032(%rbp), %rax
	subq	-1040(%rbp), %rax
	movq	%rax, -1048(%rbp)
.Ltmp1000:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -1056(%rbp)
.LBB17_583:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-1056(%rbp), %rax
	cmpq	-1048(%rbp), %rax
	jge	.LBB17_587
# %bb.584:                              #   in Loop: Header=BB17_583 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-1016(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-1072(%rbp), %rdi
	movzbl	-1017(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -7520(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_586
# %bb.585:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-7520(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -1064(%rbp)
	movq	-1064(%rbp), %rax
	movq	%rax, -7528(%rbp)               # 8-byte Spill
	jmp	.LBB17_592
.LBB17_586:                             #   in Loop: Header=BB17_583 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-1056(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -1056(%rbp)
	jmp	.LBB17_583
.Ltmp1001:
.LBB17_587:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -1076(%rbp)
	movq	-1048(%rbp), %rax
	movq	%rax, -1088(%rbp)
	movl	-1076(%rbp), %eax
	movl	%eax, -1092(%rbp)
	movq	-1088(%rbp), %rax
	movq	%rax, -1104(%rbp)
.Ltmp1002:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-1092(%rbp), %rax
	cmpq	-1104(%rbp), %rax
	jle	.LBB17_589
.Ltmp1003:
# %bb.588:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-1076(%rbp), %rax
	movq	%rax, -7536(%rbp)               # 8-byte Spill
	jmp	.LBB17_590
.LBB17_589:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-1088(%rbp), %rax
	movq	%rax, -7536(%rbp)               # 8-byte Spill
.LBB17_590:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-7536(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -5304(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -7528(%rbp)               # 8-byte Spill
	jmp	.LBB17_592
.Ltmp1004:
.LBB17_591:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp1005:
.LBB17_592:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-7528(%rbp), %rax               # 8-byte Reload
	movq	%rax, -7544(%rbp)               # 8-byte Spill
	.loc	1 524 30 is_stmt 1              # formatter_private.c3:524:30
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB17_594
# %bb.593:
	.loc	1 0 30 is_stmt 0                # formatter_private.c3:0:30
	movq	-7544(%rbp), %rax               # 8-byte Reload
	.loc	1 524 30                        # formatter_private.c3:524:30
	movq	%rax, -5296(%rbp)
	jmp	.LBB17_595
.LBB17_594:
	jmp	.LBB17_597
.LBB17_595:
	movq	-5296(%rbp), %rax
	movq	%rax, -7552(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.596:
	.loc	1 0 30                          # formatter_private.c3:0:30
	movq	-7552(%rbp), %rax               # 8-byte Reload
	.loc	1 524 30 epilogue_begin         # formatter_private.c3:524:30
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_597:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 30                          # formatter_private.c3:0:30
	movq	-7512(%rbp), %rax               # 8-byte Reload
	.loc	1 524 23                        # formatter_private.c3:524:23
	addq	-5304(%rbp), %rax
	movq	%rax, -4584(%rbp)
.LBB17_598:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-5344(%rbp), %rax               # 8-byte Reload
	.loc	1 526 9 is_stmt 1               # formatter_private.c3:526:9
	movq	-4584(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.599:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 526 9 epilogue_begin is_stmt 0 # formatter_private.c3:526:9
	addq	$7872, %rsp                     # imm = 0x1EC0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_600:
	.cfi_def_cfa %rbp, 16
	.loc	1 211 31 is_stmt 1              # formatter_private.c3:211:31
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7560(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.601:
	.loc	1 0 31 is_stmt 0                # formatter_private.c3:0:31
	movq	-7560(%rbp), %rax               # 8-byte Reload
	.loc	1 211 31                        # formatter_private.c3:211:31
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$211, (%rsp)
	callq	*%rax
.LBB17_602:
.Ltmp1006:
	.loc	6 293 11 is_stmt 1              # builtin.c3:293:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7568(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.603:
	.loc	6 0 11 is_stmt 0                # builtin.c3:0:11
	movq	-7568(%rbp), %rax               # 8-byte Reload
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.135(%rip), %rdi
	movl	$54, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$293, (%rsp)                    # imm = 0x125
	callq	*%rax
.LBB17_604:
	.loc	6 0 11                          # builtin.c3:0:11
	movq	-5352(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1664(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1672(%rbp)
	movq	%rax, -1704(%rbp)
	leaq	-1664(%rbp), %rcx
	movq	%rcx, -1712(%rbp)
	movq	%rax, -1688(%rbp)
	leaq	-1672(%rbp), %rax
	movq	%rax, -1696(%rbp)
	leaq	-1712(%rbp), %rax
	movq	%rax, -1728(%rbp)
	movq	$2, -1720(%rbp)
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-1728(%rbp), %rax
	movl	$293, (%rsp)                    # imm = 0x125
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1007:
.LBB17_605:
	.loc	6 293 11                        # builtin.c3:293:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7576(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.606:
	.loc	6 0 11                          # builtin.c3:0:11
	movq	-7576(%rbp), %rax               # 8-byte Reload
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.135(%rip), %rdi
	movl	$54, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$293, (%rsp)                    # imm = 0x125
	callq	*%rax
.LBB17_607:
	.loc	6 0 11                          # builtin.c3:0:11
	movq	-5368(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1760(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1768(%rbp)
	movq	%rax, -1800(%rbp)
	leaq	-1760(%rbp), %rcx
	movq	%rcx, -1808(%rbp)
	movq	%rax, -1784(%rbp)
	leaq	-1768(%rbp), %rax
	movq	%rax, -1792(%rbp)
	leaq	-1808(%rbp), %rax
	movq	%rax, -1824(%rbp)
	movq	$2, -1816(%rbp)
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-1824(%rbp), %rax
	movl	$293, (%rsp)                    # imm = 0x125
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1008:
.LBB17_608:
	.loc	6 293 11                        # builtin.c3:293:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7584(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.609:
	.loc	6 0 11                          # builtin.c3:0:11
	movq	-7584(%rbp), %rax               # 8-byte Reload
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.135(%rip), %rdi
	movl	$54, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$293, (%rsp)                    # imm = 0x125
	callq	*%rax
.LBB17_610:
	.loc	6 0 11                          # builtin.c3:0:11
	movq	-5448(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1888(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1896(%rbp)
	movq	%rax, -1928(%rbp)
	leaq	-1888(%rbp), %rcx
	movq	%rcx, -1936(%rbp)
	movq	%rax, -1912(%rbp)
	leaq	-1896(%rbp), %rax
	movq	%rax, -1920(%rbp)
	leaq	-1936(%rbp), %rax
	movq	%rax, -1952(%rbp)
	movq	$2, -1944(%rbp)
	.loc	6 293 11                        # builtin.c3:293:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-1952(%rbp), %rax
	movl	$293, (%rsp)                    # imm = 0x125
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1009:
.LBB17_611:
	.loc	1 272 22 is_stmt 1              # formatter_private.c3:272:22
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7592(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.612:
	.loc	1 0 22 is_stmt 0                # formatter_private.c3:0:22
	movq	-7592(%rbp), %rax               # 8-byte Reload
	.loc	1 272 22                        # formatter_private.c3:272:22
	leaq	.panic_msg.140(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$272, (%rsp)                    # imm = 0x110
	callq	*%rax
.LBB17_613:
	.loc	1 273 4 is_stmt 1               # formatter_private.c3:273:4
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7600(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.614:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-7600(%rbp), %rax               # 8-byte Reload
	.loc	1 273 4                         # formatter_private.c3:273:4
	leaq	.panic_msg.140(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$273, (%rsp)                    # imm = 0x111
	callq	*%rax
.LBB17_615:
	.loc	1 274 4 is_stmt 1               # formatter_private.c3:274:4
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7608(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.616:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-7608(%rbp), %rax               # 8-byte Reload
	.loc	1 274 4                         # formatter_private.c3:274:4
	leaq	.panic_msg.140(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$274, (%rsp)                    # imm = 0x112
	callq	*%rax
.LBB17_617:
.Ltmp1010:
	.loc	1 280 5 is_stmt 1               # formatter_private.c3:280:5
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7616(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.618:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movq	-7616(%rbp), %rax               # 8-byte Reload
	.loc	1 280 5                         # formatter_private.c3:280:5
	leaq	.panic_msg.141(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*%rax
.LBB17_619:
	.loc	1 282 58 is_stmt 1              # formatter_private.c3:282:58
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7624(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.620:
	.loc	1 0 58 is_stmt 0                # formatter_private.c3:0:58
	movq	-7624(%rbp), %rax               # 8-byte Reload
	.loc	1 282 58                        # formatter_private.c3:282:58
	leaq	.panic_msg.141(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$282, (%rsp)                    # imm = 0x11A
	callq	*%rax
.Ltmp1011:
.LBB17_621:
	.loc	1 0 58                          # formatter_private.c3:0:58
	movq	-5920(%rbp), %rax               # 8-byte Reload
	movq	%rax, -2232(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -2248(%rbp)
	leaq	-2232(%rbp), %rax
	movq	%rax, -2256(%rbp)
	leaq	-2256(%rbp), %rax
	movq	%rax, -2272(%rbp)
	movq	$1, -2264(%rbp)
	.loc	1 295 25 is_stmt 1              # formatter_private.c3:295:25
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2272(%rbp), %rax
	movl	$295, (%rsp)                    # imm = 0x127
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_622:
	.loc	1 0 25 is_stmt 0                # formatter_private.c3:0:25
	movq	-6032(%rbp), %rax               # 8-byte Reload
	movq	%rax, -2312(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -2328(%rbp)
	leaq	-2312(%rbp), %rax
	movq	%rax, -2336(%rbp)
	leaq	-2336(%rbp), %rax
	movq	%rax, -2352(%rbp)
	movq	$1, -2344(%rbp)
	.loc	1 297 25 is_stmt 1              # formatter_private.c3:297:25
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2352(%rbp), %rax
	movl	$297, (%rsp)                    # imm = 0x129
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1012:
.LBB17_623:
	.loc	1 0 25 is_stmt 0                # formatter_private.c3:0:25
	movq	-6152(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2424(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2432(%rbp)
	movq	%rax, -2456(%rbp)
	leaq	-2424(%rbp), %rcx
	movq	%rcx, -2464(%rbp)
	movq	%rax, -2440(%rbp)
	leaq	-2432(%rbp), %rax
	movq	%rax, -2448(%rbp)
	leaq	-2464(%rbp), %rax
	movq	%rax, -2480(%rbp)
	movq	$2, -2472(%rbp)
.Ltmp1013:
	.loc	1 320 12 is_stmt 1              # formatter_private.c3:320:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2480(%rbp), %rax
	movl	$320, (%rsp)                    # imm = 0x140
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1014:
.LBB17_624:
	.loc	1 330 22                        # formatter_private.c3:330:22
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7632(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.625:
	.loc	1 0 22 is_stmt 0                # formatter_private.c3:0:22
	movq	-7632(%rbp), %rax               # 8-byte Reload
	.loc	1 330 22                        # formatter_private.c3:330:22
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$330, (%rsp)                    # imm = 0x14A
	callq	*%rax
.LBB17_626:
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6184(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2520(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2528(%rbp)
	movq	%rax, -2552(%rbp)
	leaq	-2520(%rbp), %rcx
	movq	%rcx, -2560(%rbp)
	movq	%rax, -2536(%rbp)
	leaq	-2528(%rbp), %rax
	movq	%rax, -2544(%rbp)
	leaq	-2560(%rbp), %rax
	movq	%rax, -2576(%rbp)
	movq	$2, -2568(%rbp)
	.loc	1 330 22                        # formatter_private.c3:330:22
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2576(%rbp), %rax
	movl	$330, (%rsp)                    # imm = 0x14A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_627:
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-6192(%rbp), %rax               # 8-byte Reload
	movq	%rax, -2584(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rax, -2600(%rbp)
	leaq	-2584(%rbp), %rax
	movq	%rax, -2608(%rbp)
	leaq	-2608(%rbp), %rax
	movq	%rax, -2624(%rbp)
	movq	$1, -2616(%rbp)
	.loc	1 330 14                        # formatter_private.c3:330:14
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2624(%rbp), %rax
	movl	$330, (%rsp)                    # imm = 0x14A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_628:
	.loc	1 331 5 is_stmt 1               # formatter_private.c3:331:5
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7640(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.629:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movq	-7640(%rbp), %rax               # 8-byte Reload
	.loc	1 331 5                         # formatter_private.c3:331:5
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$331, (%rsp)                    # imm = 0x14B
	callq	*%rax
.LBB17_630:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6224(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2632(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2640(%rbp)
	movq	%rax, -2664(%rbp)
	leaq	-2632(%rbp), %rcx
	movq	%rcx, -2672(%rbp)
	movq	%rax, -2648(%rbp)
	leaq	-2640(%rbp), %rax
	movq	%rax, -2656(%rbp)
	leaq	-2672(%rbp), %rax
	movq	%rax, -2688(%rbp)
	movq	$2, -2680(%rbp)
	.loc	1 331 5                         # formatter_private.c3:331:5
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2688(%rbp), %rax
	movl	$331, (%rsp)                    # imm = 0x14B
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1015:
.LBB17_631:
	.loc	1 334 15 is_stmt 1              # formatter_private.c3:334:15
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7648(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.632:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7648(%rbp), %rax               # 8-byte Reload
	.loc	1 334 15                        # formatter_private.c3:334:15
	leaq	.panic_msg.146(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$334, (%rsp)                    # imm = 0x14E
	callq	*%rax
.LBB17_633:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-6240(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2696(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2704(%rbp)
	movq	%rax, -2728(%rbp)
	leaq	-2696(%rbp), %rcx
	movq	%rcx, -2736(%rbp)
	movq	%rax, -2712(%rbp)
	leaq	-2704(%rbp), %rax
	movq	%rax, -2720(%rbp)
	leaq	-2736(%rbp), %rax
	movq	%rax, -2752(%rbp)
	movq	$2, -2744(%rbp)
	.loc	1 334 15                        # formatter_private.c3:334:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2752(%rbp), %rax
	movl	$334, (%rsp)                    # imm = 0x14E
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_634:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-6256(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2760(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2768(%rbp)
	movq	%rax, -2792(%rbp)
	leaq	-2760(%rbp), %rcx
	movq	%rcx, -2800(%rbp)
	movq	%rax, -2776(%rbp)
	leaq	-2768(%rbp), %rax
	movq	%rax, -2784(%rbp)
	leaq	-2800(%rbp), %rax
	movq	%rax, -2816(%rbp)
	movq	$2, -2808(%rbp)
.Ltmp1016:
	.loc	1 335 20 is_stmt 1              # formatter_private.c3:335:20
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2816(%rbp), %rax
	movl	$335, (%rsp)                    # imm = 0x14F
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1017:
.LBB17_635:
	.loc	1 348 15                        # formatter_private.c3:348:15
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7656(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.636:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-7656(%rbp), %rax               # 8-byte Reload
	.loc	1 348 15                        # formatter_private.c3:348:15
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$348, (%rsp)                    # imm = 0x15C
	callq	*%rax
.LBB17_637:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-6280(%rbp), %rcx               # 8-byte Reload
	movq	$4, -2872(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -2880(%rbp)
	movq	%rax, -2904(%rbp)
	leaq	-2872(%rbp), %rcx
	movq	%rcx, -2912(%rbp)
	movq	%rax, -2888(%rbp)
	leaq	-2880(%rbp), %rax
	movq	%rax, -2896(%rbp)
	leaq	-2912(%rbp), %rax
	movq	%rax, -2928(%rbp)
	movq	$2, -2920(%rbp)
	.loc	1 348 15                        # formatter_private.c3:348:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2928(%rbp), %rax
	movl	$348, (%rsp)                    # imm = 0x15C
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_638:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movl	-6284(%rbp), %eax               # 4-byte Reload
	movl	%eax, -2932(%rbp)
	movq	($ct.int)@GOTPCREL(%rip), %rax
	movq	%rax, -2952(%rbp)
	leaq	-2932(%rbp), %rax
	movq	%rax, -2960(%rbp)
	leaq	-2960(%rbp), %rax
	movq	%rax, -2976(%rbp)
	movq	$1, -2968(%rbp)
	.loc	1 348 21                        # formatter_private.c3:348:21
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-2976(%rbp), %rax
	movl	$348, (%rsp)                    # imm = 0x15C
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_639:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movl	-6284(%rbp), %eax               # 4-byte Reload
	movl	%eax, -2980(%rbp)
	movq	($ct.int)@GOTPCREL(%rip), %rax
	movq	%rax, -3000(%rbp)
	leaq	-2980(%rbp), %rax
	movq	%rax, -3008(%rbp)
	leaq	-3008(%rbp), %rax
	movq	%rax, -3024(%rbp)
	movq	$1, -3016(%rbp)
	.loc	1 348 21                        # formatter_private.c3:348:21
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3024(%rbp), %rax
	movl	$348, (%rsp)                    # imm = 0x15C
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_640:
	.loc	1 349 11 is_stmt 1              # formatter_private.c3:349:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7664(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.641:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-7664(%rbp), %rax               # 8-byte Reload
	.loc	1 349 11                        # formatter_private.c3:349:11
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$349, (%rsp)                    # imm = 0x15D
	callq	*%rax
.LBB17_642:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6304(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3032(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3040(%rbp)
	movq	%rax, -3064(%rbp)
	leaq	-3032(%rbp), %rcx
	movq	%rcx, -3072(%rbp)
	movq	%rax, -3048(%rbp)
	leaq	-3040(%rbp), %rax
	movq	%rax, -3056(%rbp)
	leaq	-3072(%rbp), %rax
	movq	%rax, -3088(%rbp)
	movq	$2, -3080(%rbp)
	.loc	1 349 11                        # formatter_private.c3:349:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3088(%rbp), %rax
	movl	$349, (%rsp)                    # imm = 0x15D
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_643:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movl	-6308(%rbp), %eax               # 4-byte Reload
	movl	%eax, -3092(%rbp)
	movq	($ct.uint)@GOTPCREL(%rip), %rax
	movq	%rax, -3112(%rbp)
	leaq	-3092(%rbp), %rax
	movq	%rax, -3120(%rbp)
	leaq	-3120(%rbp), %rax
	movq	%rax, -3136(%rbp)
	movq	$1, -3128(%rbp)
	.loc	1 349 10                        # formatter_private.c3:349:10
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3136(%rbp), %rax
	movl	$349, (%rsp)                    # imm = 0x15D
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_644:
	.loc	1 349 5                         # formatter_private.c3:349:5
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7672(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.645:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-7672(%rbp), %rax               # 8-byte Reload
	.loc	1 349 5                         # formatter_private.c3:349:5
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$349, (%rsp)                    # imm = 0x15D
	callq	*%rax
.LBB17_646:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6336(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3144(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3152(%rbp)
	movq	%rax, -3176(%rbp)
	leaq	-3144(%rbp), %rcx
	movq	%rcx, -3184(%rbp)
	movq	%rax, -3160(%rbp)
	leaq	-3152(%rbp), %rax
	movq	%rax, -3168(%rbp)
	leaq	-3184(%rbp), %rax
	movq	%rax, -3200(%rbp)
	movq	$2, -3192(%rbp)
	.loc	1 349 5                         # formatter_private.c3:349:5
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3200(%rbp), %rax
	movl	$349, (%rsp)                    # imm = 0x15D
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_647:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movl	-6340(%rbp), %eax               # 4-byte Reload
	movl	%eax, -3204(%rbp)
	movq	($ct.int)@GOTPCREL(%rip), %rax
	movq	%rax, -3224(%rbp)
	leaq	-3204(%rbp), %rax
	movq	%rax, -3232(%rbp)
	leaq	-3232(%rbp), %rax
	movq	%rax, -3248(%rbp)
	movq	$1, -3240(%rbp)
	.loc	1 350 13 is_stmt 1              # formatter_private.c3:350:13
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3248(%rbp), %rax
	movl	$350, (%rsp)                    # imm = 0x15E
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_648:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movl	-6340(%rbp), %eax               # 4-byte Reload
	movl	%eax, -3252(%rbp)
	movq	($ct.int)@GOTPCREL(%rip), %rax
	movq	%rax, -3272(%rbp)
	leaq	-3252(%rbp), %rax
	movq	%rax, -3280(%rbp)
	leaq	-3280(%rbp), %rax
	movq	%rax, -3296(%rbp)
	movq	$1, -3288(%rbp)
	.loc	1 350 13                        # formatter_private.c3:350:13
	leaq	.panic_msg.145(%rip), %rdi
	movl	$35, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3296(%rbp), %rax
	movl	$350, (%rsp)                    # imm = 0x15E
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1018:
.LBB17_649:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6352(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3304(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3312(%rbp)
	movq	%rax, -3336(%rbp)
	leaq	-3304(%rbp), %rcx
	movq	%rcx, -3344(%rbp)
	movq	%rax, -3320(%rbp)
	leaq	-3312(%rbp), %rax
	movq	%rax, -3328(%rbp)
	leaq	-3344(%rbp), %rax
	movq	%rax, -3360(%rbp)
	movq	$2, -3352(%rbp)
	.loc	1 352 8 is_stmt 1               # formatter_private.c3:352:8
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3360(%rbp), %rax
	movl	$352, (%rsp)                    # imm = 0x160
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_650:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-6368(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3368(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3376(%rbp)
	movq	%rax, -3400(%rbp)
	leaq	-3368(%rbp), %rcx
	movq	%rcx, -3408(%rbp)
	movq	%rax, -3384(%rbp)
	leaq	-3376(%rbp), %rax
	movq	%rax, -3392(%rbp)
	leaq	-3408(%rbp), %rax
	movq	%rax, -3424(%rbp)
	movq	$2, -3416(%rbp)
	.loc	1 353 14 is_stmt 1              # formatter_private.c3:353:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3424(%rbp), %rax
	movl	$353, (%rsp)                    # imm = 0x161
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1019:
.LBB17_651:
	.loc	1 363 45                        # formatter_private.c3:363:45
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7680(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.652:
	.loc	1 0 45 is_stmt 0                # formatter_private.c3:0:45
	movq	-7680(%rbp), %rax               # 8-byte Reload
	.loc	1 363 45                        # formatter_private.c3:363:45
	leaq	.panic_msg.147(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$363, (%rsp)                    # imm = 0x16B
	callq	*%rax
.LBB17_653:
	.loc	1 0 45                          # formatter_private.c3:0:45
	movq	-6400(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3440(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3448(%rbp)
	movq	%rax, -3480(%rbp)
	leaq	-3440(%rbp), %rcx
	movq	%rcx, -3488(%rbp)
	movq	%rax, -3464(%rbp)
	leaq	-3448(%rbp), %rax
	movq	%rax, -3472(%rbp)
	leaq	-3488(%rbp), %rax
	movq	%rax, -3504(%rbp)
	movq	$2, -3496(%rbp)
	.loc	1 363 45                        # formatter_private.c3:363:45
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3504(%rbp), %rax
	movl	$363, (%rsp)                    # imm = 0x16B
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1020:
.LBB17_654:
	.loc	1 377 8 is_stmt 1               # formatter_private.c3:377:8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7688(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.655:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-7688(%rbp), %rax               # 8-byte Reload
	.loc	1 377 8                         # formatter_private.c3:377:8
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$377, (%rsp)                    # imm = 0x179
	callq	*%rax
.LBB17_656:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-6448(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3536(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3544(%rbp)
	movq	%rax, -3576(%rbp)
	leaq	-3536(%rbp), %rcx
	movq	%rcx, -3584(%rbp)
	movq	%rax, -3560(%rbp)
	leaq	-3544(%rbp), %rax
	movq	%rax, -3568(%rbp)
	leaq	-3584(%rbp), %rax
	movq	%rax, -3600(%rbp)
	movq	$2, -3592(%rbp)
	.loc	1 377 8                         # formatter_private.c3:377:8
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3600(%rbp), %rax
	movl	$377, (%rsp)                    # imm = 0x179
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_657:
	.loc	1 377 7                         # formatter_private.c3:377:7
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7696(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.658:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-7696(%rbp), %rax               # 8-byte Reload
	.loc	1 377 7                         # formatter_private.c3:377:7
	leaq	.panic_msg.148(%rip), %rdi
	movl	$10, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$377, (%rsp)                    # imm = 0x179
	callq	*%rax
.LBB17_659:
.Ltmp1021:
	.loc	1 383 11 is_stmt 1              # formatter_private.c3:383:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7704(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.660:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-7704(%rbp), %rax               # 8-byte Reload
	.loc	1 383 11                        # formatter_private.c3:383:11
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$383, (%rsp)                    # imm = 0x17F
	callq	*%rax
.LBB17_661:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6480(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3624(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3632(%rbp)
	movq	%rax, -3656(%rbp)
	leaq	-3624(%rbp), %rcx
	movq	%rcx, -3664(%rbp)
	movq	%rax, -3640(%rbp)
	leaq	-3632(%rbp), %rax
	movq	%rax, -3648(%rbp)
	leaq	-3664(%rbp), %rax
	movq	%rax, -3680(%rbp)
	movq	$2, -3672(%rbp)
	.loc	1 383 11                        # formatter_private.c3:383:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3680(%rbp), %rax
	movl	$383, (%rsp)                    # imm = 0x17F
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_662:
	.loc	1 383 10                        # formatter_private.c3:383:10
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7712(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.663:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-7712(%rbp), %rax               # 8-byte Reload
	.loc	1 383 10                        # formatter_private.c3:383:10
	leaq	.panic_msg.149(%rip), %rdi
	movl	$17, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$383, (%rsp)                    # imm = 0x17F
	callq	*%rax
.LBB17_664:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-6504(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3688(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3696(%rbp)
	movq	%rax, -3720(%rbp)
	leaq	-3688(%rbp), %rcx
	movq	%rcx, -3728(%rbp)
	movq	%rax, -3704(%rbp)
	leaq	-3696(%rbp), %rax
	movq	%rax, -3712(%rbp)
	leaq	-3728(%rbp), %rax
	movq	%rax, -3744(%rbp)
	movq	$2, -3736(%rbp)
	.loc	1 383 56                        # formatter_private.c3:383:56
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3744(%rbp), %rax
	movl	$383, (%rsp)                    # imm = 0x17F
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_665:
	.loc	1 401 5 is_stmt 1               # formatter_private.c3:401:5
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7720(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.666:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movq	-7720(%rbp), %rax               # 8-byte Reload
	.loc	1 401 5                         # formatter_private.c3:401:5
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$401, (%rsp)                    # imm = 0x191
	callq	*%rax
.LBB17_667:
	.loc	1 0 5                           # formatter_private.c3:0:5
	movq	-6544(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3760(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3768(%rbp)
	movq	%rax, -3800(%rbp)
	leaq	-3760(%rbp), %rcx
	movq	%rcx, -3808(%rbp)
	movq	%rax, -3784(%rbp)
	leaq	-3768(%rbp), %rax
	movq	%rax, -3792(%rbp)
	leaq	-3808(%rbp), %rax
	movq	%rax, -3824(%rbp)
	movq	$2, -3816(%rbp)
	.loc	1 401 5                         # formatter_private.c3:401:5
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3824(%rbp), %rax
	movl	$401, (%rsp)                    # imm = 0x191
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_668:
.Ltmp1022:
	.loc	1 405 11 is_stmt 1              # formatter_private.c3:405:11
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7728(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.669:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-7728(%rbp), %rax               # 8-byte Reload
	.loc	1 405 11                        # formatter_private.c3:405:11
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$405, (%rsp)                    # imm = 0x195
	callq	*%rax
.LBB17_670:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-6560(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3832(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3840(%rbp)
	movq	%rax, -3864(%rbp)
	leaq	-3832(%rbp), %rcx
	movq	%rcx, -3872(%rbp)
	movq	%rax, -3848(%rbp)
	leaq	-3840(%rbp), %rax
	movq	%rax, -3856(%rbp)
	leaq	-3872(%rbp), %rax
	movq	%rax, -3888(%rbp)
	movq	$2, -3880(%rbp)
	.loc	1 405 11                        # formatter_private.c3:405:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3888(%rbp), %rax
	movl	$405, (%rsp)                    # imm = 0x195
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_671:
	.loc	1 405 6                         # formatter_private.c3:405:6
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7736(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.672:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-7736(%rbp), %rax               # 8-byte Reload
	.loc	1 405 6                         # formatter_private.c3:405:6
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$405, (%rsp)                    # imm = 0x195
	callq	*%rax
.LBB17_673:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-6584(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3896(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3904(%rbp)
	movq	%rax, -3928(%rbp)
	leaq	-3896(%rbp), %rcx
	movq	%rcx, -3936(%rbp)
	movq	%rax, -3912(%rbp)
	leaq	-3904(%rbp), %rax
	movq	%rax, -3920(%rbp)
	leaq	-3936(%rbp), %rax
	movq	%rax, -3952(%rbp)
	movq	$2, -3944(%rbp)
	.loc	1 405 6                         # formatter_private.c3:405:6
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-3952(%rbp), %rax
	movl	$405, (%rsp)                    # imm = 0x195
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_674:
.Ltmp1023:
	.loc	1 406 13 is_stmt 1              # formatter_private.c3:406:13
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7744(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.675:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-7744(%rbp), %rax               # 8-byte Reload
	.loc	1 406 13                        # formatter_private.c3:406:13
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$406, (%rsp)                    # imm = 0x196
	callq	*%rax
.LBB17_676:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-6600(%rbp), %rcx               # 8-byte Reload
	movq	$4, -3960(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -3968(%rbp)
	movq	%rax, -3992(%rbp)
	leaq	-3960(%rbp), %rcx
	movq	%rcx, -4000(%rbp)
	movq	%rax, -3976(%rbp)
	leaq	-3968(%rbp), %rax
	movq	%rax, -3984(%rbp)
	leaq	-4000(%rbp), %rax
	movq	%rax, -4016(%rbp)
	movq	$2, -4008(%rbp)
	.loc	1 406 13                        # formatter_private.c3:406:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4016(%rbp), %rax
	movl	$406, (%rsp)                    # imm = 0x196
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_677:
.Ltmp1024:
	.loc	1 408 7 is_stmt 1               # formatter_private.c3:408:7
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7752(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.678:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-7752(%rbp), %rax               # 8-byte Reload
	.loc	1 408 7                         # formatter_private.c3:408:7
	leaq	.panic_msg.150(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$408, (%rsp)                    # imm = 0x198
	callq	*%rax
.LBB17_679:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-6616(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4024(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4032(%rbp)
	movq	%rax, -4056(%rbp)
	leaq	-4024(%rbp), %rcx
	movq	%rcx, -4064(%rbp)
	movq	%rax, -4040(%rbp)
	leaq	-4032(%rbp), %rax
	movq	%rax, -4048(%rbp)
	leaq	-4064(%rbp), %rax
	movq	%rax, -4080(%rbp)
	movq	$2, -4072(%rbp)
	.loc	1 408 7                         # formatter_private.c3:408:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4080(%rbp), %rax
	movl	$408, (%rsp)                    # imm = 0x198
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_680:
	.loc	1 409 18 is_stmt 1              # formatter_private.c3:409:18
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7760(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.681:
	.loc	1 0 18 is_stmt 0                # formatter_private.c3:0:18
	movq	-7760(%rbp), %rax               # 8-byte Reload
	.loc	1 409 18                        # formatter_private.c3:409:18
	leaq	.panic_msg.146(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$409, (%rsp)                    # imm = 0x199
	callq	*%rax
.LBB17_682:
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-6632(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4088(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4096(%rbp)
	movq	%rax, -4120(%rbp)
	leaq	-4088(%rbp), %rcx
	movq	%rcx, -4128(%rbp)
	movq	%rax, -4104(%rbp)
	leaq	-4096(%rbp), %rax
	movq	%rax, -4112(%rbp)
	leaq	-4128(%rbp), %rax
	movq	%rax, -4144(%rbp)
	movq	$2, -4136(%rbp)
	.loc	1 409 18                        # formatter_private.c3:409:18
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4144(%rbp), %rax
	movl	$409, (%rsp)                    # imm = 0x199
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_683:
	.loc	1 410 8 is_stmt 1               # formatter_private.c3:410:8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7768(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.684:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-7768(%rbp), %rax               # 8-byte Reload
	.loc	1 410 8                         # formatter_private.c3:410:8
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$410, (%rsp)                    # imm = 0x19A
	callq	*%rax
.LBB17_685:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-6648(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4152(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4160(%rbp)
	movq	%rax, -4184(%rbp)
	leaq	-4152(%rbp), %rcx
	movq	%rcx, -4192(%rbp)
	movq	%rax, -4168(%rbp)
	leaq	-4160(%rbp), %rax
	movq	%rax, -4176(%rbp)
	leaq	-4192(%rbp), %rax
	movq	%rax, -4208(%rbp)
	movq	$2, -4200(%rbp)
	.loc	1 410 8                         # formatter_private.c3:410:8
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4208(%rbp), %rax
	movl	$410, (%rsp)                    # imm = 0x19A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1025:
.LBB17_686:
	.loc	1 412 43 is_stmt 1              # formatter_private.c3:412:43
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7776(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.687:
	.loc	1 0 43 is_stmt 0                # formatter_private.c3:0:43
	movq	-7776(%rbp), %rax               # 8-byte Reload
	.loc	1 412 43                        # formatter_private.c3:412:43
	leaq	.panic_msg.147(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$412, (%rsp)                    # imm = 0x19C
	callq	*%rax
.LBB17_688:
	.loc	1 0 43                          # formatter_private.c3:0:43
	movq	-6664(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4216(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4224(%rbp)
	movq	%rax, -4248(%rbp)
	leaq	-4216(%rbp), %rcx
	movq	%rcx, -4256(%rbp)
	movq	%rax, -4232(%rbp)
	leaq	-4224(%rbp), %rax
	movq	%rax, -4240(%rbp)
	leaq	-4256(%rbp), %rax
	movq	%rax, -4272(%rbp)
	movq	$2, -4264(%rbp)
	.loc	1 412 43                        # formatter_private.c3:412:43
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4272(%rbp), %rax
	movl	$412, (%rsp)                    # imm = 0x19C
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1026:
.LBB17_689:
	.loc	1 0 43                          # formatter_private.c3:0:43
	movq	-6680(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4280(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4288(%rbp)
	movq	%rax, -4312(%rbp)
	leaq	-4280(%rbp), %rcx
	movq	%rcx, -4320(%rbp)
	movq	%rax, -4296(%rbp)
	leaq	-4288(%rbp), %rax
	movq	%rax, -4304(%rbp)
	leaq	-4320(%rbp), %rax
	movq	%rax, -4336(%rbp)
	movq	$2, -4328(%rbp)
.Ltmp1027:
	.loc	1 417 17 is_stmt 1              # formatter_private.c3:417:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4336(%rbp), %rax
	movl	$417, (%rsp)                    # imm = 0x1A1
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1028:
.LBB17_690:
	.loc	1 0 17 is_stmt 0                # formatter_private.c3:0:17
	movq	-6704(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4344(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4352(%rbp)
	movq	%rax, -4376(%rbp)
	leaq	-4344(%rbp), %rcx
	movq	%rcx, -4384(%rbp)
	movq	%rax, -4360(%rbp)
	leaq	-4352(%rbp), %rax
	movq	%rax, -4368(%rbp)
	leaq	-4384(%rbp), %rax
	movq	%rax, -4400(%rbp)
	movq	$2, -4392(%rbp)
.Ltmp1029:
	.loc	1 435 17 is_stmt 1              # formatter_private.c3:435:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4400(%rbp), %rax
	movl	$435, (%rsp)                    # imm = 0x1B3
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_691:
	.loc	1 0 17 is_stmt 0                # formatter_private.c3:0:17
	movq	-6720(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4416(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4424(%rbp)
	movq	%rax, -4456(%rbp)
	leaq	-4416(%rbp), %rcx
	movq	%rcx, -4464(%rbp)
	movq	%rax, -4440(%rbp)
	leaq	-4424(%rbp), %rax
	movq	%rax, -4448(%rbp)
	leaq	-4464(%rbp), %rax
	movq	%rax, -4480(%rbp)
	movq	$2, -4472(%rbp)
.Ltmp1030:
	.loc	1 437 29 is_stmt 1              # formatter_private.c3:437:29
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4480(%rbp), %rax
	movl	$437, (%rsp)                    # imm = 0x1B5
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_692:
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7784(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.693:
	.loc	1 0 29 is_stmt 0                # formatter_private.c3:0:29
	movq	-7784(%rbp), %rax               # 8-byte Reload
	.loc	1 437 29                        # formatter_private.c3:437:29
	leaq	.panic_msg.148(%rip), %rdi
	movl	$10, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$437, (%rsp)                    # imm = 0x1B5
	callq	*%rax
.Ltmp1031:
.LBB17_694:
	.loc	1 466 4 is_stmt 1               # formatter_private.c3:466:4
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7792(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.695:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-7792(%rbp), %rax               # 8-byte Reload
	.loc	1 466 4                         # formatter_private.c3:466:4
	leaq	.panic_msg.140(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$466, (%rsp)                    # imm = 0x1D2
	callq	*%rax
.LBB17_696:
	.loc	1 467 4 is_stmt 1               # formatter_private.c3:467:4
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7800(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.697:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-7800(%rbp), %rax               # 8-byte Reload
	.loc	1 467 4                         # formatter_private.c3:467:4
	leaq	.panic_msg.140(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$467, (%rsp)                    # imm = 0x1D3
	callq	*%rax
.Ltmp1032:
.LBB17_698:
	.loc	1 482 21 is_stmt 1              # formatter_private.c3:482:21
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7808(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.699:
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7808(%rbp), %rax               # 8-byte Reload
	.loc	1 482 21                        # formatter_private.c3:482:21
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$482, (%rsp)                    # imm = 0x1E2
	callq	*%rax
.LBB17_700:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7000(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4656(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4664(%rbp)
	movq	%rax, -4696(%rbp)
	leaq	-4656(%rbp), %rcx
	movq	%rcx, -4704(%rbp)
	movq	%rax, -4680(%rbp)
	leaq	-4664(%rbp), %rax
	movq	%rax, -4688(%rbp)
	leaq	-4704(%rbp), %rax
	movq	%rax, -4720(%rbp)
	movq	$2, -4712(%rbp)
	.loc	1 482 21                        # formatter_private.c3:482:21
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4720(%rbp), %rax
	movl	$482, (%rsp)                    # imm = 0x1E2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_701:
.Ltmp1033:
	.loc	1 488 7 is_stmt 1               # formatter_private.c3:488:7
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7816(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.702:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-7816(%rbp), %rax               # 8-byte Reload
	.loc	1 488 7                         # formatter_private.c3:488:7
	leaq	.panic_msg.118(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$488, (%rsp)                    # imm = 0x1E8
	callq	*%rax
.Ltmp1034:
.LBB17_703:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-7024(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4760(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -4776(%rbp)
	leaq	-4760(%rbp), %rax
	movq	%rax, -4784(%rbp)
	leaq	-4784(%rbp), %rax
	movq	%rax, -4800(%rbp)
	movq	$1, -4792(%rbp)
	.loc	1 490 26 is_stmt 1              # formatter_private.c3:490:26
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4800(%rbp), %rax
	movl	$490, (%rsp)                    # imm = 0x1EA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1035:
.LBB17_704:
	.loc	1 495 21                        # formatter_private.c3:495:21
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7824(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.705:
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7824(%rbp), %rax               # 8-byte Reload
	.loc	1 495 21                        # formatter_private.c3:495:21
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$495, (%rsp)                    # imm = 0x1EF
	callq	*%rax
.LBB17_706:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7120(%rbp), %rcx               # 8-byte Reload
	movq	$4, -4840(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -4848(%rbp)
	movq	%rax, -4872(%rbp)
	leaq	-4840(%rbp), %rcx
	movq	%rcx, -4880(%rbp)
	movq	%rax, -4856(%rbp)
	leaq	-4848(%rbp), %rax
	movq	%rax, -4864(%rbp)
	leaq	-4880(%rbp), %rax
	movq	%rax, -4896(%rbp)
	movq	$2, -4888(%rbp)
	.loc	1 495 21                        # formatter_private.c3:495:21
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4896(%rbp), %rax
	movl	$495, (%rsp)                    # imm = 0x1EF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_707:
.Ltmp1036:
	.loc	1 496 21 is_stmt 1              # formatter_private.c3:496:21
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7832(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.708:
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7832(%rbp), %rax               # 8-byte Reload
	.loc	1 496 21                        # formatter_private.c3:496:21
	leaq	.panic_msg.118(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$496, (%rsp)                    # imm = 0x1F0
	callq	*%rax
.Ltmp1037:
.LBB17_709:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7136(%rbp), %rax               # 8-byte Reload
	movq	%rax, -4944(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -4952(%rbp)
	leaq	-4944(%rbp), %rax
	movq	%rax, -4960(%rbp)
	leaq	-4960(%rbp), %rax
	movq	%rax, -4976(%rbp)
	movq	$1, -4968(%rbp)
	.loc	1 497 26 is_stmt 1              # formatter_private.c3:497:26
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-4976(%rbp), %rax
	movl	$497, (%rsp)                    # imm = 0x1F1
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1038:
.LBB17_710:
	.loc	1 506 21                        # formatter_private.c3:506:21
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -7840(%rbp)               # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB17_715
# %bb.711:
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-7840(%rbp), %rax               # 8-byte Reload
	.loc	1 506 21                        # formatter_private.c3:506:21
	leaq	.panic_msg.144(%rip), %rdi
	movl	$42, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	movl	$506, (%rsp)                    # imm = 0x1FA
	callq	*%rax
.LBB17_712:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7264(%rbp), %rcx               # 8-byte Reload
	movq	$4, -5024(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -5032(%rbp)
	movq	%rax, -5064(%rbp)
	leaq	-5024(%rbp), %rcx
	movq	%rcx, -5072(%rbp)
	movq	%rax, -5048(%rbp)
	leaq	-5032(%rbp), %rax
	movq	%rax, -5056(%rbp)
	leaq	-5072(%rbp), %rax
	movq	%rax, -5088(%rbp)
	movq	$2, -5080(%rbp)
	.loc	1 506 21                        # formatter_private.c3:506:21
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-5088(%rbp), %rax
	movl	$506, (%rsp)                    # imm = 0x1FA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB17_713:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-7328(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5168(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5176(%rbp)
	leaq	-5168(%rbp), %rax
	movq	%rax, -5184(%rbp)
	leaq	-5184(%rbp), %rax
	movq	%rax, -5200(%rbp)
	movq	$1, -5192(%rbp)
	.loc	1 517 26 is_stmt 1              # formatter_private.c3:517:26
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-5200(%rbp), %rax
	movl	$517, (%rsp)                    # imm = 0x205
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1039:
.LBB17_714:
	.loc	1 0 26 is_stmt 0                # formatter_private.c3:0:26
	movq	-7440(%rbp), %rax               # 8-byte Reload
	movq	%rax, -5240(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -5256(%rbp)
	leaq	-5240(%rbp), %rax
	movq	%rax, -5264(%rbp)
	leaq	-5264(%rbp), %rax
	movq	%rax, -5280(%rbp)
	movq	$1, -5272(%rbp)
	.loc	1 521 25 is_stmt 1              # formatter_private.c3:521:25
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.134(%rip), %r8
	movl	$11, %r9d
	leaq	-5280(%rbp), %rax
	movl	$521, (%rsp)                    # imm = 0x209
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1040:
.LBB17_715:
	.loc	1 0 0 is_stmt 0                 # formatter_private.c3:0:0
	callq	__stack_chk_fail@PLT
.Ltmp1041:
.Lfunc_end17:
	.size	std.io.Formatter.floatformat, .Lfunc_end17-std.io.Formatter.floatformat
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.ntoa
	.type	std.io.Formatter.ntoa,@function
std.io.Formatter.ntoa:                  # @std.io.Formatter.ntoa
.Lfunc_begin18:
	.loc	1 529 0 is_stmt 1               # formatter_private.c3:529:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$624, %rsp                      # imm = 0x270
	movl	%r9d, -460(%rbp)                # 4-byte Spill
	movq	%rcx, -456(%rbp)                # 8-byte Spill
	movq	%rdx, -448(%rbp)                # 8-byte Spill
	movq	%rsi, -440(%rbp)                # 8-byte Spill
	movq	%rdi, -432(%rbp)                # 8-byte Spill
	movb	%r8b, %al
	movb	%al, -417(%rbp)                 # 1-byte Spill
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
.Ltmp1042:
	.loc	1 530 1 prologue_end            # formatter_private.c3:530:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB18_25
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movl	-460(%rbp), %eax                # 4-byte Reload
	movb	-417(%rbp), %cl                 # 1-byte Reload
	movq	-456(%rbp), %rdx                # 8-byte Reload
	movq	-448(%rbp), %rsi                # 8-byte Reload
	movq	-440(%rbp), %rdi                # 8-byte Reload
	movq	%rdi, -280(%rbp)
	movq	%rsi, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movb	%cl, -305(%rbp)
	movl	%eax, -312(%rbp)
	.loc	1 532 6 is_stmt 1               # formatter_private.c3:532:6
	movq	$0, -320(%rbp)
	.loc	1 535 6                         # formatter_private.c3:535:6
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	jne	.LBB18_3
	jmp	.LBB18_2
.LBB18_2:
	.loc	1 535 14 is_stmt 0              # formatter_private.c3:535:14
	movq	-280(%rbp), %rax
	.loc	1 535 32                        # formatter_private.c3:535:32
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	movl	%ecx, 16(%rax)
.LBB18_3:
	.loc	1 538 7 is_stmt 1               # formatter_private.c3:538:7
	movq	-280(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -461(%rbp)                 # 1-byte Spill
	jne	.LBB18_5
# %bb.4:
	.loc	1 538 31 is_stmt 0              # formatter_private.c3:538:31
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	setne	%al
	movb	%al, -461(%rbp)                 # 1-byte Spill
.LBB18_5:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movb	-461(%rbp), %al                 # 1-byte Reload
	.loc	1 538 31                        # formatter_private.c3:538:31
	testb	$1, %al
	jne	.LBB18_6
	jmp	.LBB18_19
.LBB18_6:
.Ltmp1043:
	.loc	1 540 19 is_stmt 1              # formatter_private.c3:540:19
	movq	-280(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 540 48 is_stmt 0              # formatter_private.c3:540:48
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -463(%rbp)                 # 1-byte Spill
	testb	$1, %cl
	movb	%al, -462(%rbp)                 # 1-byte Spill
	jne	.LBB18_34
# %bb.33:
	.loc	1 0 48                          # formatter_private.c3:0:48
	movb	-463(%rbp), %al                 # 1-byte Reload
	movb	%al, -462(%rbp)                 # 1-byte Spill
.LBB18_34:
	movb	-462(%rbp), %al                 # 1-byte Reload
	.loc	1 540 48                        # formatter_private.c3:540:48
	movzbl	%al, %eax
	.loc	1 540 18                        # formatter_private.c3:540:18
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -321(%rbp)
.LBB18_7:                               # =>This Inner Loop Header: Depth=1
.Ltmp1044:
	.loc	1 543 8 is_stmt 1               # formatter_private.c3:543:8
	movl	$256, %eax                      # imm = 0x100
	cmpq	-320(%rbp), %rax
	ja	.LBB18_10
# %bb.8:
	.loc	1 543 47 is_stmt 0              # formatter_private.c3:543:47
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.9:
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 543 47 epilogue_begin         # formatter_private.c3:543:47
	addq	$624, %rsp                      # imm = 0x270
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_10:                              #   in Loop: Header=BB18_7 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 544 24 is_stmt 1              # formatter_private.c3:544:24
	movq	-304(%rbp), %rax
	movq	%rax, -496(%rbp)                # 8-byte Spill
	movq	-296(%rbp), %rax
	movq	%rax, -488(%rbp)                # 8-byte Spill
	.loc	1 544 32 is_stmt 0              # formatter_private.c3:544:32
	movl	-312(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -480(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	sete	%al
	xorl	%ecx, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -472(%rbp)                # 8-byte Spill
	.loc	1 544 17                        # formatter_private.c3:544:17
	testb	$1, %al
	jne	.LBB18_27
# %bb.11:                               #   in Loop: Header=BB18_7 Depth=1
	.loc	1 0 17                          # formatter_private.c3:0:17
	movq	-472(%rbp), %rcx                # 8-byte Reload
	movq	-480(%rbp), %rdx                # 8-byte Reload
	movq	-488(%rbp), %rsi                # 8-byte Reload
	movq	-496(%rbp), %rdi                # 8-byte Reload
	.loc	1 544 17                        # formatter_private.c3:544:17
	callq	__umodti3@PLT
                                        # kill: def $al killed $al killed $rax
	movb	%al, -322(%rbp)
	.loc	1 545 17 is_stmt 1              # formatter_private.c3:545:17
	movzbl	-322(%rbp), %eax
	movl	%eax, -500(%rbp)                # 4-byte Spill
	.loc	1 545 26 is_stmt 0              # formatter_private.c3:545:26
	movzbl	-322(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB18_13
# %bb.12:                               #   in Loop: Header=BB18_7 Depth=1
	.loc	1 545 39                        # formatter_private.c3:545:39
	movb	$48, %al
	movb	%al, -501(%rbp)                 # 1-byte Spill
	jmp	.LBB18_14
.LBB18_13:                              #   in Loop: Header=BB18_7 Depth=1
	.loc	1 545 45                        # formatter_private.c3:545:45
	movb	-321(%rbp), %al
	movb	%al, -501(%rbp)                 # 1-byte Spill
.LBB18_14:                              #   in Loop: Header=BB18_7 Depth=1
	.loc	1 0 45                          # formatter_private.c3:0:45
	movl	-500(%rbp), %eax                # 4-byte Reload
	movb	-501(%rbp), %cl                 # 1-byte Reload
	.loc	1 545 45                        # formatter_private.c3:545:45
	movzbl	%cl, %ecx
	.loc	1 545 17                        # formatter_private.c3:545:17
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -513(%rbp)                 # 1-byte Spill
	.loc	1 545 8                         # formatter_private.c3:545:8
	movq	-320(%rbp), %rax
	movq	%rax, -512(%rbp)                # 8-byte Spill
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -320(%rbp)
	cmpq	$256, %rax                      # imm = 0x100
	setae	%al
	testb	$1, %al
	jne	.LBB18_29
# %bb.15:                               #   in Loop: Header=BB18_7 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-512(%rbp), %rax                # 8-byte Reload
	movb	-513(%rbp), %cl                 # 1-byte Reload
	.loc	1 545 8                         # formatter_private.c3:545:8
	movb	%cl, -272(%rbp,%rax)
	.loc	1 546 4 is_stmt 1               # formatter_private.c3:546:4
	movq	-304(%rbp), %rax
	movq	%rax, -552(%rbp)                # 8-byte Spill
	movq	-296(%rbp), %rax
	movq	%rax, -544(%rbp)                # 8-byte Spill
	.loc	1 546 13 is_stmt 0              # formatter_private.c3:546:13
	movl	-312(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -536(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	sete	%al
	xorl	%ecx, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -528(%rbp)                # 8-byte Spill
	.loc	1 546 4                         # formatter_private.c3:546:4
	testb	$1, %al
	jne	.LBB18_30
# %bb.16:                               #   in Loop: Header=BB18_7 Depth=1
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-528(%rbp), %rcx                # 8-byte Reload
	movq	-536(%rbp), %rdx                # 8-byte Reload
	movq	-544(%rbp), %rsi                # 8-byte Reload
	movq	-552(%rbp), %rdi                # 8-byte Reload
	.loc	1 546 4                         # formatter_private.c3:546:4
	callq	__udivti3@PLT
	movq	%rdx, -296(%rbp)
	movq	%rax, -304(%rbp)
.Ltmp1045:
# %bb.17:                               #   in Loop: Header=BB18_7 Depth=1
	.loc	1 548 10 is_stmt 1              # formatter_private.c3:548:10
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	jne	.LBB18_7
	jmp	.LBB18_18
.LBB18_18:
	jmp	.LBB18_19
.Ltmp1046:
.LBB18_19:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-280(%rbp), %rsi
	movq	-320(%rbp), %r8
	movb	-305(%rbp), %r9b
	movl	-312(%rbp), %eax
	.loc	1 550 9 is_stmt 1               # formatter_private.c3:550:9
	leaq	-416(%rbp), %rdi
	leaq	-272(%rbp), %rdx
	movl	$256, %ecx                      # imm = 0x100
	movzbl	%r9b, %r9d
	movl	%eax, (%rsp)
	callq	std.io.Formatter.ntoa_format
	movq	%rax, -560(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB18_21
# %bb.20:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-560(%rbp), %rax                # 8-byte Reload
	.loc	1 550 9                         # formatter_private.c3:550:9
	movq	%rax, -408(%rbp)
	jmp	.LBB18_23
.LBB18_21:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-432(%rbp), %rax                # 8-byte Reload
	.loc	1 550 9                         # formatter_private.c3:550:9
	movq	-416(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.22:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 550 9 epilogue_begin          # formatter_private.c3:550:9
	addq	$624, %rsp                      # imm = 0x270
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_23:
	.cfi_def_cfa %rbp, 16
	movq	-408(%rbp), %rax
	movq	%rax, -568(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.24:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-568(%rbp), %rax                # 8-byte Reload
	.loc	1 550 9 epilogue_begin          # formatter_private.c3:550:9
	addq	$624, %rsp                      # imm = 0x270
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_25:
	.cfi_def_cfa %rbp, 16
	.loc	1 529 24 is_stmt 1              # formatter_private.c3:529:24
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -576(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.26:
	.loc	1 0 24 is_stmt 0                # formatter_private.c3:0:24
	movq	-576(%rbp), %rax                # 8-byte Reload
	.loc	1 529 24                        # formatter_private.c3:529:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movl	$529, (%rsp)                    # imm = 0x211
	callq	*%rax
.LBB18_27:
.Ltmp1047:
	.loc	1 544 17 is_stmt 1              # formatter_private.c3:544:17
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -584(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.28:
	.loc	1 0 17 is_stmt 0                # formatter_private.c3:0:17
	movq	-584(%rbp), %rax                # 8-byte Reload
	.loc	1 544 17                        # formatter_private.c3:544:17
	leaq	.panic_msg.148(%rip), %rdi
	movl	$10, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movl	$544, (%rsp)                    # imm = 0x220
	callq	*%rax
.LBB18_29:
	.loc	1 0 17                          # formatter_private.c3:0:17
	movq	-512(%rbp), %rcx                # 8-byte Reload
	movq	$256, -336(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -344(%rbp)
	movq	%rax, -376(%rbp)
	leaq	-336(%rbp), %rcx
	movq	%rcx, -384(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-344(%rbp), %rax
	movq	%rax, -368(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	$2, -392(%rbp)
	.loc	1 545 8 is_stmt 1               # formatter_private.c3:545:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	leaq	-400(%rbp), %rax
	movl	$545, (%rsp)                    # imm = 0x221
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB18_30:
	.loc	1 546 4                         # formatter_private.c3:546:4
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -592(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB18_32
# %bb.31:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-592(%rbp), %rax                # 8-byte Reload
	.loc	1 546 4                         # formatter_private.c3:546:4
	leaq	.panic_msg.149(%rip), %rdi
	movl	$17, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movl	$546, (%rsp)                    # imm = 0x222
	callq	*%rax
.Ltmp1048:
.LBB18_32:
	.loc	1 0 0                           # formatter_private.c3:0:0
	callq	__stack_chk_fail@PLT
.Ltmp1049:
.Lfunc_end18:
	.size	std.io.Formatter.ntoa, .Lfunc_end18-std.io.Formatter.ntoa
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.ntoa_format
	.type	std.io.Formatter.ntoa_format,@function
std.io.Formatter.ntoa_format:           # @std.io.Formatter.ntoa_format
.Lfunc_begin19:
	.loc	1 553 0 is_stmt 1               # formatter_private.c3:553:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1296, %rsp                     # imm = 0x510
	movq	%r8, -944(%rbp)                 # 8-byte Spill
	movq	%rcx, -936(%rbp)                # 8-byte Spill
	movq	%rdx, -928(%rbp)                # 8-byte Spill
	movq	%rsi, -920(%rbp)                # 8-byte Spill
	movq	%rdi, -912(%rbp)                # 8-byte Spill
	movb	%r9b, %al
	movb	%al, -901(%rbp)                 # 1-byte Spill
	movl	16(%rbp), %eax
	movl	%eax, -900(%rbp)                # 4-byte Spill
.Ltmp1050:
	.loc	1 554 1 prologue_end            # formatter_private.c3:554:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB19_82
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movl	-900(%rbp), %eax                # 4-byte Reload
	movb	-901(%rbp), %cl                 # 1-byte Reload
	movq	-944(%rbp), %rdx                # 8-byte Reload
	movq	-936(%rbp), %rsi                # 8-byte Reload
	movq	-928(%rbp), %rdi                # 8-byte Reload
	movq	-920(%rbp), %r8                 # 8-byte Reload
	movq	%r8, -8(%rbp)
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movb	%cl, -33(%rbp)
	movl	%eax, -40(%rbp)
	.loc	1 556 7 is_stmt 1               # formatter_private.c3:556:7
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB19_27
# %bb.2:
.Ltmp1051:
	.loc	1 558 7                         # formatter_private.c3:558:7
	movq	-8(%rbp), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpl	$0, 20(%rcx)
	movb	%al, -945(%rbp)                 # 1-byte Spill
	je	.LBB19_4
# %bb.3:
	.loc	1 558 21 is_stmt 0              # formatter_private.c3:558:21
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -945(%rbp)                 # 1-byte Spill
.LBB19_4:
	.loc	1 0 21                          # formatter_private.c3:0:21
	movb	-945(%rbp), %cl                 # 1-byte Reload
	.loc	1 558 21                        # formatter_private.c3:558:21
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -946(%rbp)                 # 1-byte Spill
	jne	.LBB19_5
	jmp	.LBB19_10
.LBB19_5:
	.loc	1 558 44                        # formatter_private.c3:558:44
	movb	$1, %al
	testb	$1, -33(%rbp)
	movb	%al, -947(%rbp)                 # 1-byte Spill
	jne	.LBB19_7
# %bb.6:
	.loc	1 558 56                        # formatter_private.c3:558:56
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$2, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -947(%rbp)                 # 1-byte Spill
.LBB19_7:
	.loc	1 0 56                          # formatter_private.c3:0:56
	movb	-947(%rbp), %cl                 # 1-byte Reload
	.loc	1 558 56                        # formatter_private.c3:558:56
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -948(%rbp)                 # 1-byte Spill
	jne	.LBB19_9
# %bb.8:
	.loc	1 558 75                        # formatter_private.c3:558:75
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$3, %eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -948(%rbp)                 # 1-byte Spill
.LBB19_9:
	.loc	1 0 75                          # formatter_private.c3:0:75
	movb	-948(%rbp), %al                 # 1-byte Reload
	movb	%al, -946(%rbp)                 # 1-byte Spill
.LBB19_10:
	movb	-946(%rbp), %al                 # 1-byte Reload
	.loc	1 558 75                        # formatter_private.c3:558:75
	testb	$1, %al
	jne	.LBB19_11
	jmp	.LBB19_12
.LBB19_11:
	.loc	1 558 94                        # formatter_private.c3:558:94
	movq	-8(%rbp), %rax
	movl	20(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB19_12:
	.loc	1 559 3 is_stmt 1               # formatter_private.c3:559:3
	jmp	.LBB19_13
.LBB19_13:                              # =>This Inner Loop Header: Depth=1
.Ltmp1052:
	.loc	1 559 10 is_stmt 0              # formatter_private.c3:559:10
	movq	-32(%rbp), %rax
	.loc	1 559 16                        # formatter_private.c3:559:16
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 559 10                        # formatter_private.c3:559:10
	cmpq	%rcx, %rax
	jae	.LBB19_18
# %bb.14:                               #   in Loop: Header=BB19_13 Depth=1
.Ltmp1053:
	.loc	1 561 8 is_stmt 1               # formatter_private.c3:561:8
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jb	.LBB19_16
# %bb.15:
	.loc	1 561 31 is_stmt 0              # formatter_private.c3:561:31
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 561 31 epilogue_begin         # formatter_private.c3:561:31
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_16:                              #   in Loop: Header=BB19_13 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 562 4 is_stmt 1               # formatter_private.c3:562:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -976(%rbp)                # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -968(%rbp)                # 8-byte Spill
	.loc	1 562 8 is_stmt 0               # formatter_private.c3:562:8
	movq	-32(%rbp), %rax
	movq	%rax, -960(%rbp)                # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_83
# %bb.17:                               #   in Loop: Header=BB19_13 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-968(%rbp), %rax                # 8-byte Reload
	movq	-960(%rbp), %rcx                # 8-byte Reload
	.loc	1 562 8                         # formatter_private.c3:562:8
	movb	$48, (%rax,%rcx)
	jmp	.LBB19_13
.Ltmp1054:
.LBB19_18:
	.loc	1 564 3 is_stmt 1               # formatter_private.c3:564:3
	jmp	.LBB19_19
.LBB19_19:                              # =>This Inner Loop Header: Depth=1
.Ltmp1055:
	.loc	1 564 10 is_stmt 0              # formatter_private.c3:564:10
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	movb	%al, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -977(%rbp)                 # 1-byte Spill
	je	.LBB19_21
# %bb.20:                               #   in Loop: Header=BB19_19 Depth=1
	.loc	1 564 32                        # formatter_private.c3:564:32
	movq	-32(%rbp), %rax
	.loc	1 564 38                        # formatter_private.c3:564:38
	movq	-8(%rbp), %rcx
	movl	20(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 564 32                        # formatter_private.c3:564:32
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, -977(%rbp)                 # 1-byte Spill
.LBB19_21:                              #   in Loop: Header=BB19_19 Depth=1
	.loc	1 0 32                          # formatter_private.c3:0:32
	movb	-977(%rbp), %al                 # 1-byte Reload
	.loc	1 564 32                        # formatter_private.c3:564:32
	testb	$1, %al
	jne	.LBB19_22
	jmp	.LBB19_26
.LBB19_22:                              #   in Loop: Header=BB19_19 Depth=1
.Ltmp1056:
	.loc	1 566 8 is_stmt 1               # formatter_private.c3:566:8
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jb	.LBB19_24
# %bb.23:
	.loc	1 566 31 is_stmt 0              # formatter_private.c3:566:31
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 566 31 epilogue_begin         # formatter_private.c3:566:31
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_24:                              #   in Loop: Header=BB19_19 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 567 4 is_stmt 1               # formatter_private.c3:567:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -1008(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1000(%rbp)               # 8-byte Spill
	.loc	1 567 8 is_stmt 0               # formatter_private.c3:567:8
	movq	-32(%rbp), %rax
	movq	%rax, -992(%rbp)                # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_84
# %bb.25:                               #   in Loop: Header=BB19_19 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1000(%rbp), %rax               # 8-byte Reload
	movq	-992(%rbp), %rcx                # 8-byte Reload
	.loc	1 567 8                         # formatter_private.c3:567:8
	movb	$48, (%rax,%rcx)
	jmp	.LBB19_19
.LBB19_26:
	jmp	.LBB19_27
.Ltmp1057:
.LBB19_27:
	.loc	1 572 6 is_stmt 1               # formatter_private.c3:572:6
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$4, %eax
	andl	$1, %eax
	movb	%al, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -1009(%rbp)                # 1-byte Spill
	je	.LBB19_29
# %bb.28:
	.loc	1 572 25 is_stmt 0              # formatter_private.c3:572:25
	movl	$10, %eax
	cmpl	-40(%rbp), %eax
	setne	%al
	movb	%al, -1009(%rbp)                # 1-byte Spill
.LBB19_29:
	.loc	1 0 25                          # formatter_private.c3:0:25
	movb	-1009(%rbp), %al                # 1-byte Reload
	.loc	1 572 25                        # formatter_private.c3:572:25
	testb	$1, %al
	jne	.LBB19_30
	jmp	.LBB19_55
.LBB19_30:
.Ltmp1058:
	.loc	1 574 8 is_stmt 1               # formatter_private.c3:574:8
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -1010(%rbp)                # 1-byte Spill
	jne	.LBB19_31
	jmp	.LBB19_32
.LBB19_31:
	.loc	1 574 32 is_stmt 0              # formatter_private.c3:574:32
	cmpq	$0, -32(%rbp)
	setne	%al
	movb	%al, -1010(%rbp)                # 1-byte Spill
.LBB19_32:
	.loc	1 0 32                          # formatter_private.c3:0:32
	movb	-1010(%rbp), %cl                # 1-byte Reload
	.loc	1 574 32                        # formatter_private.c3:574:32
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -1011(%rbp)                # 1-byte Spill
	jne	.LBB19_33
	jmp	.LBB19_34
.LBB19_33:
	.loc	1 574 39                        # formatter_private.c3:574:39
	movq	-32(%rbp), %rax
	.loc	1 574 46                        # formatter_private.c3:574:46
	movq	-8(%rbp), %rcx
	movl	24(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 574 39                        # formatter_private.c3:574:39
	cmpq	%rcx, %rax
	sete	%al
	movb	%al, -1011(%rbp)                # 1-byte Spill
.LBB19_34:
	.loc	1 0 39                          # formatter_private.c3:0:39
	movb	-1011(%rbp), %cl                # 1-byte Reload
	.loc	1 574 39                        # formatter_private.c3:574:39
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -1012(%rbp)                # 1-byte Spill
	jne	.LBB19_35
	jmp	.LBB19_36
.LBB19_35:
	.loc	1 574 59                        # formatter_private.c3:574:59
	movq	-32(%rbp), %rax
	.loc	1 574 66                        # formatter_private.c3:574:66
	movq	-8(%rbp), %rcx
	movl	20(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	1 574 59                        # formatter_private.c3:574:59
	cmpq	%rcx, %rax
	sete	%al
	movb	%al, -1012(%rbp)                # 1-byte Spill
.LBB19_36:
	.loc	1 0 59                          # formatter_private.c3:0:59
	movb	-1012(%rbp), %al                # 1-byte Reload
	.loc	1 574 59                        # formatter_private.c3:574:59
	testb	$1, %al
	jne	.LBB19_37
	jmp	.LBB19_40
.LBB19_37:
.Ltmp1059:
	.loc	1 576 4 is_stmt 1               # formatter_private.c3:576:4
	movq	-32(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -32(%rbp)
	.loc	1 577 8                         # formatter_private.c3:577:8
	cmpq	$0, -32(%rbp)
	je	.LBB19_39
# %bb.38:
	.loc	1 577 13 is_stmt 0              # formatter_private.c3:577:13
	movq	-32(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -32(%rbp)
.LBB19_39:
	jmp	.LBB19_40
.Ltmp1060:
.LBB19_40:
	.loc	1 579 7 is_stmt 1               # formatter_private.c3:579:7
	movl	$10, %eax
	cmpl	-40(%rbp), %eax
	je	.LBB19_54
# %bb.41:
.Ltmp1061:
	.loc	1 581 8                         # formatter_private.c3:581:8
	movq	-32(%rbp), %rcx
	addq	$1, %rcx
	.loc	1 581 19 is_stmt 0              # formatter_private.c3:581:19
	movq	-16(%rbp), %rax
	.loc	1 581 8                         # formatter_private.c3:581:8
	cmpq	%rax, %rcx
	setge	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	testb	$1, %al
	jne	.LBB19_42
	jmp	.LBB19_43
.LBB19_42:
	.loc	1 581 35                        # formatter_private.c3:581:35
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 581 35 epilogue_begin         # formatter_private.c3:581:35
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_43:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 35                          # formatter_private.c3:0:35
	movl	-40(%rbp), %eax
	movl	%eax, -180(%rbp)
# %bb.44:
	movl	-180(%rbp), %eax
	movl	%eax, -1016(%rbp)               # 4-byte Spill
	subl	$2, %eax
	je	.LBB19_49
	jmp	.LBB19_95
.LBB19_95:
	movl	-1016(%rbp), %eax               # 4-byte Reload
	subl	$8, %eax
	je	.LBB19_47
	jmp	.LBB19_96
.LBB19_96:
	movl	-1016(%rbp), %eax               # 4-byte Reload
	subl	$16, %eax
	jne	.LBB19_51
	jmp	.LBB19_45
.LBB19_45:
.Ltmp1062:
	.loc	1 585 19 is_stmt 1              # formatter_private.c3:585:19
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 585 48 is_stmt 0              # formatter_private.c3:585:48
	movb	$88, %al
	movb	$120, %dl
	movb	%dl, -1018(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -1017(%rbp)                # 1-byte Spill
	jne	.LBB19_98
# %bb.97:
	.loc	1 0 48                          # formatter_private.c3:0:48
	movb	-1018(%rbp), %al                # 1-byte Reload
	movb	%al, -1017(%rbp)                # 1-byte Spill
.LBB19_98:
	movb	-1017(%rbp), %al                # 1-byte Reload
	movb	%al, -1049(%rbp)                # 1-byte Spill
	.loc	1 585 6                         # formatter_private.c3:585:6
	movq	-16(%rbp), %rcx
	movq	%rcx, -1048(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1040(%rbp)               # 8-byte Spill
	.loc	1 585 10                        # formatter_private.c3:585:10
	movq	-32(%rbp), %rax
	movq	%rax, -1032(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_85
# %bb.46:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-1040(%rbp), %rax               # 8-byte Reload
	movq	-1032(%rbp), %rcx               # 8-byte Reload
	movb	-1049(%rbp), %dl                # 1-byte Reload
	.loc	1 585 10                        # formatter_private.c3:585:10
	movb	%dl, (%rax,%rcx)
	jmp	.LBB19_52
.Ltmp1063:
.LBB19_47:
	.loc	1 587 19 is_stmt 1              # formatter_private.c3:587:19
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 587 48 is_stmt 0              # formatter_private.c3:587:48
	movb	$79, %al
	movb	$111, %dl
	movb	%dl, -1051(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -1050(%rbp)                # 1-byte Spill
	jne	.LBB19_100
# %bb.99:
	.loc	1 0 48                          # formatter_private.c3:0:48
	movb	-1051(%rbp), %al                # 1-byte Reload
	movb	%al, -1050(%rbp)                # 1-byte Spill
.LBB19_100:
	movb	-1050(%rbp), %al                # 1-byte Reload
	movb	%al, -1081(%rbp)                # 1-byte Spill
	.loc	1 587 6                         # formatter_private.c3:587:6
	movq	-16(%rbp), %rcx
	movq	%rcx, -1080(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1072(%rbp)               # 8-byte Spill
	.loc	1 587 10                        # formatter_private.c3:587:10
	movq	-32(%rbp), %rax
	movq	%rax, -1064(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_86
# %bb.48:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-1072(%rbp), %rax               # 8-byte Reload
	movq	-1064(%rbp), %rcx               # 8-byte Reload
	movb	-1081(%rbp), %dl                # 1-byte Reload
	.loc	1 587 10                        # formatter_private.c3:587:10
	movb	%dl, (%rax,%rcx)
	jmp	.LBB19_52
.Ltmp1064:
.LBB19_49:
	.loc	1 589 19 is_stmt 1              # formatter_private.c3:589:19
	movq	-8(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 589 48 is_stmt 0              # formatter_private.c3:589:48
	movb	$66, %al
	movb	$98, %dl
	movb	%dl, -1083(%rbp)                # 1-byte Spill
	testb	$1, %cl
	movb	%al, -1082(%rbp)                # 1-byte Spill
	jne	.LBB19_102
# %bb.101:
	.loc	1 0 48                          # formatter_private.c3:0:48
	movb	-1083(%rbp), %al                # 1-byte Reload
	movb	%al, -1082(%rbp)                # 1-byte Spill
.LBB19_102:
	movb	-1082(%rbp), %al                # 1-byte Reload
	movb	%al, -1113(%rbp)                # 1-byte Spill
	.loc	1 589 6                         # formatter_private.c3:589:6
	movq	-16(%rbp), %rcx
	movq	%rcx, -1112(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1104(%rbp)               # 8-byte Spill
	.loc	1 589 10                        # formatter_private.c3:589:10
	movq	-32(%rbp), %rax
	movq	%rax, -1096(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_87
# %bb.50:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	-1096(%rbp), %rcx               # 8-byte Reload
	movb	-1113(%rbp), %dl                # 1-byte Reload
	.loc	1 589 10                        # formatter_private.c3:589:10
	movb	%dl, (%rax,%rcx)
	jmp	.LBB19_52
.Ltmp1065:
.LBB19_51:
	.loc	1 0 10                          # formatter_private.c3:0:10
	leaq	.L.str.153(%rip), %rax
	movq	%rax, -400(%rbp)
	movq	$30, -392(%rbp)
.Ltmp1066:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-400(%rbp), %rdi
	movq	-392(%rbp), %rsi
	movq	$0, -408(%rbp)
	movq	$0, -416(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.154(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.155(%rip), %r8
	movl	$21, %r9d
	leaq	-416(%rbp), %rax
	movl	$591, (%rsp)                    # imm = 0x24F
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1067:
.LBB19_52:
	.loc	1 593 4 is_stmt 1               # formatter_private.c3:593:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -1144(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1136(%rbp)               # 8-byte Spill
	.loc	1 593 8 is_stmt 0               # formatter_private.c3:593:8
	movq	-32(%rbp), %rax
	movq	%rax, -1128(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_88
# %bb.53:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1136(%rbp), %rax               # 8-byte Reload
	movq	-1128(%rbp), %rcx               # 8-byte Reload
	.loc	1 593 8                         # formatter_private.c3:593:8
	movb	$48, (%rax,%rcx)
.LBB19_54:
	jmp	.LBB19_55
.Ltmp1068:
.LBB19_55:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	$1, -481(%rbp)
# %bb.56:
	movb	-481(%rbp), %cl
	movb	%cl, -1145(%rbp)                # 1-byte Spill
	andb	$1, %cl
.Ltmp1069:
	.loc	1 599 8 is_stmt 1               # formatter_private.c3:599:8
	movb	-33(%rbp), %al
	andb	$1, %al
	subb	%cl, %al
	jne	.LBB19_61
	jmp	.LBB19_57
.LBB19_57:
.Ltmp1070:
	.loc	1 600 8                         # formatter_private.c3:600:8
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jb	.LBB19_59
# %bb.58:
	.loc	1 600 31 is_stmt 0              # formatter_private.c3:600:31
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 600 31 epilogue_begin         # formatter_private.c3:600:31
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_59:
	.cfi_def_cfa %rbp, 16
	.loc	1 601 4 is_stmt 1               # formatter_private.c3:601:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -1176(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1168(%rbp)               # 8-byte Spill
	.loc	1 601 8 is_stmt 0               # formatter_private.c3:601:8
	movq	-32(%rbp), %rax
	movq	%rax, -1160(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_89
# %bb.60:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1160(%rbp), %rcx               # 8-byte Reload
	.loc	1 601 8                         # formatter_private.c3:601:8
	movb	$45, (%rax,%rcx)
	jmp	.LBB19_72
.Ltmp1071:
.LBB19_61:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1145(%rbp), %cl                # 1-byte Reload
	.loc	1 602 8 is_stmt 1               # formatter_private.c3:602:8
	movq	-8(%rbp), %rax
	movb	16(%rax), %al
	shrb	$2, %al
	andb	$1, %al
	andb	$1, %cl
	subb	%cl, %al
	jne	.LBB19_66
	jmp	.LBB19_62
.LBB19_62:
.Ltmp1072:
	.loc	1 603 8                         # formatter_private.c3:603:8
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jb	.LBB19_64
# %bb.63:
	.loc	1 603 31 is_stmt 0              # formatter_private.c3:603:31
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 603 31 epilogue_begin         # formatter_private.c3:603:31
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_64:
	.cfi_def_cfa %rbp, 16
	.loc	1 604 4 is_stmt 1               # formatter_private.c3:604:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -1200(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1192(%rbp)               # 8-byte Spill
	.loc	1 604 8 is_stmt 0               # formatter_private.c3:604:8
	movq	-32(%rbp), %rax
	movq	%rax, -1184(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_90
# %bb.65:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1192(%rbp), %rax               # 8-byte Reload
	movq	-1184(%rbp), %rcx               # 8-byte Reload
	.loc	1 604 8                         # formatter_private.c3:604:8
	movb	$43, (%rax,%rcx)
	jmp	.LBB19_72
.Ltmp1073:
.LBB19_66:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1145(%rbp), %cl                # 1-byte Reload
	.loc	1 605 8 is_stmt 1               # formatter_private.c3:605:8
	movq	-8(%rbp), %rax
	movb	16(%rax), %al
	shrb	$3, %al
	andb	$1, %al
	andb	$1, %cl
	subb	%cl, %al
	jne	.LBB19_71
	jmp	.LBB19_67
.LBB19_67:
.Ltmp1074:
	.loc	1 606 8                         # formatter_private.c3:606:8
	movq	-32(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jb	.LBB19_69
# %bb.68:
	.loc	1 606 31 is_stmt 0              # formatter_private.c3:606:31
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	.loc	1 606 31 epilogue_begin         # formatter_private.c3:606:31
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_69:
	.cfi_def_cfa %rbp, 16
	.loc	1 607 4 is_stmt 1               # formatter_private.c3:607:4
	movq	-16(%rbp), %rcx
	movq	%rcx, -1224(%rbp)               # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -1216(%rbp)               # 8-byte Spill
	.loc	1 607 8 is_stmt 0               # formatter_private.c3:607:8
	movq	-32(%rbp), %rax
	movq	%rax, -1208(%rbp)               # 8-byte Spill
	movq	%rax, %rdx
	addq	$1, %rdx
	movq	%rdx, -32(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB19_91
# %bb.70:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1216(%rbp), %rax               # 8-byte Reload
	movq	-1208(%rbp), %rcx               # 8-byte Reload
	.loc	1 607 8                         # formatter_private.c3:607:8
	movb	$32, (%rax,%rcx)
	jmp	.LBB19_72
.LBB19_71:
	jmp	.LBB19_72
.Ltmp1075:
.LBB19_72:
	.loc	1 609 6 is_stmt 1               # formatter_private.c3:609:6
	cmpq	$0, -32(%rbp)
	je	.LBB19_81
# %bb.73:
	.loc	1 609 28 is_stmt 0              # formatter_private.c3:609:28
	movq	-24(%rbp), %rax
	movq	%rax, -1240(%rbp)               # 8-byte Spill
	movq	-16(%rbp), %rcx
	movq	%rcx, -1232(%rbp)               # 8-byte Spill
	.loc	1 609 32                        # formatter_private.c3:609:32
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	seta	%al
	testb	$1, %al
	jne	.LBB19_92
# %bb.74:
	.loc	1 609 33                        # formatter_private.c3:609:33
	movq	-32(%rbp), %rcx
	addq	$0, %rcx
	movq	%rcx, -1256(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	cmpq	%rcx, %rax
	seta	%al
	subq	$0, %rcx
	movq	%rcx, -1248(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB19_93
# %bb.75:
	.loc	1 0 33                          # formatter_private.c3:0:33
	movq	-1256(%rbp), %rcx               # 8-byte Reload
	movq	-1232(%rbp), %rax               # 8-byte Reload
	.loc	1 609 28                        # formatter_private.c3:609:28
	cmpq	%rcx, %rax
	setb	%al
	subq	$1, %rcx
	movq	%rcx, -1264(%rbp)               # 8-byte Spill
	testb	$1, %al
	jne	.LBB19_94
# %bb.76:
	.loc	1 0 28                          # formatter_private.c3:0:28
	movq	-1240(%rbp), %rdx               # 8-byte Reload
	movq	-1256(%rbp), %rcx               # 8-byte Reload
	.loc	1 609 28                        # formatter_private.c3:609:28
	subq	$0, %rcx
	movq	-8(%rbp), %rsi
	.loc	1 609 11                        # formatter_private.c3:609:11
	leaq	-888(%rbp), %rdi
	callq	std.io.Formatter.out_reverse
	movq	%rax, -1272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB19_78
# %bb.77:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-1272(%rbp), %rax               # 8-byte Reload
	.loc	1 609 11                        # formatter_private.c3:609:11
	movq	%rax, -696(%rbp)
	jmp	.LBB19_79
.LBB19_78:
	jmp	.LBB19_80
.LBB19_79:
	movq	-696(%rbp), %rax
	.loc	1 609 11 epilogue_begin         # formatter_private.c3:609:11
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_80:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB19_81
.LBB19_81:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-912(%rbp), %rax                # 8-byte Reload
	.loc	1 610 9 is_stmt 1               # formatter_private.c3:610:9
	movq	-32(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 610 9 epilogue_begin is_stmt 0 # formatter_private.c3:610:9
	addq	$1296, %rsp                     # imm = 0x510
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_82:
	.cfi_def_cfa %rbp, 16
	.loc	1 553 31 is_stmt 1              # formatter_private.c3:553:31
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$553, (%rsp)                    # imm = 0x229
	callq	*(%rax)
.LBB19_83:
	.loc	1 0 31 is_stmt 0                # formatter_private.c3:0:31
	movq	-960(%rbp), %rcx                # 8-byte Reload
	movq	-976(%rbp), %rax                # 8-byte Reload
	movq	%rax, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
.Ltmp1076:
	.loc	1 562 8 is_stmt 1               # formatter_private.c3:562:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-112(%rbp), %rax
	movl	$562, (%rsp)                    # imm = 0x232
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1077:
.LBB19_84:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-992(%rbp), %rcx                # 8-byte Reload
	movq	-1008(%rbp), %rax               # 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -128(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-120(%rbp), %rcx
	movq	%rcx, -160(%rbp)
	movq	%rax, -136(%rbp)
	leaq	-128(%rbp), %rax
	movq	%rax, -144(%rbp)
	leaq	-160(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	$2, -168(%rbp)
.Ltmp1078:
	.loc	1 567 8 is_stmt 1               # formatter_private.c3:567:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-176(%rbp), %rax
	movl	$567, (%rsp)                    # imm = 0x237
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1079:
.LBB19_85:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1032(%rbp), %rcx               # 8-byte Reload
	movq	-1048(%rbp), %rax               # 8-byte Reload
	movq	%rax, -192(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -200(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-192(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-200(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
.Ltmp1080:
	.loc	1 585 10 is_stmt 1              # formatter_private.c3:585:10
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-256(%rbp), %rax
	movl	$585, (%rsp)                    # imm = 0x249
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1081:
.LBB19_86:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-1064(%rbp), %rcx               # 8-byte Reload
	movq	-1080(%rbp), %rax               # 8-byte Reload
	movq	%rax, -264(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -272(%rbp)
	movq	%rax, -296(%rbp)
	leaq	-264(%rbp), %rcx
	movq	%rcx, -304(%rbp)
	movq	%rax, -280(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -288(%rbp)
	leaq	-304(%rbp), %rax
	movq	%rax, -320(%rbp)
	movq	$2, -312(%rbp)
.Ltmp1082:
	.loc	1 587 10 is_stmt 1              # formatter_private.c3:587:10
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-320(%rbp), %rax
	movl	$587, (%rsp)                    # imm = 0x24B
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1083:
.LBB19_87:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-1096(%rbp), %rcx               # 8-byte Reload
	movq	-1112(%rbp), %rax               # 8-byte Reload
	movq	%rax, -328(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -336(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-328(%rbp), %rcx
	movq	%rcx, -368(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-336(%rbp), %rax
	movq	%rax, -352(%rbp)
	leaq	-368(%rbp), %rax
	movq	%rax, -384(%rbp)
	movq	$2, -376(%rbp)
.Ltmp1084:
	.loc	1 589 10 is_stmt 1              # formatter_private.c3:589:10
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-384(%rbp), %rax
	movl	$589, (%rsp)                    # imm = 0x24D
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1085:
.LBB19_88:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-1128(%rbp), %rcx               # 8-byte Reload
	movq	-1144(%rbp), %rax               # 8-byte Reload
	movq	%rax, -424(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -432(%rbp)
	movq	%rax, -456(%rbp)
	leaq	-424(%rbp), %rcx
	movq	%rcx, -464(%rbp)
	movq	%rax, -440(%rbp)
	leaq	-432(%rbp), %rax
	movq	%rax, -448(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, -480(%rbp)
	movq	$2, -472(%rbp)
	.loc	1 593 8 is_stmt 1               # formatter_private.c3:593:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-480(%rbp), %rax
	movl	$593, (%rsp)                    # imm = 0x251
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1086:
.LBB19_89:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1160(%rbp), %rcx               # 8-byte Reload
	movq	-1176(%rbp), %rax               # 8-byte Reload
	movq	%rax, -496(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -504(%rbp)
	movq	%rax, -536(%rbp)
	leaq	-496(%rbp), %rcx
	movq	%rcx, -544(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-504(%rbp), %rax
	movq	%rax, -528(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, -560(%rbp)
	movq	$2, -552(%rbp)
.Ltmp1087:
	.loc	1 601 8 is_stmt 1               # formatter_private.c3:601:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-560(%rbp), %rax
	movl	$601, (%rsp)                    # imm = 0x259
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1088:
.LBB19_90:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1184(%rbp), %rcx               # 8-byte Reload
	movq	-1200(%rbp), %rax               # 8-byte Reload
	movq	%rax, -568(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -576(%rbp)
	movq	%rax, -600(%rbp)
	leaq	-568(%rbp), %rcx
	movq	%rcx, -608(%rbp)
	movq	%rax, -584(%rbp)
	leaq	-576(%rbp), %rax
	movq	%rax, -592(%rbp)
	leaq	-608(%rbp), %rax
	movq	%rax, -624(%rbp)
	movq	$2, -616(%rbp)
.Ltmp1089:
	.loc	1 604 8 is_stmt 1               # formatter_private.c3:604:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-624(%rbp), %rax
	movl	$604, (%rsp)                    # imm = 0x25C
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1090:
.LBB19_91:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1208(%rbp), %rcx               # 8-byte Reload
	movq	-1224(%rbp), %rax               # 8-byte Reload
	movq	%rax, -632(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -640(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-632(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	%rax, -648(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -688(%rbp)
	movq	$2, -680(%rbp)
.Ltmp1091:
	.loc	1 607 8 is_stmt 1               # formatter_private.c3:607:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-688(%rbp), %rax
	movl	$607, (%rsp)                    # imm = 0x25F
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1092:
.LBB19_92:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1232(%rbp), %rax               # 8-byte Reload
	movq	%rax, -704(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	$0, -712(%rbp)
	movq	%rax, -744(%rbp)
	leaq	-704(%rbp), %rcx
	movq	%rcx, -752(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-712(%rbp), %rax
	movq	%rax, -736(%rbp)
	leaq	-752(%rbp), %rax
	movq	%rax, -768(%rbp)
	movq	$2, -760(%rbp)
	.loc	1 609 28 is_stmt 1              # formatter_private.c3:609:28
	leaq	.panic_msg.156(%rip), %rdi
	movl	$61, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-768(%rbp), %rax
	movl	$609, (%rsp)                    # imm = 0x261
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB19_93:
	.loc	1 0 28 is_stmt 0                # formatter_private.c3:0:28
	movq	-1248(%rbp), %rax               # 8-byte Reload
	movq	%rax, -776(%rbp)
	movq	($ct.long)@GOTPCREL(%rip), %rax
	movq	%rax, -792(%rbp)
	leaq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	leaq	-800(%rbp), %rax
	movq	%rax, -816(%rbp)
	movq	$1, -808(%rbp)
	.loc	1 609 28                        # formatter_private.c3:609:28
	leaq	.panic_msg.90(%rip), %rdi
	movl	$43, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-816(%rbp), %rax
	movl	$609, (%rsp)                    # imm = 0x261
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB19_94:
	.loc	1 0 28                          # formatter_private.c3:0:28
	movq	-1232(%rbp), %rcx               # 8-byte Reload
	movq	-1264(%rbp), %rax               # 8-byte Reload
	movq	%rax, -824(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -832(%rbp)
	movq	%rax, -856(%rbp)
	leaq	-824(%rbp), %rcx
	movq	%rcx, -864(%rbp)
	movq	%rax, -840(%rbp)
	leaq	-832(%rbp), %rax
	movq	%rax, -848(%rbp)
	leaq	-864(%rbp), %rax
	movq	%rax, -880(%rbp)
	movq	$2, -872(%rbp)
	.loc	1 609 28                        # formatter_private.c3:609:28
	leaq	.panic_msg.157(%rip), %rdi
	movl	$60, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.152(%rip), %r8
	movl	$11, %r9d
	leaq	-880(%rbp), %rax
	movl	$609, (%rsp)                    # imm = 0x261
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1093:
.Lfunc_end19:
	.size	std.io.Formatter.ntoa_format, .Lfunc_end19-std.io.Formatter.ntoa_format
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.ntoa_any
	.type	std.io.Formatter.ntoa_any,@function
std.io.Formatter.ntoa_any:              # @std.io.Formatter.ntoa_any
.Lfunc_begin20:
	.loc	1 614 0 is_stmt 1               # formatter_private.c3:614:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$768, %rsp                      # imm = 0x300
	movq	%rdi, -560(%rbp)                # 8-byte Spill
	movq	%rsi, -552(%rbp)                # 8-byte Spill
	movq	%rdx, -544(%rbp)                # 8-byte Spill
	movq	%rcx, -536(%rbp)                # 8-byte Spill
	movl	%r8d, -524(%rbp)                # 4-byte Spill
	movq	%fs:40, %rax
	movq	%rax, -8(%rbp)
.Ltmp1094:
	.loc	1 615 1 prologue_end            # formatter_private.c3:615:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB20_35
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movl	-524(%rbp), %eax                # 4-byte Reload
	movq	-536(%rbp), %rcx                # 8-byte Reload
	movq	-544(%rbp), %rdx                # 8-byte Reload
	movq	-552(%rbp), %rsi                # 8-byte Reload
	movq	%rsi, -424(%rbp)
	movq	%rdx, -440(%rbp)
	movq	%rcx, -432(%rbp)
	movl	%eax, -444(%rbp)
	.loc	1 616 7 is_stmt 1               # formatter_private.c3:616:7
	movb	$0, -445(%rbp)
	movq	-440(%rbp), %rsi
	movq	-432(%rbp), %rdx
	.loc	1 617 19                        # formatter_private.c3:617:19
	leaq	-480(%rbp), %rdi
	leaq	-445(%rbp), %rcx
	callq	std.io.int_from_any
	movq	%rax, -568(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB20_3
# %bb.2:
	.loc	1 0 19 is_stmt 0                # formatter_private.c3:0:19
	movq	-568(%rbp), %rax                # 8-byte Reload
	.loc	1 617 19                        # formatter_private.c3:617:19
	movq	%rax, -464(%rbp)
	jmp	.LBB20_4
.LBB20_3:
	jmp	.LBB20_5
.LBB20_4:
	movq	($ct.fault)@GOTPCREL(%rip), %rax
	movq	%rax, -488(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, -496(%rbp)
	leaq	-496(%rbp), %rax
	movq	%rax, -512(%rbp)
	movq	$1, -504(%rbp)
	leaq	.panic_msg.51(%rip), %rdi
	movl	$36, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.158(%rip), %r8
	movl	$8, %r9d
	leaq	-512(%rbp), %rax
	movl	$617, (%rsp)                    # imm = 0x269
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB20_5:
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-424(%rbp), %rax
	movq	%rax, -600(%rbp)                # 8-byte Spill
	movq	-480(%rbp), %rcx
	movq	%rcx, -592(%rbp)                # 8-byte Spill
	movq	-472(%rbp), %rcx
	movq	%rcx, -584(%rbp)                # 8-byte Spill
	movb	-445(%rbp), %cl
	movb	%cl, -573(%rbp)                 # 1-byte Spill
	movl	-444(%rbp), %ecx
	movl	%ecx, -572(%rbp)                # 4-byte Spill
.Ltmp1095:
	.loc	1 530 1 is_stmt 1               # formatter_private.c3:530:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB20_25
# %bb.6:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movl	-572(%rbp), %eax                # 4-byte Reload
	movb	-573(%rbp), %cl                 # 1-byte Reload
	movq	-584(%rbp), %rdx                # 8-byte Reload
	movq	-592(%rbp), %rsi                # 8-byte Reload
	movq	-600(%rbp), %rdi                # 8-byte Reload
	movq	%rdi, -280(%rbp)
	movq	%rsi, -304(%rbp)
	movq	%rdx, -296(%rbp)
	movb	%cl, -305(%rbp)
	movl	%eax, -312(%rbp)
	.loc	1 532 6 is_stmt 1               # formatter_private.c3:532:6
	movq	$0, -320(%rbp)
	.loc	1 535 6                         # formatter_private.c3:535:6
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	jne	.LBB20_8
	jmp	.LBB20_7
.LBB20_7:
	.loc	1 535 14 is_stmt 0              # formatter_private.c3:535:14
	movq	-280(%rbp), %rax
	.loc	1 535 32                        # formatter_private.c3:535:32
	movl	16(%rax), %ecx
	andl	$-17, %ecx
	movl	%ecx, 16(%rax)
.LBB20_8:
	.loc	1 538 7 is_stmt 1               # formatter_private.c3:538:7
	movq	-280(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$6, %eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -601(%rbp)                 # 1-byte Spill
	jne	.LBB20_10
# %bb.9:
	.loc	1 538 31 is_stmt 0              # formatter_private.c3:538:31
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	setne	%al
	movb	%al, -601(%rbp)                 # 1-byte Spill
.LBB20_10:
	.loc	1 0 31                          # formatter_private.c3:0:31
	movb	-601(%rbp), %al                 # 1-byte Reload
	.loc	1 538 31                        # formatter_private.c3:538:31
	testb	$1, %al
	jne	.LBB20_11
	jmp	.LBB20_22
.LBB20_11:
.Ltmp1096:
	.loc	1 540 19 is_stmt 1              # formatter_private.c3:540:19
	movq	-280(%rbp), %rax
	movl	16(%rax), %eax
	shrl	$5, %eax
	andl	$1, %eax
	movb	%al, %cl
	.loc	1 540 48 is_stmt 0              # formatter_private.c3:540:48
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -603(%rbp)                 # 1-byte Spill
	testb	$1, %cl
	movb	%al, -602(%rbp)                 # 1-byte Spill
	jne	.LBB20_39
# %bb.38:
	.loc	1 0 48                          # formatter_private.c3:0:48
	movb	-603(%rbp), %al                 # 1-byte Reload
	movb	%al, -602(%rbp)                 # 1-byte Spill
.LBB20_39:
	movb	-602(%rbp), %al                 # 1-byte Reload
	.loc	1 540 48                        # formatter_private.c3:540:48
	movzbl	%al, %eax
	.loc	1 540 18                        # formatter_private.c3:540:18
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -321(%rbp)
.LBB20_12:                              # =>This Inner Loop Header: Depth=1
.Ltmp1097:
	.loc	1 543 8 is_stmt 1               # formatter_private.c3:543:8
	movl	$256, %eax                      # imm = 0x100
	cmpq	-320(%rbp), %rax
	ja	.LBB20_14
# %bb.13:
	.loc	1 543 47 is_stmt 0              # formatter_private.c3:543:47
	movq	std.io.INTERNAL_BUFFER_EXCEEDED@GOTPCREL(%rip), %rax
	movq	%rax, -616(%rbp)                # 8-byte Spill
	jmp	.LBB20_29
.LBB20_14:                              #   in Loop: Header=BB20_12 Depth=1
	.loc	1 544 24 is_stmt 1              # formatter_private.c3:544:24
	movq	-304(%rbp), %rax
	movq	%rax, -648(%rbp)                # 8-byte Spill
	movq	-296(%rbp), %rax
	movq	%rax, -640(%rbp)                # 8-byte Spill
	.loc	1 544 32 is_stmt 0              # formatter_private.c3:544:32
	movl	-312(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -632(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	sete	%al
	xorl	%ecx, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -624(%rbp)                # 8-byte Spill
	.loc	1 544 17                        # formatter_private.c3:544:17
	testb	$1, %al
	jne	.LBB20_26
# %bb.15:                               #   in Loop: Header=BB20_12 Depth=1
	.loc	1 0 17                          # formatter_private.c3:0:17
	movq	-624(%rbp), %rcx                # 8-byte Reload
	movq	-632(%rbp), %rdx                # 8-byte Reload
	movq	-640(%rbp), %rsi                # 8-byte Reload
	movq	-648(%rbp), %rdi                # 8-byte Reload
	.loc	1 544 17                        # formatter_private.c3:544:17
	callq	__umodti3@PLT
                                        # kill: def $al killed $al killed $rax
	movb	%al, -322(%rbp)
	.loc	1 545 17 is_stmt 1              # formatter_private.c3:545:17
	movzbl	-322(%rbp), %eax
	movl	%eax, -652(%rbp)                # 4-byte Spill
	.loc	1 545 26 is_stmt 0              # formatter_private.c3:545:26
	movzbl	-322(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB20_17
# %bb.16:                               #   in Loop: Header=BB20_12 Depth=1
	.loc	1 545 39                        # formatter_private.c3:545:39
	movb	$48, %al
	movb	%al, -653(%rbp)                 # 1-byte Spill
	jmp	.LBB20_18
.LBB20_17:                              #   in Loop: Header=BB20_12 Depth=1
	.loc	1 545 45                        # formatter_private.c3:545:45
	movb	-321(%rbp), %al
	movb	%al, -653(%rbp)                 # 1-byte Spill
.LBB20_18:                              #   in Loop: Header=BB20_12 Depth=1
	.loc	1 0 45                          # formatter_private.c3:0:45
	movl	-652(%rbp), %eax                # 4-byte Reload
	movb	-653(%rbp), %cl                 # 1-byte Reload
	.loc	1 545 45                        # formatter_private.c3:545:45
	movzbl	%cl, %ecx
	.loc	1 545 17                        # formatter_private.c3:545:17
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -665(%rbp)                 # 1-byte Spill
	.loc	1 545 8                         # formatter_private.c3:545:8
	movq	-320(%rbp), %rax
	movq	%rax, -664(%rbp)                # 8-byte Spill
	movq	%rax, %rcx
	addq	$1, %rcx
	movq	%rcx, -320(%rbp)
	cmpq	$256, %rax                      # imm = 0x100
	setae	%al
	testb	$1, %al
	jne	.LBB20_27
# %bb.19:                               #   in Loop: Header=BB20_12 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-664(%rbp), %rax                # 8-byte Reload
	movb	-665(%rbp), %cl                 # 1-byte Reload
	.loc	1 545 8                         # formatter_private.c3:545:8
	movb	%cl, -272(%rbp,%rax)
	.loc	1 546 4 is_stmt 1               # formatter_private.c3:546:4
	movq	-304(%rbp), %rax
	movq	%rax, -704(%rbp)                # 8-byte Spill
	movq	-296(%rbp), %rax
	movq	%rax, -696(%rbp)                # 8-byte Spill
	.loc	1 546 13 is_stmt 0              # formatter_private.c3:546:13
	movl	-312(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -688(%rbp)                # 8-byte Spill
	testq	%rax, %rax
	sete	%al
	xorl	%ecx, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -680(%rbp)                # 8-byte Spill
	.loc	1 546 4                         # formatter_private.c3:546:4
	testb	$1, %al
	jne	.LBB20_28
# %bb.20:                               #   in Loop: Header=BB20_12 Depth=1
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-680(%rbp), %rcx                # 8-byte Reload
	movq	-688(%rbp), %rdx                # 8-byte Reload
	movq	-696(%rbp), %rsi                # 8-byte Reload
	movq	-704(%rbp), %rdi                # 8-byte Reload
	.loc	1 546 4                         # formatter_private.c3:546:4
	callq	__udivti3@PLT
	movq	%rdx, -296(%rbp)
	movq	%rax, -304(%rbp)
.Ltmp1098:
	.loc	1 548 10 is_stmt 1              # formatter_private.c3:548:10
	movq	-304(%rbp), %rax
	movq	-296(%rbp), %rcx
	orq	%rcx, %rax
	jne	.LBB20_12
	jmp	.LBB20_21
.LBB20_21:
	jmp	.LBB20_22
.Ltmp1099:
.LBB20_22:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-280(%rbp), %rsi
	movq	-320(%rbp), %r8
	movb	-305(%rbp), %r9b
	movl	-312(%rbp), %eax
	.loc	1 550 9 is_stmt 1               # formatter_private.c3:550:9
	leaq	-416(%rbp), %rdi
	leaq	-272(%rbp), %rdx
	movl	$256, %ecx                      # imm = 0x100
	movzbl	%r9b, %r9d
	movl	%eax, (%rsp)
	callq	std.io.Formatter.ntoa_format
	movq	%rax, -712(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB20_24
# %bb.23:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-712(%rbp), %rax                # 8-byte Reload
	.loc	1 550 9                         # formatter_private.c3:550:9
	movq	%rax, -408(%rbp)
	movq	-408(%rbp), %rax
	movq	%rax, -616(%rbp)                # 8-byte Spill
	jmp	.LBB20_29
.LBB20_24:
	movq	-416(%rbp), %rax
	movq	%rax, -520(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -616(%rbp)                # 8-byte Spill
	jmp	.LBB20_29
.LBB20_25:
	.loc	1 529 24 is_stmt 1              # formatter_private.c3:529:24
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$529, (%rsp)                    # imm = 0x211
	callq	*(%rax)
.LBB20_26:
.Ltmp1100:
	.loc	1 544 17                        # formatter_private.c3:544:17
	leaq	.panic_msg.148(%rip), %rdi
	movl	$10, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$544, (%rsp)                    # imm = 0x220
	callq	*(%rax)
.LBB20_27:
	.loc	1 0 17 is_stmt 0                # formatter_private.c3:0:17
	movq	-664(%rbp), %rcx                # 8-byte Reload
	movq	$256, -336(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -344(%rbp)
	movq	%rax, -376(%rbp)
	leaq	-336(%rbp), %rcx
	movq	%rcx, -384(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-344(%rbp), %rax
	movq	%rax, -368(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	$2, -392(%rbp)
	.loc	1 545 8 is_stmt 1               # formatter_private.c3:545:8
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	leaq	-400(%rbp), %rax
	movl	$545, (%rsp)                    # imm = 0x221
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB20_28:
	.loc	1 546 4                         # formatter_private.c3:546:4
	leaq	.panic_msg.149(%rip), %rdi
	movl	$17, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.151(%rip), %r8
	movl	$4, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$546, (%rsp)                    # imm = 0x222
	callq	*(%rax)
.Ltmp1101:
.LBB20_29:
	.loc	1 0 4 is_stmt 0                 # formatter_private.c3:0:4
	movq	-616(%rbp), %rax                # 8-byte Reload
	movq	%rax, -720(%rbp)                # 8-byte Spill
	.loc	1 617 9 is_stmt 1               # formatter_private.c3:617:9
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB20_31
# %bb.30:
	.loc	1 0 9 is_stmt 0                 # formatter_private.c3:0:9
	movq	-720(%rbp), %rax                # 8-byte Reload
	.loc	1 617 9                         # formatter_private.c3:617:9
	movq	%rax, -456(%rbp)
	jmp	.LBB20_33
.LBB20_31:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-560(%rbp), %rax                # 8-byte Reload
	.loc	1 617 9                         # formatter_private.c3:617:9
	movq	-520(%rbp), %rcx
	movq	%rcx, (%rax)
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB20_37
# %bb.32:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 617 9 epilogue_begin          # formatter_private.c3:617:9
	addq	$768, %rsp                      # imm = 0x300
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_33:
	.cfi_def_cfa %rbp, 16
	movq	-456(%rbp), %rax
	movq	%rax, -728(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB20_37
# %bb.34:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-728(%rbp), %rax                # 8-byte Reload
	.loc	1 617 9 epilogue_begin          # formatter_private.c3:617:9
	addq	$768, %rsp                      # imm = 0x300
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_35:
	.cfi_def_cfa %rbp, 16
	.loc	1 614 28 is_stmt 1              # formatter_private.c3:614:28
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, -736(%rbp)                # 8-byte Spill
	movq	%fs:40, %rax
	movq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	jne	.LBB20_37
# %bb.36:
	.loc	1 0 28 is_stmt 0                # formatter_private.c3:0:28
	movq	-736(%rbp), %rax                # 8-byte Reload
	.loc	1 614 28                        # formatter_private.c3:614:28
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.158(%rip), %r8
	movl	$8, %r9d
	movl	$614, (%rsp)                    # imm = 0x266
	callq	*%rax
.LBB20_37:
	.loc	1 0 0                           # formatter_private.c3:0:0
	callq	__stack_chk_fail@PLT
.Ltmp1102:
.Lfunc_end20:
	.size	std.io.Formatter.ntoa_any, .Lfunc_end20-std.io.Formatter.ntoa_any
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out_char
	.type	std.io.Formatter.out_char,@function
std.io.Formatter.out_char:              # @std.io.Formatter.out_char
.Lfunc_begin21:
	.loc	1 620 0 is_stmt 1               # formatter_private.c3:620:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1936, %rsp                     # imm = 0x790
	movq	%rdi, -1216(%rbp)               # 8-byte Spill
	movq	%rsi, -1208(%rbp)               # 8-byte Spill
	movq	%rdx, -1200(%rbp)               # 8-byte Spill
	movq	%rcx, -1192(%rbp)               # 8-byte Spill
.Ltmp1103:
	.loc	1 621 1 prologue_end            # formatter_private.c3:621:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB21_221
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-1192(%rbp), %rax               # 8-byte Reload
	movq	-1200(%rbp), %rcx               # 8-byte Reload
	movq	-1208(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -200(%rbp)
	movq	%rcx, -216(%rbp)
	movq	%rax, -208(%rbp)
	.loc	1 622 7 is_stmt 1               # formatter_private.c3:622:7
	movq	-208(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB21_6
# %bb.2:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-200(%rbp), %rsi
.Ltmp1104:
	.loc	1 624 10 is_stmt 1              # formatter_private.c3:624:10
	leaq	-232(%rbp), %rdi
	leaq	.L.str.160(%rip), %rdx
	movl	$10, %ecx
	callq	std.io.Formatter.out_substr
	movq	%rax, -1224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_4
# %bb.3:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-1224(%rbp), %rax               # 8-byte Reload
	.loc	1 624 10                        # formatter_private.c3:624:10
	movq	%rax, -224(%rbp)
	jmp	.LBB21_5
.LBB21_4:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-1216(%rbp), %rax               # 8-byte Reload
	.loc	1 624 10                        # formatter_private.c3:624:10
	movq	-232(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 624 10 epilogue_begin         # formatter_private.c3:624:10
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:
	.cfi_def_cfa %rbp, 16
	movq	-224(%rbp), %rax
	.loc	1 624 10 epilogue_begin         # formatter_private.c3:624:10
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1105:
.LBB21_6:
	.cfi_def_cfa %rbp, 16
	.loc	1 626 12 is_stmt 1              # formatter_private.c3:626:12
	movq	$1, -240(%rbp)
	.loc	1 628 7                         # formatter_private.c3:628:7
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB21_23
# %bb.7:
.Ltmp1106:
	.loc	1 630 6                         # formatter_private.c3:630:6
	movq	-240(%rbp), %rax
	movq	%rax, -1256(%rbp)               # 8-byte Spill
	.loc	1 630 27 is_stmt 0              # formatter_private.c3:630:27
	movq	-200(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1248(%rbp)               # 8-byte Spill
	.loc	1 630 39                        # formatter_private.c3:630:39
	movq	-240(%rbp), %rax
	movq	%rax, -1240(%rbp)               # 8-byte Spill
	movq	-200(%rbp), %rax
	movq	%rax, -1232(%rbp)               # 8-byte Spill
.Ltmp1107:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_17
# %bb.8:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-1240(%rbp), %rax               # 8-byte Reload
	movq	-1248(%rbp), %rcx               # 8-byte Reload
	movq	-1232(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movb	$32, -9(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -32(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-24(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.Ltmp1108:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -48(%rbp)
.LBB21_9:                               # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB21_13
# %bb.10:                               #   in Loop: Header=BB21_9 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-8(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-64(%rbp), %rdi
	movzbl	-9(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -1264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_12
# %bb.11:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-1264(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -1272(%rbp)               # 8-byte Spill
	jmp	.LBB21_18
.LBB21_12:                              #   in Loop: Header=BB21_9 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB21_9
.Ltmp1109:
.LBB21_13:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -68(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
.Ltmp1110:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-84(%rbp), %rax
	cmpq	-96(%rbp), %rax
	jle	.LBB21_15
.Ltmp1111:
# %bb.14:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-68(%rbp), %rax
	movq	%rax, -1280(%rbp)               # 8-byte Spill
	jmp	.LBB21_16
.LBB21_15:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-80(%rbp), %rax
	movq	%rax, -1280(%rbp)               # 8-byte Spill
.LBB21_16:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-1280(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -256(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1272(%rbp)               # 8-byte Spill
	jmp	.LBB21_18
.Ltmp1112:
.LBB21_17:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp1113:
.LBB21_18:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1272(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1288(%rbp)               # 8-byte Spill
	.loc	1 630 13 is_stmt 1              # formatter_private.c3:630:13
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_20
# %bb.19:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-1288(%rbp), %rax               # 8-byte Reload
	.loc	1 630 13                        # formatter_private.c3:630:13
	movq	%rax, -248(%rbp)
	jmp	.LBB21_21
.LBB21_20:
	jmp	.LBB21_22
.LBB21_21:
	movq	-248(%rbp), %rax
	.loc	1 630 13 epilogue_begin         # formatter_private.c3:630:13
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_22:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1256(%rbp), %rax               # 8-byte Reload
	.loc	1 630 6                         # formatter_private.c3:630:6
	addq	-256(%rbp), %rax
	movq	%rax, -240(%rbp)
.Ltmp1114:
.LBB21_23:
	.loc	1 0 6                           # formatter_private.c3:0:6
	movq	-216(%rbp), %rax
	movq	%rax, -280(%rbp)
	movq	-208(%rbp), %rax
	movq	%rax, -272(%rbp)
.Ltmp1115:
	.loc	5 634 13 is_stmt 1              # types.c3:634:13
	movl	$3, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB21_25
# %bb.24:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.159(%rip), %r8
	movl	$8, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$634, (%rsp)                    # imm = 0x27A
	callq	*(%rax)
.LBB21_25:
	.loc	5 19 11                         # types.c3:19:11
	movq	-272(%rbp), %rax
	.loc	5 634 13                        # types.c3:634:13
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB21_27
# %bb.26:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.159(%rip), %r8
	movl	$8, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$634, (%rsp)                    # imm = 0x27A
	callq	*(%rax)
.Ltmp1116:
.LBB21_27:
	.loc	5 23 20                         # types.c3:23:20
	movq	-272(%rbp), %rax
	movq	%rax, -296(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-296(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -297(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-296(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$3, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -298(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$-1, -304(%rbp)
	.loc	5 27 14                         # types.c3:27:14
	movl	$0, -308(%rbp)
	movq	-296(%rbp), %rax
	movq	%rax, -320(%rbp)
# %bb.28:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-320(%rbp), %rax
	movq	%rax, -1304(%rbp)               # 8-byte Spill
	movq	%rax, -1296(%rbp)               # 8-byte Spill
.LBB21_29:                              # =>This Inner Loop Header: Depth=1
	movq	-1296(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1320(%rbp)               # 8-byte Spill
.Ltmp1117:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1305(%rbp)                # 1-byte Spill
	je	.LBB21_31
# %bb.30:                               #   in Loop: Header=BB21_29 Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1320(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1296(%rbp)               # 8-byte Spill
	movb	%al, -1305(%rbp)                # 1-byte Spill
	jne	.LBB21_29
.LBB21_31:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1305(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB21_32
	jmp	.LBB21_38
.LBB21_32:
.Ltmp1118:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-280(%rbp), %rax
	movq	%rax, -1328(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_222
# %bb.33:
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-1328(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -321(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -298(%rbp)
	movb	%al, -1329(%rbp)                # 1-byte Spill
	je	.LBB21_35
# %bb.34:
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-321(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -1329(%rbp)                # 1-byte Spill
.LBB21_35:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1329(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB21_36
	jmp	.LBB21_37
.LBB21_36:
	.loc	5 32 41                         # types.c3:32:41
	jmp	.LBB21_153
.LBB21_37:
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-321(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1119:
.LBB21_38:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1344(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB21_39
.LBB21_39:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1344(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1360(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1345(%rbp)                # 1-byte Spill
	je	.LBB21_41
# %bb.40:                               #   in Loop: Header=BB21_39 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1360(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1344(%rbp)               # 8-byte Spill
	movb	%al, -1345(%rbp)                # 1-byte Spill
	jne	.LBB21_39
.LBB21_41:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1345(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB21_42
	jmp	.LBB21_53
.LBB21_42:
.Ltmp1120:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-280(%rbp), %rax
	movq	%rax, -1368(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_223
# %bb.43:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-1368(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -1376(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_224
# %bb.44:
	.loc	5 0 15                          # types.c3:0:15
	movq	-1368(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -324(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -298(%rbp)
	movb	%al, -1377(%rbp)                # 1-byte Spill
	je	.LBB21_46
# %bb.45:
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-324(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -1377(%rbp)                # 1-byte Spill
.LBB21_46:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1377(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB21_47
	jmp	.LBB21_48
.LBB21_47:
	.loc	5 36 41                         # types.c3:36:41
	jmp	.LBB21_153
.LBB21_48:
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-324(%rbp), %eax
	.loc	5 37 12 is_stmt 0               # types.c3:37:12
	movl	-304(%rbp), %ecx
	.loc	5 37 8                          # types.c3:37:8
	cmpl	%ecx, %eax
	setg	%al
	cmpl	$0, %ecx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -1378(%rbp)                # 1-byte Spill
	jne	.LBB21_50
# %bb.49:
	.loc	5 37 19                         # types.c3:37:19
	movswl	-324(%rbp), %ecx
	.loc	5 37 23                         # types.c3:37:23
	movl	-308(%rbp), %eax
	.loc	5 37 19                         # types.c3:37:19
	cmpl	%eax, %ecx
	setl	%cl
	cmpl	$0, %eax
	setl	%al
	orb	%cl, %al
	movb	%al, -1378(%rbp)                # 1-byte Spill
.LBB21_50:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1378(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB21_51
	jmp	.LBB21_52
.LBB21_51:
	.loc	5 37 35                         # types.c3:37:35
	jmp	.LBB21_153
.LBB21_52:
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-324(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1121:
.LBB21_53:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1392(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB21_54
.LBB21_54:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1392(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1408(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1393(%rbp)                # 1-byte Spill
	je	.LBB21_56
# %bb.55:                               #   in Loop: Header=BB21_54 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1408(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1392(%rbp)               # 8-byte Spill
	movb	%al, -1393(%rbp)                # 1-byte Spill
	jne	.LBB21_54
.LBB21_56:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1393(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB21_57
	jmp	.LBB21_68
.LBB21_57:
.Ltmp1122:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-280(%rbp), %rax
	movq	%rax, -1416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_225
# %bb.58:
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-1416(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -1424(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_226
# %bb.59:
	.loc	5 0 13                          # types.c3:0:13
	movq	-1416(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -404(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -298(%rbp)
	movb	%al, -1425(%rbp)                # 1-byte Spill
	je	.LBB21_61
# %bb.60:
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -404(%rbp)
	setl	%al
	movb	%al, -1425(%rbp)                # 1-byte Spill
.LBB21_61:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1425(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB21_62
	jmp	.LBB21_63
.LBB21_62:
	.loc	5 41 41                         # types.c3:41:41
	jmp	.LBB21_153
.LBB21_63:
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-404(%rbp), %eax
	.loc	5 42 12 is_stmt 0               # types.c3:42:12
	movl	-304(%rbp), %ecx
	.loc	5 42 8                          # types.c3:42:8
	cmpl	%ecx, %eax
	setg	%al
	cmpl	$0, %ecx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -1426(%rbp)                # 1-byte Spill
	jne	.LBB21_65
# %bb.64:
	.loc	5 42 19                         # types.c3:42:19
	movl	-404(%rbp), %ecx
	.loc	5 42 23                         # types.c3:42:23
	movl	-308(%rbp), %eax
	.loc	5 42 19                         # types.c3:42:19
	cmpl	%eax, %ecx
	setl	%cl
	cmpl	$0, %eax
	setl	%al
	orb	%cl, %al
	movb	%al, -1426(%rbp)                # 1-byte Spill
.LBB21_65:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1426(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB21_66
	jmp	.LBB21_67
.LBB21_66:
	.loc	5 42 35                         # types.c3:42:35
	jmp	.LBB21_153
.LBB21_67:
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-404(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1123:
.LBB21_68:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1440(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB21_69
.LBB21_69:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1440(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1456(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1441(%rbp)                # 1-byte Spill
	je	.LBB21_71
# %bb.70:                               #   in Loop: Header=BB21_69 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1456(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1440(%rbp)               # 8-byte Spill
	movb	%al, -1441(%rbp)                # 1-byte Spill
	jne	.LBB21_69
.LBB21_71:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1441(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB21_72
	jmp	.LBB21_83
.LBB21_72:
.Ltmp1124:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-280(%rbp), %rax
	movq	%rax, -1464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_227
# %bb.73:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-1464(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -1472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_228
# %bb.74:
	.loc	5 0 14                          # types.c3:0:14
	movq	-1464(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -488(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -298(%rbp)
	movb	%al, -1473(%rbp)                # 1-byte Spill
	je	.LBB21_76
# %bb.75:
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -488(%rbp)
	setl	%al
	movb	%al, -1473(%rbp)                # 1-byte Spill
.LBB21_76:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1473(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB21_77
	jmp	.LBB21_78
.LBB21_77:
	.loc	5 46 41                         # types.c3:46:41
	jmp	.LBB21_153
.LBB21_78:
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-488(%rbp), %rax
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movl	-304(%rbp), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	5 47 8                          # types.c3:47:8
	cmpq	%rcx, %rax
	setg	%al
	cmpq	$0, %rcx
	setge	%cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -1474(%rbp)                # 1-byte Spill
	jne	.LBB21_80
# %bb.79:
	.loc	5 47 19                         # types.c3:47:19
	movq	-488(%rbp), %rcx
	.loc	5 47 23                         # types.c3:47:23
	movl	-308(%rbp), %eax
                                        # kill: def $rax killed $eax
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rax, %rcx
	setl	%cl
	cmpq	$0, %rax
	setl	%al
	orb	%cl, %al
	movb	%al, -1474(%rbp)                # 1-byte Spill
.LBB21_80:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1474(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB21_81
	jmp	.LBB21_82
.LBB21_81:
	.loc	5 47 35                         # types.c3:47:35
	jmp	.LBB21_153
.LBB21_82:
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-488(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1125:
.LBB21_83:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1488(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB21_84
.LBB21_84:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1488(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1504(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1489(%rbp)                # 1-byte Spill
	je	.LBB21_86
# %bb.85:                               #   in Loop: Header=BB21_84 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1504(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1488(%rbp)               # 8-byte Spill
	movb	%al, -1489(%rbp)                # 1-byte Spill
	jne	.LBB21_84
.LBB21_86:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1489(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB21_87
	jmp	.LBB21_98
.LBB21_87:
.Ltmp1126:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-280(%rbp), %rax
	movq	%rax, -1512(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_229
# %bb.88:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-1512(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -1520(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_230
# %bb.89:
	.loc	5 0 16                          # types.c3:0:16
	movq	-1512(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -568(%rbp)
	movq	%rax, -576(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -298(%rbp)
	movb	%al, -1521(%rbp)                # 1-byte Spill
	je	.LBB21_91
# %bb.90:
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-568(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -1521(%rbp)                # 1-byte Spill
.LBB21_91:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1521(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB21_92
	jmp	.LBB21_93
.LBB21_92:
	.loc	5 51 41                         # types.c3:51:41
	jmp	.LBB21_153
.LBB21_93:
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-576(%rbp), %rsi
	movq	-568(%rbp), %rcx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movl	-304(%rbp), %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	.loc	5 52 8                          # types.c3:52:8
	subq	%rsi, %rdx
                                        # kill: def $rax killed $eax
	sbbq	%rcx, %rax
	setl	%al
	movb	$1, %cl
	andb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -1522(%rbp)                # 1-byte Spill
	jne	.LBB21_95
# %bb.94:
	.loc	5 52 19                         # types.c3:52:19
	movq	-576(%rbp), %rcx
	movq	-568(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movl	-308(%rbp), %edx
                                        # kill: def $rdx killed $edx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rdx, %rcx
	sbbq	$0, %rax
	setl	%cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	orb	%cl, %al
	movb	%al, -1522(%rbp)                # 1-byte Spill
.LBB21_95:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1522(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB21_96
	jmp	.LBB21_97
.LBB21_96:
	.loc	5 52 35                         # types.c3:52:35
	jmp	.LBB21_153
.LBB21_97:
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-576(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1127:
.LBB21_98:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1536(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB21_99
.LBB21_99:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1536(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1552(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1537(%rbp)                # 1-byte Spill
	je	.LBB21_101
# %bb.100:                              #   in Loop: Header=BB21_99 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1552(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1536(%rbp)               # 8-byte Spill
	movb	%al, -1537(%rbp)                # 1-byte Spill
	jne	.LBB21_99
.LBB21_101:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1537(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB21_102
	jmp	.LBB21_106
.LBB21_102:
.Ltmp1128:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-280(%rbp), %rax
	movq	%rax, -1560(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_231
# %bb.103:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-1560(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -641(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-641(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jbe	.LBB21_105
# %bb.104:
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	jmp	.LBB21_153
.LBB21_105:
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-641(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1129:
.LBB21_106:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1568(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB21_107
.LBB21_107:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1568(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1584(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1569(%rbp)                # 1-byte Spill
	je	.LBB21_109
# %bb.108:                              #   in Loop: Header=BB21_107 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1584(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1568(%rbp)               # 8-byte Spill
	movb	%al, -1569(%rbp)                # 1-byte Spill
	jne	.LBB21_107
.LBB21_109:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1569(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB21_110
	jmp	.LBB21_117
.LBB21_110:
.Ltmp1130:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-280(%rbp), %rax
	movq	%rax, -1592(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_232
# %bb.111:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-1592(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -1600(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_233
# %bb.112:
	.loc	5 0 16                          # types.c3:0:16
	movq	-1592(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -644(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-644(%rbp), %ecx
	movb	$1, %al
	cmpl	-304(%rbp), %ecx
	movb	%al, -1601(%rbp)                # 1-byte Spill
	ja	.LBB21_114
# %bb.113:
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-644(%rbp), %eax
	cmpl	-308(%rbp), %eax
	setb	%al
	movb	%al, -1601(%rbp)                # 1-byte Spill
.LBB21_114:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1601(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB21_115
	jmp	.LBB21_116
.LBB21_115:
	.loc	5 60 35                         # types.c3:60:35
	jmp	.LBB21_153
.LBB21_116:
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-644(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1131:
.LBB21_117:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1616(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB21_118
.LBB21_118:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1616(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1632(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1617(%rbp)                # 1-byte Spill
	je	.LBB21_120
# %bb.119:                              #   in Loop: Header=BB21_118 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1632(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1616(%rbp)               # 8-byte Spill
	movb	%al, -1617(%rbp)                # 1-byte Spill
	jne	.LBB21_118
.LBB21_120:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1617(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB21_121
	jmp	.LBB21_128
.LBB21_121:
.Ltmp1132:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-280(%rbp), %rax
	movq	%rax, -1640(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_234
# %bb.122:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-1640(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -1648(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_235
# %bb.123:
	.loc	5 0 14                          # types.c3:0:14
	movq	-1640(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -724(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-724(%rbp), %ecx
	movb	$1, %al
	cmpl	-304(%rbp), %ecx
	movb	%al, -1649(%rbp)                # 1-byte Spill
	ja	.LBB21_125
# %bb.124:
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-724(%rbp), %eax
	cmpl	-308(%rbp), %eax
	setb	%al
	movb	%al, -1649(%rbp)                # 1-byte Spill
.LBB21_125:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1649(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB21_126
	jmp	.LBB21_127
.LBB21_126:
	.loc	5 64 35                         # types.c3:64:35
	jmp	.LBB21_153
.LBB21_127:
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-724(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1133:
.LBB21_128:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1664(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB21_129
.LBB21_129:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1664(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1680(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1665(%rbp)                # 1-byte Spill
	je	.LBB21_131
# %bb.130:                              #   in Loop: Header=BB21_129 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1680(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1664(%rbp)               # 8-byte Spill
	movb	%al, -1665(%rbp)                # 1-byte Spill
	jne	.LBB21_129
.LBB21_131:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1665(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB21_132
	jmp	.LBB21_139
.LBB21_132:
.Ltmp1134:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-280(%rbp), %rax
	movq	%rax, -1688(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_236
# %bb.133:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-1688(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -1696(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_237
# %bb.134:
	.loc	5 0 15                          # types.c3:0:15
	movq	-1688(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -808(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-808(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movl	-304(%rbp), %eax
	movl	%eax, %edx
	.loc	5 68 8                          # types.c3:68:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -1697(%rbp)                # 1-byte Spill
	ja	.LBB21_136
# %bb.135:
	.loc	5 68 19                         # types.c3:68:19
	movq	-808(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movl	-308(%rbp), %ecx
                                        # kill: def $rcx killed $ecx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, -1697(%rbp)                # 1-byte Spill
.LBB21_136:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1697(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB21_137
	jmp	.LBB21_138
.LBB21_137:
	.loc	5 68 35                         # types.c3:68:35
	jmp	.LBB21_153
.LBB21_138:
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-808(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.Ltmp1135:
.LBB21_139:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1304(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1712(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB21_140
.LBB21_140:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1712(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1728(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1713(%rbp)                # 1-byte Spill
	je	.LBB21_142
# %bb.141:                              #   in Loop: Header=BB21_140 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1728(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1712(%rbp)               # 8-byte Spill
	movb	%al, -1713(%rbp)                # 1-byte Spill
	jne	.LBB21_140
.LBB21_142:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1713(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB21_143
	jmp	.LBB21_150
.LBB21_143:
.Ltmp1136:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-280(%rbp), %rax
	movq	%rax, -1736(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_238
# %bb.144:
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-1736(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -1744(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB21_239
# %bb.145:
	.loc	5 0 17                          # types.c3:0:17
	movq	-1736(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -888(%rbp)
	movq	%rax, -896(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-896(%rbp), %rdi
	movq	-888(%rbp), %rdx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movl	-304(%rbp), %eax
	movl	%eax, %esi
	movb	$1, %al
	xorl	%ecx, %ecx
	.loc	5 72 8                          # types.c3:72:8
	subq	%rdi, %rsi
                                        # kill: def $rcx killed $ecx
	sbbq	%rdx, %rcx
	movb	%al, -1745(%rbp)                # 1-byte Spill
	jb	.LBB21_147
	jmp	.LBB21_146
.LBB21_146:
	.loc	5 72 19                         # types.c3:72:19
	movq	-896(%rbp), %rcx
	movq	-888(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movl	-308(%rbp), %edx
                                        # kill: def $rdx killed $edx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rdx, %rcx
	sbbq	$0, %rax
	setb	%al
	movb	%al, -1745(%rbp)                # 1-byte Spill
.LBB21_147:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1745(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB21_148
	jmp	.LBB21_149
.LBB21_148:
	.loc	5 72 35                         # types.c3:72:35
	jmp	.LBB21_153
.LBB21_149:
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-896(%rbp), %eax
	movl	%eax, -284(%rbp)
	jmp	.LBB21_152
.LBB21_150:
	jmp	.LBB21_151
.Ltmp1137:
.LBB21_151:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.161(%rip), %rax
	movq	%rax, -976(%rbp)
	movq	$30, -968(%rbp)
.Ltmp1138:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-976(%rbp), %rdi
	movq	-968(%rbp), %rsi
	movq	$0, -984(%rbp)
	movq	$0, -992(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.162(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.163(%rip), %r8
	movl	$18, %r9d
	leaq	-992(%rbp), %rax
	movl	$634, (%rsp)                    # imm = 0x27A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB21_152:
	movl	-284(%rbp), %eax
	movl	%eax, -1752(%rbp)               # 4-byte Spill
	jmp	.LBB21_154
.Ltmp1139:
.LBB21_153:
	.loc	1 634 45 is_stmt 1              # formatter_private.c3:634:45
	movl	$65533, %eax                    # imm = 0xFFFD
	movl	%eax, -1752(%rbp)               # 4-byte Spill
	jmp	.LBB21_154
.LBB21_154:
	.loc	1 0 45 is_stmt 0                # formatter_private.c3:0:45
	movl	-1752(%rbp), %eax               # 4-byte Reload
	.loc	1 634 45                        # formatter_private.c3:634:45
	movl	%eax, -260(%rbp)
	movb	$1, -993(%rbp)
# %bb.155:
	.loc	1 0 45                          # formatter_private.c3:0:45
	movb	-993(%rbp), %cl
	movb	%cl, -1753(%rbp)                # 1-byte Spill
	andb	$1, %cl
.Ltmp1140:
	.loc	1 637 8 is_stmt 1               # formatter_private.c3:637:8
	movl	-260(%rbp), %eax
	subl	$127, %eax
	setb	%al
	subb	%cl, %al
	jne	.LBB21_161
	jmp	.LBB21_156
.LBB21_156:
.Ltmp1141:
	.loc	1 638 13                        # formatter_private.c3:638:13
	movl	-260(%rbp), %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 638 4 is_stmt 0               # formatter_private.c3:638:4
	leaq	-1016(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1768(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_158
# %bb.157:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1768(%rbp), %rax               # 8-byte Reload
	.loc	1 638 4                         # formatter_private.c3:638:4
	movq	%rax, -1008(%rbp)
	jmp	.LBB21_159
.LBB21_158:
	jmp	.LBB21_160
.LBB21_159:
	movq	-1008(%rbp), %rax
	.loc	1 638 4 epilogue_begin          # formatter_private.c3:638:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_160:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB21_203
.Ltmp1142:
.LBB21_161:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movb	-1753(%rbp), %cl                # 1-byte Reload
	.loc	1 639 8 is_stmt 1               # formatter_private.c3:639:8
	movl	-260(%rbp), %eax
	subl	$2047, %eax                     # imm = 0x7FF
	setb	%al
	andb	$1, %cl
	subb	%cl, %al
	jne	.LBB21_171
	jmp	.LBB21_162
.LBB21_162:
.Ltmp1143:
	.loc	1 640 27                        # formatter_private.c3:640:27
	movl	-260(%rbp), %eax
	shrl	$6, %eax
	.loc	1 640 13 is_stmt 0              # formatter_private.c3:640:13
	orl	$192, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 640 4                         # formatter_private.c3:640:4
	leaq	-1032(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1776(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_164
# %bb.163:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1776(%rbp), %rax               # 8-byte Reload
	.loc	1 640 4                         # formatter_private.c3:640:4
	movq	%rax, -1024(%rbp)
	jmp	.LBB21_165
.LBB21_164:
	jmp	.LBB21_166
.LBB21_165:
	movq	-1024(%rbp), %rax
	.loc	1 640 4 epilogue_begin          # formatter_private.c3:640:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_166:
	.cfi_def_cfa %rbp, 16
	.loc	1 641 28 is_stmt 1              # formatter_private.c3:641:28
	movl	-260(%rbp), %eax
	andl	$63, %eax
	.loc	1 641 13 is_stmt 0              # formatter_private.c3:641:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 641 4                         # formatter_private.c3:641:4
	leaq	-1048(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1784(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_168
# %bb.167:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1784(%rbp), %rax               # 8-byte Reload
	.loc	1 641 4                         # formatter_private.c3:641:4
	movq	%rax, -1040(%rbp)
	jmp	.LBB21_169
.LBB21_168:
	jmp	.LBB21_170
.LBB21_169:
	movq	-1040(%rbp), %rax
	.loc	1 641 4 epilogue_begin          # formatter_private.c3:641:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_170:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB21_203
.Ltmp1144:
.LBB21_171:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movb	-1753(%rbp), %cl                # 1-byte Reload
	.loc	1 642 8 is_stmt 1               # formatter_private.c3:642:8
	movl	-260(%rbp), %eax
	subl	$65535, %eax                    # imm = 0xFFFF
	setb	%al
	andb	$1, %cl
	subb	%cl, %al
	jne	.LBB21_185
	jmp	.LBB21_172
.LBB21_172:
.Ltmp1145:
	.loc	1 643 27                        # formatter_private.c3:643:27
	movl	-260(%rbp), %eax
	shrl	$12, %eax
	.loc	1 643 13 is_stmt 0              # formatter_private.c3:643:13
	orl	$224, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 643 4                         # formatter_private.c3:643:4
	leaq	-1064(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1792(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_174
# %bb.173:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1792(%rbp), %rax               # 8-byte Reload
	.loc	1 643 4                         # formatter_private.c3:643:4
	movq	%rax, -1056(%rbp)
	jmp	.LBB21_175
.LBB21_174:
	jmp	.LBB21_176
.LBB21_175:
	movq	-1056(%rbp), %rax
	.loc	1 643 4 epilogue_begin          # formatter_private.c3:643:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_176:
	.cfi_def_cfa %rbp, 16
	.loc	1 644 28 is_stmt 1              # formatter_private.c3:644:28
	movl	-260(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	.loc	1 644 13 is_stmt 0              # formatter_private.c3:644:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 644 4                         # formatter_private.c3:644:4
	leaq	-1080(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1800(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_178
# %bb.177:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1800(%rbp), %rax               # 8-byte Reload
	.loc	1 644 4                         # formatter_private.c3:644:4
	movq	%rax, -1072(%rbp)
	jmp	.LBB21_179
.LBB21_178:
	jmp	.LBB21_180
.LBB21_179:
	movq	-1072(%rbp), %rax
	.loc	1 644 4 epilogue_begin          # formatter_private.c3:644:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_180:
	.cfi_def_cfa %rbp, 16
	.loc	1 645 28 is_stmt 1              # formatter_private.c3:645:28
	movl	-260(%rbp), %eax
	andl	$63, %eax
	.loc	1 645 13 is_stmt 0              # formatter_private.c3:645:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 645 4                         # formatter_private.c3:645:4
	leaq	-1096(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1808(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_182
# %bb.181:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1808(%rbp), %rax               # 8-byte Reload
	.loc	1 645 4                         # formatter_private.c3:645:4
	movq	%rax, -1088(%rbp)
	jmp	.LBB21_183
.LBB21_182:
	jmp	.LBB21_184
.LBB21_183:
	movq	-1088(%rbp), %rax
	.loc	1 645 4 epilogue_begin          # formatter_private.c3:645:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_184:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB21_203
.LBB21_185:
	jmp	.LBB21_186
.Ltmp1146:
.LBB21_186:
	.loc	1 647 27 is_stmt 1              # formatter_private.c3:647:27
	movl	-260(%rbp), %eax
	shrl	$18, %eax
	.loc	1 647 13 is_stmt 0              # formatter_private.c3:647:13
	orl	$240, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 647 4                         # formatter_private.c3:647:4
	leaq	-1112(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1816(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_188
# %bb.187:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1816(%rbp), %rax               # 8-byte Reload
	.loc	1 647 4                         # formatter_private.c3:647:4
	movq	%rax, -1104(%rbp)
	jmp	.LBB21_189
.LBB21_188:
	jmp	.LBB21_190
.LBB21_189:
	movq	-1104(%rbp), %rax
	.loc	1 647 4 epilogue_begin          # formatter_private.c3:647:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_190:
	.cfi_def_cfa %rbp, 16
	.loc	1 648 28 is_stmt 1              # formatter_private.c3:648:28
	movl	-260(%rbp), %eax
	shrl	$12, %eax
	andl	$63, %eax
	.loc	1 648 13 is_stmt 0              # formatter_private.c3:648:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 648 4                         # formatter_private.c3:648:4
	leaq	-1128(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1824(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_192
# %bb.191:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1824(%rbp), %rax               # 8-byte Reload
	.loc	1 648 4                         # formatter_private.c3:648:4
	movq	%rax, -1120(%rbp)
	jmp	.LBB21_193
.LBB21_192:
	jmp	.LBB21_194
.LBB21_193:
	movq	-1120(%rbp), %rax
	.loc	1 648 4 epilogue_begin          # formatter_private.c3:648:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_194:
	.cfi_def_cfa %rbp, 16
	.loc	1 649 28 is_stmt 1              # formatter_private.c3:649:28
	movl	-260(%rbp), %eax
	shrl	$6, %eax
	andl	$63, %eax
	.loc	1 649 13 is_stmt 0              # formatter_private.c3:649:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 649 4                         # formatter_private.c3:649:4
	leaq	-1144(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1832(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_196
# %bb.195:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1832(%rbp), %rax               # 8-byte Reload
	.loc	1 649 4                         # formatter_private.c3:649:4
	movq	%rax, -1136(%rbp)
	jmp	.LBB21_197
.LBB21_196:
	jmp	.LBB21_198
.LBB21_197:
	movq	-1136(%rbp), %rax
	.loc	1 649 4 epilogue_begin          # formatter_private.c3:649:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_198:
	.cfi_def_cfa %rbp, 16
	.loc	1 650 28 is_stmt 1              # formatter_private.c3:650:28
	movl	-260(%rbp), %eax
	andl	$63, %eax
	.loc	1 650 13 is_stmt 0              # formatter_private.c3:650:13
	orl	$128, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-200(%rbp), %rsi
	.loc	1 650 4                         # formatter_private.c3:650:4
	leaq	-1160(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -1840(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_200
# %bb.199:
	.loc	1 0 4                           # formatter_private.c3:0:4
	movq	-1840(%rbp), %rax               # 8-byte Reload
	.loc	1 650 4                         # formatter_private.c3:650:4
	movq	%rax, -1152(%rbp)
	jmp	.LBB21_201
.LBB21_200:
	jmp	.LBB21_202
.LBB21_201:
	movq	-1152(%rbp), %rax
	.loc	1 650 4 epilogue_begin          # formatter_private.c3:650:4
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_202:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB21_203
.Ltmp1147:
.LBB21_203:
	.loc	1 652 6 is_stmt 1               # formatter_private.c3:652:6
	movq	-200(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	je	.LBB21_220
# %bb.204:
.Ltmp1148:
	.loc	1 654 9                         # formatter_private.c3:654:9
	movq	-240(%rbp), %rax
	movq	%rax, -1872(%rbp)               # 8-byte Spill
	.loc	1 654 30 is_stmt 0              # formatter_private.c3:654:30
	movq	-200(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1864(%rbp)               # 8-byte Spill
	.loc	1 654 42                        # formatter_private.c3:654:42
	movq	-240(%rbp), %rax
	movq	%rax, -1856(%rbp)               # 8-byte Spill
	movq	-200(%rbp), %rax
	movq	%rax, -1848(%rbp)               # 8-byte Spill
.Ltmp1149:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_214
# %bb.205:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-1856(%rbp), %rax               # 8-byte Reload
	movq	-1864(%rbp), %rcx               # 8-byte Reload
	movq	-1848(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -104(%rbp)
	movb	$32, -105(%rbp)
	movq	%rcx, -120(%rbp)
	movq	%rax, -128(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-120(%rbp), %rax
	subq	-128(%rbp), %rax
	movq	%rax, -136(%rbp)
.Ltmp1150:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -144(%rbp)
.LBB21_206:                             # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-144(%rbp), %rax
	cmpq	-136(%rbp), %rax
	jge	.LBB21_210
# %bb.207:                              #   in Loop: Header=BB21_206 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-104(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-160(%rbp), %rdi
	movzbl	-105(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -1880(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_209
# %bb.208:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-1880(%rbp), %rax               # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -1888(%rbp)               # 8-byte Spill
	jmp	.LBB21_215
.LBB21_209:                             #   in Loop: Header=BB21_206 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-144(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -144(%rbp)
	jmp	.LBB21_206
.Ltmp1151:
.LBB21_210:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -164(%rbp)
	movq	-136(%rbp), %rax
	movq	%rax, -176(%rbp)
	movl	-164(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
.Ltmp1152:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-180(%rbp), %rax
	cmpq	-192(%rbp), %rax
	jle	.LBB21_212
.Ltmp1153:
# %bb.211:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-164(%rbp), %rax
	movq	%rax, -1896(%rbp)               # 8-byte Spill
	jmp	.LBB21_213
.LBB21_212:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-176(%rbp), %rax
	movq	%rax, -1896(%rbp)               # 8-byte Spill
.LBB21_213:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-1896(%rbp), %rax               # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -1176(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1888(%rbp)               # 8-byte Spill
	jmp	.LBB21_215
.Ltmp1154:
.LBB21_214:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp1155:
.LBB21_215:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1888(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1904(%rbp)               # 8-byte Spill
	.loc	1 654 16 is_stmt 1              # formatter_private.c3:654:16
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB21_217
# %bb.216:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1904(%rbp), %rax               # 8-byte Reload
	.loc	1 654 16                        # formatter_private.c3:654:16
	movq	%rax, -1168(%rbp)
	jmp	.LBB21_218
.LBB21_217:
	jmp	.LBB21_219
.LBB21_218:
	movq	-1168(%rbp), %rax
	.loc	1 654 16 epilogue_begin         # formatter_private.c3:654:16
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_219:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-1872(%rbp), %rax               # 8-byte Reload
	.loc	1 654 9                         # formatter_private.c3:654:9
	addq	-1176(%rbp), %rax
	movq	%rax, -240(%rbp)
.Ltmp1156:
.LBB21_220:
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-1216(%rbp), %rax               # 8-byte Reload
	.loc	1 656 9 is_stmt 1               # formatter_private.c3:656:9
	movq	-240(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 656 9 epilogue_begin is_stmt 0 # formatter_private.c3:656:9
	addq	$1936, %rsp                     # imm = 0x790
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_221:
	.cfi_def_cfa %rbp, 16
	.loc	1 620 28 is_stmt 1              # formatter_private.c3:620:28
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.159(%rip), %r8
	movl	$8, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$620, (%rsp)                    # imm = 0x26C
	callq	*(%rax)
.LBB21_222:
.Ltmp1157:
	.loc	5 31 15                         # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp1158:
.LBB21_223:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB21_224:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-1376(%rbp), %rcx               # 8-byte Reload
	movq	$2, -336(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -344(%rbp)
	movq	%rax, -376(%rbp)
	leaq	-336(%rbp), %rcx
	movq	%rcx, -384(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-344(%rbp), %rax
	movq	%rax, -368(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	$2, -392(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-400(%rbp), %rax
	movq	%r9, %rcx
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1159:
.LBB21_225:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB21_226:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-1424(%rbp), %rcx               # 8-byte Reload
	movq	$4, -416(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -424(%rbp)
	movq	%rax, -456(%rbp)
	leaq	-416(%rbp), %rcx
	movq	%rcx, -464(%rbp)
	movq	%rax, -440(%rbp)
	leaq	-424(%rbp), %rax
	movq	%rax, -448(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, -480(%rbp)
	movq	$2, -472(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-480(%rbp), %rax
	movq	%r9, %rcx
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1160:
.LBB21_227:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB21_228:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-1472(%rbp), %rcx               # 8-byte Reload
	movq	$8, -496(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -504(%rbp)
	movq	%rax, -536(%rbp)
	leaq	-496(%rbp), %rcx
	movq	%rcx, -544(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-504(%rbp), %rax
	movq	%rax, -528(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, -560(%rbp)
	movq	$2, -552(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-560(%rbp), %rax
	movq	%r9, %rcx
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1161:
.LBB21_229:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB21_230:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-1520(%rbp), %rcx               # 8-byte Reload
	movq	$16, -584(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -592(%rbp)
	movq	%rax, -616(%rbp)
	leaq	-584(%rbp), %rcx
	movq	%rcx, -624(%rbp)
	movq	%rax, -600(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, -608(%rbp)
	leaq	-624(%rbp), %rax
	movq	%rax, -640(%rbp)
	movq	$2, -632(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-640(%rbp), %rax
	movq	%r9, %rcx
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1162:
.LBB21_231:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp1163:
.LBB21_232:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB21_233:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-1600(%rbp), %rcx               # 8-byte Reload
	movq	$2, -656(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -664(%rbp)
	movq	%rax, -696(%rbp)
	leaq	-656(%rbp), %rcx
	movq	%rcx, -704(%rbp)
	movq	%rax, -680(%rbp)
	leaq	-664(%rbp), %rax
	movq	%rax, -688(%rbp)
	leaq	-704(%rbp), %rax
	movq	%rax, -720(%rbp)
	movq	$2, -712(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-720(%rbp), %rax
	movq	%r9, %rcx
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1164:
.LBB21_234:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB21_235:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-1648(%rbp), %rcx               # 8-byte Reload
	movq	$4, -736(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -744(%rbp)
	movq	%rax, -776(%rbp)
	leaq	-736(%rbp), %rcx
	movq	%rcx, -784(%rbp)
	movq	%rax, -760(%rbp)
	leaq	-744(%rbp), %rax
	movq	%rax, -768(%rbp)
	leaq	-784(%rbp), %rax
	movq	%rax, -800(%rbp)
	movq	$2, -792(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-800(%rbp), %rax
	movq	%r9, %rcx
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1165:
.LBB21_236:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB21_237:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-1696(%rbp), %rcx               # 8-byte Reload
	movq	$8, -816(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -824(%rbp)
	movq	%rax, -856(%rbp)
	leaq	-816(%rbp), %rcx
	movq	%rcx, -864(%rbp)
	movq	%rax, -840(%rbp)
	leaq	-824(%rbp), %rax
	movq	%rax, -848(%rbp)
	leaq	-864(%rbp), %rax
	movq	%rax, -880(%rbp)
	movq	$2, -872(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-880(%rbp), %rax
	movq	%r9, %rcx
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1166:
.LBB21_238:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movq	%r9, %rcx
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB21_239:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-1744(%rbp), %rcx               # 8-byte Reload
	movq	$16, -904(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -912(%rbp)
	movq	%rax, -936(%rbp)
	leaq	-904(%rbp), %rcx
	movq	%rcx, -944(%rbp)
	movq	%rax, -920(%rbp)
	leaq	-912(%rbp), %rax
	movq	%rax, -928(%rbp)
	leaq	-944(%rbp), %rax
	movq	%rax, -960(%rbp)
	movq	$2, -952(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %r9d
	leaq	.func.159(%rip), %r8
	leaq	-960(%rbp), %rax
	movq	%r9, %rcx
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1167:
.Lfunc_end21:
	.size	std.io.Formatter.out_char, .Lfunc_end21-std.io.Formatter.out_char
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.Formatter.out_reverse
	.type	std.io.Formatter.out_reverse,@function
std.io.Formatter.out_reverse:           # @std.io.Formatter.out_reverse
.Lfunc_begin22:
	.loc	1 660 0 is_stmt 1               # formatter_private.c3:660:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$448, %rsp                      # imm = 0x1C0
	movq	%rdi, -288(%rbp)                # 8-byte Spill
	movq	%rsi, -280(%rbp)                # 8-byte Spill
	movq	%rdx, -272(%rbp)                # 8-byte Spill
	movq	%rcx, -264(%rbp)                # 8-byte Spill
.Ltmp1168:
	.loc	1 661 1 prologue_end            # formatter_private.c3:661:1
	cmpq	$0, %rsi
	sete	%al
	testb	$1, %al
	jne	.LBB22_33
# %bb.1:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-264(%rbp), %rax                # 8-byte Reload
	movq	-272(%rbp), %rcx                # 8-byte Reload
	movq	-280(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -104(%rbp)
	movq	%rcx, -120(%rbp)
	movq	%rax, -112(%rbp)
	.loc	1 662 6 is_stmt 1               # formatter_private.c3:662:6
	movq	$0, -128(%rbp)
	.loc	1 663 12                        # formatter_private.c3:663:12
	movq	-112(%rbp), %rax
	movq	%rax, -136(%rbp)
	.loc	1 665 7                         # formatter_private.c3:665:7
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	andl	$1, %eax
	movb	%al, %cl
	xorb	$-1, %cl
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %cl
	movb	%al, -289(%rbp)                 # 1-byte Spill
	jne	.LBB22_2
	jmp	.LBB22_3
.LBB22_2:
	.loc	1 665 30 is_stmt 0              # formatter_private.c3:665:30
	movq	-104(%rbp), %rax
	movl	16(%rax), %eax
	shrl	%eax
	andl	$1, %eax
                                        # kill: def $al killed $al killed $eax
	xorb	$-1, %al
	movb	%al, -289(%rbp)                 # 1-byte Spill
.LBB22_3:
	.loc	1 0 30                          # formatter_private.c3:0:30
	movb	-289(%rbp), %al                 # 1-byte Reload
	.loc	1 665 30                        # formatter_private.c3:665:30
	testb	$1, %al
	jne	.LBB22_4
	jmp	.LBB22_20
.LBB22_4:
.Ltmp1169:
	.loc	1 667 3 is_stmt 1               # formatter_private.c3:667:3
	movq	-128(%rbp), %rax
	movq	%rax, -328(%rbp)                # 8-byte Spill
	.loc	1 667 22 is_stmt 0              # formatter_private.c3:667:22
	movq	-104(%rbp), %rax
	movl	20(%rax), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -320(%rbp)                # 8-byte Spill
	.loc	1 667 34                        # formatter_private.c3:667:34
	movq	-136(%rbp), %rax
	movq	%rax, -312(%rbp)                # 8-byte Spill
	movq	-104(%rbp), %rax
	movq	%rax, -304(%rbp)                # 8-byte Spill
.Ltmp1170:
	.loc	1 179 1 is_stmt 1               # formatter_private.c3:179:1
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB22_14
# %bb.5:
	.loc	1 0 1 is_stmt 0                 # formatter_private.c3:0:1
	movq	-312(%rbp), %rax                # 8-byte Reload
	movq	-320(%rbp), %rcx                # 8-byte Reload
	movq	-304(%rbp), %rdx                # 8-byte Reload
	movq	%rdx, -8(%rbp)
	movb	$32, -9(%rbp)
	movq	%rcx, -24(%rbp)
	movq	%rax, -32(%rbp)
	.loc	1 180 14 is_stmt 1              # formatter_private.c3:180:14
	movq	-24(%rbp), %rax
	subq	-32(%rbp), %rax
	movq	%rax, -40(%rbp)
.Ltmp1171:
	.loc	1 181 15                        # formatter_private.c3:181:15
	movq	$0, -48(%rbp)
.LBB22_6:                               # =>This Inner Loop Header: Depth=1
	.loc	1 181 18 is_stmt 0              # formatter_private.c3:181:18
	movq	-48(%rbp), %rax
	cmpq	-40(%rbp), %rax
	jge	.LBB22_10
# %bb.7:                                #   in Loop: Header=BB22_6 Depth=1
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-8(%rbp), %rsi
	.loc	1 181 34                        # formatter_private.c3:181:34
	leaq	-64(%rbp), %rdi
	movzbl	-9(%rbp), %edx
	callq	std.io.Formatter.out
	movq	%rax, -336(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB22_9
# %bb.8:
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-336(%rbp), %rax                # 8-byte Reload
	.loc	1 181 34                        # formatter_private.c3:181:34
	movq	%rax, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	%rax, -344(%rbp)                # 8-byte Spill
	jmp	.LBB22_15
.LBB22_9:                               #   in Loop: Header=BB22_6 Depth=1
	.loc	1 181 29                        # formatter_private.c3:181:29
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB22_6
.Ltmp1172:
.LBB22_10:
	.loc	1 0 29                          # formatter_private.c3:0:29
	movl	$0, -68(%rbp)
	movq	-40(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
.Ltmp1173:
	.loc	7 47 10 is_stmt 1               # builtin_comparison.c3:47:10
	movslq	-84(%rbp), %rax
	cmpq	-96(%rbp), %rax
	jle	.LBB22_12
.Ltmp1174:
# %bb.11:
	.loc	7 116 34                        # builtin_comparison.c3:116:34
	movslq	-68(%rbp), %rax
	movq	%rax, -352(%rbp)                # 8-byte Spill
	jmp	.LBB22_13
.LBB22_12:
	.loc	7 116 38 is_stmt 0              # builtin_comparison.c3:116:38
	movq	-80(%rbp), %rax
	movq	%rax, -352(%rbp)                # 8-byte Spill
.LBB22_13:
	.loc	7 0 38                          # builtin_comparison.c3:0:38
	movq	-352(%rbp), %rax                # 8-byte Reload
	.loc	7 116 38                        # builtin_comparison.c3:116:38
	movq	%rax, -152(%rbp)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -344(%rbp)                # 8-byte Spill
	jmp	.LBB22_15
.Ltmp1175:
.LBB22_14:
	.loc	1 178 23 is_stmt 1              # formatter_private.c3:178:23
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.128(%rip), %r8
	movl	$3, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$178, (%rsp)
	callq	*(%rax)
.Ltmp1176:
.LBB22_15:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-344(%rbp), %rax                # 8-byte Reload
	movq	%rax, -360(%rbp)                # 8-byte Spill
	.loc	1 667 8 is_stmt 1               # formatter_private.c3:667:8
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB22_17
# %bb.16:
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-360(%rbp), %rax                # 8-byte Reload
	.loc	1 667 8                         # formatter_private.c3:667:8
	movq	%rax, -144(%rbp)
	jmp	.LBB22_18
.LBB22_17:
	jmp	.LBB22_19
.LBB22_18:
	movq	-144(%rbp), %rax
	.loc	1 667 8 epilogue_begin          # formatter_private.c3:667:8
	addq	$448, %rsp                      # imm = 0x1C0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_19:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-328(%rbp), %rax                # 8-byte Reload
	.loc	1 667 3                         # formatter_private.c3:667:3
	addq	-152(%rbp), %rax
	movq	%rax, -128(%rbp)
.Ltmp1177:
.LBB22_20:
	.loc	1 670 2 is_stmt 1               # formatter_private.c3:670:2
	jmp	.LBB22_21
.LBB22_21:                              # =>This Inner Loop Header: Depth=1
.Ltmp1178:
	.loc	1 670 9 is_stmt 0               # formatter_private.c3:670:9
	cmpq	$0, -136(%rbp)
	je	.LBB22_28
# %bb.22:                               #   in Loop: Header=BB22_21 Depth=1
	.loc	1 670 14                        # formatter_private.c3:670:14
	movq	-128(%rbp), %rax
	movq	%rax, -392(%rbp)                # 8-byte Spill
	.loc	1 670 28                        # formatter_private.c3:670:28
	movq	-112(%rbp), %rcx
	movq	%rcx, -384(%rbp)                # 8-byte Spill
	movq	-120(%rbp), %rax
	movq	%rax, -376(%rbp)                # 8-byte Spill
	.loc	1 670 34                        # formatter_private.c3:670:34
	movq	-136(%rbp), %rax
	subq	$1, %rax
	movq	%rax, -368(%rbp)                # 8-byte Spill
	movq	%rax, -136(%rbp)
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB22_34
# %bb.23:                               #   in Loop: Header=BB22_21 Depth=1
	.loc	1 0 34                          # formatter_private.c3:0:34
	movq	-376(%rbp), %rax                # 8-byte Reload
	movq	-368(%rbp), %rcx                # 8-byte Reload
	movq	-104(%rbp), %rsi
	.loc	1 670 19                        # formatter_private.c3:670:19
	leaq	-232(%rbp), %rdi
	movzbl	(%rax,%rcx), %edx
	callq	std.io.Formatter.out
	movq	%rax, -400(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB22_25
# %bb.24:
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-400(%rbp), %rax                # 8-byte Reload
	.loc	1 670 19                        # formatter_private.c3:670:19
	movq	%rax, -160(%rbp)
	jmp	.LBB22_26
.LBB22_25:                              #   in Loop: Header=BB22_21 Depth=1
	jmp	.LBB22_27
.LBB22_26:
	movq	-160(%rbp), %rax
	.loc	1 670 19 epilogue_begin         # formatter_private.c3:670:19
	addq	$448, %rsp                      # imm = 0x1C0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_27:                              #   in Loop: Header=BB22_21 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-392(%rbp), %rax                # 8-byte Reload
	.loc	1 670 14                        # formatter_private.c3:670:14
	addq	-232(%rbp), %rax
	movq	%rax, -128(%rbp)
	jmp	.LBB22_21
.Ltmp1179:
.LBB22_28:
	.loc	1 673 2 is_stmt 1               # formatter_private.c3:673:2
	movq	-128(%rbp), %rax
	movq	%rax, -416(%rbp)                # 8-byte Spill
	movq	-104(%rbp), %rsi
	movq	-128(%rbp), %rdx
	.loc	1 673 7 is_stmt 0               # formatter_private.c3:673:7
	leaq	-248(%rbp), %rdi
	callq	std.io.Formatter.adjust
	movq	%rax, -408(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB22_30
# %bb.29:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-408(%rbp), %rax                # 8-byte Reload
	.loc	1 673 7                         # formatter_private.c3:673:7
	movq	%rax, -240(%rbp)
	jmp	.LBB22_31
.LBB22_30:
	jmp	.LBB22_32
.LBB22_31:
	movq	-240(%rbp), %rax
	.loc	1 673 7 epilogue_begin          # formatter_private.c3:673:7
	addq	$448, %rsp                      # imm = 0x1C0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_32:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-288(%rbp), %rax                # 8-byte Reload
	movq	-416(%rbp), %rcx                # 8-byte Reload
	.loc	1 673 2                         # formatter_private.c3:673:2
	addq	-248(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	.loc	1 674 9 is_stmt 1               # formatter_private.c3:674:9
	movq	-128(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 674 9 epilogue_begin is_stmt 0 # formatter_private.c3:674:9
	addq	$448, %rsp                      # imm = 0x1C0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_33:
	.cfi_def_cfa %rbp, 16
	.loc	1 660 31 is_stmt 1              # formatter_private.c3:660:31
	leaq	.panic_msg(%rip), %rdi
	movl	$62, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.164(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$660, (%rsp)                    # imm = 0x294
	callq	*(%rax)
.LBB22_34:
	.loc	1 0 31 is_stmt 0                # formatter_private.c3:0:31
	movq	-368(%rbp), %rcx                # 8-byte Reload
	movq	-384(%rbp), %rax                # 8-byte Reload
	movq	%rax, -168(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -176(%rbp)
	movq	%rax, -200(%rbp)
	leaq	-168(%rbp), %rcx
	movq	%rcx, -208(%rbp)
	movq	%rax, -184(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	movq	$2, -216(%rbp)
.Ltmp1180:
	.loc	1 670 32 is_stmt 1              # formatter_private.c3:670:32
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.164(%rip), %r8
	movl	$11, %r9d
	leaq	-224(%rbp), %rax
	movl	$670, (%rsp)                    # imm = 0x29E
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1181:
.Lfunc_end22:
	.size	std.io.Formatter.out_reverse, .Lfunc_end22-std.io.Formatter.out_reverse
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.print_hex_chars,"axG",@progbits,std.io.print_hex_chars,comdat
	.weak	std.io.print_hex_chars          # -- Begin function std.io.print_hex_chars
	.p2align	4, 0x90
	.type	std.io.print_hex_chars,@function
std.io.print_hex_chars:                 # @std.io.print_hex_chars
.Lfunc_begin23:
	.loc	1 9 0                           # formatter_private.c3:9:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp                      # imm = 0x120
	movq	%rdi, -192(%rbp)                # 8-byte Spill
	movb	%r8b, %al
	movq	%rsi, -8(%rbp)
	movq	%rdx, -24(%rbp)
	movq	%rcx, -16(%rbp)
	movb	%al, -25(%rbp)
.Ltmp1182:
	.loc	1 11 18 prologue_end            # formatter_private.c3:11:18
	movb	-25(%rbp), %cl
	.loc	1 11 36 is_stmt 0               # formatter_private.c3:11:36
	movb	$65, %al
	movb	$97, %dl
	movb	%dl, -178(%rbp)                 # 1-byte Spill
	testb	$1, %cl
	movb	%al, -177(%rbp)                 # 1-byte Spill
	jne	.LBB23_21
# %bb.20:
	.loc	1 0 36                          # formatter_private.c3:0:36
	movb	-178(%rbp), %al                 # 1-byte Reload
	movb	%al, -177(%rbp)                 # 1-byte Spill
.LBB23_21:
	movb	-177(%rbp), %al                 # 1-byte Reload
	.loc	1 11 36                         # formatter_private.c3:11:36
	movzbl	%al, %eax
	.loc	1 11 17                         # formatter_private.c3:11:17
	subl	$10, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -26(%rbp)
	.loc	1 12 12 is_stmt 1               # formatter_private.c3:12:12
	movq	$0, -40(%rbp)
.Ltmp1183:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-16(%rbp), %rax
	movq	%rax, -200(%rbp)                # 8-byte Spill
	movq	$0, -48(%rbp)
.LBB23_1:                               # =>This Inner Loop Header: Depth=1
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-200(%rbp), %rax                # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	cmpq	%rax, -48(%rbp)
	jae	.LBB23_18
# %bb.2:                                #   in Loop: Header=BB23_1 Depth=1
.Ltmp1184:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-16(%rbp), %rcx
	movq	%rcx, -224(%rbp)                # 8-byte Spill
	movq	-24(%rbp), %rax
	movq	%rax, -216(%rbp)                # 8-byte Spill
	movq	-48(%rbp), %rax
	movq	%rax, -208(%rbp)                # 8-byte Spill
	cmpq	%rcx, %rax
	setae	%al
	testb	$1, %al
	jne	.LBB23_19
# %bb.3:                                #   in Loop: Header=BB23_1 Depth=1
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-216(%rbp), %rax                # 8-byte Reload
	movq	-208(%rbp), %rcx                # 8-byte Reload
	.loc	1 13 15                         # formatter_private.c3:13:15
	movb	(%rax,%rcx), %al
	movb	%al, -49(%rbp)
.Ltmp1185:
	.loc	1 15 16 is_stmt 1               # formatter_private.c3:15:16
	movzbl	-49(%rbp), %eax
	shrl	$4, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -129(%rbp)
	.loc	1 16 9                          # formatter_private.c3:16:9
	movzbl	-129(%rbp), %eax
	movl	%eax, -228(%rbp)                # 4-byte Spill
	.loc	1 16 18 is_stmt 0               # formatter_private.c3:16:18
	movzbl	-129(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB23_5
# %bb.4:                                #   in Loop: Header=BB23_1 Depth=1
	.loc	1 16 31                         # formatter_private.c3:16:31
	movb	$48, %al
	movb	%al, -229(%rbp)                 # 1-byte Spill
	jmp	.LBB23_6
.LBB23_5:                               #   in Loop: Header=BB23_1 Depth=1
	.loc	1 16 37                         # formatter_private.c3:16:37
	movb	-26(%rbp), %al
	movb	%al, -229(%rbp)                 # 1-byte Spill
.LBB23_6:                               #   in Loop: Header=BB23_1 Depth=1
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-228(%rbp), %eax                # 4-byte Reload
	movb	-229(%rbp), %cl                 # 1-byte Reload
	.loc	1 16 37                         # formatter_private.c3:16:37
	movzbl	%cl, %ecx
	.loc	1 16 9                          # formatter_private.c3:16:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rsi
	.loc	1 16 3                          # formatter_private.c3:16:3
	leaq	-152(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -240(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB23_8
# %bb.7:
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-240(%rbp), %rax                # 8-byte Reload
	.loc	1 16 3                          # formatter_private.c3:16:3
	movq	%rax, -144(%rbp)
	jmp	.LBB23_9
.LBB23_8:                               #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_10
.LBB23_9:
	movq	-144(%rbp), %rax
	.loc	1 16 3 epilogue_begin           # formatter_private.c3:16:3
	addq	$288, %rsp                      # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              #   in Loop: Header=BB23_1 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 17 3 is_stmt 1                # formatter_private.c3:17:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	.loc	1 18 11                         # formatter_private.c3:18:11
	movzbl	-49(%rbp), %eax
	andl	$15, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -129(%rbp)
	.loc	1 19 9                          # formatter_private.c3:19:9
	movzbl	-129(%rbp), %eax
	movl	%eax, -244(%rbp)                # 4-byte Spill
	.loc	1 19 18 is_stmt 0               # formatter_private.c3:19:18
	movzbl	-129(%rbp), %ecx
	movl	$10, %eax
	cmpl	%ecx, %eax
	jbe	.LBB23_12
# %bb.11:                               #   in Loop: Header=BB23_1 Depth=1
	.loc	1 19 31                         # formatter_private.c3:19:31
	movb	$48, %al
	movb	%al, -245(%rbp)                 # 1-byte Spill
	jmp	.LBB23_13
.LBB23_12:                              #   in Loop: Header=BB23_1 Depth=1
	.loc	1 19 37                         # formatter_private.c3:19:37
	movb	-26(%rbp), %al
	movb	%al, -245(%rbp)                 # 1-byte Spill
.LBB23_13:                              #   in Loop: Header=BB23_1 Depth=1
	.loc	1 0 37                          # formatter_private.c3:0:37
	movl	-244(%rbp), %eax                # 4-byte Reload
	movb	-245(%rbp), %cl                 # 1-byte Reload
	.loc	1 19 37                         # formatter_private.c3:19:37
	movzbl	%cl, %ecx
	.loc	1 19 9                          # formatter_private.c3:19:9
	addl	%ecx, %eax
                                        # kill: def $al killed $al killed $eax
	movq	-8(%rbp), %rsi
	.loc	1 19 3                          # formatter_private.c3:19:3
	leaq	-168(%rbp), %rdi
	movzbl	%al, %edx
	callq	std.io.Formatter.out
	movq	%rax, -256(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB23_15
# %bb.14:
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-256(%rbp), %rax                # 8-byte Reload
	.loc	1 19 3                          # formatter_private.c3:19:3
	movq	%rax, -160(%rbp)
	jmp	.LBB23_16
.LBB23_15:                              #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_17
.LBB23_16:
	movq	-160(%rbp), %rax
	.loc	1 19 3 epilogue_begin           # formatter_private.c3:19:3
	addq	$288, %rsp                      # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_17:                              #   in Loop: Header=BB23_1 Depth=1
	.cfi_def_cfa %rbp, 16
	.loc	1 20 3 is_stmt 1                # formatter_private.c3:20:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
.Ltmp1186:
	.loc	1 13 15                         # formatter_private.c3:13:15
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB23_1
.Ltmp1187:
.LBB23_18:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-192(%rbp), %rax                # 8-byte Reload
	.loc	1 22 9 is_stmt 1                # formatter_private.c3:22:9
	movq	-40(%rbp), %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 22 9 epilogue_begin is_stmt 0 # formatter_private.c3:22:9
	addq	$288, %rsp                      # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_19:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 9                           # formatter_private.c3:0:9
	movq	-208(%rbp), %rcx                # 8-byte Reload
	movq	-224(%rbp), %rax                # 8-byte Reload
	movq	%rax, -64(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -72(%rbp)
	movq	%rax, -104(%rbp)
	leaq	-64(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-72(%rbp), %rax
	movq	%rax, -96(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, -128(%rbp)
	movq	$2, -120(%rbp)
.Ltmp1188:
	.loc	1 13 15 is_stmt 1               # formatter_private.c3:13:15
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.97(%rip), %r8
	movl	$15, %r9d
	leaq	-128(%rbp), %rax
	movl	$13, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1189:
.Lfunc_end23:
	.size	std.io.print_hex_chars, .Lfunc_end23-std.io.print_hex_chars
	.cfi_endproc
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function std.io.int_from_any
	.type	std.io.int_from_any,@function
std.io.int_from_any:                    # @std.io.int_from_any
.Lfunc_begin24:
	.loc	1 38 0                          # formatter_private.c3:38:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2000, %rsp                     # imm = 0x7D0
	movq	%rdi, -1168(%rbp)               # 8-byte Spill
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rcx, -24(%rbp)
.Ltmp1190:
	.loc	1 40 10 prologue_end            # formatter_private.c3:40:10
	movq	-8(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -25(%rbp)
# %bb.1:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movb	-25(%rbp), %al
	addb	$-9, %al
	movzbl	%al, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, -1176(%rbp)               # 8-byte Spill
	subb	$10, %al
	ja	.LBB24_25
# %bb.184:
	movq	-1176(%rbp), %rax               # 8-byte Reload
	leaq	.LJTI24_0(%rip), %rcx
	movslq	(%rcx,%rax,4), %rax
	addq	%rcx, %rax
	jmpq	*%rax
.LBB24_2:
.Ltmp1191:
	.loc	1 44 5 is_stmt 1                # formatter_private.c3:44:5
	movq	-24(%rbp), %rax
	movq	%rax, -1184(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_146
# %bb.3:
	.loc	1 0 5 is_stmt 0                 # formatter_private.c3:0:5
	movq	-1184(%rbp), %rax               # 8-byte Reload
	.loc	1 44 5                          # formatter_private.c3:44:5
	movb	$0, (%rax)
	.loc	1 45 35 is_stmt 1               # formatter_private.c3:45:35
	movq	-16(%rbp), %rax
	movq	%rax, -1192(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_147
# %bb.4:
	.loc	1 0 35 is_stmt 0                # formatter_private.c3:0:35
	movq	-1192(%rbp), %rax               # 8-byte Reload
	.loc	1 45 27                         # formatter_private.c3:45:27
	andq	$7, %rax
	movq	%rax, -1200(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_148
# %bb.5:
	.loc	1 0 27                          # formatter_private.c3:0:27
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1192(%rbp), %rcx               # 8-byte Reload
	.loc	1 45 27                         # formatter_private.c3:45:27
	movq	(%rcx), %rcx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 45 27 epilogue_begin          # formatter_private.c3:45:27
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1192:
.LBB24_6:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 27                          # formatter_private.c3:0:27
	leaq	-16(%rbp), %rax
	movq	%rax, -128(%rbp)
.Ltmp1193:
	.loc	6 278 20 is_stmt 1              # builtin.c3:278:20
	cmpq	$0, -128(%rbp)
	jne	.LBB24_8
# %bb.7:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$278, (%rsp)                    # imm = 0x116
	callq	*(%rax)
.Ltmp1194:
.LBB24_8:
	.loc	6 280 20                        # builtin.c3:280:20
	movq	-128(%rbp), %rax
	movq	%rax, -1208(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_149
# %bb.9:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-1208(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	andq	$7, %rax
	movq	%rax, -1216(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_150
# %bb.10:
	.loc	6 0 20                          # builtin.c3:0:20
	movq	-1208(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	movq	(%rax), %rax
	movq	%rax, -1232(%rbp)               # 8-byte Spill
	.loc	6 280 30                        # builtin.c3:280:30
	movq	-128(%rbp), %rax
	movq	%rax, -1224(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_151
# %bb.11:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1224(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	andq	$7, %rax
	movq	%rax, -1240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_152
# %bb.12:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1224(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	8(%rax), %rax
	movq	%rax, -1256(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -1241(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB24_21
# %bb.13:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$19, %al
	je	.LBB24_21
# %bb.14:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$17, %al
	je	.LBB24_21
# %bb.15:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$8, %al
	je	.LBB24_21
# %bb.16:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$16, %al
	je	.LBB24_21
# %bb.17:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$18, %al
	je	.LBB24_21
# %bb.18:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$9, %al
	je	.LBB24_21
# %bb.19:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1241(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$12, %al
	je	.LBB24_21
# %bb.20:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB24_21:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1232(%rbp), %rax               # 8-byte Reload
	movq	-1256(%rbp), %rcx               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	32(%rcx), %rcx
	movq	%rcx, -280(%rbp)
	movq	%rax, -288(%rbp)
	movq	-288(%rbp), %rsi
	movq	-280(%rbp), %rdx
	movq	-24(%rbp), %rcx
.Ltmp1195:
	.loc	1 48 11 is_stmt 1               # formatter_private.c3:48:11
	leaq	-272(%rbp), %rdi
	callq	std.io.int_from_any
	movq	%rax, -1264(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_23
# %bb.22:
	.loc	1 0 11 is_stmt 0                # formatter_private.c3:0:11
	movq	-1264(%rbp), %rax               # 8-byte Reload
	.loc	1 48 11                         # formatter_private.c3:48:11
	movq	%rax, -120(%rbp)
	jmp	.LBB24_24
.LBB24_23:
	.loc	1 0 11                          # formatter_private.c3:0:11
	movq	-1168(%rbp), %rax               # 8-byte Reload
	.loc	1 48 11                         # formatter_private.c3:48:11
	movq	-272(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 48 11 epilogue_begin          # formatter_private.c3:48:11
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_24:
	.cfi_def_cfa %rbp, 16
	movq	-120(%rbp), %rax
	.loc	1 48 11 epilogue_begin          # formatter_private.c3:48:11
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1196:
.LBB24_25:
	.cfi_def_cfa %rbp, 16
	.loc	1 50 4 is_stmt 1                # formatter_private.c3:50:4
	jmp	.LBB24_26
.Ltmp1197:
.LBB24_26:
	.loc	1 52 3                          # formatter_private.c3:52:3
	movq	-24(%rbp), %rax
	movq	%rax, -1272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_153
# %bb.27:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-1272(%rbp), %rax               # 8-byte Reload
	.loc	1 52 3                          # formatter_private.c3:52:3
	movb	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	%rax, -296(%rbp)
# %bb.28:
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-296(%rbp), %rax
	movq	%rax, -1288(%rbp)               # 8-byte Spill
	movq	%rax, -1280(%rbp)               # 8-byte Spill
.LBB24_29:                              # =>This Inner Loop Header: Depth=1
	movq	-1280(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1304(%rbp)               # 8-byte Spill
.Ltmp1198:
	.loc	1 55 8 is_stmt 1                # formatter_private.c3:55:8
	movb	$1, %al
	movq	($ct.bool)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1289(%rbp)                # 1-byte Spill
	je	.LBB24_31
# %bb.30:                               #   in Loop: Header=BB24_29 Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1304(%rbp), %rax               # 8-byte Reload
	.loc	1 55 8                          # formatter_private.c3:55:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1280(%rbp)               # 8-byte Spill
	movb	%al, -1289(%rbp)                # 1-byte Spill
	jne	.LBB24_29
.LBB24_31:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1289(%rbp), %al                # 1-byte Reload
	.loc	1 55 8                          # formatter_private.c3:55:8
	testb	$1, %al
	jne	.LBB24_32
	jmp	.LBB24_34
.LBB24_32:
.Ltmp1199:
	.loc	1 56 21 is_stmt 1               # formatter_private.c3:56:21
	movq	-16(%rbp), %rax
	movq	%rax, -1312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_154
# %bb.33:
	.loc	1 0 21 is_stmt 0                # formatter_private.c3:0:21
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1312(%rbp), %rcx               # 8-byte Reload
	.loc	1 56 21                         # formatter_private.c3:56:21
	movzbl	(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
                                        # kill: def $ecx killed $ecx killed $rcx
	andl	$1, %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 56 21 epilogue_begin          # formatter_private.c3:56:21
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1200:
.LBB24_34:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 21                          # formatter_private.c3:0:21
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1320(%rbp)               # 8-byte Spill
	.loc	1 57 8 is_stmt 1                # formatter_private.c3:57:8
	jmp	.LBB24_35
.LBB24_35:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1320(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1336(%rbp)               # 8-byte Spill
	.loc	1 57 8                          # formatter_private.c3:57:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1321(%rbp)                # 1-byte Spill
	je	.LBB24_37
# %bb.36:                               #   in Loop: Header=BB24_35 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1336(%rbp), %rax               # 8-byte Reload
	.loc	1 57 8                          # formatter_private.c3:57:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1320(%rbp)               # 8-byte Spill
	movb	%al, -1321(%rbp)                # 1-byte Spill
	jne	.LBB24_35
.LBB24_37:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1321(%rbp), %al                # 1-byte Reload
	.loc	1 57 8                          # formatter_private.c3:57:8
	testb	$1, %al
	jne	.LBB24_38
	jmp	.LBB24_44
.LBB24_38:
.Ltmp1201:
	.loc	1 58 15 is_stmt 1               # formatter_private.c3:58:15
	movq	-16(%rbp), %rax
	movq	%rax, -1344(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_155
# %bb.39:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1344(%rbp), %rax               # 8-byte Reload
	.loc	1 58 15                         # formatter_private.c3:58:15
	movsbl	(%rax), %eax
	movl	%eax, -308(%rbp)
	.loc	1 59 22 is_stmt 1               # formatter_private.c3:59:22
	cmpl	$0, -308(%rbp)
	setl	%al
	movb	%al, -1353(%rbp)                # 1-byte Spill
	.loc	1 59 13 is_stmt 0               # formatter_private.c3:59:13
	movq	-24(%rbp), %rax
	movq	%rax, -1352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_156
# %bb.40:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1352(%rbp), %rcx               # 8-byte Reload
	movb	-1353(%rbp), %al                # 1-byte Reload
	.loc	1 59 13                         # formatter_private.c3:59:13
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_42
# %bb.41:
	.loc	1 59 35                         # formatter_private.c3:59:35
	movslq	-308(%rbp), %rcx
	movq	%rcx, %rdx
	sarq	$63, %rdx
	xorl	%eax, %eax
	.loc	1 59 33                         # formatter_private.c3:59:33
	negq	%rcx
                                        # kill: def $rax killed $eax
	sbbq	%rdx, %rax
	movq	%rcx, -1376(%rbp)               # 8-byte Spill
	movq	%rax, -1368(%rbp)               # 8-byte Spill
	jmp	.LBB24_43
.LBB24_42:
	.loc	1 59 55                         # formatter_private.c3:59:55
	movslq	-308(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -1376(%rbp)               # 8-byte Spill
	movq	%rax, -1368(%rbp)               # 8-byte Spill
	jmp	.LBB24_43
.LBB24_43:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1376(%rbp), %rdx               # 8-byte Reload
	movq	-1368(%rbp), %rcx               # 8-byte Reload
	.loc	1 59 55                         # formatter_private.c3:59:55
	movq	%rdx, (%rax)
	movq	%rcx, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 59 55 epilogue_begin          # formatter_private.c3:59:55
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1202:
.LBB24_44:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1384(%rbp)               # 8-byte Spill
	.loc	1 60 8 is_stmt 1                # formatter_private.c3:60:8
	jmp	.LBB24_45
.LBB24_45:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1384(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1400(%rbp)               # 8-byte Spill
	.loc	1 60 8                          # formatter_private.c3:60:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1385(%rbp)                # 1-byte Spill
	je	.LBB24_47
# %bb.46:                               #   in Loop: Header=BB24_45 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1400(%rbp), %rax               # 8-byte Reload
	.loc	1 60 8                          # formatter_private.c3:60:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1384(%rbp)               # 8-byte Spill
	movb	%al, -1385(%rbp)                # 1-byte Spill
	jne	.LBB24_45
.LBB24_47:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1385(%rbp), %al                # 1-byte Reload
	.loc	1 60 8                          # formatter_private.c3:60:8
	testb	$1, %al
	jne	.LBB24_48
	jmp	.LBB24_55
.LBB24_48:
.Ltmp1203:
	.loc	1 61 15 is_stmt 1               # formatter_private.c3:61:15
	movq	-16(%rbp), %rax
	movq	%rax, -1408(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_157
# %bb.49:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1408(%rbp), %rax               # 8-byte Reload
	.loc	1 61 15                         # formatter_private.c3:61:15
	andq	$1, %rax
	movq	%rax, -1416(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_158
# %bb.50:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-1408(%rbp), %rax               # 8-byte Reload
	.loc	1 61 15                         # formatter_private.c3:61:15
	movswl	(%rax), %eax
	movl	%eax, -324(%rbp)
	.loc	1 62 22 is_stmt 1               # formatter_private.c3:62:22
	cmpl	$0, -324(%rbp)
	setl	%al
	movb	%al, -1425(%rbp)                # 1-byte Spill
	.loc	1 62 13 is_stmt 0               # formatter_private.c3:62:13
	movq	-24(%rbp), %rax
	movq	%rax, -1424(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_159
# %bb.51:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1424(%rbp), %rcx               # 8-byte Reload
	movb	-1425(%rbp), %al                # 1-byte Reload
	.loc	1 62 13                         # formatter_private.c3:62:13
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_53
# %bb.52:
	.loc	1 62 35                         # formatter_private.c3:62:35
	movslq	-324(%rbp), %rcx
	movq	%rcx, %rdx
	sarq	$63, %rdx
	xorl	%eax, %eax
	.loc	1 62 33                         # formatter_private.c3:62:33
	negq	%rcx
                                        # kill: def $rax killed $eax
	sbbq	%rdx, %rax
	movq	%rcx, -1448(%rbp)               # 8-byte Spill
	movq	%rax, -1440(%rbp)               # 8-byte Spill
	jmp	.LBB24_54
.LBB24_53:
	.loc	1 62 55                         # formatter_private.c3:62:55
	movslq	-324(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -1448(%rbp)               # 8-byte Spill
	movq	%rax, -1440(%rbp)               # 8-byte Spill
	jmp	.LBB24_54
.LBB24_54:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1448(%rbp), %rdx               # 8-byte Reload
	movq	-1440(%rbp), %rcx               # 8-byte Reload
	.loc	1 62 55                         # formatter_private.c3:62:55
	movq	%rdx, (%rax)
	movq	%rcx, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 62 55 epilogue_begin          # formatter_private.c3:62:55
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1204:
.LBB24_55:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1456(%rbp)               # 8-byte Spill
	.loc	1 63 8 is_stmt 1                # formatter_private.c3:63:8
	jmp	.LBB24_56
.LBB24_56:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1456(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1472(%rbp)               # 8-byte Spill
	.loc	1 63 8                          # formatter_private.c3:63:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1457(%rbp)                # 1-byte Spill
	je	.LBB24_58
# %bb.57:                               #   in Loop: Header=BB24_56 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1472(%rbp), %rax               # 8-byte Reload
	.loc	1 63 8                          # formatter_private.c3:63:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1456(%rbp)               # 8-byte Spill
	movb	%al, -1457(%rbp)                # 1-byte Spill
	jne	.LBB24_56
.LBB24_58:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1457(%rbp), %al                # 1-byte Reload
	.loc	1 63 8                          # formatter_private.c3:63:8
	testb	$1, %al
	jne	.LBB24_59
	jmp	.LBB24_66
.LBB24_59:
.Ltmp1205:
	.loc	1 64 15 is_stmt 1               # formatter_private.c3:64:15
	movq	-16(%rbp), %rax
	movq	%rax, -1480(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_160
# %bb.60:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1480(%rbp), %rax               # 8-byte Reload
	.loc	1 64 15                         # formatter_private.c3:64:15
	andq	$3, %rax
	movq	%rax, -1488(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_161
# %bb.61:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-1480(%rbp), %rax               # 8-byte Reload
	.loc	1 64 15                         # formatter_private.c3:64:15
	movl	(%rax), %eax
	movl	%eax, -412(%rbp)
	.loc	1 65 22 is_stmt 1               # formatter_private.c3:65:22
	cmpl	$0, -412(%rbp)
	setl	%al
	movb	%al, -1497(%rbp)                # 1-byte Spill
	.loc	1 65 13 is_stmt 0               # formatter_private.c3:65:13
	movq	-24(%rbp), %rax
	movq	%rax, -1496(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_162
# %bb.62:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1496(%rbp), %rcx               # 8-byte Reload
	movb	-1497(%rbp), %al                # 1-byte Reload
	.loc	1 65 13                         # formatter_private.c3:65:13
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_64
# %bb.63:
	.loc	1 65 35                         # formatter_private.c3:65:35
	movslq	-412(%rbp), %rcx
	movq	%rcx, %rdx
	sarq	$63, %rdx
	xorl	%eax, %eax
	.loc	1 65 33                         # formatter_private.c3:65:33
	negq	%rcx
                                        # kill: def $rax killed $eax
	sbbq	%rdx, %rax
	movq	%rcx, -1520(%rbp)               # 8-byte Spill
	movq	%rax, -1512(%rbp)               # 8-byte Spill
	jmp	.LBB24_65
.LBB24_64:
	.loc	1 65 55                         # formatter_private.c3:65:55
	movslq	-412(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -1520(%rbp)               # 8-byte Spill
	movq	%rax, -1512(%rbp)               # 8-byte Spill
	jmp	.LBB24_65
.LBB24_65:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1520(%rbp), %rdx               # 8-byte Reload
	movq	-1512(%rbp), %rcx               # 8-byte Reload
	.loc	1 65 55                         # formatter_private.c3:65:55
	movq	%rdx, (%rax)
	movq	%rcx, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 65 55 epilogue_begin          # formatter_private.c3:65:55
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1206:
.LBB24_66:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1528(%rbp)               # 8-byte Spill
	.loc	1 66 8 is_stmt 1                # formatter_private.c3:66:8
	jmp	.LBB24_67
.LBB24_67:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1528(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1544(%rbp)               # 8-byte Spill
	.loc	1 66 8                          # formatter_private.c3:66:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1529(%rbp)                # 1-byte Spill
	je	.LBB24_69
# %bb.68:                               #   in Loop: Header=BB24_67 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1544(%rbp), %rax               # 8-byte Reload
	.loc	1 66 8                          # formatter_private.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1528(%rbp)               # 8-byte Spill
	movb	%al, -1529(%rbp)                # 1-byte Spill
	jne	.LBB24_67
.LBB24_69:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1529(%rbp), %al                # 1-byte Reload
	.loc	1 66 8                          # formatter_private.c3:66:8
	testb	$1, %al
	jne	.LBB24_70
	jmp	.LBB24_77
.LBB24_70:
.Ltmp1207:
	.loc	1 67 16 is_stmt 1               # formatter_private.c3:67:16
	movq	-16(%rbp), %rax
	movq	%rax, -1552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_163
# %bb.71:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1552(%rbp), %rax               # 8-byte Reload
	.loc	1 67 16                         # formatter_private.c3:67:16
	andq	$7, %rax
	movq	%rax, -1560(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_164
# %bb.72:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-1552(%rbp), %rax               # 8-byte Reload
	.loc	1 67 16                         # formatter_private.c3:67:16
	movq	(%rax), %rax
	movq	%rax, -496(%rbp)
	.loc	1 68 22 is_stmt 1               # formatter_private.c3:68:22
	cmpq	$0, -496(%rbp)
	setl	%al
	movb	%al, -1569(%rbp)                # 1-byte Spill
	.loc	1 68 13 is_stmt 0               # formatter_private.c3:68:13
	movq	-24(%rbp), %rax
	movq	%rax, -1568(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_165
# %bb.73:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1568(%rbp), %rcx               # 8-byte Reload
	movb	-1569(%rbp), %al                # 1-byte Reload
	.loc	1 68 13                         # formatter_private.c3:68:13
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_75
# %bb.74:
	.loc	1 68 35                         # formatter_private.c3:68:35
	movq	-496(%rbp), %rcx
	movq	%rcx, %rdx
	sarq	$63, %rdx
	xorl	%eax, %eax
	.loc	1 68 33                         # formatter_private.c3:68:33
	negq	%rcx
                                        # kill: def $rax killed $eax
	sbbq	%rdx, %rax
	movq	%rcx, -1592(%rbp)               # 8-byte Spill
	movq	%rax, -1584(%rbp)               # 8-byte Spill
	jmp	.LBB24_76
.LBB24_75:
	.loc	1 68 55                         # formatter_private.c3:68:55
	movq	-496(%rbp), %rcx
	movq	%rcx, %rax
	sarq	$63, %rax
	movq	%rcx, -1592(%rbp)               # 8-byte Spill
	movq	%rax, -1584(%rbp)               # 8-byte Spill
	jmp	.LBB24_76
.LBB24_76:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1592(%rbp), %rdx               # 8-byte Reload
	movq	-1584(%rbp), %rcx               # 8-byte Reload
	.loc	1 68 55                         # formatter_private.c3:68:55
	movq	%rdx, (%rax)
	movq	%rcx, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 68 55 epilogue_begin          # formatter_private.c3:68:55
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1208:
.LBB24_77:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1600(%rbp)               # 8-byte Spill
	.loc	1 69 8 is_stmt 1                # formatter_private.c3:69:8
	jmp	.LBB24_78
.LBB24_78:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1600(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1616(%rbp)               # 8-byte Spill
	.loc	1 69 8                          # formatter_private.c3:69:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1601(%rbp)                # 1-byte Spill
	je	.LBB24_80
# %bb.79:                               #   in Loop: Header=BB24_78 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1616(%rbp), %rax               # 8-byte Reload
	.loc	1 69 8                          # formatter_private.c3:69:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1600(%rbp)               # 8-byte Spill
	movb	%al, -1601(%rbp)                # 1-byte Spill
	jne	.LBB24_78
.LBB24_80:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1601(%rbp), %al                # 1-byte Reload
	.loc	1 69 8                          # formatter_private.c3:69:8
	testb	$1, %al
	jne	.LBB24_81
	jmp	.LBB24_88
.LBB24_81:
.Ltmp1209:
	.loc	1 70 18 is_stmt 1               # formatter_private.c3:70:18
	movq	-16(%rbp), %rax
	movq	%rax, -1624(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_166
# %bb.82:
	.loc	1 0 18 is_stmt 0                # formatter_private.c3:0:18
	movq	-1624(%rbp), %rax               # 8-byte Reload
	.loc	1 70 18                         # formatter_private.c3:70:18
	andq	$15, %rax
	movq	%rax, -1632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_167
# %bb.83:
	.loc	1 0 18                          # formatter_private.c3:0:18
	movq	-1624(%rbp), %rcx               # 8-byte Reload
	.loc	1 70 18                         # formatter_private.c3:70:18
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -584(%rbp)
	movq	%rax, -592(%rbp)
	.loc	1 71 22 is_stmt 1               # formatter_private.c3:71:22
	movq	-584(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -1641(%rbp)                # 1-byte Spill
	.loc	1 71 13 is_stmt 0               # formatter_private.c3:71:13
	movq	-24(%rbp), %rax
	movq	%rax, -1640(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_168
# %bb.84:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1640(%rbp), %rcx               # 8-byte Reload
	movb	-1641(%rbp), %al                # 1-byte Reload
	.loc	1 71 13                         # formatter_private.c3:71:13
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_86
# %bb.85:
	.loc	1 71 35                         # formatter_private.c3:71:35
	movq	-592(%rbp), %rcx
	movq	-584(%rbp), %rdx
	xorl	%eax, %eax
	.loc	1 71 33                         # formatter_private.c3:71:33
	negq	%rcx
                                        # kill: def $rax killed $eax
	sbbq	%rdx, %rax
	movq	%rcx, -1664(%rbp)               # 8-byte Spill
	movq	%rax, -1656(%rbp)               # 8-byte Spill
	jmp	.LBB24_87
.LBB24_86:
	.loc	1 71 55                         # formatter_private.c3:71:55
	movq	-592(%rbp), %rcx
	movq	-584(%rbp), %rax
	movq	%rcx, -1664(%rbp)               # 8-byte Spill
	movq	%rax, -1656(%rbp)               # 8-byte Spill
	jmp	.LBB24_87
.LBB24_87:
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1664(%rbp), %rdx               # 8-byte Reload
	movq	-1656(%rbp), %rcx               # 8-byte Reload
	.loc	1 71 55                         # formatter_private.c3:71:55
	movq	%rdx, (%rax)
	movq	%rcx, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 71 55 epilogue_begin          # formatter_private.c3:71:55
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1210:
.LBB24_88:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 55                          # formatter_private.c3:0:55
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1672(%rbp)               # 8-byte Spill
	.loc	1 72 8 is_stmt 1                # formatter_private.c3:72:8
	jmp	.LBB24_89
.LBB24_89:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1672(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1688(%rbp)               # 8-byte Spill
	.loc	1 72 8                          # formatter_private.c3:72:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1673(%rbp)                # 1-byte Spill
	je	.LBB24_91
# %bb.90:                               #   in Loop: Header=BB24_89 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1688(%rbp), %rax               # 8-byte Reload
	.loc	1 72 8                          # formatter_private.c3:72:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1672(%rbp)               # 8-byte Spill
	movb	%al, -1673(%rbp)                # 1-byte Spill
	jne	.LBB24_89
.LBB24_91:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1673(%rbp), %al                # 1-byte Reload
	.loc	1 72 8                          # formatter_private.c3:72:8
	testb	$1, %al
	jne	.LBB24_92
	jmp	.LBB24_94
.LBB24_92:
.Ltmp1211:
	.loc	1 73 12 is_stmt 1               # formatter_private.c3:73:12
	movq	-16(%rbp), %rax
	movq	%rax, -1696(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_169
# %bb.93:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1696(%rbp), %rcx               # 8-byte Reload
	.loc	1 73 12                         # formatter_private.c3:73:12
	movzbl	(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 73 12 epilogue_begin          # formatter_private.c3:73:12
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1212:
.LBB24_94:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1704(%rbp)               # 8-byte Spill
	.loc	1 74 8 is_stmt 1                # formatter_private.c3:74:8
	jmp	.LBB24_95
.LBB24_95:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1704(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1720(%rbp)               # 8-byte Spill
	.loc	1 74 8                          # formatter_private.c3:74:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1705(%rbp)                # 1-byte Spill
	je	.LBB24_97
# %bb.96:                               #   in Loop: Header=BB24_95 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1720(%rbp), %rax               # 8-byte Reload
	.loc	1 74 8                          # formatter_private.c3:74:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1704(%rbp)               # 8-byte Spill
	movb	%al, -1705(%rbp)                # 1-byte Spill
	jne	.LBB24_95
.LBB24_97:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1705(%rbp), %al                # 1-byte Reload
	.loc	1 74 8                          # formatter_private.c3:74:8
	testb	$1, %al
	jne	.LBB24_98
	jmp	.LBB24_101
.LBB24_98:
.Ltmp1213:
	.loc	1 75 12 is_stmt 1               # formatter_private.c3:75:12
	movq	-16(%rbp), %rax
	movq	%rax, -1728(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_170
# %bb.99:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1728(%rbp), %rax               # 8-byte Reload
	.loc	1 75 12                         # formatter_private.c3:75:12
	andq	$1, %rax
	movq	%rax, -1736(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_171
# %bb.100:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1728(%rbp), %rcx               # 8-byte Reload
	.loc	1 75 12                         # formatter_private.c3:75:12
	movzwl	(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 75 12 epilogue_begin          # formatter_private.c3:75:12
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1214:
.LBB24_101:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1744(%rbp)               # 8-byte Spill
	.loc	1 76 8 is_stmt 1                # formatter_private.c3:76:8
	jmp	.LBB24_102
.LBB24_102:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1744(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1760(%rbp)               # 8-byte Spill
	.loc	1 76 8                          # formatter_private.c3:76:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1745(%rbp)                # 1-byte Spill
	je	.LBB24_104
# %bb.103:                              #   in Loop: Header=BB24_102 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1760(%rbp), %rax               # 8-byte Reload
	.loc	1 76 8                          # formatter_private.c3:76:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1744(%rbp)               # 8-byte Spill
	movb	%al, -1745(%rbp)                # 1-byte Spill
	jne	.LBB24_102
.LBB24_104:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1745(%rbp), %al                # 1-byte Reload
	.loc	1 76 8                          # formatter_private.c3:76:8
	testb	$1, %al
	jne	.LBB24_105
	jmp	.LBB24_108
.LBB24_105:
.Ltmp1215:
	.loc	1 77 12 is_stmt 1               # formatter_private.c3:77:12
	movq	-16(%rbp), %rax
	movq	%rax, -1768(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_172
# %bb.106:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1768(%rbp), %rax               # 8-byte Reload
	.loc	1 77 12                         # formatter_private.c3:77:12
	andq	$3, %rax
	movq	%rax, -1776(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_173
# %bb.107:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1768(%rbp), %rcx               # 8-byte Reload
	.loc	1 77 12                         # formatter_private.c3:77:12
	movl	(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 77 12 epilogue_begin          # formatter_private.c3:77:12
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1216:
.LBB24_108:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1784(%rbp)               # 8-byte Spill
	.loc	1 78 8 is_stmt 1                # formatter_private.c3:78:8
	jmp	.LBB24_109
.LBB24_109:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1784(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1800(%rbp)               # 8-byte Spill
	.loc	1 78 8                          # formatter_private.c3:78:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1785(%rbp)                # 1-byte Spill
	je	.LBB24_111
# %bb.110:                              #   in Loop: Header=BB24_109 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1800(%rbp), %rax               # 8-byte Reload
	.loc	1 78 8                          # formatter_private.c3:78:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1784(%rbp)               # 8-byte Spill
	movb	%al, -1785(%rbp)                # 1-byte Spill
	jne	.LBB24_109
.LBB24_111:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1785(%rbp), %al                # 1-byte Reload
	.loc	1 78 8                          # formatter_private.c3:78:8
	testb	$1, %al
	jne	.LBB24_112
	jmp	.LBB24_115
.LBB24_112:
.Ltmp1217:
	.loc	1 79 12 is_stmt 1               # formatter_private.c3:79:12
	movq	-16(%rbp), %rax
	movq	%rax, -1808(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_174
# %bb.113:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1808(%rbp), %rax               # 8-byte Reload
	.loc	1 79 12                         # formatter_private.c3:79:12
	andq	$7, %rax
	movq	%rax, -1816(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_175
# %bb.114:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1808(%rbp), %rcx               # 8-byte Reload
	.loc	1 79 12                         # formatter_private.c3:79:12
	movq	(%rcx), %rcx
	movq	%rcx, (%rax)
	movq	$0, 8(%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 79 12 epilogue_begin          # formatter_private.c3:79:12
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1218:
.LBB24_115:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1824(%rbp)               # 8-byte Spill
	.loc	1 80 8 is_stmt 1                # formatter_private.c3:80:8
	jmp	.LBB24_116
.LBB24_116:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1824(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1840(%rbp)               # 8-byte Spill
	.loc	1 80 8                          # formatter_private.c3:80:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1825(%rbp)                # 1-byte Spill
	je	.LBB24_118
# %bb.117:                              #   in Loop: Header=BB24_116 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1840(%rbp), %rax               # 8-byte Reload
	.loc	1 80 8                          # formatter_private.c3:80:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1824(%rbp)               # 8-byte Spill
	movb	%al, -1825(%rbp)                # 1-byte Spill
	jne	.LBB24_116
.LBB24_118:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1825(%rbp), %al                # 1-byte Reload
	.loc	1 80 8                          # formatter_private.c3:80:8
	testb	$1, %al
	jne	.LBB24_119
	jmp	.LBB24_122
.LBB24_119:
.Ltmp1219:
	.loc	1 81 12 is_stmt 1               # formatter_private.c3:81:12
	movq	-16(%rbp), %rax
	movq	%rax, -1848(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_176
# %bb.120:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1848(%rbp), %rax               # 8-byte Reload
	.loc	1 81 12                         # formatter_private.c3:81:12
	andq	$15, %rax
	movq	%rax, -1856(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_177
# %bb.121:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	-1848(%rbp), %rdx               # 8-byte Reload
	.loc	1 81 12                         # formatter_private.c3:81:12
	movq	(%rdx), %rcx
	movq	8(%rdx), %rdx
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 81 12 epilogue_begin          # formatter_private.c3:81:12
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1220:
.LBB24_122:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1864(%rbp)               # 8-byte Spill
	.loc	1 82 8 is_stmt 1                # formatter_private.c3:82:8
	jmp	.LBB24_123
.LBB24_123:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1864(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1880(%rbp)               # 8-byte Spill
	.loc	1 82 8                          # formatter_private.c3:82:8
	movb	$1, %al
	movq	($ct.float)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1865(%rbp)                # 1-byte Spill
	je	.LBB24_125
# %bb.124:                              #   in Loop: Header=BB24_123 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1880(%rbp), %rax               # 8-byte Reload
	.loc	1 82 8                          # formatter_private.c3:82:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1864(%rbp)               # 8-byte Spill
	movb	%al, -1865(%rbp)                # 1-byte Spill
	jne	.LBB24_123
.LBB24_125:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1865(%rbp), %al                # 1-byte Reload
	.loc	1 82 8                          # formatter_private.c3:82:8
	testb	$1, %al
	jne	.LBB24_126
	jmp	.LBB24_133
.LBB24_126:
.Ltmp1221:
	.loc	1 83 15 is_stmt 1               # formatter_private.c3:83:15
	movq	-16(%rbp), %rax
	movq	%rax, -1888(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_178
# %bb.127:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1888(%rbp), %rax               # 8-byte Reload
	.loc	1 83 15                         # formatter_private.c3:83:15
	andq	$3, %rax
	movq	%rax, -1896(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_179
# %bb.128:
	.loc	1 0 15                          # formatter_private.c3:0:15
	movq	-1888(%rbp), %rax               # 8-byte Reload
	.loc	1 83 15                         # formatter_private.c3:83:15
	vmovss	(%rax), %xmm0                   # xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -996(%rbp)
	.loc	1 84 32 is_stmt 1               # formatter_private.c3:84:32
	vxorps	%xmm0, %xmm0, %xmm0
	vucomiss	-996(%rbp), %xmm0
	seta	%al
	movb	%al, -1905(%rbp)                # 1-byte Spill
	.loc	1 84 23 is_stmt 0               # formatter_private.c3:84:23
	movq	-24(%rbp), %rax
	movq	%rax, -1904(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_180
# %bb.129:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1904(%rbp), %rcx               # 8-byte Reload
	movb	-1905(%rbp), %al                # 1-byte Reload
	.loc	1 84 23                         # formatter_private.c3:84:23
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_131
# %bb.130:
	.loc	1 84 42                         # formatter_private.c3:84:42
	vmovss	-996(%rbp), %xmm0               # xmm0 = mem[0],zero,zero,zero
	vmovd	%xmm0, %eax
	xorl	$2147483648, %eax               # imm = 0x80000000
	vmovd	%eax, %xmm0
	vmovss	%xmm0, -1912(%rbp)              # 4-byte Spill
	jmp	.LBB24_132
.LBB24_131:
	.loc	1 84 46                         # formatter_private.c3:84:46
	vmovss	-996(%rbp), %xmm0               # xmm0 = mem[0],zero,zero,zero
	vmovss	%xmm0, -1912(%rbp)              # 4-byte Spill
.LBB24_132:
	.loc	1 0 46                          # formatter_private.c3:0:46
	vmovss	-1912(%rbp), %xmm0              # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	.loc	1 84 46                         # formatter_private.c3:84:46
	callq	__fixunssfti@PLT
	movq	%rax, %rcx
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 84 46 epilogue_begin          # formatter_private.c3:84:46
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1222:
.LBB24_133:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 46                          # formatter_private.c3:0:46
	movq	-1288(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1920(%rbp)               # 8-byte Spill
	.loc	1 85 8 is_stmt 1                # formatter_private.c3:85:8
	jmp	.LBB24_134
.LBB24_134:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1920(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1936(%rbp)               # 8-byte Spill
	.loc	1 85 8                          # formatter_private.c3:85:8
	movb	$1, %al
	movq	($ct.double)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1921(%rbp)                # 1-byte Spill
	je	.LBB24_136
# %bb.135:                              #   in Loop: Header=BB24_134 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1936(%rbp), %rax               # 8-byte Reload
	.loc	1 85 8                          # formatter_private.c3:85:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1920(%rbp)               # 8-byte Spill
	movb	%al, -1921(%rbp)                # 1-byte Spill
	jne	.LBB24_134
.LBB24_136:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1921(%rbp), %al                # 1-byte Reload
	.loc	1 85 8                          # formatter_private.c3:85:8
	testb	$1, %al
	jne	.LBB24_137
	jmp	.LBB24_144
.LBB24_137:
.Ltmp1223:
	.loc	1 86 16 is_stmt 1               # formatter_private.c3:86:16
	movq	-16(%rbp), %rax
	movq	%rax, -1944(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_181
# %bb.138:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1944(%rbp), %rax               # 8-byte Reload
	.loc	1 86 16                         # formatter_private.c3:86:16
	andq	$7, %rax
	movq	%rax, -1952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB24_182
# %bb.139:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-1944(%rbp), %rax               # 8-byte Reload
	.loc	1 86 16                         # formatter_private.c3:86:16
	vmovsd	(%rax), %xmm0                   # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1088(%rbp)
	.loc	1 87 32 is_stmt 1               # formatter_private.c3:87:32
	vxorps	%xmm0, %xmm0, %xmm0
	vucomisd	-1088(%rbp), %xmm0
	seta	%al
	movb	%al, -1961(%rbp)                # 1-byte Spill
	.loc	1 87 23 is_stmt 0               # formatter_private.c3:87:23
	movq	-24(%rbp), %rax
	movq	%rax, -1960(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB24_183
# %bb.140:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1960(%rbp), %rcx               # 8-byte Reload
	movb	-1961(%rbp), %al                # 1-byte Reload
	.loc	1 87 23                         # formatter_private.c3:87:23
	andb	$1, %al
	movb	%al, (%rcx)
	testb	$1, %al
	je	.LBB24_142
# %bb.141:
	.loc	1 87 42                         # formatter_private.c3:87:42
	vmovsd	-1088(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx     # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm0
	vmovsd	%xmm0, -1976(%rbp)              # 8-byte Spill
	jmp	.LBB24_143
.LBB24_142:
	.loc	1 87 46                         # formatter_private.c3:87:46
	vmovsd	-1088(%rbp), %xmm0              # xmm0 = mem[0],zero
	vmovsd	%xmm0, -1976(%rbp)              # 8-byte Spill
.LBB24_143:
	.loc	1 0 46                          # formatter_private.c3:0:46
	vmovsd	-1976(%rbp), %xmm0              # 8-byte Reload
                                        # xmm0 = mem[0],zero
	.loc	1 87 46                         # formatter_private.c3:87:46
	callq	__fixunsdfti@PLT
	movq	%rax, %rcx
	movq	-1168(%rbp), %rax               # 8-byte Reload
	movq	%rdx, 8(%rax)
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 87 46 epilogue_begin          # formatter_private.c3:87:46
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_144:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB24_145
.Ltmp1224:
.LBB24_145:
	.loc	1 89 11 is_stmt 1               # formatter_private.c3:89:11
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	.loc	1 89 11 epilogue_begin is_stmt 0 # formatter_private.c3:89:11
	addq	$2000, %rsp                     # imm = 0x7D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1225:
.LBB24_146:
	.cfi_def_cfa %rbp, 16
	.loc	1 44 5 is_stmt 1                # formatter_private.c3:44:5
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$44, (%rsp)
	callq	*(%rax)
.LBB24_147:
	.loc	1 45 27                         # formatter_private.c3:45:27
	leaq	.panic_msg.100(%rip), %rdi
	movl	$56, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB24_148:
	.loc	1 0 27 is_stmt 0                # formatter_private.c3:0:27
	movq	-1200(%rbp), %rcx               # 8-byte Reload
	movq	$8, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
	.loc	1 45 27                         # formatter_private.c3:45:27
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-112(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1226:
.LBB24_149:
	.loc	6 280 20 is_stmt 1              # builtin.c3:280:20
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB24_150:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-1216(%rbp), %rcx               # 8-byte Reload
	movq	$8, -136(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -144(%rbp)
	movq	%rax, -168(%rbp)
	leaq	-136(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, -160(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	$2, -184(%rbp)
	.loc	6 280 20                        # builtin.c3:280:20
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-192(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_151:
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB24_152:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1240(%rbp), %rcx               # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-256(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1227:
.LBB24_153:
	.loc	1 52 3 is_stmt 1                # formatter_private.c3:52:3
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$52, (%rsp)
	callq	*(%rax)
.LBB24_154:
.Ltmp1228:
	.loc	1 56 21                         # formatter_private.c3:56:21
	leaq	.panic_msg.101(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$56, (%rsp)
	callq	*(%rax)
.Ltmp1229:
.LBB24_155:
	.loc	1 58 15                         # formatter_private.c3:58:15
	leaq	.panic_msg.102(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$58, (%rsp)
	callq	*(%rax)
.LBB24_156:
	.loc	1 59 13                         # formatter_private.c3:59:13
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.Ltmp1230:
.LBB24_157:
	.loc	1 61 15                         # formatter_private.c3:61:15
	leaq	.panic_msg.103(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$61, (%rsp)
	callq	*(%rax)
.LBB24_158:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1416(%rbp), %rcx               # 8-byte Reload
	movq	$2, -336(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -344(%rbp)
	movq	%rax, -376(%rbp)
	leaq	-336(%rbp), %rcx
	movq	%rcx, -384(%rbp)
	movq	%rax, -360(%rbp)
	leaq	-344(%rbp), %rax
	movq	%rax, -368(%rbp)
	leaq	-384(%rbp), %rax
	movq	%rax, -400(%rbp)
	movq	$2, -392(%rbp)
	.loc	1 61 15                         # formatter_private.c3:61:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-400(%rbp), %rax
	movl	$61, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_159:
	.loc	1 62 13 is_stmt 1               # formatter_private.c3:62:13
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$62, (%rsp)
	callq	*(%rax)
.Ltmp1231:
.LBB24_160:
	.loc	1 64 15                         # formatter_private.c3:64:15
	leaq	.panic_msg.104(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$64, (%rsp)
	callq	*(%rax)
.LBB24_161:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1488(%rbp), %rcx               # 8-byte Reload
	movq	$4, -424(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -432(%rbp)
	movq	%rax, -456(%rbp)
	leaq	-424(%rbp), %rcx
	movq	%rcx, -464(%rbp)
	movq	%rax, -440(%rbp)
	leaq	-432(%rbp), %rax
	movq	%rax, -448(%rbp)
	leaq	-464(%rbp), %rax
	movq	%rax, -480(%rbp)
	movq	$2, -472(%rbp)
	.loc	1 64 15                         # formatter_private.c3:64:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-480(%rbp), %rax
	movl	$64, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_162:
	.loc	1 65 13 is_stmt 1               # formatter_private.c3:65:13
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$65, (%rsp)
	callq	*(%rax)
.Ltmp1232:
.LBB24_163:
	.loc	1 67 16                         # formatter_private.c3:67:16
	leaq	.panic_msg.105(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB24_164:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1560(%rbp), %rcx               # 8-byte Reload
	movq	$8, -504(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -512(%rbp)
	movq	%rax, -536(%rbp)
	leaq	-504(%rbp), %rcx
	movq	%rcx, -544(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-512(%rbp), %rax
	movq	%rax, -528(%rbp)
	leaq	-544(%rbp), %rax
	movq	%rax, -560(%rbp)
	movq	$2, -552(%rbp)
	.loc	1 67 16                         # formatter_private.c3:67:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-560(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_165:
	.loc	1 68 13 is_stmt 1               # formatter_private.c3:68:13
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$68, (%rsp)
	callq	*(%rax)
.Ltmp1233:
.LBB24_166:
	.loc	1 70 18                         # formatter_private.c3:70:18
	leaq	.panic_msg.106(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$70, (%rsp)
	callq	*(%rax)
.LBB24_167:
	.loc	1 0 18 is_stmt 0                # formatter_private.c3:0:18
	movq	-1632(%rbp), %rcx               # 8-byte Reload
	movq	$16, -600(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -608(%rbp)
	movq	%rax, -632(%rbp)
	leaq	-600(%rbp), %rcx
	movq	%rcx, -640(%rbp)
	movq	%rax, -616(%rbp)
	leaq	-608(%rbp), %rax
	movq	%rax, -624(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, -656(%rbp)
	movq	$2, -648(%rbp)
	.loc	1 70 18                         # formatter_private.c3:70:18
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-656(%rbp), %rax
	movl	$70, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_168:
	.loc	1 71 13 is_stmt 1               # formatter_private.c3:71:13
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.Ltmp1234:
.LBB24_169:
	.loc	1 73 12                         # formatter_private.c3:73:12
	leaq	.panic_msg.107(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$73, (%rsp)
	callq	*(%rax)
.Ltmp1235:
.LBB24_170:
	.loc	1 75 12                         # formatter_private.c3:75:12
	leaq	.panic_msg.108(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$75, (%rsp)
	callq	*(%rax)
.LBB24_171:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1736(%rbp), %rcx               # 8-byte Reload
	movq	$2, -688(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -696(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-688(%rbp), %rcx
	movq	%rcx, -736(%rbp)
	movq	%rax, -712(%rbp)
	leaq	-696(%rbp), %rax
	movq	%rax, -720(%rbp)
	leaq	-736(%rbp), %rax
	movq	%rax, -752(%rbp)
	movq	$2, -744(%rbp)
	.loc	1 75 12                         # formatter_private.c3:75:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-752(%rbp), %rax
	movl	$75, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1236:
.LBB24_172:
	.loc	1 77 12 is_stmt 1               # formatter_private.c3:77:12
	leaq	.panic_msg.109(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$77, (%rsp)
	callq	*(%rax)
.LBB24_173:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1776(%rbp), %rcx               # 8-byte Reload
	movq	$4, -768(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -776(%rbp)
	movq	%rax, -808(%rbp)
	leaq	-768(%rbp), %rcx
	movq	%rcx, -816(%rbp)
	movq	%rax, -792(%rbp)
	leaq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	leaq	-816(%rbp), %rax
	movq	%rax, -832(%rbp)
	movq	$2, -824(%rbp)
	.loc	1 77 12                         # formatter_private.c3:77:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-832(%rbp), %rax
	movl	$77, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1237:
.LBB24_174:
	.loc	1 79 12 is_stmt 1               # formatter_private.c3:79:12
	leaq	.panic_msg.110(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$79, (%rsp)
	callq	*(%rax)
.LBB24_175:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1816(%rbp), %rcx               # 8-byte Reload
	movq	$8, -848(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -856(%rbp)
	movq	%rax, -888(%rbp)
	leaq	-848(%rbp), %rcx
	movq	%rcx, -896(%rbp)
	movq	%rax, -872(%rbp)
	leaq	-856(%rbp), %rax
	movq	%rax, -880(%rbp)
	leaq	-896(%rbp), %rax
	movq	%rax, -912(%rbp)
	movq	$2, -904(%rbp)
	.loc	1 79 12                         # formatter_private.c3:79:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-912(%rbp), %rax
	movl	$79, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1238:
.LBB24_176:
	.loc	1 81 12 is_stmt 1               # formatter_private.c3:81:12
	leaq	.panic_msg.111(%rip), %rdi
	movl	$54, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$81, (%rsp)
	callq	*(%rax)
.LBB24_177:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1856(%rbp), %rcx               # 8-byte Reload
	movq	$16, -928(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -936(%rbp)
	movq	%rax, -968(%rbp)
	leaq	-928(%rbp), %rcx
	movq	%rcx, -976(%rbp)
	movq	%rax, -952(%rbp)
	leaq	-936(%rbp), %rax
	movq	%rax, -960(%rbp)
	leaq	-976(%rbp), %rax
	movq	%rax, -992(%rbp)
	movq	$2, -984(%rbp)
	.loc	1 81 12                         # formatter_private.c3:81:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-992(%rbp), %rax
	movl	$81, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1239:
.LBB24_178:
	.loc	1 83 15 is_stmt 1               # formatter_private.c3:83:15
	leaq	.panic_msg.112(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$83, (%rsp)
	callq	*(%rax)
.LBB24_179:
	.loc	1 0 15 is_stmt 0                # formatter_private.c3:0:15
	movq	-1896(%rbp), %rcx               # 8-byte Reload
	movq	$4, -1008(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1016(%rbp)
	movq	%rax, -1048(%rbp)
	leaq	-1008(%rbp), %rcx
	movq	%rcx, -1056(%rbp)
	movq	%rax, -1032(%rbp)
	leaq	-1016(%rbp), %rax
	movq	%rax, -1040(%rbp)
	leaq	-1056(%rbp), %rax
	movq	%rax, -1072(%rbp)
	movq	$2, -1064(%rbp)
	.loc	1 83 15                         # formatter_private.c3:83:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-1072(%rbp), %rax
	movl	$83, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_180:
	.loc	1 84 23 is_stmt 1               # formatter_private.c3:84:23
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$84, (%rsp)
	callq	*(%rax)
.Ltmp1240:
.LBB24_181:
	.loc	1 86 16                         # formatter_private.c3:86:16
	leaq	.panic_msg.113(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$86, (%rsp)
	callq	*(%rax)
.LBB24_182:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1952(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1096(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1104(%rbp)
	movq	%rax, -1128(%rbp)
	leaq	-1096(%rbp), %rcx
	movq	%rcx, -1136(%rbp)
	movq	%rax, -1112(%rbp)
	leaq	-1104(%rbp), %rax
	movq	%rax, -1120(%rbp)
	leaq	-1136(%rbp), %rax
	movq	%rax, -1152(%rbp)
	movq	$2, -1144(%rbp)
	.loc	1 86 16                         # formatter_private.c3:86:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	leaq	-1152(%rbp), %rax
	movl	$86, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB24_183:
	.loc	1 87 23 is_stmt 1               # formatter_private.c3:87:23
	leaq	.panic_msg.98(%rip), %rdi
	movl	$47, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.99(%rip), %r8
	movl	$12, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$87, (%rsp)
	callq	*(%rax)
.Ltmp1241:
.Lfunc_end24:
	.size	std.io.int_from_any, .Lfunc_end24-std.io.int_from_any
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	2, 0x0
.LJTI24_0:
	.long	.LBB24_6-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_2-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_25-.LJTI24_0
	.long	.LBB24_6-.LJTI24_0
	.long	.LBB24_2-.LJTI24_0
                                        # -- End function
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4, 0x0                          # -- Begin function std.io.float_from_any
.LCPI25_0:
	.long	1127219200                      # 0x43300000
	.long	1160773632                      # 0x45300000
	.long	0                               # 0x0
	.long	0                               # 0x0
.LCPI25_1:
	.quad	0x4330000000000000              # double 4503599627370496
	.quad	0x4530000000000000              # double 1.9342813113834067E+25
	.text
	.p2align	4, 0x90
	.type	std.io.float_from_any,@function
std.io.float_from_any:                  # @std.io.float_from_any
.Lfunc_begin25:
	.loc	1 93 0                          # formatter_private.c3:93:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1616, %rsp                     # imm = 0x650
	movq	%rdi, -1024(%rbp)               # 8-byte Spill
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
.Ltmp1242:
	.loc	1 98 6 prologue_end             # formatter_private.c3:98:6
	movq	-8(%rbp), %rcx
	movb	$1, %al
	cmpb	$18, (%rcx)
	movb	%al, -1009(%rbp)                # 1-byte Spill
	je	.LBB25_2
# %bb.1:
	.loc	1 98 37 is_stmt 0               # formatter_private.c3:98:37
	movq	-8(%rbp), %rax
	cmpb	$9, (%rax)
	sete	%al
	movb	%al, -1009(%rbp)                # 1-byte Spill
.LBB25_2:
	.loc	1 0 37                          # formatter_private.c3:0:37
	movb	-1009(%rbp), %al                # 1-byte Reload
	.loc	1 98 37                         # formatter_private.c3:98:37
	testb	$1, %al
	jne	.LBB25_3
	jmp	.LBB25_22
.LBB25_3:
	.loc	1 0 37                          # formatter_private.c3:0:37
	leaq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.Ltmp1243:
	.loc	6 278 20 is_stmt 1              # builtin.c3:278:20
	cmpq	$0, -32(%rbp)
	jne	.LBB25_5
# %bb.4:
	leaq	.panic_msg.34(%rip), %rdi
	movl	$32, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$278, (%rsp)                    # imm = 0x116
	callq	*(%rax)
.Ltmp1244:
.LBB25_5:
	.loc	6 280 20                        # builtin.c3:280:20
	movq	-32(%rbp), %rax
	movq	%rax, -1032(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_113
# %bb.6:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-1032(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	andq	$7, %rax
	movq	%rax, -1040(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_114
# %bb.7:
	.loc	6 0 20                          # builtin.c3:0:20
	movq	-1032(%rbp), %rax               # 8-byte Reload
	.loc	6 280 20                        # builtin.c3:280:20
	movq	(%rax), %rax
	movq	%rax, -1056(%rbp)               # 8-byte Spill
	.loc	6 280 30                        # builtin.c3:280:30
	movq	-32(%rbp), %rax
	movq	%rax, -1048(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_115
# %bb.8:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1048(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	andq	$7, %rax
	movq	%rax, -1064(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_116
# %bb.9:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1048(%rbp), %rax               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	8(%rax), %rax
	movq	%rax, -1080(%rbp)               # 8-byte Spill
	movb	(%rax), %al
	movb	%al, -1065(%rbp)                # 1-byte Spill
	cmpb	$15, %al
	je	.LBB25_18
# %bb.10:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$19, %al
	je	.LBB25_18
# %bb.11:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$17, %al
	je	.LBB25_18
# %bb.12:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$8, %al
	je	.LBB25_18
# %bb.13:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$16, %al
	je	.LBB25_18
# %bb.14:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$18, %al
	je	.LBB25_18
# %bb.15:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$9, %al
	je	.LBB25_18
# %bb.16:
	.loc	6 0 30                          # builtin.c3:0:30
	movb	-1065(%rbp), %al                # 1-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	cmpb	$12, %al
	je	.LBB25_18
# %bb.17:
	leaq	.panic_msg.36(%rip), %rdi
	movl	$49, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB25_18:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1056(%rbp), %rax               # 8-byte Reload
	movq	-1080(%rbp), %rcx               # 8-byte Reload
	.loc	6 280 30                        # builtin.c3:280:30
	movq	32(%rcx), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	-176(%rbp), %rdx
.Ltmp1245:
	.loc	1 100 10 is_stmt 1              # formatter_private.c3:100:10
	leaq	-168(%rbp), %rdi
	callq	std.io.float_from_any
	movq	%rax, -1088(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_20
# %bb.19:
	.loc	1 0 10 is_stmt 0                # formatter_private.c3:0:10
	movq	-1088(%rbp), %rax               # 8-byte Reload
	.loc	1 100 10                        # formatter_private.c3:100:10
	movq	%rax, -24(%rbp)
	jmp	.LBB25_21
.LBB25_20:
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-1024(%rbp), %rax               # 8-byte Reload
	.loc	1 100 10                        # formatter_private.c3:100:10
	vmovsd	-168(%rbp), %xmm0               # xmm0 = mem[0],zero
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 100 10 epilogue_begin         # formatter_private.c3:100:10
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:
	.cfi_def_cfa %rbp, 16
	movq	-24(%rbp), %rax
	.loc	1 100 10 epilogue_begin         # formatter_private.c3:100:10
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1246:
.LBB25_22:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 10                          # formatter_private.c3:0:10
	movq	-8(%rbp), %rax
	movq	%rax, -192(%rbp)
# %bb.23:
	movq	-192(%rbp), %rax
	movq	%rax, -1104(%rbp)               # 8-byte Spill
	movq	%rax, -1096(%rbp)               # 8-byte Spill
.LBB25_24:                              # =>This Inner Loop Header: Depth=1
	movq	-1096(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1120(%rbp)               # 8-byte Spill
.Ltmp1247:
	.loc	1 104 8 is_stmt 1               # formatter_private.c3:104:8
	movb	$1, %al
	movq	($ct.bool)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1105(%rbp)                # 1-byte Spill
	je	.LBB25_26
# %bb.25:                               #   in Loop: Header=BB25_24 Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1120(%rbp), %rax               # 8-byte Reload
	.loc	1 104 8                         # formatter_private.c3:104:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1096(%rbp)               # 8-byte Spill
	movb	%al, -1105(%rbp)                # 1-byte Spill
	jne	.LBB25_24
.LBB25_26:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1105(%rbp), %al                # 1-byte Reload
	.loc	1 104 8                         # formatter_private.c3:104:8
	testb	$1, %al
	jne	.LBB25_27
	jmp	.LBB25_29
.LBB25_27:
.Ltmp1248:
	.loc	1 105 23 is_stmt 1              # formatter_private.c3:105:23
	movq	-16(%rbp), %rax
	movq	%rax, -1128(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_117
# %bb.28:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1128(%rbp), %rcx               # 8-byte Reload
	.loc	1 105 23                        # formatter_private.c3:105:23
	movb	(%rcx), %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
                                        # implicit-def: $xmm0
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 105 23 epilogue_begin         # formatter_private.c3:105:23
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1249:
.LBB25_29:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1136(%rbp)               # 8-byte Spill
	.loc	1 106 8 is_stmt 1               # formatter_private.c3:106:8
	jmp	.LBB25_30
.LBB25_30:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1136(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1152(%rbp)               # 8-byte Spill
	.loc	1 106 8                         # formatter_private.c3:106:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1137(%rbp)                # 1-byte Spill
	je	.LBB25_32
# %bb.31:                               #   in Loop: Header=BB25_30 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1152(%rbp), %rax               # 8-byte Reload
	.loc	1 106 8                         # formatter_private.c3:106:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1136(%rbp)               # 8-byte Spill
	movb	%al, -1137(%rbp)                # 1-byte Spill
	jne	.LBB25_30
.LBB25_32:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1137(%rbp), %al                # 1-byte Reload
	.loc	1 106 8                         # formatter_private.c3:106:8
	testb	$1, %al
	jne	.LBB25_33
	jmp	.LBB25_35
.LBB25_33:
.Ltmp1250:
	.loc	1 107 12 is_stmt 1              # formatter_private.c3:107:12
	movq	-16(%rbp), %rax
	movq	%rax, -1160(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_118
# %bb.34:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1160(%rbp), %rcx               # 8-byte Reload
	.loc	1 107 12                        # formatter_private.c3:107:12
	movsbl	(%rcx), %ecx
                                        # kill: def $dl killed $cl
                                        # implicit-def: $xmm0
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 107 12 epilogue_begin         # formatter_private.c3:107:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1251:
.LBB25_35:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1168(%rbp)               # 8-byte Spill
	.loc	1 108 8 is_stmt 1               # formatter_private.c3:108:8
	jmp	.LBB25_36
.LBB25_36:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1168(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1184(%rbp)               # 8-byte Spill
	.loc	1 108 8                         # formatter_private.c3:108:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1169(%rbp)                # 1-byte Spill
	je	.LBB25_38
# %bb.37:                               #   in Loop: Header=BB25_36 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1184(%rbp), %rax               # 8-byte Reload
	.loc	1 108 8                         # formatter_private.c3:108:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1168(%rbp)               # 8-byte Spill
	movb	%al, -1169(%rbp)                # 1-byte Spill
	jne	.LBB25_36
.LBB25_38:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1169(%rbp), %al                # 1-byte Reload
	.loc	1 108 8                         # formatter_private.c3:108:8
	testb	$1, %al
	jne	.LBB25_39
	jmp	.LBB25_42
.LBB25_39:
.Ltmp1252:
	.loc	1 109 12 is_stmt 1              # formatter_private.c3:109:12
	movq	-16(%rbp), %rax
	movq	%rax, -1192(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_119
# %bb.40:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1192(%rbp), %rax               # 8-byte Reload
	.loc	1 109 12                        # formatter_private.c3:109:12
	andq	$1, %rax
	movq	%rax, -1200(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_120
# %bb.41:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1192(%rbp), %rcx               # 8-byte Reload
	.loc	1 109 12                        # formatter_private.c3:109:12
	movswl	(%rcx), %ecx
                                        # kill: def $dx killed $cx
                                        # implicit-def: $xmm0
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 109 12 epilogue_begin         # formatter_private.c3:109:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1253:
.LBB25_42:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1208(%rbp)               # 8-byte Spill
	.loc	1 110 8 is_stmt 1               # formatter_private.c3:110:8
	jmp	.LBB25_43
.LBB25_43:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1208(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1224(%rbp)               # 8-byte Spill
	.loc	1 110 8                         # formatter_private.c3:110:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1209(%rbp)                # 1-byte Spill
	je	.LBB25_45
# %bb.44:                               #   in Loop: Header=BB25_43 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1224(%rbp), %rax               # 8-byte Reload
	.loc	1 110 8                         # formatter_private.c3:110:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1208(%rbp)               # 8-byte Spill
	movb	%al, -1209(%rbp)                # 1-byte Spill
	jne	.LBB25_43
.LBB25_45:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1209(%rbp), %al                # 1-byte Reload
	.loc	1 110 8                         # formatter_private.c3:110:8
	testb	$1, %al
	jne	.LBB25_46
	jmp	.LBB25_49
.LBB25_46:
.Ltmp1254:
	.loc	1 111 12 is_stmt 1              # formatter_private.c3:111:12
	movq	-16(%rbp), %rax
	movq	%rax, -1232(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_121
# %bb.47:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1232(%rbp), %rax               # 8-byte Reload
	.loc	1 111 12                        # formatter_private.c3:111:12
	andq	$3, %rax
	movq	%rax, -1240(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_122
# %bb.48:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1232(%rbp), %rcx               # 8-byte Reload
                                        # implicit-def: $xmm0
	.loc	1 111 12                        # formatter_private.c3:111:12
	vcvtsi2sdl	(%rcx), %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 111 12 epilogue_begin         # formatter_private.c3:111:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1255:
.LBB25_49:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1248(%rbp)               # 8-byte Spill
	.loc	1 112 8 is_stmt 1               # formatter_private.c3:112:8
	jmp	.LBB25_50
.LBB25_50:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1248(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1264(%rbp)               # 8-byte Spill
	.loc	1 112 8                         # formatter_private.c3:112:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1249(%rbp)                # 1-byte Spill
	je	.LBB25_52
# %bb.51:                               #   in Loop: Header=BB25_50 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1264(%rbp), %rax               # 8-byte Reload
	.loc	1 112 8                         # formatter_private.c3:112:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1248(%rbp)               # 8-byte Spill
	movb	%al, -1249(%rbp)                # 1-byte Spill
	jne	.LBB25_50
.LBB25_52:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1249(%rbp), %al                # 1-byte Reload
	.loc	1 112 8                         # formatter_private.c3:112:8
	testb	$1, %al
	jne	.LBB25_53
	jmp	.LBB25_56
.LBB25_53:
.Ltmp1256:
	.loc	1 113 12 is_stmt 1              # formatter_private.c3:113:12
	movq	-16(%rbp), %rax
	movq	%rax, -1272(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_123
# %bb.54:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1272(%rbp), %rax               # 8-byte Reload
	.loc	1 113 12                        # formatter_private.c3:113:12
	andq	$7, %rax
	movq	%rax, -1280(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_124
# %bb.55:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1272(%rbp), %rcx               # 8-byte Reload
                                        # implicit-def: $xmm0
	.loc	1 113 12                        # formatter_private.c3:113:12
	vcvtsi2sdq	(%rcx), %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 113 12 epilogue_begin         # formatter_private.c3:113:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1257:
.LBB25_56:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1288(%rbp)               # 8-byte Spill
	.loc	1 114 8 is_stmt 1               # formatter_private.c3:114:8
	jmp	.LBB25_57
.LBB25_57:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1288(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1304(%rbp)               # 8-byte Spill
	.loc	1 114 8                         # formatter_private.c3:114:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1289(%rbp)                # 1-byte Spill
	je	.LBB25_59
# %bb.58:                               #   in Loop: Header=BB25_57 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1304(%rbp), %rax               # 8-byte Reload
	.loc	1 114 8                         # formatter_private.c3:114:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1288(%rbp)               # 8-byte Spill
	movb	%al, -1289(%rbp)                # 1-byte Spill
	jne	.LBB25_57
.LBB25_59:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1289(%rbp), %al                # 1-byte Reload
	.loc	1 114 8                         # formatter_private.c3:114:8
	testb	$1, %al
	jne	.LBB25_60
	jmp	.LBB25_63
.LBB25_60:
.Ltmp1258:
	.loc	1 115 12 is_stmt 1              # formatter_private.c3:115:12
	movq	-16(%rbp), %rax
	movq	%rax, -1312(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_125
# %bb.61:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1312(%rbp), %rax               # 8-byte Reload
	.loc	1 115 12                        # formatter_private.c3:115:12
	andq	$15, %rax
	movq	%rax, -1320(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_126
# %bb.62:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1312(%rbp), %rax               # 8-byte Reload
	.loc	1 115 12                        # formatter_private.c3:115:12
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	callq	__floattidf@PLT
	movq	-1024(%rbp), %rax               # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 115 12 epilogue_begin         # formatter_private.c3:115:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1259:
.LBB25_63:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1328(%rbp)               # 8-byte Spill
	.loc	1 116 8 is_stmt 1               # formatter_private.c3:116:8
	jmp	.LBB25_64
.LBB25_64:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1328(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1344(%rbp)               # 8-byte Spill
	.loc	1 116 8                         # formatter_private.c3:116:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1329(%rbp)                # 1-byte Spill
	je	.LBB25_66
# %bb.65:                               #   in Loop: Header=BB25_64 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1344(%rbp), %rax               # 8-byte Reload
	.loc	1 116 8                         # formatter_private.c3:116:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1328(%rbp)               # 8-byte Spill
	movb	%al, -1329(%rbp)                # 1-byte Spill
	jne	.LBB25_64
.LBB25_66:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1329(%rbp), %al                # 1-byte Reload
	.loc	1 116 8                         # formatter_private.c3:116:8
	testb	$1, %al
	jne	.LBB25_67
	jmp	.LBB25_69
.LBB25_67:
.Ltmp1260:
	.loc	1 117 12 is_stmt 1              # formatter_private.c3:117:12
	movq	-16(%rbp), %rax
	movq	%rax, -1352(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_127
# %bb.68:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1352(%rbp), %rcx               # 8-byte Reload
	.loc	1 117 12                        # formatter_private.c3:117:12
	movzbl	(%rcx), %ecx
                                        # implicit-def: $xmm0
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 117 12 epilogue_begin         # formatter_private.c3:117:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1261:
.LBB25_69:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1360(%rbp)               # 8-byte Spill
	.loc	1 118 8 is_stmt 1               # formatter_private.c3:118:8
	jmp	.LBB25_70
.LBB25_70:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1360(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1376(%rbp)               # 8-byte Spill
	.loc	1 118 8                         # formatter_private.c3:118:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1361(%rbp)                # 1-byte Spill
	je	.LBB25_72
# %bb.71:                               #   in Loop: Header=BB25_70 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1376(%rbp), %rax               # 8-byte Reload
	.loc	1 118 8                         # formatter_private.c3:118:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1360(%rbp)               # 8-byte Spill
	movb	%al, -1361(%rbp)                # 1-byte Spill
	jne	.LBB25_70
.LBB25_72:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1361(%rbp), %al                # 1-byte Reload
	.loc	1 118 8                         # formatter_private.c3:118:8
	testb	$1, %al
	jne	.LBB25_73
	jmp	.LBB25_76
.LBB25_73:
.Ltmp1262:
	.loc	1 119 12 is_stmt 1              # formatter_private.c3:119:12
	movq	-16(%rbp), %rax
	movq	%rax, -1384(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_128
# %bb.74:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1384(%rbp), %rax               # 8-byte Reload
	.loc	1 119 12                        # formatter_private.c3:119:12
	andq	$1, %rax
	movq	%rax, -1392(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_129
# %bb.75:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1384(%rbp), %rcx               # 8-byte Reload
	.loc	1 119 12                        # formatter_private.c3:119:12
	movzwl	(%rcx), %ecx
                                        # implicit-def: $xmm0
	vcvtsi2sd	%ecx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 119 12 epilogue_begin         # formatter_private.c3:119:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1263:
.LBB25_76:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1400(%rbp)               # 8-byte Spill
	.loc	1 120 8 is_stmt 1               # formatter_private.c3:120:8
	jmp	.LBB25_77
.LBB25_77:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1400(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1416(%rbp)               # 8-byte Spill
	.loc	1 120 8                         # formatter_private.c3:120:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1401(%rbp)                # 1-byte Spill
	je	.LBB25_79
# %bb.78:                               #   in Loop: Header=BB25_77 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1416(%rbp), %rax               # 8-byte Reload
	.loc	1 120 8                         # formatter_private.c3:120:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1400(%rbp)               # 8-byte Spill
	movb	%al, -1401(%rbp)                # 1-byte Spill
	jne	.LBB25_77
.LBB25_79:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1401(%rbp), %al                # 1-byte Reload
	.loc	1 120 8                         # formatter_private.c3:120:8
	testb	$1, %al
	jne	.LBB25_80
	jmp	.LBB25_83
.LBB25_80:
.Ltmp1264:
	.loc	1 121 12 is_stmt 1              # formatter_private.c3:121:12
	movq	-16(%rbp), %rax
	movq	%rax, -1424(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_130
# %bb.81:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1424(%rbp), %rax               # 8-byte Reload
	.loc	1 121 12                        # formatter_private.c3:121:12
	andq	$3, %rax
	movq	%rax, -1432(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_131
# %bb.82:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1424(%rbp), %rcx               # 8-byte Reload
	.loc	1 121 12                        # formatter_private.c3:121:12
	movl	(%rcx), %ecx
                                        # kill: def $rcx killed $ecx
                                        # implicit-def: $xmm0
	vcvtsi2sd	%rcx, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 121 12 epilogue_begin         # formatter_private.c3:121:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1265:
.LBB25_83:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1440(%rbp)               # 8-byte Spill
	.loc	1 122 8 is_stmt 1               # formatter_private.c3:122:8
	jmp	.LBB25_84
.LBB25_84:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1440(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1456(%rbp)               # 8-byte Spill
	.loc	1 122 8                         # formatter_private.c3:122:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1441(%rbp)                # 1-byte Spill
	je	.LBB25_86
# %bb.85:                               #   in Loop: Header=BB25_84 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1456(%rbp), %rax               # 8-byte Reload
	.loc	1 122 8                         # formatter_private.c3:122:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1440(%rbp)               # 8-byte Spill
	movb	%al, -1441(%rbp)                # 1-byte Spill
	jne	.LBB25_84
.LBB25_86:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1441(%rbp), %al                # 1-byte Reload
	.loc	1 122 8                         # formatter_private.c3:122:8
	testb	$1, %al
	jne	.LBB25_87
	jmp	.LBB25_90
.LBB25_87:
.Ltmp1266:
	.loc	1 123 12 is_stmt 1              # formatter_private.c3:123:12
	movq	-16(%rbp), %rax
	movq	%rax, -1464(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_132
# %bb.88:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1464(%rbp), %rax               # 8-byte Reload
	.loc	1 123 12                        # formatter_private.c3:123:12
	andq	$7, %rax
	movq	%rax, -1472(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_133
# %bb.89:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1464(%rbp), %rcx               # 8-byte Reload
	.loc	1 123 12                        # formatter_private.c3:123:12
	vmovq	(%rcx), %xmm0                   # xmm0 = mem[0],zero
	vmovdqa	.LCPI25_0(%rip), %xmm1          # xmm1 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm1, %xmm0, %xmm0     # xmm0 = xmm0[0],xmm1[0],xmm0[1],xmm1[1]
	vmovapd	.LCPI25_1(%rip), %xmm1          # xmm1 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm1, %xmm0, %xmm0
	vmovaps	%xmm0, %xmm1
	vpermilpd	$1, %xmm0, %xmm0        # xmm0 = xmm0[1,0]
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 123 12 epilogue_begin         # formatter_private.c3:123:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1267:
.LBB25_90:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1480(%rbp)               # 8-byte Spill
	.loc	1 124 8 is_stmt 1               # formatter_private.c3:124:8
	jmp	.LBB25_91
.LBB25_91:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1480(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1496(%rbp)               # 8-byte Spill
	.loc	1 124 8                         # formatter_private.c3:124:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1481(%rbp)                # 1-byte Spill
	je	.LBB25_93
# %bb.92:                               #   in Loop: Header=BB25_91 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1496(%rbp), %rax               # 8-byte Reload
	.loc	1 124 8                         # formatter_private.c3:124:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1480(%rbp)               # 8-byte Spill
	movb	%al, -1481(%rbp)                # 1-byte Spill
	jne	.LBB25_91
.LBB25_93:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1481(%rbp), %al                # 1-byte Reload
	.loc	1 124 8                         # formatter_private.c3:124:8
	testb	$1, %al
	jne	.LBB25_94
	jmp	.LBB25_97
.LBB25_94:
.Ltmp1268:
	.loc	1 125 12 is_stmt 1              # formatter_private.c3:125:12
	movq	-16(%rbp), %rax
	movq	%rax, -1504(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_134
# %bb.95:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1504(%rbp), %rax               # 8-byte Reload
	.loc	1 125 12                        # formatter_private.c3:125:12
	andq	$15, %rax
	movq	%rax, -1512(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_135
# %bb.96:
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1504(%rbp), %rax               # 8-byte Reload
	.loc	1 125 12                        # formatter_private.c3:125:12
	movq	(%rax), %rdi
	movq	8(%rax), %rsi
	callq	__floatuntidf@PLT
	movq	-1024(%rbp), %rax               # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 125 12 epilogue_begin         # formatter_private.c3:125:12
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1269:
.LBB25_97:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 12                          # formatter_private.c3:0:12
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1520(%rbp)               # 8-byte Spill
	.loc	1 126 8 is_stmt 1               # formatter_private.c3:126:8
	jmp	.LBB25_98
.LBB25_98:                              # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1520(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1536(%rbp)               # 8-byte Spill
	.loc	1 126 8                         # formatter_private.c3:126:8
	movb	$1, %al
	movq	($ct.float)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1521(%rbp)                # 1-byte Spill
	je	.LBB25_100
# %bb.99:                               #   in Loop: Header=BB25_98 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1536(%rbp), %rax               # 8-byte Reload
	.loc	1 126 8                         # formatter_private.c3:126:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1520(%rbp)               # 8-byte Spill
	movb	%al, -1521(%rbp)                # 1-byte Spill
	jne	.LBB25_98
.LBB25_100:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1521(%rbp), %al                # 1-byte Reload
	.loc	1 126 8                         # formatter_private.c3:126:8
	testb	$1, %al
	jne	.LBB25_101
	jmp	.LBB25_104
.LBB25_101:
.Ltmp1270:
	.loc	1 127 23 is_stmt 1              # formatter_private.c3:127:23
	movq	-16(%rbp), %rax
	movq	%rax, -1544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_136
# %bb.102:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1544(%rbp), %rax               # 8-byte Reload
	.loc	1 127 23                        # formatter_private.c3:127:23
	andq	$3, %rax
	movq	%rax, -1552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_137
# %bb.103:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1544(%rbp), %rcx               # 8-byte Reload
	.loc	1 127 23                        # formatter_private.c3:127:23
	vmovss	(%rcx), %xmm1                   # xmm1 = mem[0],zero,zero,zero
                                        # implicit-def: $xmm0
	vcvtss2sd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 127 23 epilogue_begin         # formatter_private.c3:127:23
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1271:
.LBB25_104:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1104(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1560(%rbp)               # 8-byte Spill
	.loc	1 128 8 is_stmt 1               # formatter_private.c3:128:8
	jmp	.LBB25_105
.LBB25_105:                             # =>This Inner Loop Header: Depth=1
	.loc	1 0 8 is_stmt 0                 # formatter_private.c3:0:8
	movq	-1560(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1576(%rbp)               # 8-byte Spill
	.loc	1 128 8                         # formatter_private.c3:128:8
	movb	$1, %al
	movq	($ct.double)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1561(%rbp)                # 1-byte Spill
	je	.LBB25_107
# %bb.106:                              #   in Loop: Header=BB25_105 Depth=1
	.loc	1 0 8                           # formatter_private.c3:0:8
	movq	-1576(%rbp), %rax               # 8-byte Reload
	.loc	1 128 8                         # formatter_private.c3:128:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1560(%rbp)               # 8-byte Spill
	movb	%al, -1561(%rbp)                # 1-byte Spill
	jne	.LBB25_105
.LBB25_107:
	.loc	1 0 8                           # formatter_private.c3:0:8
	movb	-1561(%rbp), %al                # 1-byte Reload
	.loc	1 128 8                         # formatter_private.c3:128:8
	testb	$1, %al
	jne	.LBB25_108
	jmp	.LBB25_111
.LBB25_108:
.Ltmp1272:
	.loc	1 129 23 is_stmt 1              # formatter_private.c3:129:23
	movq	-16(%rbp), %rax
	movq	%rax, -1584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB25_138
# %bb.109:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1584(%rbp), %rax               # 8-byte Reload
	.loc	1 129 23                        # formatter_private.c3:129:23
	andq	$7, %rax
	movq	%rax, -1592(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB25_139
# %bb.110:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1024(%rbp), %rax               # 8-byte Reload
	movq	-1584(%rbp), %rcx               # 8-byte Reload
	.loc	1 129 23                        # formatter_private.c3:129:23
	vmovsd	(%rcx), %xmm0                   # xmm0 = mem[0],zero
	vmovsd	%xmm0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 129 23 epilogue_begin         # formatter_private.c3:129:23
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_111:
	.cfi_def_cfa %rbp, 16
	jmp	.LBB25_112
.Ltmp1273:
.LBB25_112:
	.loc	1 131 11 is_stmt 1              # formatter_private.c3:131:11
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	.loc	1 131 11 epilogue_begin is_stmt 0 # formatter_private.c3:131:11
	addq	$1616, %rsp                     # imm = 0x650
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1274:
.LBB25_113:
	.cfi_def_cfa %rbp, 16
	.loc	6 280 20 is_stmt 1              # builtin.c3:280:20
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB25_114:
	.loc	6 0 20 is_stmt 0                # builtin.c3:0:20
	movq	-1040(%rbp), %rcx               # 8-byte Reload
	movq	$8, -40(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -48(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-40(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	$2, -88(%rbp)
	.loc	6 280 20                        # builtin.c3:280:20
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-96(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB25_115:
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.3(%rip), %rdi
	movl	$45, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	callq	*(%rax)
.LBB25_116:
	.loc	6 0 30                          # builtin.c3:0:30
	movq	-1064(%rbp), %rcx               # 8-byte Reload
	movq	$8, -104(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -112(%rbp)
	movq	%rax, -136(%rbp)
	leaq	-104(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	%rax, -120(%rbp)
	leaq	-112(%rbp), %rax
	movq	%rax, -128(%rbp)
	leaq	-144(%rbp), %rax
	movq	%rax, -160(%rbp)
	movq	$2, -152(%rbp)
	.loc	6 280 30                        # builtin.c3:280:30
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.35(%rip), %rdx
	movl	$10, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-160(%rbp), %rax
	movl	$280, (%rsp)                    # imm = 0x118
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1275:
.LBB25_117:
	.loc	1 105 23 is_stmt 1              # formatter_private.c3:105:23
	leaq	.panic_msg.101(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$105, (%rsp)
	callq	*(%rax)
.Ltmp1276:
.LBB25_118:
	.loc	1 107 12                        # formatter_private.c3:107:12
	leaq	.panic_msg.102(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$107, (%rsp)
	callq	*(%rax)
.Ltmp1277:
.LBB25_119:
	.loc	1 109 12                        # formatter_private.c3:109:12
	leaq	.panic_msg.103(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$109, (%rsp)
	callq	*(%rax)
.LBB25_120:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1200(%rbp), %rcx               # 8-byte Reload
	movq	$2, -224(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -232(%rbp)
	movq	%rax, -264(%rbp)
	leaq	-224(%rbp), %rcx
	movq	%rcx, -272(%rbp)
	movq	%rax, -248(%rbp)
	leaq	-232(%rbp), %rax
	movq	%rax, -256(%rbp)
	leaq	-272(%rbp), %rax
	movq	%rax, -288(%rbp)
	movq	$2, -280(%rbp)
	.loc	1 109 12                        # formatter_private.c3:109:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-288(%rbp), %rax
	movl	$109, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1278:
.LBB25_121:
	.loc	1 111 12 is_stmt 1              # formatter_private.c3:111:12
	leaq	.panic_msg.104(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$111, (%rsp)
	callq	*(%rax)
.LBB25_122:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1240(%rbp), %rcx               # 8-byte Reload
	movq	$4, -304(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -312(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-304(%rbp), %rcx
	movq	%rcx, -352(%rbp)
	movq	%rax, -328(%rbp)
	leaq	-312(%rbp), %rax
	movq	%rax, -336(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	$2, -360(%rbp)
	.loc	1 111 12                        # formatter_private.c3:111:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-368(%rbp), %rax
	movl	$111, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1279:
.LBB25_123:
	.loc	1 113 12 is_stmt 1              # formatter_private.c3:113:12
	leaq	.panic_msg.105(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$113, (%rsp)
	callq	*(%rax)
.LBB25_124:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1280(%rbp), %rcx               # 8-byte Reload
	movq	$8, -384(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -392(%rbp)
	movq	%rax, -424(%rbp)
	leaq	-384(%rbp), %rcx
	movq	%rcx, -432(%rbp)
	movq	%rax, -408(%rbp)
	leaq	-392(%rbp), %rax
	movq	%rax, -416(%rbp)
	leaq	-432(%rbp), %rax
	movq	%rax, -448(%rbp)
	movq	$2, -440(%rbp)
	.loc	1 113 12                        # formatter_private.c3:113:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-448(%rbp), %rax
	movl	$113, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1280:
.LBB25_125:
	.loc	1 115 12 is_stmt 1              # formatter_private.c3:115:12
	leaq	.panic_msg.106(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$115, (%rsp)
	callq	*(%rax)
.LBB25_126:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1320(%rbp), %rcx               # 8-byte Reload
	movq	$16, -464(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -472(%rbp)
	movq	%rax, -504(%rbp)
	leaq	-464(%rbp), %rcx
	movq	%rcx, -512(%rbp)
	movq	%rax, -488(%rbp)
	leaq	-472(%rbp), %rax
	movq	%rax, -496(%rbp)
	leaq	-512(%rbp), %rax
	movq	%rax, -528(%rbp)
	movq	$2, -520(%rbp)
	.loc	1 115 12                        # formatter_private.c3:115:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-528(%rbp), %rax
	movl	$115, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1281:
.LBB25_127:
	.loc	1 117 12 is_stmt 1              # formatter_private.c3:117:12
	leaq	.panic_msg.107(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$117, (%rsp)
	callq	*(%rax)
.Ltmp1282:
.LBB25_128:
	.loc	1 119 12                        # formatter_private.c3:119:12
	leaq	.panic_msg.108(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$119, (%rsp)
	callq	*(%rax)
.LBB25_129:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1392(%rbp), %rcx               # 8-byte Reload
	movq	$2, -552(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -560(%rbp)
	movq	%rax, -584(%rbp)
	leaq	-552(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	%rax, -568(%rbp)
	leaq	-560(%rbp), %rax
	movq	%rax, -576(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	$2, -600(%rbp)
	.loc	1 119 12                        # formatter_private.c3:119:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-608(%rbp), %rax
	movl	$119, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1283:
.LBB25_130:
	.loc	1 121 12 is_stmt 1              # formatter_private.c3:121:12
	leaq	.panic_msg.109(%rip), %rdi
	movl	$51, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$121, (%rsp)
	callq	*(%rax)
.LBB25_131:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1432(%rbp), %rcx               # 8-byte Reload
	movq	$4, -624(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -632(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-624(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	%rax, -648(%rbp)
	leaq	-632(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -688(%rbp)
	movq	$2, -680(%rbp)
	.loc	1 121 12                        # formatter_private.c3:121:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-688(%rbp), %rax
	movl	$121, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1284:
.LBB25_132:
	.loc	1 123 12 is_stmt 1              # formatter_private.c3:123:12
	leaq	.panic_msg.110(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$123, (%rsp)
	callq	*(%rax)
.LBB25_133:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1472(%rbp), %rcx               # 8-byte Reload
	movq	$8, -704(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -712(%rbp)
	movq	%rax, -744(%rbp)
	leaq	-704(%rbp), %rcx
	movq	%rcx, -752(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-712(%rbp), %rax
	movq	%rax, -736(%rbp)
	leaq	-752(%rbp), %rax
	movq	%rax, -768(%rbp)
	movq	$2, -760(%rbp)
	.loc	1 123 12                        # formatter_private.c3:123:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-768(%rbp), %rax
	movl	$123, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1285:
.LBB25_134:
	.loc	1 125 12 is_stmt 1              # formatter_private.c3:125:12
	leaq	.panic_msg.111(%rip), %rdi
	movl	$54, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$125, (%rsp)
	callq	*(%rax)
.LBB25_135:
	.loc	1 0 12 is_stmt 0                # formatter_private.c3:0:12
	movq	-1512(%rbp), %rcx               # 8-byte Reload
	movq	$16, -784(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -792(%rbp)
	movq	%rax, -824(%rbp)
	leaq	-784(%rbp), %rcx
	movq	%rcx, -832(%rbp)
	movq	%rax, -808(%rbp)
	leaq	-792(%rbp), %rax
	movq	%rax, -816(%rbp)
	leaq	-832(%rbp), %rax
	movq	%rax, -848(%rbp)
	movq	$2, -840(%rbp)
	.loc	1 125 12                        # formatter_private.c3:125:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-848(%rbp), %rax
	movl	$125, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1286:
.LBB25_136:
	.loc	1 127 23 is_stmt 1              # formatter_private.c3:127:23
	leaq	.panic_msg.112(%rip), %rdi
	movl	$52, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$127, (%rsp)
	callq	*(%rax)
.LBB25_137:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1552(%rbp), %rcx               # 8-byte Reload
	movq	$4, -864(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -872(%rbp)
	movq	%rax, -904(%rbp)
	leaq	-864(%rbp), %rcx
	movq	%rcx, -912(%rbp)
	movq	%rax, -888(%rbp)
	leaq	-872(%rbp), %rax
	movq	%rax, -896(%rbp)
	leaq	-912(%rbp), %rax
	movq	%rax, -928(%rbp)
	movq	$2, -920(%rbp)
	.loc	1 127 23                        # formatter_private.c3:127:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-928(%rbp), %rax
	movl	$127, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1287:
.LBB25_138:
	.loc	1 129 23 is_stmt 1              # formatter_private.c3:129:23
	leaq	.panic_msg.113(%rip), %rdi
	movl	$53, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$129, (%rsp)
	callq	*(%rax)
.LBB25_139:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1592(%rbp), %rcx               # 8-byte Reload
	movq	$8, -944(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -952(%rbp)
	movq	%rax, -984(%rbp)
	leaq	-944(%rbp), %rcx
	movq	%rcx, -992(%rbp)
	movq	%rax, -968(%rbp)
	leaq	-952(%rbp), %rax
	movq	%rax, -976(%rbp)
	leaq	-992(%rbp), %rax
	movq	%rax, -1008(%rbp)
	movq	$2, -1000(%rbp)
	.loc	1 129 23                        # formatter_private.c3:129:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.114(%rip), %r8
	movl	$14, %r9d
	leaq	-1008(%rbp), %rax
	movl	$129, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1288:
.Lfunc_end25:
	.size	std.io.float_from_any, .Lfunc_end25-std.io.float_from_any
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.simple_atoi
	.type	std.io.simple_atoi,@function
std.io.simple_atoi:                     # @std.io.simple_atoi
.Lfunc_begin26:
	.loc	1 144 0 is_stmt 1               # formatter_private.c3:144:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$320, %rsp                      # imm = 0x140
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
.Ltmp1289:
	.loc	1 146 11 prologue_end           # formatter_private.c3:146:11
	movl	$0, -28(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-24(%rbp), %rax
	movq	%rax, -264(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB26_11
# %bb.1:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-264(%rbp), %rax                # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -272(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB26_12
# %bb.2:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-264(%rbp), %rax                # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB26_3:                               # =>This Inner Loop Header: Depth=1
.Ltmp1290:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-40(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB26_8
# %bb.4:                                #   in Loop: Header=BB26_3 Depth=1
.Ltmp1291:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-8(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -113(%rbp)
	movb	-113(%rbp), %al
	movb	%al, -114(%rbp)
	movb	-114(%rbp), %al
	movb	%al, -115(%rbp)
.Ltmp1292:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-115(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -280(%rbp)                # 8-byte Spill
	cmpq	$256, %rax                      # imm = 0x100
	setae	%al
	testb	$1, %al
	jne	.LBB26_13
# %bb.5:                                #   in Loop: Header=BB26_3 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-280(%rbp), %rcx                # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB26_7
.Ltmp1293:
# %bb.6:
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB26_8
.LBB26_7:                               #   in Loop: Header=BB26_3 Depth=1
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -28(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-113(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -28(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB26_3
.Ltmp1294:
.LBB26_8:
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-24(%rbp), %rax
	movq	%rax, -288(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB26_14
# %bb.9:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-288(%rbp), %rax                # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -296(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB26_15
# %bb.10:
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-288(%rbp), %rax                # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-40(%rbp), %rcx
	movq	%rcx, (%rax)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-28(%rbp), %eax
	.loc	1 156 9 epilogue_begin is_stmt 0 # formatter_private.c3:156:9
	addq	$320, %rsp                      # imm = 0x140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_11:
	.cfi_def_cfa %rbp, 16
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB26_12:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-272(%rbp), %rcx                # 8-byte Reload
	movq	$8, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-112(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB26_13:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-280(%rbp), %rcx                # 8-byte Reload
	movq	$256, -128(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -136(%rbp)
	movq	%rax, -168(%rbp)
	leaq	-128(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-136(%rbp), %rax
	movq	%rax, -160(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	$2, -184(%rbp)
.Ltmp1295:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-192(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1296:
.LBB26_14:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB26_15:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-296(%rbp), %rcx                # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-256(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1297:
.Lfunc_end26:
	.size	std.io.simple_atoi, .Lfunc_end26-std.io.simple_atoi
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.fmt_u,"axG",@progbits,std.io.fmt_u,comdat
	.weak	std.io.fmt_u                    # -- Begin function std.io.fmt_u
	.p2align	4, 0x90
	.type	std.io.fmt_u,@function
std.io.fmt_u:                           # @std.io.fmt_u
.Lfunc_begin27:
	.loc	1 185 0 is_stmt 1               # formatter_private.c3:185:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movq	%rdi, -16(%rbp)
	movq	%rsi, -8(%rbp)
	movq	%rdx, -24(%rbp)
.LBB27_1:                               # =>This Inner Loop Header: Depth=1
.Ltmp1298:
	.loc	1 187 9 prologue_end            # formatter_private.c3:187:9
	movq	-8(%rbp), %rax
	testq	%rax, %rax
	je	.LBB27_4
	jmp	.LBB27_2
.LBB27_2:                               #   in Loop: Header=BB27_1 Depth=1
	.loc	1 187 53 is_stmt 0              # formatter_private.c3:187:53
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rsi
	xorl	%eax, %eax
	movl	%eax, %ecx
	movl	$10, %edx
	.loc	1 187 46                        # formatter_private.c3:187:46
	callq	__modti3@PLT
                                        # kill: def $al killed $al killed $rax
	movzbl	%al, %eax
	.loc	1 187 40                        # formatter_private.c3:187:40
	addl	$48, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -41(%rbp)                  # 1-byte Spill
	.loc	1 187 36                        # formatter_private.c3:187:36
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -40(%rbp)                 # 8-byte Spill
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB27_9
# %bb.3:                                #   in Loop: Header=BB27_1 Depth=1
	.loc	1 0 36                          # formatter_private.c3:0:36
	movq	-40(%rbp), %rax                 # 8-byte Reload
	movb	-41(%rbp), %cl                  # 1-byte Reload
	.loc	1 187 34                        # formatter_private.c3:187:34
	movb	%cl, (%rax)
	.loc	1 187 24                        # formatter_private.c3:187:24
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rax
	movq	%rax, %rcx
	shrq	%rcx
	shldq	$63, %rdx, %rax
	movq	%rax, -72(%rbp)                 # 8-byte Spill
	addq	%rcx, %rax
	adcq	$0, %rax
	movq	%rax, -64(%rbp)                 # 8-byte Spill
	movabsq	$-3689348814741910323, %rsi     # imm = 0xCCCCCCCCCCCCCCCD
	mulq	%rsi
	movq	-72(%rbp), %rax                 # 8-byte Reload
	movq	%rdx, %rdi
	movq	-64(%rbp), %rdx                 # 8-byte Reload
	shrq	$2, %rdi
	leaq	(%rdi,%rdi,4), %rdi
	subq	%rdi, %rdx
	subq	%rdx, %rax
	sbbq	$0, %rcx
	movq	%rcx, -56(%rbp)                 # 8-byte Spill
	movabsq	$-3689348814741910324, %rcx     # imm = 0xCCCCCCCCCCCCCCCC
	movq	%rax, %rdi
	imulq	%rcx, %rdi
	mulq	%rsi
	movq	%rax, %rcx
	movq	%rdx, %rax
	movq	-56(%rbp), %rdx                 # 8-byte Reload
	addq	%rdi, %rax
	imulq	%rsi, %rdx
	addq	%rdx, %rax
	movq	%rcx, -16(%rbp)
	movq	%rax, -8(%rbp)
	jmp	.LBB27_1
.Ltmp1299:
.LBB27_4:
	.loc	1 188 17 is_stmt 1              # formatter_private.c3:188:17
	movq	-16(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB27_5:                               # =>This Inner Loop Header: Depth=1
	.loc	1 188 27 is_stmt 0              # formatter_private.c3:188:27
	cmpq	$0, -32(%rbp)
	je	.LBB27_8
# %bb.6:                                #   in Loop: Header=BB27_5 Depth=1
	.loc	1 188 59                        # formatter_private.c3:188:59
	movq	-32(%rbp), %rax
	.loc	1 188 52                        # formatter_private.c3:188:52
	movl	$10, %ecx
	cqto
	idivq	%rcx
	movb	%dl, %al
	movzbl	%al, %eax
	.loc	1 188 46                        # formatter_private.c3:188:46
	addl	$48, %eax
                                        # kill: def $al killed $al killed $eax
	movb	%al, -81(%rbp)                  # 1-byte Spill
	.loc	1 188 42                        # formatter_private.c3:188:42
	movq	-24(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -80(%rbp)                 # 8-byte Spill
	movq	%rax, -24(%rbp)
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB27_10
# %bb.7:                                #   in Loop: Header=BB27_5 Depth=1
	.loc	1 0 42                          # formatter_private.c3:0:42
	movq	-80(%rbp), %rax                 # 8-byte Reload
	movb	-81(%rbp), %cl                  # 1-byte Reload
	.loc	1 188 40                        # formatter_private.c3:188:40
	movb	%cl, (%rax)
	.loc	1 188 30                        # formatter_private.c3:188:30
	movq	-32(%rbp), %rax
	movl	$10, %ecx
	xorl	%edx, %edx
                                        # kill: def $rdx killed $edx
	divq	%rcx
	movq	%rax, -32(%rbp)
	jmp	.LBB27_5
.Ltmp1300:
.LBB27_8:
	.loc	1 189 9 is_stmt 1               # formatter_private.c3:189:9
	movq	-24(%rbp), %rax
	.loc	1 189 9 epilogue_begin is_stmt 0 # formatter_private.c3:189:9
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_9:
	.cfi_def_cfa %rbp, 16
.Ltmp1301:
	.loc	1 187 34 is_stmt 1              # formatter_private.c3:187:34
	leaq	.panic_msg.118(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.119(%rip), %r8
	movl	$5, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$187, (%rsp)
	callq	*(%rax)
.Ltmp1302:
.LBB27_10:
	.loc	1 188 40                        # formatter_private.c3:188:40
	leaq	.panic_msg.118(%rip), %rdi
	movl	$44, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.119(%rip), %r8
	movl	$5, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$188, (%rsp)
	callq	*(%rax)
.Ltmp1303:
.Lfunc_end27:
	.size	std.io.fmt_u, .Lfunc_end27-std.io.fmt_u
	.cfi_endproc
                                        # -- End function
	.text
	.p2align	4, 0x90                         # -- Begin function std.io.printf_parse_format_field
	.type	std.io.printf_parse_format_field,@function
std.io.printf_parse_format_field:       # @std.io.printf_parse_format_field
.Lfunc_begin28:
	.loc	1 678 0                         # formatter_private.c3:678:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$2144, %rsp                     # imm = 0x860
	movq	%rdi, -1520(%rbp)               # 8-byte Spill
	movq	16(%rbp), %rax
	movq	%rsi, -264(%rbp)
	movq	%rdx, -272(%rbp)
	movq	%rcx, -280(%rbp)
	movq	%r8, -288(%rbp)
	movq	%r9, -296(%rbp)
.Ltmp1304:
	.loc	1 682 11 prologue_end           # formatter_private.c3:682:11
	movq	-288(%rbp), %rax
	movq	%rax, -1512(%rbp)               # 8-byte Spill
	.loc	1 682 23 is_stmt 0              # formatter_private.c3:682:23
	movq	16(%rbp), %rax
	movq	%rax, -1504(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_170
# %bb.1:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1504(%rbp), %rax               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	andq	$7, %rax
	movq	%rax, -1528(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_171
# %bb.2:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1512(%rbp), %rax               # 8-byte Reload
	movq	-1504(%rbp), %rcx               # 8-byte Reload
	.loc	1 682 23                        # formatter_private.c3:682:23
	movq	(%rcx), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -297(%rbp)
	movb	-297(%rbp), %al
	movb	%al, -369(%rbp)
	movb	-369(%rbp), %al
	movb	%al, -370(%rbp)
.Ltmp1305:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-370(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1536(%rbp)               # 8-byte Spill
	cmpq	$256, %rax                      # imm = 0x100
	setae	%al
	testb	$1, %al
	jne	.LBB28_172
# %bb.3:
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-1536(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	je	.LBB28_20
.Ltmp1306:
# %bb.4:
	.loc	1 683 63 is_stmt 1              # formatter_private.c3:683:63
	movq	-288(%rbp), %rdx
	movq	-296(%rbp), %rcx
	movq	16(%rbp), %rax
	movq	%rdx, -8(%rbp)
	movq	%rcx, -16(%rbp)
	movq	%rax, -24(%rbp)
.Ltmp1307:
	.loc	1 146 11                        # formatter_private.c3:146:11
	movl	$0, -28(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	-24(%rbp), %rax
	movq	%rax, -1544(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_14
# %bb.5:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-1544(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	andq	$7, %rax
	movq	%rax, -1552(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_15
# %bb.6:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1544(%rbp), %rax               # 8-byte Reload
	.loc	1 147 13                        # formatter_private.c3:147:13
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
.LBB28_7:                               # =>This Inner Loop Header: Depth=1
.Ltmp1308:
	.loc	1 148 9 is_stmt 1               # formatter_private.c3:148:9
	movq	-40(%rbp), %rax
	cmpq	-16(%rbp), %rax
	jae	.LBB28_12
# %bb.8:                                #   in Loop: Header=BB28_7 Depth=1
.Ltmp1309:
	.loc	1 150 12                        # formatter_private.c3:150:12
	movq	-8(%rbp), %rax
	.loc	1 150 16 is_stmt 0              # formatter_private.c3:150:16
	movq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movb	%al, -113(%rbp)
	movb	-113(%rbp), %al
	movb	%al, -114(%rbp)
	movb	-114(%rbp), %al
	movb	%al, -115(%rbp)
.Ltmp1310:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	movzbl	-115(%rbp), %eax
                                        # kill: def $rax killed $eax
	movq	%rax, -1560(%rbp)               # 8-byte Spill
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, %al
	jne	.LBB28_16
# %bb.9:                                #   in Loop: Header=BB28_7 Depth=1
	.loc	4 0 42 is_stmt 0                # ascii.c3:0:42
	movq	-1560(%rbp), %rcx               # 8-byte Reload
	.loc	4 9 42                          # ascii.c3:9:42
	movq	std.core.ascii.ASCII_LOOKUP@GOTPCREL(%rip), %rax
	movw	(%rax,%rcx,2), %ax
	shrw	$2, %ax
	andw	$1, %ax
                                        # kill: def $al killed $al killed $ax
	testb	$1, %al
	jne	.LBB28_11
.Ltmp1311:
# %bb.10:
	.loc	1 151 22 is_stmt 1              # formatter_private.c3:151:22
	jmp	.LBB28_12
.LBB28_11:                              #   in Loop: Header=BB28_7 Depth=1
	.loc	1 152 7                         # formatter_private.c3:152:7
	imull	$10, -28(%rbp), %eax
	.loc	1 152 16 is_stmt 0              # formatter_private.c3:152:16
	movzbl	-113(%rbp), %ecx
	.loc	1 152 7                         # formatter_private.c3:152:7
	addl	%ecx, %eax
	subl	$48, %eax
	movl	%eax, -28(%rbp)
	.loc	1 153 3 is_stmt 1               # formatter_private.c3:153:3
	movq	-40(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB28_7
.Ltmp1312:
.LBB28_12:
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-24(%rbp), %rax
	movq	%rax, -1568(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_17
# %bb.13:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-1568(%rbp), %rax               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	andq	$7, %rax
	movq	%rax, -1576(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_18
	jmp	.LBB28_19
.LBB28_14:
	.loc	1 147 13 is_stmt 1              # formatter_private.c3:147:13
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$147, (%rsp)
	callq	*(%rax)
.LBB28_15:
	.loc	1 0 13 is_stmt 0                # formatter_private.c3:0:13
	movq	-1552(%rbp), %rcx               # 8-byte Reload
	movq	$8, -48(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -56(%rbp)
	movq	%rax, -88(%rbp)
	leaq	-48(%rbp), %rcx
	movq	%rcx, -96(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-56(%rbp), %rax
	movq	%rax, -80(%rbp)
	leaq	-96(%rbp), %rax
	movq	%rax, -112(%rbp)
	movq	$2, -104(%rbp)
	.loc	1 147 13                        # formatter_private.c3:147:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-112(%rbp), %rax
	movl	$147, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_16:
	.loc	1 0 13                          # formatter_private.c3:0:13
	movq	-1560(%rbp), %rcx               # 8-byte Reload
	movq	$256, -128(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -136(%rbp)
	movq	%rax, -168(%rbp)
	leaq	-128(%rbp), %rcx
	movq	%rcx, -176(%rbp)
	movq	%rax, -152(%rbp)
	leaq	-136(%rbp), %rax
	movq	%rax, -160(%rbp)
	leaq	-176(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	$2, -184(%rbp)
.Ltmp1313:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-192(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1314:
.LBB28_17:
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.115(%rip), %rdi
	movl	$48, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$155, (%rsp)
	callq	*(%rax)
.LBB28_18:
	.loc	1 0 3 is_stmt 0                 # formatter_private.c3:0:3
	movq	-1576(%rbp), %rcx               # 8-byte Reload
	movq	$8, -200(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -208(%rbp)
	movq	%rax, -232(%rbp)
	leaq	-200(%rbp), %rcx
	movq	%rcx, -240(%rbp)
	movq	%rax, -216(%rbp)
	leaq	-208(%rbp), %rax
	movq	%rax, -224(%rbp)
	leaq	-240(%rbp), %rax
	movq	%rax, -256(%rbp)
	movq	$2, -248(%rbp)
	.loc	1 155 3                         # formatter_private.c3:155:3
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.116(%rip), %r8
	movl	$11, %r9d
	leaq	-256(%rbp), %rax
	movl	$155, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_19:
	.loc	1 0 3                           # formatter_private.c3:0:3
	movq	-1520(%rbp), %rax               # 8-byte Reload
	movq	-1568(%rbp), %rcx               # 8-byte Reload
	.loc	1 155 3                         # formatter_private.c3:155:3
	movq	-40(%rbp), %rdx
	movq	%rdx, (%rcx)
	.loc	1 156 9 is_stmt 1               # formatter_private.c3:156:9
	movl	-28(%rbp), %ecx
.Ltmp1315:
	.loc	1 683 27                        # formatter_private.c3:683:27
	movl	%ecx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 683 27 epilogue_begin is_stmt 0 # formatter_private.c3:683:27
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_20:
	.cfi_def_cfa %rbp, 16
	.loc	1 684 6 is_stmt 1               # formatter_private.c3:684:6
	cmpb	$42, -297(%rbp)
	je	.LBB28_22
# %bb.21:
	.loc	1 0 6 is_stmt 0                 # formatter_private.c3:0:6
	movq	-1520(%rbp), %rax               # 8-byte Reload
	.loc	1 684 23                        # formatter_private.c3:684:23
	movl	$0, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 684 23 epilogue_begin         # formatter_private.c3:684:23
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_22:
	.cfi_def_cfa %rbp, 16
	.loc	1 685 16 is_stmt 1              # formatter_private.c3:685:16
	movq	16(%rbp), %rax
	movq	%rax, -1584(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_173
# %bb.23:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1584(%rbp), %rax               # 8-byte Reload
	.loc	1 685 16                        # formatter_private.c3:685:16
	andq	$7, %rax
	movq	%rax, -1592(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_174
# %bb.24:
	.loc	1 0 16                          # formatter_private.c3:0:16
	movq	-1584(%rbp), %rcx               # 8-byte Reload
	.loc	1 685 15                        # formatter_private.c3:685:15
	movq	(%rcx), %rax
	addq	$1, %rax
	movq	%rax, (%rcx)
	movq	%rax, -472(%rbp)
	.loc	1 686 6 is_stmt 1               # formatter_private.c3:686:6
	movq	-472(%rbp), %rax
	cmpq	-296(%rbp), %rax
	jb	.LBB28_26
# %bb.25:
	.loc	1 686 32 is_stmt 0              # formatter_private.c3:686:32
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	.loc	1 686 32 epilogue_begin         # formatter_private.c3:686:32
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_26:
	.cfi_def_cfa %rbp, 16
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	movq	-280(%rbp), %rax
	movq	%rax, -1600(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_175
# %bb.27:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-1600(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	andq	$7, %rax
	movq	%rax, -1608(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_176
# %bb.28:
	.loc	1 0 7                           # formatter_private.c3:0:7
	movq	-1600(%rbp), %rax               # 8-byte Reload
	.loc	1 687 7                         # formatter_private.c3:687:7
	movq	(%rax), %rax
	.loc	1 687 6                         # formatter_private.c3:687:6
	cmpq	-272(%rbp), %rax
	jb	.LBB28_30
# %bb.29:
	.loc	1 687 42                        # formatter_private.c3:687:42
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	.loc	1 687 42 epilogue_begin         # formatter_private.c3:687:42
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_30:
	.cfi_def_cfa %rbp, 16
	.loc	1 688 12 is_stmt 1              # formatter_private.c3:688:12
	movq	-264(%rbp), %rax
	movq	%rax, -1624(%rbp)               # 8-byte Spill
	.loc	1 688 23 is_stmt 0              # formatter_private.c3:688:23
	movq	-280(%rbp), %rax
	movq	%rax, -1616(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_177
# %bb.31:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1616(%rbp), %rax               # 8-byte Reload
	.loc	1 688 23                        # formatter_private.c3:688:23
	andq	$7, %rax
	movq	%rax, -1632(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_178
# %bb.32:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1624(%rbp), %rax               # 8-byte Reload
	movq	-1616(%rbp), %rdx               # 8-byte Reload
	.loc	1 688 22                        # formatter_private.c3:688:22
	movq	(%rdx), %rcx
	movq	%rcx, %rsi
	addq	$1, %rsi
	movq	%rsi, (%rdx)
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, -1648(%rbp)               # 8-byte Spill
	andq	$7, %rax
	movq	%rax, -1640(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_179
# %bb.33:
	.loc	1 0 22                          # formatter_private.c3:0:22
	movq	-1648(%rbp), %rax               # 8-byte Reload
	.loc	1 688 12                        # formatter_private.c3:688:12
	movq	(%rax), %rcx
	movq	%rcx, -624(%rbp)
	movq	8(%rax), %rax
	movq	%rax, -616(%rbp)
	.loc	1 689 7 is_stmt 1               # formatter_private.c3:689:7
	movq	-616(%rbp), %rax
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB28_35
# %bb.34:
	.loc	1 689 40 is_stmt 0              # formatter_private.c3:689:40
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	.loc	1 689 40 epilogue_begin         # formatter_private.c3:689:40
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_35:
	.cfi_def_cfa %rbp, 16
	.loc	1 0 40                          # formatter_private.c3:0:40
	movq	-624(%rbp), %rax
	movq	%rax, -784(%rbp)
	movq	-616(%rbp), %rax
	movq	%rax, -776(%rbp)
.Ltmp1316:
	.loc	5 690 17 is_stmt 1              # types.c3:690:17
	movl	$2, %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB28_37
# %bb.36:
	leaq	.panic_msg.32(%rip), %rdi
	movl	$69, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.LBB28_37:
	.loc	5 19 11                         # types.c3:19:11
	movq	-776(%rbp), %rax
	.loc	5 690 17                        # types.c3:690:17
	movzbl	(%rax), %edi
	callq	std.core.types.TypeKind.is_int@PLT
	testb	$1, %al
	jne	.LBB28_39
# %bb.38:
	leaq	.panic_msg.38(%rip), %rdi
	movl	$71, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	callq	*(%rax)
.Ltmp1317:
.LBB28_39:
	.loc	5 23 20                         # types.c3:23:20
	movq	-776(%rbp), %rax
	movq	%rax, -800(%rbp)
	.loc	5 24 18                         # types.c3:24:18
	movq	-800(%rbp), %rax
	movb	(%rax), %al
	movb	%al, -801(%rbp)
	.loc	5 25 41                         # types.c3:25:41
	movq	-800(%rbp), %rcx
	.loc	5 25 25 is_stmt 0               # types.c3:25:25
	movb	$2, %al
	cmpb	(%rcx), %al
	setne	%al
	andb	$1, %al
	movb	%al, -802(%rbp)
	.loc	5 26 14 is_stmt 1               # types.c3:26:14
	movl	$2147483647, -808(%rbp)         # imm = 0x7FFFFFFF
	.loc	5 27 14                         # types.c3:27:14
	movl	$-2147483648, -812(%rbp)        # imm = 0x80000000
	movq	-800(%rbp), %rax
	movq	%rax, -824(%rbp)
# %bb.40:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-824(%rbp), %rax
	movq	%rax, -1664(%rbp)               # 8-byte Spill
	movq	%rax, -1656(%rbp)               # 8-byte Spill
.LBB28_41:                              # =>This Inner Loop Header: Depth=1
	movq	-1656(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1680(%rbp)               # 8-byte Spill
.Ltmp1318:
	.loc	5 30 8 is_stmt 1                # types.c3:30:8
	movb	$1, %al
	movq	($ct.ichar)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1665(%rbp)                # 1-byte Spill
	je	.LBB28_43
# %bb.42:                               #   in Loop: Header=BB28_41 Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1680(%rbp), %rax               # 8-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1656(%rbp)               # 8-byte Spill
	movb	%al, -1665(%rbp)                # 1-byte Spill
	jne	.LBB28_41
.LBB28_43:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1665(%rbp), %al                # 1-byte Reload
	.loc	5 30 8                          # types.c3:30:8
	testb	$1, %al
	jne	.LBB28_44
	jmp	.LBB28_50
.LBB28_44:
.Ltmp1319:
	.loc	5 31 22 is_stmt 1               # types.c3:31:22
	movq	-784(%rbp), %rax
	movq	%rax, -1688(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_180
# %bb.45:
	.loc	5 0 22 is_stmt 0                # types.c3:0:22
	movq	-1688(%rbp), %rax               # 8-byte Reload
	.loc	5 31 15                         # types.c3:31:15
	movb	(%rax), %al
	movb	%al, -825(%rbp)
	.loc	5 32 8 is_stmt 1                # types.c3:32:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -1689(%rbp)                # 1-byte Spill
	je	.LBB28_47
# %bb.46:
	.loc	5 32 27 is_stmt 0               # types.c3:32:27
	movsbl	-825(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -1689(%rbp)                # 1-byte Spill
.LBB28_47:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1689(%rbp), %al                # 1-byte Reload
	.loc	5 32 27                         # types.c3:32:27
	testb	$1, %al
	jne	.LBB28_48
	jmp	.LBB28_49
.LBB28_48:
	.loc	5 32 41                         # types.c3:32:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_49:
	.loc	5 33 11 is_stmt 1               # types.c3:33:11
	movsbl	-825(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1320:
.LBB28_50:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1704(%rbp)               # 8-byte Spill
	.loc	5 34 8 is_stmt 1                # types.c3:34:8
	jmp	.LBB28_51
.LBB28_51:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1704(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1720(%rbp)               # 8-byte Spill
	.loc	5 34 8                          # types.c3:34:8
	movb	$1, %al
	movq	($ct.short)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1705(%rbp)                # 1-byte Spill
	je	.LBB28_53
# %bb.52:                               #   in Loop: Header=BB28_51 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1720(%rbp), %rax               # 8-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1704(%rbp)               # 8-byte Spill
	movb	%al, -1705(%rbp)                # 1-byte Spill
	jne	.LBB28_51
.LBB28_53:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1705(%rbp), %al                # 1-byte Reload
	.loc	5 34 8                          # types.c3:34:8
	testb	$1, %al
	jne	.LBB28_54
	jmp	.LBB28_65
.LBB28_54:
.Ltmp1321:
	.loc	5 35 23 is_stmt 1               # types.c3:35:23
	movq	-784(%rbp), %rax
	movq	%rax, -1728(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_181
# %bb.55:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-1728(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	andq	$1, %rax
	movq	%rax, -1736(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_182
# %bb.56:
	.loc	5 0 15                          # types.c3:0:15
	movq	-1728(%rbp), %rax               # 8-byte Reload
	.loc	5 35 15                         # types.c3:35:15
	movw	(%rax), %ax
	movw	%ax, -828(%rbp)
	.loc	5 36 8 is_stmt 1                # types.c3:36:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -1737(%rbp)                # 1-byte Spill
	je	.LBB28_58
# %bb.57:
	.loc	5 36 27 is_stmt 0               # types.c3:36:27
	movswl	-828(%rbp), %eax
	cmpl	$0, %eax
	setl	%al
	movb	%al, -1737(%rbp)                # 1-byte Spill
.LBB28_58:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1737(%rbp), %al                # 1-byte Reload
	.loc	5 36 27                         # types.c3:36:27
	testb	$1, %al
	jne	.LBB28_59
	jmp	.LBB28_60
.LBB28_59:
	.loc	5 36 41                         # types.c3:36:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_60:
	.loc	5 37 8 is_stmt 1                # types.c3:37:8
	movswl	-828(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -1738(%rbp)                # 1-byte Spill
	jg	.LBB28_62
# %bb.61:
	.loc	5 37 19 is_stmt 0               # types.c3:37:19
	movswl	-828(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -1738(%rbp)                # 1-byte Spill
.LBB28_62:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1738(%rbp), %al                # 1-byte Reload
	.loc	5 37 19                         # types.c3:37:19
	testb	$1, %al
	jne	.LBB28_63
	jmp	.LBB28_64
.LBB28_63:
	.loc	5 37 35                         # types.c3:37:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_64:
	.loc	5 38 11 is_stmt 1               # types.c3:38:11
	movswl	-828(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1322:
.LBB28_65:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1752(%rbp)               # 8-byte Spill
	.loc	5 39 8 is_stmt 1                # types.c3:39:8
	jmp	.LBB28_66
.LBB28_66:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1752(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1768(%rbp)               # 8-byte Spill
	.loc	5 39 8                          # types.c3:39:8
	movb	$1, %al
	movq	($ct.int)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1753(%rbp)                # 1-byte Spill
	je	.LBB28_68
# %bb.67:                               #   in Loop: Header=BB28_66 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1768(%rbp), %rax               # 8-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1752(%rbp)               # 8-byte Spill
	movb	%al, -1753(%rbp)                # 1-byte Spill
	jne	.LBB28_66
.LBB28_68:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1753(%rbp), %al                # 1-byte Reload
	.loc	5 39 8                          # types.c3:39:8
	testb	$1, %al
	jne	.LBB28_69
	jmp	.LBB28_80
.LBB28_69:
.Ltmp1323:
	.loc	5 40 19 is_stmt 1               # types.c3:40:19
	movq	-784(%rbp), %rax
	movq	%rax, -1776(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_183
# %bb.70:
	.loc	5 0 19 is_stmt 0                # types.c3:0:19
	movq	-1776(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	andq	$3, %rax
	movq	%rax, -1784(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_184
# %bb.71:
	.loc	5 0 13                          # types.c3:0:13
	movq	-1776(%rbp), %rax               # 8-byte Reload
	.loc	5 40 13                         # types.c3:40:13
	movl	(%rax), %eax
	movl	%eax, -900(%rbp)
	.loc	5 41 8 is_stmt 1                # types.c3:41:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -1785(%rbp)                # 1-byte Spill
	je	.LBB28_73
# %bb.72:
	.loc	5 41 27 is_stmt 0               # types.c3:41:27
	cmpl	$0, -900(%rbp)
	setl	%al
	movb	%al, -1785(%rbp)                # 1-byte Spill
.LBB28_73:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1785(%rbp), %al                # 1-byte Reload
	.loc	5 41 27                         # types.c3:41:27
	testb	$1, %al
	jne	.LBB28_74
	jmp	.LBB28_75
.LBB28_74:
	.loc	5 41 41                         # types.c3:41:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_75:
	.loc	5 42 8 is_stmt 1                # types.c3:42:8
	movl	-900(%rbp), %ecx
	movb	$1, %al
	cmpl	-808(%rbp), %ecx
	movb	%al, -1786(%rbp)                # 1-byte Spill
	jg	.LBB28_77
# %bb.76:
	.loc	5 42 19 is_stmt 0               # types.c3:42:19
	movl	-900(%rbp), %eax
	cmpl	-812(%rbp), %eax
	setl	%al
	movb	%al, -1786(%rbp)                # 1-byte Spill
.LBB28_77:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1786(%rbp), %al                # 1-byte Reload
	.loc	5 42 19                         # types.c3:42:19
	testb	$1, %al
	jne	.LBB28_78
	jmp	.LBB28_79
.LBB28_78:
	.loc	5 42 35                         # types.c3:42:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_79:
	.loc	5 43 11 is_stmt 1               # types.c3:43:11
	movl	-900(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1324:
.LBB28_80:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1800(%rbp)               # 8-byte Spill
	.loc	5 44 8 is_stmt 1                # types.c3:44:8
	jmp	.LBB28_81
.LBB28_81:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1800(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1816(%rbp)               # 8-byte Spill
	.loc	5 44 8                          # types.c3:44:8
	movb	$1, %al
	movq	($ct.long)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1801(%rbp)                # 1-byte Spill
	je	.LBB28_83
# %bb.82:                               #   in Loop: Header=BB28_81 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1816(%rbp), %rax               # 8-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1800(%rbp)               # 8-byte Spill
	movb	%al, -1801(%rbp)                # 1-byte Spill
	jne	.LBB28_81
.LBB28_83:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1801(%rbp), %al                # 1-byte Reload
	.loc	5 44 8                          # types.c3:44:8
	testb	$1, %al
	jne	.LBB28_84
	jmp	.LBB28_95
.LBB28_84:
.Ltmp1325:
	.loc	5 45 21 is_stmt 1               # types.c3:45:21
	movq	-784(%rbp), %rax
	movq	%rax, -1824(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_185
# %bb.85:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-1824(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	andq	$7, %rax
	movq	%rax, -1832(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_186
# %bb.86:
	.loc	5 0 14                          # types.c3:0:14
	movq	-1824(%rbp), %rax               # 8-byte Reload
	.loc	5 45 14                         # types.c3:45:14
	movq	(%rax), %rax
	movq	%rax, -984(%rbp)
	.loc	5 46 8 is_stmt 1                # types.c3:46:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -1833(%rbp)                # 1-byte Spill
	je	.LBB28_88
# %bb.87:
	.loc	5 46 27 is_stmt 0               # types.c3:46:27
	cmpq	$0, -984(%rbp)
	setl	%al
	movb	%al, -1833(%rbp)                # 1-byte Spill
.LBB28_88:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1833(%rbp), %al                # 1-byte Reload
	.loc	5 46 27                         # types.c3:46:27
	testb	$1, %al
	jne	.LBB28_89
	jmp	.LBB28_90
.LBB28_89:
	.loc	5 46 41                         # types.c3:46:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_90:
	.loc	5 47 8 is_stmt 1                # types.c3:47:8
	movq	-984(%rbp), %rcx
	.loc	5 47 12 is_stmt 0               # types.c3:47:12
	movslq	-808(%rbp), %rdx
	.loc	5 47 8                          # types.c3:47:8
	movb	$1, %al
	cmpq	%rdx, %rcx
	movb	%al, -1834(%rbp)                # 1-byte Spill
	jg	.LBB28_92
# %bb.91:
	.loc	5 47 19                         # types.c3:47:19
	movq	-984(%rbp), %rax
	.loc	5 47 23                         # types.c3:47:23
	movslq	-812(%rbp), %rcx
	.loc	5 47 19                         # types.c3:47:19
	cmpq	%rcx, %rax
	setl	%al
	movb	%al, -1834(%rbp)                # 1-byte Spill
.LBB28_92:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1834(%rbp), %al                # 1-byte Reload
	.loc	5 47 19                         # types.c3:47:19
	testb	$1, %al
	jne	.LBB28_93
	jmp	.LBB28_94
.LBB28_93:
	.loc	5 47 35                         # types.c3:47:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_94:
	.loc	5 48 11 is_stmt 1               # types.c3:48:11
	movq	-984(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1326:
.LBB28_95:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1848(%rbp)               # 8-byte Spill
	.loc	5 49 8 is_stmt 1                # types.c3:49:8
	jmp	.LBB28_96
.LBB28_96:                              # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1848(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1864(%rbp)               # 8-byte Spill
	.loc	5 49 8                          # types.c3:49:8
	movb	$1, %al
	movq	($ct.int128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1849(%rbp)                # 1-byte Spill
	je	.LBB28_98
# %bb.97:                               #   in Loop: Header=BB28_96 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1864(%rbp), %rax               # 8-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1848(%rbp)               # 8-byte Spill
	movb	%al, -1849(%rbp)                # 1-byte Spill
	jne	.LBB28_96
.LBB28_98:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1849(%rbp), %al                # 1-byte Reload
	.loc	5 49 8                          # types.c3:49:8
	testb	$1, %al
	jne	.LBB28_99
	jmp	.LBB28_110
.LBB28_99:
.Ltmp1327:
	.loc	5 50 25 is_stmt 1               # types.c3:50:25
	movq	-784(%rbp), %rax
	movq	%rax, -1872(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_187
# %bb.100:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-1872(%rbp), %rax               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	andq	$15, %rax
	movq	%rax, -1880(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_188
# %bb.101:
	.loc	5 0 16                          # types.c3:0:16
	movq	-1872(%rbp), %rcx               # 8-byte Reload
	.loc	5 50 16                         # types.c3:50:16
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1064(%rbp)
	movq	%rax, -1072(%rbp)
	.loc	5 51 8 is_stmt 1                # types.c3:51:8
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	testb	$1, -802(%rbp)
	movb	%al, -1881(%rbp)                # 1-byte Spill
	je	.LBB28_103
# %bb.102:
	.loc	5 51 27 is_stmt 0               # types.c3:51:27
	movq	-1064(%rbp), %rax
	shrq	$63, %rax
                                        # kill: def $al killed $al killed $rax
	movb	%al, -1881(%rbp)                # 1-byte Spill
.LBB28_103:
	.loc	5 0 27                          # types.c3:0:27
	movb	-1881(%rbp), %al                # 1-byte Reload
	.loc	5 51 27                         # types.c3:51:27
	testb	$1, %al
	jne	.LBB28_104
	jmp	.LBB28_105
.LBB28_104:
	.loc	5 51 41                         # types.c3:51:41
	movq	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_105:
	.loc	5 52 8 is_stmt 1                # types.c3:52:8
	movq	-1072(%rbp), %rdi
	movq	-1064(%rbp), %rdx
	.loc	5 52 12 is_stmt 0               # types.c3:52:12
	movslq	-808(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	movb	$1, %al
	.loc	5 52 8                          # types.c3:52:8
	subq	%rdi, %rsi
	sbbq	%rdx, %rcx
	movb	%al, -1882(%rbp)                # 1-byte Spill
	jl	.LBB28_107
	jmp	.LBB28_106
.LBB28_106:
	.loc	5 52 19                         # types.c3:52:19
	movq	-1072(%rbp), %rdx
	movq	-1064(%rbp), %rax
	.loc	5 52 23                         # types.c3:52:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rcx
	sarq	$63, %rcx
	.loc	5 52 19                         # types.c3:52:19
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	movb	%al, -1882(%rbp)                # 1-byte Spill
.LBB28_107:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1882(%rbp), %al                # 1-byte Reload
	.loc	5 52 19                         # types.c3:52:19
	testb	$1, %al
	jne	.LBB28_108
	jmp	.LBB28_109
.LBB28_108:
	.loc	5 52 35                         # types.c3:52:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_109:
	.loc	5 53 11 is_stmt 1               # types.c3:53:11
	movl	-1072(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1328:
.LBB28_110:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1896(%rbp)               # 8-byte Spill
	.loc	5 54 8 is_stmt 1                # types.c3:54:8
	jmp	.LBB28_111
.LBB28_111:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1896(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1912(%rbp)               # 8-byte Spill
	.loc	5 54 8                          # types.c3:54:8
	movb	$1, %al
	movq	($ct.char)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1897(%rbp)                # 1-byte Spill
	je	.LBB28_113
# %bb.112:                              #   in Loop: Header=BB28_111 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1912(%rbp), %rax               # 8-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1896(%rbp)               # 8-byte Spill
	movb	%al, -1897(%rbp)                # 1-byte Spill
	jne	.LBB28_111
.LBB28_113:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1897(%rbp), %al                # 1-byte Reload
	.loc	5 54 8                          # types.c3:54:8
	testb	$1, %al
	jne	.LBB28_114
	jmp	.LBB28_118
.LBB28_114:
.Ltmp1329:
	.loc	5 55 21 is_stmt 1               # types.c3:55:21
	movq	-784(%rbp), %rax
	movq	%rax, -1920(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_189
# %bb.115:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-1920(%rbp), %rax               # 8-byte Reload
	.loc	5 55 14                         # types.c3:55:14
	movb	(%rax), %al
	movb	%al, -1137(%rbp)
	.loc	5 56 8 is_stmt 1                # types.c3:56:8
	movzbl	-1137(%rbp), %eax
	cmpl	%eax, -808(%rbp)
	setl	%cl
	cmpl	$0, %eax
	setl	%al
	orb	%cl, %al
	testb	$1, %al
	jne	.LBB28_116
	jmp	.LBB28_117
.LBB28_116:
	.loc	5 56 24 is_stmt 0               # types.c3:56:24
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_117:
	.loc	5 57 11 is_stmt 1               # types.c3:57:11
	movzbl	-1137(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1330:
.LBB28_118:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1928(%rbp)               # 8-byte Spill
	.loc	5 58 8 is_stmt 1                # types.c3:58:8
	jmp	.LBB28_119
.LBB28_119:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1928(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1944(%rbp)               # 8-byte Spill
	.loc	5 58 8                          # types.c3:58:8
	movb	$1, %al
	movq	($ct.ushort)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1929(%rbp)                # 1-byte Spill
	je	.LBB28_121
# %bb.120:                              #   in Loop: Header=BB28_119 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1944(%rbp), %rax               # 8-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1928(%rbp)               # 8-byte Spill
	movb	%al, -1929(%rbp)                # 1-byte Spill
	jne	.LBB28_119
.LBB28_121:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1929(%rbp), %al                # 1-byte Reload
	.loc	5 58 8                          # types.c3:58:8
	testb	$1, %al
	jne	.LBB28_122
	jmp	.LBB28_129
.LBB28_122:
.Ltmp1331:
	.loc	5 59 25 is_stmt 1               # types.c3:59:25
	movq	-784(%rbp), %rax
	movq	%rax, -1952(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_190
# %bb.123:
	.loc	5 0 25 is_stmt 0                # types.c3:0:25
	movq	-1952(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	andq	$1, %rax
	movq	%rax, -1960(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_191
# %bb.124:
	.loc	5 0 16                          # types.c3:0:16
	movq	-1952(%rbp), %rax               # 8-byte Reload
	.loc	5 59 16                         # types.c3:59:16
	movw	(%rax), %ax
	movw	%ax, -1140(%rbp)
	.loc	5 60 8 is_stmt 1                # types.c3:60:8
	movzwl	-1140(%rbp), %ecx
	cmpl	%ecx, -808(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -1961(%rbp)                # 1-byte Spill
	jne	.LBB28_126
# %bb.125:
	.loc	5 60 19 is_stmt 0               # types.c3:60:19
	movzwl	-1140(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -1961(%rbp)                # 1-byte Spill
.LBB28_126:
	.loc	5 0 19                          # types.c3:0:19
	movb	-1961(%rbp), %al                # 1-byte Reload
	.loc	5 60 19                         # types.c3:60:19
	testb	$1, %al
	jne	.LBB28_127
	jmp	.LBB28_128
.LBB28_127:
	.loc	5 60 35                         # types.c3:60:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_128:
	.loc	5 61 11 is_stmt 1               # types.c3:61:11
	movzwl	-1140(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1332:
.LBB28_129:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -1976(%rbp)               # 8-byte Spill
	.loc	5 62 8 is_stmt 1                # types.c3:62:8
	jmp	.LBB28_130
.LBB28_130:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-1976(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -1992(%rbp)               # 8-byte Spill
	.loc	5 62 8                          # types.c3:62:8
	movb	$1, %al
	movq	($ct.uint)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -1977(%rbp)                # 1-byte Spill
	je	.LBB28_132
# %bb.131:                              #   in Loop: Header=BB28_130 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-1992(%rbp), %rax               # 8-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -1976(%rbp)               # 8-byte Spill
	movb	%al, -1977(%rbp)                # 1-byte Spill
	jne	.LBB28_130
.LBB28_132:
	.loc	5 0 8                           # types.c3:0:8
	movb	-1977(%rbp), %al                # 1-byte Reload
	.loc	5 62 8                          # types.c3:62:8
	testb	$1, %al
	jne	.LBB28_133
	jmp	.LBB28_140
.LBB28_133:
.Ltmp1333:
	.loc	5 63 21 is_stmt 1               # types.c3:63:21
	movq	-784(%rbp), %rax
	movq	%rax, -2000(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_192
# %bb.134:
	.loc	5 0 21 is_stmt 0                # types.c3:0:21
	movq	-2000(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	andq	$3, %rax
	movq	%rax, -2008(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_193
# %bb.135:
	.loc	5 0 14                          # types.c3:0:14
	movq	-2000(%rbp), %rax               # 8-byte Reload
	.loc	5 63 14                         # types.c3:63:14
	movl	(%rax), %eax
	movl	%eax, -1220(%rbp)
	.loc	5 64 8 is_stmt 1                # types.c3:64:8
	movl	-1220(%rbp), %ecx
	cmpl	%ecx, -808(%rbp)
	setl	%al
	cmpl	$0, %ecx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -2009(%rbp)                # 1-byte Spill
	jne	.LBB28_137
# %bb.136:
	.loc	5 64 19 is_stmt 0               # types.c3:64:19
	movl	-1220(%rbp), %eax
	cmpl	%eax, -812(%rbp)
	setg	%cl
	cmpl	$0, %eax
	setge	%al
	andb	%cl, %al
	movb	%al, -2009(%rbp)                # 1-byte Spill
.LBB28_137:
	.loc	5 0 19                          # types.c3:0:19
	movb	-2009(%rbp), %al                # 1-byte Reload
	.loc	5 64 19                         # types.c3:64:19
	testb	$1, %al
	jne	.LBB28_138
	jmp	.LBB28_139
.LBB28_138:
	.loc	5 64 35                         # types.c3:64:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_139:
	.loc	5 65 11 is_stmt 1               # types.c3:65:11
	movl	-1220(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1334:
.LBB28_140:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -2024(%rbp)               # 8-byte Spill
	.loc	5 66 8 is_stmt 1                # types.c3:66:8
	jmp	.LBB28_141
.LBB28_141:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-2024(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -2040(%rbp)               # 8-byte Spill
	.loc	5 66 8                          # types.c3:66:8
	movb	$1, %al
	movq	($ct.ulong)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -2025(%rbp)                # 1-byte Spill
	je	.LBB28_143
# %bb.142:                              #   in Loop: Header=BB28_141 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-2040(%rbp), %rax               # 8-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -2024(%rbp)               # 8-byte Spill
	movb	%al, -2025(%rbp)                # 1-byte Spill
	jne	.LBB28_141
.LBB28_143:
	.loc	5 0 8                           # types.c3:0:8
	movb	-2025(%rbp), %al                # 1-byte Reload
	.loc	5 66 8                          # types.c3:66:8
	testb	$1, %al
	jne	.LBB28_144
	jmp	.LBB28_151
.LBB28_144:
.Ltmp1335:
	.loc	5 67 23 is_stmt 1               # types.c3:67:23
	movq	-784(%rbp), %rax
	movq	%rax, -2048(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_194
# %bb.145:
	.loc	5 0 23 is_stmt 0                # types.c3:0:23
	movq	-2048(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	andq	$7, %rax
	movq	%rax, -2056(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_195
# %bb.146:
	.loc	5 0 15                          # types.c3:0:15
	movq	-2048(%rbp), %rax               # 8-byte Reload
	.loc	5 67 15                         # types.c3:67:15
	movq	(%rax), %rax
	movq	%rax, -1304(%rbp)
	.loc	5 68 8 is_stmt 1                # types.c3:68:8
	movq	-1304(%rbp), %rcx
	.loc	5 68 12 is_stmt 0               # types.c3:68:12
	movslq	-808(%rbp), %rax
	.loc	5 68 8                          # types.c3:68:8
	cmpq	%rcx, %rax
	setl	%al
	cmpq	$0, %rcx
	setl	%cl
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -2057(%rbp)                # 1-byte Spill
	jne	.LBB28_148
# %bb.147:
	.loc	5 68 19                         # types.c3:68:19
	movq	-1304(%rbp), %rax
	.loc	5 68 23                         # types.c3:68:23
	movslq	-812(%rbp), %rcx
	.loc	5 68 19                         # types.c3:68:19
	cmpq	%rax, %rcx
	setg	%cl
	cmpq	$0, %rax
	setge	%al
	andb	%cl, %al
	movb	%al, -2057(%rbp)                # 1-byte Spill
.LBB28_148:
	.loc	5 0 19                          # types.c3:0:19
	movb	-2057(%rbp), %al                # 1-byte Reload
	.loc	5 68 19                         # types.c3:68:19
	testb	$1, %al
	jne	.LBB28_149
	jmp	.LBB28_150
.LBB28_149:
	.loc	5 68 35                         # types.c3:68:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_150:
	.loc	5 69 11 is_stmt 1               # types.c3:69:11
	movq	-1304(%rbp), %rax
                                        # kill: def $eax killed $eax killed $rax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.Ltmp1336:
.LBB28_151:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	movq	-1664(%rbp), %rax               # 8-byte Reload
	movq	%rax, -2072(%rbp)               # 8-byte Spill
	.loc	5 70 8 is_stmt 1                # types.c3:70:8
	jmp	.LBB28_152
.LBB28_152:                             # =>This Inner Loop Header: Depth=1
	.loc	5 0 8 is_stmt 0                 # types.c3:0:8
	movq	-2072(%rbp), %rdx               # 8-byte Reload
	movq	%rdx, -2088(%rbp)               # 8-byte Spill
	.loc	5 70 8                          # types.c3:70:8
	movb	$1, %al
	movq	($ct.uint128)@GOTPCREL(%rip), %rcx
	cmpq	%rdx, %rcx
	movb	%al, -2073(%rbp)                # 1-byte Spill
	je	.LBB28_154
# %bb.153:                              #   in Loop: Header=BB28_152 Depth=1
	.loc	5 0 8                           # types.c3:0:8
	movq	-2088(%rbp), %rax               # 8-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	movq	8(%rax), %rcx
	xorl	%eax, %eax
                                        # kill: def $al killed $al killed $eax
	cmpq	$0, %rcx
	movq	%rcx, -2072(%rbp)               # 8-byte Spill
	movb	%al, -2073(%rbp)                # 1-byte Spill
	jne	.LBB28_152
.LBB28_154:
	.loc	5 0 8                           # types.c3:0:8
	movb	-2073(%rbp), %al                # 1-byte Reload
	.loc	5 70 8                          # types.c3:70:8
	testb	$1, %al
	jne	.LBB28_155
	jmp	.LBB28_162
.LBB28_155:
.Ltmp1337:
	.loc	5 71 27 is_stmt 1               # types.c3:71:27
	movq	-784(%rbp), %rax
	movq	%rax, -2096(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB28_196
# %bb.156:
	.loc	5 0 27 is_stmt 0                # types.c3:0:27
	movq	-2096(%rbp), %rax               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	andq	$15, %rax
	movq	%rax, -2104(%rbp)               # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB28_197
# %bb.157:
	.loc	5 0 17                          # types.c3:0:17
	movq	-2096(%rbp), %rcx               # 8-byte Reload
	.loc	5 71 17                         # types.c3:71:17
	movq	(%rcx), %rax
	movq	8(%rcx), %rcx
	movq	%rcx, -1384(%rbp)
	movq	%rax, -1392(%rbp)
	.loc	5 72 8 is_stmt 1                # types.c3:72:8
	movq	-1392(%rbp), %rsi
	movq	-1384(%rbp), %rcx
	.loc	5 72 12 is_stmt 0               # types.c3:72:12
	movslq	-808(%rbp), %rdx
	movq	%rdx, %rax
	sarq	$63, %rax
	.loc	5 72 8                          # types.c3:72:8
	subq	%rsi, %rdx
	sbbq	%rcx, %rax
	setl	%al
	shrq	$63, %rcx
                                        # kill: def $cl killed $cl killed $rcx
	orb	%al, %cl
	movb	$1, %al
	testb	$1, %cl
	movb	%al, -2105(%rbp)                # 1-byte Spill
	jne	.LBB28_159
# %bb.158:
	.loc	5 72 19                         # types.c3:72:19
	movq	-1392(%rbp), %rcx
	movq	-1384(%rbp), %rax
	.loc	5 72 23                         # types.c3:72:23
	movslq	-812(%rbp), %rsi
	movq	%rsi, %rdx
	sarq	$63, %rdx
	.loc	5 72 19                         # types.c3:72:19
	subq	%rsi, %rcx
	movq	%rax, %rcx
	sbbq	%rdx, %rcx
	setl	%cl
	testq	%rax, %rax
	setns	%al
	andb	%cl, %al
	movb	%al, -2105(%rbp)                # 1-byte Spill
.LBB28_159:
	.loc	5 0 19                          # types.c3:0:19
	movb	-2105(%rbp), %al                # 1-byte Reload
	.loc	5 72 19                         # types.c3:72:19
	testb	$1, %al
	jne	.LBB28_160
	jmp	.LBB28_161
.LBB28_160:
	.loc	5 72 35                         # types.c3:72:35
	movq	std.core.types.VALUE_OUT_OF_RANGE@GOTPCREL(%rip), %rax
	movq	%rax, -768(%rbp)
	jmp	.LBB28_165
.LBB28_161:
	.loc	5 73 11 is_stmt 1               # types.c3:73:11
	movl	-1392(%rbp), %eax
	movl	%eax, -788(%rbp)
	jmp	.LBB28_164
.LBB28_162:
	jmp	.LBB28_163
.Ltmp1338:
.LBB28_163:
	.loc	5 0 11 is_stmt 0                # types.c3:0:11
	leaq	.L.str.123(%rip), %rax
	movq	%rax, -1472(%rbp)
	movq	$30, -1464(%rbp)
.Ltmp1339:
	.loc	6 244 33 is_stmt 1              # builtin.c3:244:33
	movq	-1472(%rbp), %rdi
	movq	-1464(%rbp), %rsi
	movq	$0, -1480(%rbp)
	movq	$0, -1488(%rbp)
	.loc	6 244 2 is_stmt 0               # builtin.c3:244:2
	leaq	.L.str.124(%rip), %rdx
	movl	$20, %ecx
	leaq	.L.str.125(%rip), %r8
	movl	$25, %r9d
	leaq	-1488(%rbp), %rax
	movl	$690, (%rsp)                    # imm = 0x2B2
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_164:
	movl	-788(%rbp), %eax
	movl	%eax, -756(%rbp)
	movq	$0, -768(%rbp)
.Ltmp1340:
.LBB28_165:
	.loc	1 691 9 is_stmt 1               # formatter_private.c3:691:9
	cmpq	$0, -768(%rbp)
	sete	%al
	testb	$1, %al
	jne	.LBB28_166
	jmp	.LBB28_167
.LBB28_166:
	movl	-756(%rbp), %eax
	movl	%eax, -2112(%rbp)               # 4-byte Spill
	jmp	.LBB28_168
.LBB28_167:
	.loc	1 691 19 is_stmt 0              # formatter_private.c3:691:19
	movq	std.io.BAD_FORMAT@GOTPCREL(%rip), %rax
	movq	%rax, -1496(%rbp)
	jmp	.LBB28_169
.LBB28_168:
	.loc	1 0 19                          # formatter_private.c3:0:19
	movq	-1520(%rbp), %rax               # 8-byte Reload
	movl	-2112(%rbp), %ecx               # 4-byte Reload
	.loc	1 691 19                        # formatter_private.c3:691:19
	movl	%ecx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	1 691 19 epilogue_begin         # formatter_private.c3:691:19
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_169:
	.cfi_def_cfa %rbp, 16
	movq	-1496(%rbp), %rax
	.loc	1 691 19 epilogue_begin         # formatter_private.c3:691:19
	addq	$2144, %rsp                     # imm = 0x860
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_170:
	.cfi_def_cfa %rbp, 16
	.loc	1 682 23 is_stmt 1              # formatter_private.c3:682:23
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	callq	*(%rax)
.LBB28_171:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1528(%rbp), %rcx               # 8-byte Reload
	movq	$8, -312(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -320(%rbp)
	movq	%rax, -344(%rbp)
	leaq	-312(%rbp), %rcx
	movq	%rcx, -352(%rbp)
	movq	%rax, -328(%rbp)
	leaq	-320(%rbp), %rax
	movq	%rax, -336(%rbp)
	leaq	-352(%rbp), %rax
	movq	%rax, -368(%rbp)
	movq	$2, -360(%rbp)
	.loc	1 682 23                        # formatter_private.c3:682:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-368(%rbp), %rax
	movl	$682, (%rsp)                    # imm = 0x2AA
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_172:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1536(%rbp), %rcx               # 8-byte Reload
	movq	$256, -384(%rbp)                # imm = 0x100
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -392(%rbp)
	movq	%rax, -424(%rbp)
	leaq	-384(%rbp), %rcx
	movq	%rcx, -432(%rbp)
	movq	%rax, -408(%rbp)
	leaq	-392(%rbp), %rax
	movq	%rax, -416(%rbp)
	leaq	-432(%rbp), %rax
	movq	%rax, -448(%rbp)
	movq	$2, -440(%rbp)
.Ltmp1341:
	.loc	4 9 42 is_stmt 1                # ascii.c3:9:42
	leaq	.panic_msg.54(%rip), %rdi
	movl	$59, %esi
	leaq	.file.117(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-448(%rbp), %rax
	movl	$9, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1342:
.LBB28_173:
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.120(%rip), %rdi
	movl	$50, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	callq	*(%rax)
.LBB28_174:
	.loc	1 0 16 is_stmt 0                # formatter_private.c3:0:16
	movq	-1592(%rbp), %rcx               # 8-byte Reload
	movq	$8, -480(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -488(%rbp)
	movq	%rax, -520(%rbp)
	leaq	-480(%rbp), %rcx
	movq	%rcx, -528(%rbp)
	movq	%rax, -504(%rbp)
	leaq	-488(%rbp), %rax
	movq	%rax, -512(%rbp)
	leaq	-528(%rbp), %rax
	movq	%rax, -544(%rbp)
	movq	$2, -536(%rbp)
	.loc	1 685 16                        # formatter_private.c3:685:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-544(%rbp), %rax
	movl	$685, (%rsp)                    # imm = 0x2AD
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_175:
	.loc	1 687 7 is_stmt 1               # formatter_private.c3:687:7
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	callq	*(%rax)
.LBB28_176:
	.loc	1 0 7 is_stmt 0                 # formatter_private.c3:0:7
	movq	-1608(%rbp), %rcx               # 8-byte Reload
	movq	$8, -552(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -560(%rbp)
	movq	%rax, -584(%rbp)
	leaq	-552(%rbp), %rcx
	movq	%rcx, -592(%rbp)
	movq	%rax, -568(%rbp)
	leaq	-560(%rbp), %rax
	movq	%rax, -576(%rbp)
	leaq	-592(%rbp), %rax
	movq	%rax, -608(%rbp)
	movq	$2, -600(%rbp)
	.loc	1 687 7                         # formatter_private.c3:687:7
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-608(%rbp), %rax
	movl	$687, (%rsp)                    # imm = 0x2AF
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_177:
	.loc	1 688 23 is_stmt 1              # formatter_private.c3:688:23
	leaq	.panic_msg.122(%rip), %rdi
	movl	$55, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	callq	*(%rax)
.LBB28_178:
	.loc	1 0 23 is_stmt 0                # formatter_private.c3:0:23
	movq	-1632(%rbp), %rcx               # 8-byte Reload
	movq	$8, -632(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -640(%rbp)
	movq	%rax, -664(%rbp)
	leaq	-632(%rbp), %rcx
	movq	%rcx, -672(%rbp)
	movq	%rax, -648(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, -656(%rbp)
	leaq	-672(%rbp), %rax
	movq	%rax, -688(%rbp)
	movq	$2, -680(%rbp)
	.loc	1 688 23                        # formatter_private.c3:688:23
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-688(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_179:
	.loc	1 0 23                          # formatter_private.c3:0:23
	movq	-1640(%rbp), %rcx               # 8-byte Reload
	movq	$8, -696(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -704(%rbp)
	movq	%rax, -728(%rbp)
	leaq	-696(%rbp), %rcx
	movq	%rcx, -736(%rbp)
	movq	%rax, -712(%rbp)
	leaq	-704(%rbp), %rax
	movq	%rax, -720(%rbp)
	leaq	-736(%rbp), %rax
	movq	%rax, -752(%rbp)
	movq	$2, -744(%rbp)
	.loc	1 688 12                        # formatter_private.c3:688:12
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.83(%rip), %rdx
	movl	$20, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-752(%rbp), %rax
	movl	$688, (%rsp)                    # imm = 0x2B0
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.LBB28_180:
.Ltmp1343:
	.loc	5 31 15 is_stmt 1               # types.c3:31:15
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$31, (%rsp)
	callq	*(%rax)
.Ltmp1344:
.LBB28_181:
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.40(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$35, (%rsp)
	callq	*(%rax)
.LBB28_182:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-1736(%rbp), %rcx               # 8-byte Reload
	movq	$2, -840(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -848(%rbp)
	movq	%rax, -872(%rbp)
	leaq	-840(%rbp), %rcx
	movq	%rcx, -880(%rbp)
	movq	%rax, -856(%rbp)
	leaq	-848(%rbp), %rax
	movq	%rax, -864(%rbp)
	leaq	-880(%rbp), %rax
	movq	%rax, -896(%rbp)
	movq	$2, -888(%rbp)
	.loc	5 35 15                         # types.c3:35:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-896(%rbp), %rax
	movl	$35, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1345:
.LBB28_183:
	.loc	5 40 13 is_stmt 1               # types.c3:40:13
	leaq	.panic_msg.41(%rip), %rdi
	movl	$52, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$40, (%rsp)
	callq	*(%rax)
.LBB28_184:
	.loc	5 0 13 is_stmt 0                # types.c3:0:13
	movq	-1784(%rbp), %rcx               # 8-byte Reload
	movq	$4, -912(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -920(%rbp)
	movq	%rax, -952(%rbp)
	leaq	-912(%rbp), %rcx
	movq	%rcx, -960(%rbp)
	movq	%rax, -936(%rbp)
	leaq	-920(%rbp), %rax
	movq	%rax, -944(%rbp)
	leaq	-960(%rbp), %rax
	movq	%rax, -976(%rbp)
	movq	$2, -968(%rbp)
	.loc	5 40 13                         # types.c3:40:13
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-976(%rbp), %rax
	movl	$40, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1346:
.LBB28_185:
	.loc	5 45 14 is_stmt 1               # types.c3:45:14
	leaq	.panic_msg.42(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$45, (%rsp)
	callq	*(%rax)
.LBB28_186:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-1832(%rbp), %rcx               # 8-byte Reload
	movq	$8, -992(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1000(%rbp)
	movq	%rax, -1032(%rbp)
	leaq	-992(%rbp), %rcx
	movq	%rcx, -1040(%rbp)
	movq	%rax, -1016(%rbp)
	leaq	-1000(%rbp), %rax
	movq	%rax, -1024(%rbp)
	leaq	-1040(%rbp), %rax
	movq	%rax, -1056(%rbp)
	movq	$2, -1048(%rbp)
	.loc	5 45 14                         # types.c3:45:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1056(%rbp), %rax
	movl	$45, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1347:
.LBB28_187:
	.loc	5 50 16 is_stmt 1               # types.c3:50:16
	leaq	.panic_msg.43(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$50, (%rsp)
	callq	*(%rax)
.LBB28_188:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-1880(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1080(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1088(%rbp)
	movq	%rax, -1112(%rbp)
	leaq	-1080(%rbp), %rcx
	movq	%rcx, -1120(%rbp)
	movq	%rax, -1096(%rbp)
	leaq	-1088(%rbp), %rax
	movq	%rax, -1104(%rbp)
	leaq	-1120(%rbp), %rax
	movq	%rax, -1136(%rbp)
	movq	$2, -1128(%rbp)
	.loc	5 50 16                         # types.c3:50:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1136(%rbp), %rax
	movl	$50, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1348:
.LBB28_189:
	.loc	5 55 14 is_stmt 1               # types.c3:55:14
	leaq	.panic_msg.39(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$55, (%rsp)
	callq	*(%rax)
.Ltmp1349:
.LBB28_190:
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.44(%rip), %rdi
	movl	$55, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$59, (%rsp)
	callq	*(%rax)
.LBB28_191:
	.loc	5 0 16 is_stmt 0                # types.c3:0:16
	movq	-1960(%rbp), %rcx               # 8-byte Reload
	movq	$2, -1152(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1160(%rbp)
	movq	%rax, -1192(%rbp)
	leaq	-1152(%rbp), %rcx
	movq	%rcx, -1200(%rbp)
	movq	%rax, -1176(%rbp)
	leaq	-1160(%rbp), %rax
	movq	%rax, -1184(%rbp)
	leaq	-1200(%rbp), %rax
	movq	%rax, -1216(%rbp)
	movq	$2, -1208(%rbp)
	.loc	5 59 16                         # types.c3:59:16
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1216(%rbp), %rax
	movl	$59, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1350:
.LBB28_192:
	.loc	5 63 14 is_stmt 1               # types.c3:63:14
	leaq	.panic_msg.45(%rip), %rdi
	movl	$53, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$63, (%rsp)
	callq	*(%rax)
.LBB28_193:
	.loc	5 0 14 is_stmt 0                # types.c3:0:14
	movq	-2008(%rbp), %rcx               # 8-byte Reload
	movq	$4, -1232(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1240(%rbp)
	movq	%rax, -1272(%rbp)
	leaq	-1232(%rbp), %rcx
	movq	%rcx, -1280(%rbp)
	movq	%rax, -1256(%rbp)
	leaq	-1240(%rbp), %rax
	movq	%rax, -1264(%rbp)
	leaq	-1280(%rbp), %rax
	movq	%rax, -1296(%rbp)
	movq	$2, -1288(%rbp)
	.loc	5 63 14                         # types.c3:63:14
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1296(%rbp), %rax
	movl	$63, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1351:
.LBB28_194:
	.loc	5 67 15 is_stmt 1               # types.c3:67:15
	leaq	.panic_msg.46(%rip), %rdi
	movl	$54, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$67, (%rsp)
	callq	*(%rax)
.LBB28_195:
	.loc	5 0 15 is_stmt 0                # types.c3:0:15
	movq	-2056(%rbp), %rcx               # 8-byte Reload
	movq	$8, -1312(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1320(%rbp)
	movq	%rax, -1352(%rbp)
	leaq	-1312(%rbp), %rcx
	movq	%rcx, -1360(%rbp)
	movq	%rax, -1336(%rbp)
	leaq	-1320(%rbp), %rax
	movq	%rax, -1344(%rbp)
	leaq	-1360(%rbp), %rax
	movq	%rax, -1376(%rbp)
	movq	$2, -1368(%rbp)
	.loc	5 67 15                         # types.c3:67:15
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1376(%rbp), %rax
	movl	$67, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1352:
.LBB28_196:
	.loc	5 71 17 is_stmt 1               # types.c3:71:17
	leaq	.panic_msg.47(%rip), %rdi
	movl	$56, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$71, (%rsp)
	callq	*(%rax)
.LBB28_197:
	.loc	5 0 17 is_stmt 0                # types.c3:0:17
	movq	-2104(%rbp), %rcx               # 8-byte Reload
	movq	$16, -1400(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -1408(%rbp)
	movq	%rax, -1432(%rbp)
	leaq	-1400(%rbp), %rcx
	movq	%rcx, -1440(%rbp)
	movq	%rax, -1416(%rbp)
	leaq	-1408(%rbp), %rax
	movq	%rax, -1424(%rbp)
	leaq	-1440(%rbp), %rax
	movq	%rax, -1456(%rbp)
	movq	$2, -1448(%rbp)
	.loc	5 71 17                         # types.c3:71:17
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.37(%rip), %rdx
	movl	$8, %ecx
	leaq	.func.121(%rip), %r8
	movl	$25, %r9d
	leaq	-1456(%rbp), %rax
	movl	$71, (%rsp)
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1353:
.Lfunc_end28:
	.size	std.io.printf_parse_format_field, .Lfunc_end28-std.io.printf_parse_format_field
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.out_putstream_fn
	.type	std.io.out_putstream_fn,@function
std.io.out_putstream_fn:                # @std.io.out_putstream_fn
.Lfunc_begin29:
	.loc	2 263 0 is_stmt 1               # io.c3:263:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$192, %rsp
	movb	%sil, %al
	movq	$0, -112(%rbp)
	movq	%rdi, -8(%rbp)
	movb	%al, -9(%rbp)
.Ltmp1354:
	.loc	2 265 22 prologue_end           # io.c3:265:22
	movq	-8(%rbp), %rax
	movq	%rax, -24(%rbp)
	.loc	2 266 11                        # io.c3:266:11
	movq	-24(%rbp), %rax
	movq	%rax, -120(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB29_11
# %bb.1:
	.loc	2 0 11 is_stmt 0                # io.c3:0:11
	movq	-120(%rbp), %rax                # 8-byte Reload
	.loc	2 266 11                        # io.c3:266:11
	andq	$7, %rax
	movq	%rax, -128(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	setne	%al
	testb	$1, %al
	jne	.LBB29_12
# %bb.2:
	.loc	2 0 11                          # io.c3:0:11
	movq	-120(%rbp), %rax                # 8-byte Reload
	.loc	2 266 30                        # io.c3:266:30
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)                # 8-byte Spill
	cmpq	-112(%rbp), %rax
	je	.LBB29_4
# %bb.3:
	.loc	2 0 30                          # io.c3:0:30
	movq	-136(%rbp), %rax                # 8-byte Reload
	movq	16(%rax), %rdi
	movq	($sel.write_byte)@GOTPCREL(%rip), %rsi
	callq	.dyn_search@PLT
	movq	-136(%rbp), %rcx                # 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	%rcx, -112(%rbp)
	movq	%rax, -144(%rbp)                # 8-byte Spill
	jmp	.LBB29_5
.LBB29_4:
	movq	-104(%rbp), %rax
	movq	%rax, -144(%rbp)                # 8-byte Spill
.LBB29_5:
	movq	-144(%rbp), %rax                # 8-byte Reload
	movq	%rax, -152(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	jne	.LBB29_7
# %bb.6:
	.loc	2 266 9                         # io.c3:266:9
	leaq	.panic_msg.168(%rip), %rdi
	movl	$47, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.167(%rip), %r8
	movl	$16, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$266, (%rsp)                    # imm = 0x10A
	callq	*(%rax)
.LBB29_7:
	.loc	2 0 9                           # io.c3:0:9
	movq	-152(%rbp), %rax                # 8-byte Reload
	movq	-120(%rbp), %rcx                # 8-byte Reload
	.loc	2 266 9                         # io.c3:266:9
	movq	(%rcx), %rdi
	movzbl	-9(%rbp), %esi
	callq	*%rax
	movq	%rax, -160(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB29_9
# %bb.8:
	.loc	2 0 9                           # io.c3:0:9
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	2 266 9                         # io.c3:266:9
	movq	%rax, -32(%rbp)
	jmp	.LBB29_10
.LBB29_9:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	2 266 9 epilogue_begin          # io.c3:266:9
	addq	$192, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_10:
	.cfi_def_cfa %rbp, 16
	movq	-32(%rbp), %rax
	.loc	2 266 9 epilogue_begin          # io.c3:266:9
	addq	$192, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_11:
	.cfi_def_cfa %rbp, 16
	.loc	2 266 11                        # io.c3:266:11
	leaq	.panic_msg.165(%rip), %rdi
	movl	$47, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.167(%rip), %r8
	movl	$16, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$266, (%rsp)                    # imm = 0x10A
	callq	*(%rax)
.LBB29_12:
	.loc	2 0 11                          # io.c3:0:11
	movq	-128(%rbp), %rcx                # 8-byte Reload
	movq	$8, -40(%rbp)
	movq	($ct.ulong)@GOTPCREL(%rip), %rax
	movq	%rcx, -48(%rbp)
	movq	%rax, -72(%rbp)
	leaq	-40(%rbp), %rcx
	movq	%rcx, -80(%rbp)
	movq	%rax, -56(%rbp)
	leaq	-48(%rbp), %rax
	movq	%rax, -64(%rbp)
	leaq	-80(%rbp), %rax
	movq	%rax, -96(%rbp)
	movq	$2, -88(%rbp)
	.loc	2 266 11                        # io.c3:266:11
	leaq	.panic_msg.4(%rip), %rdi
	movl	$94, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.167(%rip), %r8
	movl	$16, %r9d
	leaq	-96(%rbp), %rax
	movl	$266, (%rsp)                    # imm = 0x10A
	movq	(%rax), %r10
	movq	%r10, 8(%rsp)
	movq	8(%rax), %rax
	movq	%rax, 16(%rsp)
	callq	std.core.builtin.panicf@PLT
.Ltmp1355:
.Lfunc_end29:
	.size	std.io.out_putstream_fn, .Lfunc_end29-std.io.out_putstream_fn
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90                         # -- Begin function std.io.out_putchar_fn
	.type	std.io.out_putchar_fn,@function
std.io.out_putchar_fn:                  # @std.io.out_putchar_fn
.Lfunc_begin30:
	.loc	2 269 0 is_stmt 1               # io.c3:269:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movb	%sil, %al
	movq	%rdi, -8(%rbp)
	movb	%al, -9(%rbp)
.Ltmp1356:
	.loc	2 277 17 prologue_end           # io.c3:277:17
	movzbl	-9(%rbp), %edi
	.loc	2 277 3 is_stmt 0               # io.c3:277:3
	callq	putchar@PLT
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	2 277 3 epilogue_begin          # io.c3:277:3
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1357:
.Lfunc_end30:
	.size	std.io.out_putchar_fn, .Lfunc_end30-std.io.out_putchar_fn
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.printfn,"axG",@progbits,std.io.printfn,comdat
	.weak	std.io.printfn                  # -- Begin function std.io.printfn
	.p2align	4, 0x90
	.type	std.io.printfn,@function
std.io.printfn:                         # @std.io.printfn
.Lfunc_begin31:
	.loc	2 309 0 is_stmt 1               # io.c3:309:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$176, %rsp
	movq	%rdi, -136(%rbp)                # 8-byte Spill
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -24(%rbp)
.Ltmp1358:
	.loc	2 311 12 prologue_end           # io.c3:311:12
	leaq	-72(%rbp), %rdi
	xorl	%esi, %esi
	movl	$40, %edx
	callq	memset@PLT
	.loc	2 312 2                         # io.c3:312:2
	leaq	-72(%rbp), %rdi
	leaq	std.io.out_putchar_fn(%rip), %rsi
	xorl	%eax, %eax
	movl	%eax, %edx
	callq	std.io.Formatter.init@PLT
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %r8
	movq	-24(%rbp), %r9
	.loc	2 313 13                        # io.c3:313:13
	leaq	-96(%rbp), %rdi
	leaq	-72(%rbp), %rsi
	callq	std.io.Formatter.vprintf@PLT
	movq	%rax, -128(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB31_2
# %bb.1:
	.loc	2 0 13 is_stmt 0                # io.c3:0:13
	movq	-128(%rbp), %rax                # 8-byte Reload
	.loc	2 313 13                        # io.c3:313:13
	movq	%rax, -88(%rbp)
	jmp	.LBB31_3
.LBB31_2:
	movq	-96(%rbp), %rax
	movq	%rax, -80(%rbp)
	movq	$0, -88(%rbp)
.LBB31_3:
	.loc	2 314 2 is_stmt 1               # io.c3:314:2
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$10, %esi
	callq	std.io.out_putchar_fn
	movq	%rax, -144(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB31_5
# %bb.4:
	.loc	2 0 2 is_stmt 0                 # io.c3:0:2
	movq	-144(%rbp), %rax                # 8-byte Reload
	.loc	2 314 2                         # io.c3:314:2
	movq	%rax, -104(%rbp)
	jmp	.LBB31_6
.LBB31_5:
	jmp	.LBB31_7
.LBB31_6:
	movq	-104(%rbp), %rax
	.loc	2 314 2 epilogue_begin          # io.c3:314:2
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:
	.cfi_def_cfa %rbp, 16
	.loc	2 315 2 is_stmt 1               # io.c3:315:2
	callq	std.io.stdout@PLT
	movq	%rax, -152(%rbp)                # 8-byte Spill
	cmpq	$0, (%rax)
	jne	.LBB31_9
# %bb.8:
	leaq	.panic_msg.169(%rip), %rdi
	movl	$66, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.170(%rip), %r8
	movl	$7, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$315, (%rsp)                    # imm = 0x13B
	callq	*(%rax)
.LBB31_9:
	.loc	2 0 2 is_stmt 0                 # io.c3:0:2
	movq	-152(%rbp), %rdi                # 8-byte Reload
	.loc	2 315 2                         # io.c3:315:2
	callq	std.io.File.flush@PLT
	movq	%rax, -160(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB31_11
# %bb.10:
	.loc	2 0 2                           # io.c3:0:2
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	2 315 2                         # io.c3:315:2
	movq	%rax, -112(%rbp)
	jmp	.LBB31_12
.LBB31_11:
	jmp	.LBB31_13
.LBB31_12:
	movq	-112(%rbp), %rax
	.loc	2 315 2 epilogue_begin          # io.c3:315:2
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_13:
	.cfi_def_cfa %rbp, 16
	.loc	2 316 9 is_stmt 1               # io.c3:316:9
	movq	-88(%rbp), %rax
	movq	%rax, -168(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB31_15
# %bb.14:
	.loc	2 0 9 is_stmt 0                 # io.c3:0:9
	movq	-168(%rbp), %rax                # 8-byte Reload
	.loc	2 316 9                         # io.c3:316:9
	movq	%rax, -120(%rbp)
	jmp	.LBB31_16
.LBB31_15:
	.loc	2 0 9                           # io.c3:0:9
	movq	-136(%rbp), %rax                # 8-byte Reload
	.loc	2 316 9                         # io.c3:316:9
	movq	-80(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	2 316 9 epilogue_begin          # io.c3:316:9
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_16:
	.cfi_def_cfa %rbp, 16
	movq	-120(%rbp), %rax
	.loc	2 316 9 epilogue_begin          # io.c3:316:9
	addq	$176, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1359:
.Lfunc_end31:
	.size	std.io.printfn, .Lfunc_end31-std.io.printfn
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.eprintfn,"axG",@progbits,std.io.eprintfn,comdat
	.weak	std.io.eprintfn                 # -- Begin function std.io.eprintfn
	.p2align	4, 0x90
	.type	std.io.eprintfn,@function
std.io.eprintfn:                        # @std.io.eprintfn
.Lfunc_begin32:
	.loc	2 342 0 is_stmt 1               # io.c3:342:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$208, %rsp
	movq	%rdi, -160(%rbp)                # 8-byte Spill
	movq	%rsi, -16(%rbp)
	movq	%rdx, -8(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -24(%rbp)
.Ltmp1360:
	.loc	2 344 12 prologue_end           # io.c3:344:12
	vxorps	%xmm0, %xmm0, %xmm0
	vmovdqa	%xmm0, -64(%rbp)
	vmovdqa	%xmm0, -80(%rbp)
	movq	$0, -48(%rbp)
	.loc	2 345 21                        # io.c3:345:21
	callq	std.io.stderr@PLT
	movq	($ct.std.io.File)@GOTPCREL(%rip), %rcx
	movq	%rcx, -88(%rbp)
	movq	%rax, -96(%rbp)
	.loc	2 346 2                         # io.c3:346:2
	leaq	-80(%rbp), %rdi
	leaq	std.io.out_putstream_fn(%rip), %rsi
	leaq	-96(%rbp), %rdx
	callq	std.io.Formatter.init@PLT
	movq	-16(%rbp), %rdx
	movq	-8(%rbp), %rcx
	movq	-32(%rbp), %r8
	movq	-24(%rbp), %r9
	.loc	2 347 13                        # io.c3:347:13
	leaq	-120(%rbp), %rdi
	leaq	-80(%rbp), %rsi
	callq	std.io.Formatter.vprintf@PLT
	movq	%rax, -152(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB32_2
# %bb.1:
	.loc	2 0 13 is_stmt 0                # io.c3:0:13
	movq	-152(%rbp), %rax                # 8-byte Reload
	.loc	2 347 13                        # io.c3:347:13
	movq	%rax, -112(%rbp)
	jmp	.LBB32_3
.LBB32_2:
	movq	-120(%rbp), %rax
	movq	%rax, -104(%rbp)
	movq	$0, -112(%rbp)
.LBB32_3:
	.loc	2 348 2 is_stmt 1               # io.c3:348:2
	callq	std.io.stderr@PLT
	movq	%rax, -168(%rbp)                # 8-byte Spill
	cmpq	$0, (%rax)
	jne	.LBB32_5
# %bb.4:
	leaq	.panic_msg.171(%rip), %rdi
	movl	$38, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.172(%rip), %r8
	movl	$8, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$348, (%rsp)                    # imm = 0x15C
	callq	*(%rax)
.LBB32_5:
	.loc	2 0 2 is_stmt 0                 # io.c3:0:2
	movq	-168(%rbp), %rdi                # 8-byte Reload
	.loc	2 348 2                         # io.c3:348:2
	movl	$10, %esi
	callq	std.io.File.write_byte@PLT
	movq	%rax, -176(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB32_7
# %bb.6:
	.loc	2 0 2                           # io.c3:0:2
	movq	-176(%rbp), %rax                # 8-byte Reload
	.loc	2 348 2                         # io.c3:348:2
	movq	%rax, -128(%rbp)
	jmp	.LBB32_8
.LBB32_7:
	jmp	.LBB32_9
.LBB32_8:
	movq	-128(%rbp), %rax
	.loc	2 348 2 epilogue_begin          # io.c3:348:2
	addq	$208, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:
	.cfi_def_cfa %rbp, 16
	.loc	2 349 2 is_stmt 1               # io.c3:349:2
	callq	std.io.stderr@PLT
	movq	%rax, -184(%rbp)                # 8-byte Spill
	cmpq	$0, (%rax)
	jne	.LBB32_11
# %bb.10:
	leaq	.panic_msg.169(%rip), %rdi
	movl	$66, %esi
	leaq	.file.166(%rip), %rdx
	movl	$5, %ecx
	leaq	.func.172(%rip), %r8
	movl	$8, %r9d
	movq	std.core.builtin.panic@GOTPCREL(%rip), %rax
	movl	$349, (%rsp)                    # imm = 0x15D
	callq	*(%rax)
.LBB32_11:
	.loc	2 0 2 is_stmt 0                 # io.c3:0:2
	movq	-184(%rbp), %rdi                # 8-byte Reload
	.loc	2 349 2                         # io.c3:349:2
	callq	std.io.File.flush@PLT
	movq	%rax, -192(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB32_13
# %bb.12:
	.loc	2 0 2                           # io.c3:0:2
	movq	-192(%rbp), %rax                # 8-byte Reload
	.loc	2 349 2                         # io.c3:349:2
	movq	%rax, -136(%rbp)
	jmp	.LBB32_14
.LBB32_13:
	jmp	.LBB32_15
.LBB32_14:
	movq	-136(%rbp), %rax
	.loc	2 349 2 epilogue_begin          # io.c3:349:2
	addq	$208, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_15:
	.cfi_def_cfa %rbp, 16
	.loc	2 350 9 is_stmt 1               # io.c3:350:9
	movq	-112(%rbp), %rax
	movq	%rax, -200(%rbp)                # 8-byte Spill
	cmpq	$0, %rax
	sete	%al
	testb	$1, %al
	jne	.LBB32_17
# %bb.16:
	.loc	2 0 9 is_stmt 0                 # io.c3:0:9
	movq	-200(%rbp), %rax                # 8-byte Reload
	.loc	2 350 9                         # io.c3:350:9
	movq	%rax, -144(%rbp)
	jmp	.LBB32_18
.LBB32_17:
	.loc	2 0 9                           # io.c3:0:9
	movq	-160(%rbp), %rax                # 8-byte Reload
	.loc	2 350 9                         # io.c3:350:9
	movq	-104(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, (%rax)
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	.loc	2 350 9 epilogue_begin          # io.c3:350:9
	addq	$208, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_18:
	.cfi_def_cfa %rbp, 16
	movq	-144(%rbp), %rax
	.loc	2 350 9 epilogue_begin          # io.c3:350:9
	addq	$208, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1361:
.Lfunc_end32:
	.size	std.io.eprintfn, .Lfunc_end32-std.io.eprintfn
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.stdout,"axG",@progbits,std.io.stdout,comdat
	.weak	std.io.stdout                   # -- Begin function std.io.stdout
	.p2align	4, 0x90
	.type	std.io.stdout,@function
std.io.stdout:                          # @std.io.stdout
.Lfunc_begin33:
	.loc	2 402 0 is_stmt 1               # io.c3:402:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.Ltmp1362:
	.loc	2 405 7 prologue_end            # io.c3:405:7
	cmpq	$0, stdout.file(%rip)
	jne	.LBB33_2
# %bb.1:
.Ltmp1363:
	.file	9 "/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/libc" "libc.c3"
	.loc	9 221 25                        # libc.c3:221:25
	movq	stdout@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
.Ltmp1364:
	.loc	2 405 25                        # io.c3:405:25
	callq	std.io.file.from_handle@PLT
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, stdout.file(%rip)
.LBB33_2:
	.loc	2 406 9                         # io.c3:406:9
	leaq	stdout.file(%rip), %rax
	.loc	2 406 9 epilogue_begin is_stmt 0 # io.c3:406:9
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1365:
.Lfunc_end33:
	.size	std.io.stdout, .Lfunc_end33-std.io.stdout
	.cfi_endproc
                                        # -- End function
	.section	.text.std.io.stderr,"axG",@progbits,std.io.stderr,comdat
	.weak	std.io.stderr                   # -- Begin function std.io.stderr
	.p2align	4, 0x90
	.type	std.io.stderr,@function
std.io.stderr:                          # @std.io.stderr
.Lfunc_begin34:
	.loc	2 414 0 is_stmt 1               # io.c3:414:0
	.cfi_startproc
# %bb.0:
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
.Ltmp1366:
	.loc	2 417 7 prologue_end            # io.c3:417:7
	cmpq	$0, stderr.file(%rip)
	jne	.LBB34_2
# %bb.1:
.Ltmp1367:
	.loc	9 222 25                        # libc.c3:222:25
	movq	stderr@GOTPCREL(%rip), %rax
	movq	(%rax), %rdi
.Ltmp1368:
	.loc	2 417 25                        # io.c3:417:25
	callq	std.io.file.from_handle@PLT
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	%rax, stderr.file(%rip)
.LBB34_2:
	.loc	2 418 9                         # io.c3:418:9
	leaq	stderr.file(%rip), %rax
	.loc	2 418 9 epilogue_begin is_stmt 0 # io.c3:418:9
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Ltmp1369:
.Lfunc_end34:
	.size	std.io.stderr, .Lfunc_end34-std.io.stderr
	.cfi_endproc
                                        # -- End function
	.section	.text..dyn_search,"axG",@progbits,.dyn_search,comdat
	.weak	.dyn_search                     # -- Begin function .dyn_search
	.p2align	4, 0x90
	.type	.dyn_search,@function
.dyn_search:                            # @.dyn_search
.Lfunc_begin35:
	.cfi_startproc
# %bb.0:
	movq	%rsi, -16(%rsp)                 # 8-byte Spill
	movq	%rdi, -8(%rsp)                  # 8-byte Spill
	jmp	.LBB35_1
.LBB35_1:                               # =>This Inner Loop Header: Depth=1
	movq	-8(%rsp), %rax                  # 8-byte Reload
	movq	%rax, -24(%rsp)                 # 8-byte Spill
	cmpq	$0, %rax
	jne	.LBB35_3
# %bb.2:
	xorl	%eax, %eax
                                        # kill: def $rax killed $eax
	retq
.LBB35_3:                               #   in Loop: Header=BB35_1 Depth=1
	movq	-24(%rsp), %rax                 # 8-byte Reload
	movq	-16(%rsp), %rcx                 # 8-byte Reload
	cmpq	%rcx, 8(%rax)
	jne	.LBB35_5
# %bb.4:
	movq	-24(%rsp), %rax                 # 8-byte Reload
	movq	(%rax), %rax
	retq
.LBB35_5:                               #   in Loop: Header=BB35_1 Depth=1
	movq	-24(%rsp), %rax                 # 8-byte Reload
	movq	16(%rax), %rax
	movq	%rax, -8(%rsp)                  # 8-byte Spill
	jmp	.LBB35_1
.Lfunc_end35:
	.size	.dyn_search, .Lfunc_end35-.dyn_search
	.cfi_endproc
                                        # -- End function
	.type	$ct.std.io.File,@object         # @"$ct.std.io.File"
	.section	".data.$ct.std.io.File","awG",@progbits,"$ct.std.io.File",comdat
	.weak	$ct.std.io.File
	.p2align	3, 0x0
$ct.std.io.File:
	.byte	10                              # 0xa
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	0                               # 0x0
	.quad	1                               # 0x1
	.size	$ct.std.io.File, 48

	.type	$ct.std.io.$anon,@object        # @"$ct.std.io.$anon"
	.section	".data.$ct.std.io.$anon","awG",@progbits,"$ct.std.io.$anon",comdat
	.weak	$ct.std.io.$anon
	.p2align	3, 0x0
$ct.std.io.$anon:
	.byte	10                              # 0xa
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	24                              # 0x18
	.quad	0                               # 0x0
	.quad	4                               # 0x4
	.size	$ct.std.io.$anon, 48

	.type	$ct.std.io.Formatter,@object    # @"$ct.std.io.Formatter"
	.section	".data.$ct.std.io.Formatter","awG",@progbits,"$ct.std.io.Formatter",comdat
	.weak	$ct.std.io.Formatter
	.p2align	3, 0x0
$ct.std.io.Formatter:
	.byte	10                              # 0xa
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	40                              # 0x28
	.quad	0                               # 0x0
	.quad	3                               # 0x3
	.size	$ct.std.io.Formatter, 48

	.type	$ct.std.io.PrintFlags,@object   # @"$ct.std.io.PrintFlags"
	.section	".data.$ct.std.io.PrintFlags","awG",@progbits,"$ct.std.io.PrintFlags",comdat
	.weak	$ct.std.io.PrintFlags
	.p2align	3, 0x0
$ct.std.io.PrintFlags:
	.byte	12                              # 0xc
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	($ct.uint)
	.quad	0                               # 0x0
	.size	$ct.std.io.PrintFlags, 48

	.type	$ct.uint,@object                # @"$ct.uint"
	.section	".data.$ct.uint","awG",@progbits,"$ct.uint",comdat
	.weak	$ct.uint
	.p2align	3, 0x0
$ct.uint:
	.byte	3                               # 0x3
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.uint, 48

	.type	.enum.FLOAT,@object             # @.enum.FLOAT
	.section	.rodata,"a",@progbits
.enum.FLOAT:
	.asciz	"FLOAT"
	.size	.enum.FLOAT, 6

	.type	.enum.EXPONENTIAL,@object       # @.enum.EXPONENTIAL
.enum.EXPONENTIAL:
	.asciz	"EXPONENTIAL"
	.size	.enum.EXPONENTIAL, 12

	.type	.enum.ADAPTIVE,@object          # @.enum.ADAPTIVE
.enum.ADAPTIVE:
	.asciz	"ADAPTIVE"
	.size	.enum.ADAPTIVE, 9

	.type	.enum.HEX,@object               # @.enum.HEX
.enum.HEX:
	.asciz	"HEX"
	.size	.enum.HEX, 4

	.type	$ct.int,@object                 # @"$ct.int"
	.section	".data.$ct.int","awG",@progbits,"$ct.int",comdat
	.weak	$ct.int
	.p2align	3, 0x0
$ct.int:
	.byte	2                               # 0x2
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.int, 48

	.type	$ct.std.io.FloatFormatting,@object # @"$ct.std.io.FloatFormatting"
	.section	".data.$ct.std.io.FloatFormatting","awG",@progbits,"$ct.std.io.FloatFormatting",comdat
	.weak	$ct.std.io.FloatFormatting
	.p2align	3, 0x0
$ct.std.io.FloatFormatting:
	.byte	8                               # 0x8
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	($ct.int)
	.quad	4                               # 0x4
	.quad	.enum.FLOAT
	.quad	5                               # 0x5
	.quad	.enum.EXPONENTIAL
	.quad	11                              # 0xb
	.quad	.enum.ADAPTIVE
	.quad	8                               # 0x8
	.quad	.enum.HEX
	.quad	3                               # 0x3
	.size	$ct.std.io.FloatFormatting, 112

	.type	.enum.SET,@object               # @.enum.SET
	.section	.rodata,"a",@progbits
.enum.SET:
	.asciz	"SET"
	.size	.enum.SET, 4

	.type	.enum.CURSOR,@object            # @.enum.CURSOR
.enum.CURSOR:
	.asciz	"CURSOR"
	.size	.enum.CURSOR, 7

	.type	.enum.END,@object               # @.enum.END
.enum.END:
	.asciz	"END"
	.size	.enum.END, 4

	.type	$ct.std.io.Seek,@object         # @"$ct.std.io.Seek"
	.section	".data.$ct.std.io.Seek","awG",@progbits,"$ct.std.io.Seek",comdat
	.weak	$ct.std.io.Seek
	.p2align	3, 0x0
$ct.std.io.Seek:
	.byte	8                               # 0x8
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	($ct.int)
	.quad	3                               # 0x3
	.quad	.enum.SET
	.quad	3                               # 0x3
	.quad	.enum.CURSOR
	.quad	6                               # 0x6
	.quad	.enum.END
	.quad	3                               # 0x3
	.size	$ct.std.io.Seek, 96

	.type	.panic_msg,@object              # @.panic_msg
	.section	.rodata,"a",@progbits
.panic_msg:
	.asciz	"Reference parameter 'self' was passed a null pointer argument."
	.size	.panic_msg, 63

	.type	.file,@object                   # @.file
.file:
	.asciz	"formatter.c3"
	.size	.file, 13

	.type	.func,@object                   # @.func
.func:
	.asciz	"printf"
	.size	.func, 7

	.type	.func.2,@object                 # @.func.2
.func.2:
	.asciz	"init"
	.size	.func.2, 5

	.type	.panic_msg.3,@object            # @.panic_msg.3
.panic_msg.3:
	.asciz	"Dereference of null pointer, 'self' was null."
	.size	.panic_msg.3, 46

	.type	$ct.ulong,@object               # @"$ct.ulong"
	.section	".data.$ct.ulong","awG",@progbits,"$ct.ulong",comdat
	.weak	$ct.ulong
	.p2align	3, 0x0
$ct.ulong:
	.byte	3                               # 0x3
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.ulong, 48

	.type	.panic_msg.4,@object            # @.panic_msg.4
	.section	.rodata,"a",@progbits
.panic_msg.4:
	.asciz	"Unaligned access: ptr %% %s = %s, use @unaligned_load / @unaligned_store for unaligned access."
	.size	.panic_msg.4, 95

	.type	.func.5,@object                 # @.func.5
.func.5:
	.asciz	"out"
	.size	.func.5, 4

	.type	.panic_msg.6,@object            # @.panic_msg.6
.panic_msg.6:
	.asciz	"Calling null function pointer, 'self.out_fn' was null."
	.size	.panic_msg.6, 55

	.type	.func.7,@object                 # @.func.7
.func.7:
	.asciz	"print_with_function"
	.size	.func.7, 20

	.type	$sel.to_format,@object          # @"$sel.to_format"
	.section	".rodata.$sel.to_format","aG",@progbits,"$sel.to_format",comdat
	.weak	$sel.to_format
$sel.to_format:
	.asciz	"to_format"
	.size	$sel.to_format, 10

	.type	.L.str,@object                  # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"(null)"
	.size	.L.str, 7

	.type	.panic_msg.8,@object            # @.panic_msg.8
	.section	.rodata,"a",@progbits
.panic_msg.8:
	.asciz	"No method 'to_format' could be found on target"
	.size	.panic_msg.8, 47

	.type	$sel.to_constant_string,@object # @"$sel.to_constant_string"
	.section	".rodata.$sel.to_constant_string","aG",@progbits,"$sel.to_constant_string",comdat
	.weak	$sel.to_constant_string
$sel.to_constant_string:
	.asciz	"to_constant_string"
	.size	$sel.to_constant_string, 19

	.type	.L.str.9,@object                # @.str.9
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.9:
	.asciz	"(null)"
	.size	.L.str.9, 7

	.type	.panic_msg.10,@object           # @.panic_msg.10
	.section	.rodata,"a",@progbits
.panic_msg.10:
	.asciz	"No method 'to_constant_string' could be found on target"
	.size	.panic_msg.10, 56

	.type	std.core.builtin.NOT_FOUND,@object # @std.core.builtin.NOT_FOUND
	.section	.data.rel.ro.std.core.builtin.NOT_FOUND,"awG",@progbits,std.core.builtin.NOT_FOUND,comdat
	.weak	std.core.builtin.NOT_FOUND
	.p2align	3, 0x0
std.core.builtin.NOT_FOUND:
	.quad	std.core.builtin.NOT_FOUND.nameof
	.quad	18                              # 0x12
	.size	std.core.builtin.NOT_FOUND, 16

	.type	std.core.builtin.NOT_FOUND.nameof,@object # @std.core.builtin.NOT_FOUND.nameof
	.section	.rodata,"a",@progbits
std.core.builtin.NOT_FOUND.nameof:
	.asciz	"builtin::NOT_FOUND"
	.size	std.core.builtin.NOT_FOUND.nameof, 19

	.type	.func.11,@object                # @.func.11
.func.11:
	.asciz	"out_unknown"
	.size	.func.11, 12

	.type	.L.str.12,@object               # @.str.12
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.12:
	.asciz	"<"
	.size	.L.str.12, 2

	.type	.L.str.13,@object               # @.str.13
.L.str.13:
	.asciz	" type:"
	.size	.L.str.13, 7

	.type	.L.str.14,@object               # @.str.14
.L.str.14:
	.asciz	", addr:"
	.size	.L.str.14, 8

	.type	.L.str.15,@object               # @.str.15
.L.str.15:
	.asciz	">"
	.size	.L.str.15, 2

	.type	.func.16,@object                # @.func.16
	.section	.rodata,"a",@progbits
.func.16:
	.asciz	"out_str"
	.size	.func.16, 8

	.type	.L.str.17,@object               # @.str.17
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.17:
	.asciz	"typeid"
	.size	.L.str.17, 7

	.type	.L.str.18,@object               # @.str.18
.L.str.18:
	.asciz	"void"
	.size	.L.str.18, 5

	.type	.panic_msg.19,@object           # @.panic_msg.19
	.section	.rodata,"a",@progbits
.panic_msg.19:
	.asciz	"Dereference of null pointer, '(fault*)arg.ptr' was null."
	.size	.panic_msg.19, 57

	.type	.L.str.20,@object               # @.str.20
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.20:
	.asciz	"(empty-fault)"
	.size	.L.str.20, 14

	.type	.panic_msg.21,@object           # @.panic_msg.21
	.section	.rodata,"a",@progbits
.panic_msg.21:
	.asciz	"Dereference of null pointer, '(any*)arg' was null."
	.size	.panic_msg.21, 51

	.type	.L.str.22,@object               # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"(empty-interface)"
	.size	.L.str.22, 18

	.type	.L.str.23,@object               # @.str.23
.L.str.23:
	.asciz	"(empty-any)"
	.size	.L.str.23, 12

	.type	.L.str.24,@object               # @.str.24
.L.str.24:
	.asciz	"Unreachable statement reached."
	.size	.L.str.24, 31

	.type	.L.str.25,@object               # @.str.25
.L.str.25:
	.asciz	"formatter.c3"
	.size	.L.str.25, 13

	.type	.L.str.26,@object               # @.str.26
.L.str.26:
	.asciz	"Formatter.out_str"
	.size	.L.str.26, 18

	.type	.L.str.27,@object               # @.str.27
.L.str.27:
	.asciz	"<INVALID>"
	.size	.L.str.27, 10

	.type	.L.str.28,@object               # @.str.28
.L.str.28:
	.asciz	"ERR"
	.size	.L.str.28, 4

	.type	.panic_msg.29,@object           # @.panic_msg.29
	.section	.rodata,"a",@progbits
.panic_msg.29:
	.asciz	"Dereference of null pointer, '(bool*)arg.ptr' was null."
	.size	.panic_msg.29, 56

	.type	.L.str.30,@object               # @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	"true"
	.size	.L.str.30, 5

	.type	.L.str.31,@object               # @.str.31
.L.str.31:
	.asciz	"false"
	.size	.L.str.31, 6

	.type	.panic_msg.32,@object           # @.panic_msg.32
	.section	.rodata,"a",@progbits
.panic_msg.32:
	.asciz	"@require \"$Type.kindof.is_int()\" violated: 'Type was not an integer'."
	.size	.panic_msg.32, 70

	.type	.panic_msg.33,@object           # @.panic_msg.33
.panic_msg.33:
	.asciz	"@require \"v.type.kindof == ENUM\" violated: 'Value was not an enum'."
	.size	.panic_msg.33, 68

	.type	.panic_msg.34,@object           # @.panic_msg.34
.panic_msg.34:
	.asciz	"Called a method on a null value."
	.size	.panic_msg.34, 33

	.type	.file.35,@object                # @.file.35
.file.35:
	.asciz	"builtin.c3"
	.size	.file.35, 11

	.type	.panic_msg.36,@object           # @.panic_msg.36
.panic_msg.36:
	.asciz	"Attempted to access 'inner' on non composite type"
	.size	.panic_msg.36, 50

	.type	.file.37,@object                # @.file.37
.file.37:
	.asciz	"types.c3"
	.size	.file.37, 9

	.type	.panic_msg.38,@object           # @.panic_msg.38
.panic_msg.38:
	.asciz	"@require \"v.type.kindof.is_int()\" violated: 'Value was not an integer'."
	.size	.panic_msg.38, 72

	.type	$ct.ichar,@object               # @"$ct.ichar"
	.section	".data.$ct.ichar","awG",@progbits,"$ct.ichar",comdat
	.weak	$ct.ichar
	.p2align	3, 0x0
$ct.ichar:
	.byte	2                               # 0x2
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	1                               # 0x1
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.ichar, 48

	.type	.panic_msg.39,@object           # @.panic_msg.39
	.section	.rodata,"a",@progbits
.panic_msg.39:
	.asciz	"Dereference of null pointer, '(char*)v.ptr' was null."
	.size	.panic_msg.39, 54

	.type	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE,@object # @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE
	.section	.data.rel.ro.std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE,"awG",@progbits,std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE,comdat
	.weak	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE
	.p2align	3, 0x0
std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE:
	.quad	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof
	.quad	34                              # 0x22
	.size	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE, 16

	.type	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof,@object # @std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof
	.section	.rodata,"a",@progbits
std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof:
	.asciz	"types::VALUE_OUT_OF_UNSIGNED_RANGE"
	.size	std.core.types.VALUE_OUT_OF_UNSIGNED_RANGE.nameof, 35

	.type	$ct.short,@object               # @"$ct.short"
	.section	".data.$ct.short","awG",@progbits,"$ct.short",comdat
	.weak	$ct.short
	.p2align	3, 0x0
$ct.short:
	.byte	2                               # 0x2
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	2                               # 0x2
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.short, 48

	.type	.panic_msg.40,@object           # @.panic_msg.40
	.section	.rodata,"a",@progbits
.panic_msg.40:
	.asciz	"Dereference of null pointer, '(short*)v.ptr' was null."
	.size	.panic_msg.40, 55

	.type	std.core.types.VALUE_OUT_OF_RANGE,@object # @std.core.types.VALUE_OUT_OF_RANGE
	.section	.data.rel.ro.std.core.types.VALUE_OUT_OF_RANGE,"awG",@progbits,std.core.types.VALUE_OUT_OF_RANGE,comdat
	.weak	std.core.types.VALUE_OUT_OF_RANGE
	.p2align	3, 0x0
std.core.types.VALUE_OUT_OF_RANGE:
	.quad	std.core.types.VALUE_OUT_OF_RANGE.nameof
	.quad	25                              # 0x19
	.size	std.core.types.VALUE_OUT_OF_RANGE, 16

	.type	std.core.types.VALUE_OUT_OF_RANGE.nameof,@object # @std.core.types.VALUE_OUT_OF_RANGE.nameof
	.section	.rodata,"a",@progbits
std.core.types.VALUE_OUT_OF_RANGE.nameof:
	.asciz	"types::VALUE_OUT_OF_RANGE"
	.size	std.core.types.VALUE_OUT_OF_RANGE.nameof, 26

	.type	.panic_msg.41,@object           # @.panic_msg.41
.panic_msg.41:
	.asciz	"Dereference of null pointer, '(int*)v.ptr' was null."
	.size	.panic_msg.41, 53

	.type	$ct.long,@object                # @"$ct.long"
	.section	".data.$ct.long","awG",@progbits,"$ct.long",comdat
	.weak	$ct.long
	.p2align	3, 0x0
$ct.long:
	.byte	2                               # 0x2
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.long, 48

	.type	.panic_msg.42,@object           # @.panic_msg.42
	.section	.rodata,"a",@progbits
.panic_msg.42:
	.asciz	"Dereference of null pointer, '(long*)v.ptr' was null."
	.size	.panic_msg.42, 54

	.type	$ct.int128,@object              # @"$ct.int128"
	.section	".data.$ct.int128","awG",@progbits,"$ct.int128",comdat
	.weak	$ct.int128
	.p2align	3, 0x0
$ct.int128:
	.byte	2                               # 0x2
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	16                              # 0x10
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.int128, 48

	.type	.panic_msg.43,@object           # @.panic_msg.43
	.section	.rodata,"a",@progbits
.panic_msg.43:
	.asciz	"Dereference of null pointer, '(int128*)v.ptr' was null."
	.size	.panic_msg.43, 56

	.type	$ct.char,@object                # @"$ct.char"
	.section	".data.$ct.char","awG",@progbits,"$ct.char",comdat
	.weak	$ct.char
	.p2align	3, 0x0
$ct.char:
	.byte	3                               # 0x3
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	1                               # 0x1
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.char, 48

	.type	$ct.ushort,@object              # @"$ct.ushort"
	.section	".data.$ct.ushort","awG",@progbits,"$ct.ushort",comdat
	.weak	$ct.ushort
	.p2align	3, 0x0
$ct.ushort:
	.byte	3                               # 0x3
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	2                               # 0x2
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.ushort, 48

	.type	.panic_msg.44,@object           # @.panic_msg.44
	.section	.rodata,"a",@progbits
.panic_msg.44:
	.asciz	"Dereference of null pointer, '(ushort*)v.ptr' was null."
	.size	.panic_msg.44, 56

	.type	.panic_msg.45,@object           # @.panic_msg.45
.panic_msg.45:
	.asciz	"Dereference of null pointer, '(uint*)v.ptr' was null."
	.size	.panic_msg.45, 54

	.type	.panic_msg.46,@object           # @.panic_msg.46
.panic_msg.46:
	.asciz	"Dereference of null pointer, '(ulong*)v.ptr' was null."
	.size	.panic_msg.46, 55

	.type	$ct.uint128,@object             # @"$ct.uint128"
	.section	".data.$ct.uint128","awG",@progbits,"$ct.uint128",comdat
	.weak	$ct.uint128
	.p2align	3, 0x0
$ct.uint128:
	.byte	3                               # 0x3
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	16                              # 0x10
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.uint128, 48

	.type	.panic_msg.47,@object           # @.panic_msg.47
	.section	.rodata,"a",@progbits
.panic_msg.47:
	.asciz	"Dereference of null pointer, '(uint128*)v.ptr' was null."
	.size	.panic_msg.47, 57

	.type	.L.str.48,@object               # @.str.48
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.48:
	.asciz	"Unreachable statement reached."
	.size	.L.str.48, 31

	.type	.L.str.49,@object               # @.str.49
.L.str.49:
	.asciz	"formatter.c3"
	.size	.L.str.49, 13

	.type	.L.str.50,@object               # @.str.50
.L.str.50:
	.asciz	"Formatter.out_str"
	.size	.L.str.50, 18

	.type	$ct.fault,@object               # @"$ct.fault"
	.section	".data.$ct.fault","awG",@progbits,"$ct.fault",comdat
	.weak	$ct.fault
	.p2align	3, 0x0
$ct.fault:
	.byte	6                               # 0x6
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.fault, 48

	.type	.panic_msg.51,@object           # @.panic_msg.51
	.section	.rodata,"a",@progbits
.panic_msg.51:
	.asciz	"Unexpected fault '%s' was unwrapped!"
	.size	.panic_msg.51, 37

	.type	.panic_msg.52,@object           # @.panic_msg.52
.panic_msg.52:
	.asciz	"Attempted to access 'names' on non enum/fault type."
	.size	.panic_msg.52, 52

	.type	.panic_msg.53,@object           # @.panic_msg.53
.panic_msg.53:
	.asciz	"Illegal enum value found, numerical value was %d."
	.size	.panic_msg.53, 50

	.type	.panic_msg.54,@object           # @.panic_msg.54
.panic_msg.54:
	.asciz	"Array index out of bounds (array had size %d, index was %d)"
	.size	.panic_msg.54, 60

	.type	.L.str.55,@object               # @.str.55
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.55:
	.asciz	"struct"
	.size	.L.str.55, 7

	.type	.L.str.56,@object               # @.str.56
.L.str.56:
	.asciz	"union"
	.size	.L.str.56, 6

	.type	.L.str.57,@object               # @.str.57
.L.str.57:
	.asciz	"bitstruct"
	.size	.L.str.57, 10

	.type	.L.str.58,@object               # @.str.58
.L.str.58:
	.asciz	"0x"
	.size	.L.str.58, 3

	.type	$ct.String,@object              # @"$ct.String"
	.section	".data.$ct.String","awG",@progbits,"$ct.String",comdat
	.weak	$ct.String
	.p2align	3, 0x0
$ct.String:
	.byte	18                              # 0x12
	.zero	7
	.quad	($ct.sa$char)
	.quad	0
	.quad	16                              # 0x10
	.quad	($ct.sa$char)
	.quad	0                               # 0x0
	.size	$ct.String, 48

	.type	$ct.sa$char,@object             # @"$ct.sa$char"
	.section	".data.$ct.sa$char","awG",@progbits,"$ct.sa$char",comdat
	.weak	$ct.sa$char
	.p2align	3, 0x0
$ct.sa$char:
	.byte	16                              # 0x10
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	16                              # 0x10
	.quad	($ct.char)
	.quad	0                               # 0x0
	.size	$ct.sa$char, 48

	.type	.panic_msg.59,@object           # @.panic_msg.59
	.section	.rodata,"a",@progbits
.panic_msg.59:
	.asciz	"Dereference of null pointer, '(String*)arg' was null."
	.size	.panic_msg.59, 54

	.type	$ct.std.core.string.ZString,@object # @"$ct.std.core.string.ZString"
	.section	".data.$ct.std.core.string.ZString","awG",@progbits,"$ct.std.core.string.ZString",comdat
	.weak	$ct.std.core.string.ZString
	.p2align	3, 0x0
$ct.std.core.string.ZString:
	.byte	18                              # 0x12
	.zero	7
	.quad	($ct.p$char)
	.quad	0
	.quad	8                               # 0x8
	.quad	($ct.p$char)
	.quad	0                               # 0x0
	.size	$ct.std.core.string.ZString, 48

	.type	$ct.p$char,@object              # @"$ct.p$char"
	.section	".data.$ct.p$char","awG",@progbits,"$ct.p$char",comdat
	.weak	$ct.p$char
	.p2align	3, 0x0
$ct.p$char:
	.byte	19                              # 0x13
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	($ct.char)
	.quad	0                               # 0x0
	.size	$ct.p$char, 48

	.type	.panic_msg.60,@object           # @.panic_msg.60
	.section	.rodata,"a",@progbits
.panic_msg.60:
	.asciz	"Dereference of null pointer, '(ZString*)arg' was null."
	.size	.panic_msg.60, 55

	.type	.L.str.61,@object               # @.str.61
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.61:
	.asciz	"(null)"
	.size	.L.str.61, 7

	.type	$ct.std.core.dstring.DString,@object # @"$ct.std.core.dstring.DString"
	.section	".data.$ct.std.core.dstring.DString","awG",@progbits,"$ct.std.core.dstring.DString",comdat
	.weak	$ct.std.core.dstring.DString
	.p2align	3, 0x0
$ct.std.core.dstring.DString:
	.byte	18                              # 0x12
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	($ct.p$std.core.dstring.DStringOpaque)
	.quad	0                               # 0x0
	.size	$ct.std.core.dstring.DString, 48

	.type	$ct.p$std.core.dstring.DStringOpaque,@object # @"$ct.p$std.core.dstring.DStringOpaque"
	.section	".data.$ct.p$std.core.dstring.DStringOpaque","awG",@progbits,"$ct.p$std.core.dstring.DStringOpaque",comdat
	.weak	$ct.p$std.core.dstring.DStringOpaque
	.p2align	3, 0x0
$ct.p$std.core.dstring.DStringOpaque:
	.byte	19                              # 0x13
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	($ct.std.core.dstring.DStringOpaque)
	.quad	0                               # 0x0
	.size	$ct.p$std.core.dstring.DStringOpaque, 48

	.type	$ct.std.core.dstring.DStringOpaque,@object # @"$ct.std.core.dstring.DStringOpaque"
	.section	".data.$ct.std.core.dstring.DStringOpaque","awG",@progbits,"$ct.std.core.dstring.DStringOpaque",comdat
	.weak	$ct.std.core.dstring.DStringOpaque
	.p2align	3, 0x0
$ct.std.core.dstring.DStringOpaque:
	.byte	18                              # 0x12
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	1                               # 0x1
	.quad	($ct.void)
	.quad	0                               # 0x0
	.size	$ct.std.core.dstring.DStringOpaque, 48

	.type	$ct.void,@object                # @"$ct.void"
	.section	".data.$ct.void","awG",@progbits,"$ct.void",comdat
	.weak	$ct.void
	.p2align	3, 0x0
$ct.void:
	.byte	0                               # 0x0
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	1                               # 0x1
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.void, 48

	.type	.panic_msg.62,@object           # @.panic_msg.62
	.section	.rodata,"a",@progbits
.panic_msg.62:
	.asciz	"Dereference of null pointer, '(DString*)arg' was null."
	.size	.panic_msg.62, 55

	.type	.L.str.63,@object               # @.str.63
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.63:
	.asciz	"(null)"
	.size	.L.str.63, 7

	.type	.panic_msg.64,@object           # @.panic_msg.64
	.section	.rodata,"a",@progbits
.panic_msg.64:
	.asciz	"Dereference of null pointer, 'pointer' was null."
	.size	.panic_msg.64, 49

	.type	.L.str.65,@object               # @.str.65
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.65:
	.asciz	"0x"
	.size	.L.str.65, 3

	.type	.panic_msg.66,@object           # @.panic_msg.66
	.section	.rodata,"a",@progbits
.panic_msg.66:
	.asciz	"Attempted to access 'len' on non array type"
	.size	.panic_msg.66, 44

	.type	.L.str.67,@object               # @.str.67
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.67:
	.asciz	", "
	.size	.L.str.67, 3

	.type	.L.str.68,@object               # @.str.68
.L.str.68:
	.asciz	"[<"
	.size	.L.str.68, 3

	.type	.L.str.69,@object               # @.str.69
.L.str.69:
	.asciz	", "
	.size	.L.str.69, 3

	.type	.L.str.70,@object               # @.str.70
.L.str.70:
	.asciz	">]"
	.size	.L.str.70, 3

	.type	.panic_msg.71,@object           # @.panic_msg.71
	.section	.rodata,"a",@progbits
.panic_msg.71:
	.asciz	"Dereference of null pointer, 'temp' was null."
	.size	.panic_msg.71, 46

	.type	.L.str.72,@object               # @.str.72
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.72:
	.asciz	", "
	.size	.L.str.72, 3

	.type	.L.str.73,@object               # @.str.73
.L.str.73:
	.asciz	"Already handled"
	.size	.L.str.73, 16

	.type	.L.str.74,@object               # @.str.74
.L.str.74:
	.asciz	"formatter.c3"
	.size	.L.str.74, 13

	.type	.L.str.75,@object               # @.str.75
.L.str.75:
	.asciz	"Formatter.out_str"
	.size	.L.str.75, 18

	.type	.L.str.76,@object               # @.str.76
.L.str.76:
	.asciz	"Invalid type"
	.size	.L.str.76, 13

	.type	.func.77,@object                # @.func.77
	.section	.rodata,"a",@progbits
.func.77:
	.asciz	"vprintf"
	.size	.func.77, 8

	.type	.L.str.78,@object               # @.str.78
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.78:
	.asciz	"%ERR"
	.size	.L.str.78, 5

	.type	std.io.INVALID_FORMAT,@object   # @std.io.INVALID_FORMAT
	.section	.data.rel.ro.std.io.INVALID_FORMAT,"awG",@progbits,std.io.INVALID_FORMAT,comdat
	.weak	std.io.INVALID_FORMAT
	.p2align	3, 0x0
std.io.INVALID_FORMAT:
	.quad	std.io.INVALID_FORMAT.nameof
	.quad	18                              # 0x12
	.size	std.io.INVALID_FORMAT, 16

	.type	std.io.INVALID_FORMAT.nameof,@object # @std.io.INVALID_FORMAT.nameof
	.section	.rodata,"a",@progbits
std.io.INVALID_FORMAT.nameof:
	.asciz	"io::INVALID_FORMAT"
	.size	std.io.INVALID_FORMAT.nameof, 19

	.type	.L.str.79,@object               # @.str.79
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.79:
	.asciz	"%ERR"
	.size	.L.str.79, 5

	.type	.L.str.80,@object               # @.str.80
.L.str.80:
	.asciz	"%ERR"
	.size	.L.str.80, 5

	.type	.L.str.81,@object               # @.str.81
.L.str.81:
	.asciz	"<BAD FORMAT>"
	.size	.L.str.81, 13

	.type	.L.str.82,@object               # @.str.82
.L.str.82:
	.asciz	"<BAD FORMAT>"
	.size	.L.str.82, 13

	.type	std.io.NOT_ENOUGH_ARGUMENTS,@object # @std.io.NOT_ENOUGH_ARGUMENTS
	.section	.data.rel.ro.std.io.NOT_ENOUGH_ARGUMENTS,"awG",@progbits,std.io.NOT_ENOUGH_ARGUMENTS,comdat
	.weak	std.io.NOT_ENOUGH_ARGUMENTS
	.p2align	3, 0x0
std.io.NOT_ENOUGH_ARGUMENTS:
	.quad	std.io.NOT_ENOUGH_ARGUMENTS.nameof
	.quad	24                              # 0x18
	.size	std.io.NOT_ENOUGH_ARGUMENTS, 16

	.type	std.io.NOT_ENOUGH_ARGUMENTS.nameof,@object # @std.io.NOT_ENOUGH_ARGUMENTS.nameof
	.section	.rodata,"a",@progbits
std.io.NOT_ENOUGH_ARGUMENTS.nameof:
	.asciz	"io::NOT_ENOUGH_ARGUMENTS"
	.size	std.io.NOT_ENOUGH_ARGUMENTS.nameof, 25

	.type	.file.83,@object                # @.file.83
.file.83:
	.asciz	"formatter_private.c3"
	.size	.file.83, 21

	.type	.L.str.84,@object               # @.str.84
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.84:
	.asciz	"<MISSING>"
	.size	.L.str.84, 10

	.type	std.io.BUFFER_EXCEEDED,@object  # @std.io.BUFFER_EXCEEDED
	.section	.data.rel.ro.std.io.BUFFER_EXCEEDED,"awG",@progbits,std.io.BUFFER_EXCEEDED,comdat
	.weak	std.io.BUFFER_EXCEEDED
	.p2align	3, 0x0
std.io.BUFFER_EXCEEDED:
	.quad	std.io.BUFFER_EXCEEDED.nameof
	.quad	19                              # 0x13
	.size	std.io.BUFFER_EXCEEDED, 16

	.type	std.io.BUFFER_EXCEEDED.nameof,@object # @std.io.BUFFER_EXCEEDED.nameof
	.section	.rodata,"a",@progbits
std.io.BUFFER_EXCEEDED.nameof:
	.asciz	"io::BUFFER_EXCEEDED"
	.size	std.io.BUFFER_EXCEEDED.nameof, 20

	.type	std.io.INTERNAL_BUFFER_EXCEEDED,@object # @std.io.INTERNAL_BUFFER_EXCEEDED
	.section	.data.rel.ro.std.io.INTERNAL_BUFFER_EXCEEDED,"awG",@progbits,std.io.INTERNAL_BUFFER_EXCEEDED,comdat
	.weak	std.io.INTERNAL_BUFFER_EXCEEDED
	.p2align	3, 0x0
std.io.INTERNAL_BUFFER_EXCEEDED:
	.quad	std.io.INTERNAL_BUFFER_EXCEEDED.nameof
	.quad	28                              # 0x1c
	.size	std.io.INTERNAL_BUFFER_EXCEEDED, 16

	.type	std.io.INTERNAL_BUFFER_EXCEEDED.nameof,@object # @std.io.INTERNAL_BUFFER_EXCEEDED.nameof
	.section	.rodata,"a",@progbits
std.io.INTERNAL_BUFFER_EXCEEDED.nameof:
	.asciz	"io::INTERNAL_BUFFER_EXCEEDED"
	.size	std.io.INTERNAL_BUFFER_EXCEEDED.nameof, 29

	.type	std.io.INVALID_ARGUMENT,@object # @std.io.INVALID_ARGUMENT
	.section	.data.rel.ro.std.io.INVALID_ARGUMENT,"awG",@progbits,std.io.INVALID_ARGUMENT,comdat
	.weak	std.io.INVALID_ARGUMENT
	.p2align	3, 0x0
std.io.INVALID_ARGUMENT:
	.quad	std.io.INVALID_ARGUMENT.nameof
	.quad	20                              # 0x14
	.size	std.io.INVALID_ARGUMENT, 16

	.type	std.io.INVALID_ARGUMENT.nameof,@object # @std.io.INVALID_ARGUMENT.nameof
	.section	.rodata,"a",@progbits
std.io.INVALID_ARGUMENT.nameof:
	.asciz	"io::INVALID_ARGUMENT"
	.size	std.io.INVALID_ARGUMENT.nameof, 21

	.type	.L.str.85,@object               # @.str.85
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.85:
	.asciz	"<INVALID>"
	.size	.L.str.85, 10

	.type	.L.str.86,@object               # @.str.86
.L.str.86:
	.asciz	"<INVALID>"
	.size	.L.str.86, 10

	.type	.L.str.87,@object               # @.str.87
.L.str.87:
	.asciz	"<INVALID>"
	.size	.L.str.87, 10

	.type	.L.str.88,@object               # @.str.88
.L.str.88:
	.asciz	"<INVALID>"
	.size	.L.str.88, 10

	.type	$ct.sa$ichar,@object            # @"$ct.sa$ichar"
	.section	".data.$ct.sa$ichar","awG",@progbits,"$ct.sa$ichar",comdat
	.weak	$ct.sa$ichar
	.p2align	3, 0x0
$ct.sa$ichar:
	.byte	16                              # 0x10
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	16                              # 0x10
	.quad	($ct.ichar)
	.quad	0                               # 0x0
	.size	$ct.sa$ichar, 48

	.type	.panic_msg.89,@object           # @.panic_msg.89
	.section	.rodata,"a",@progbits
.panic_msg.89:
	.asciz	"Dereference of null pointer, '(char[]*)current' was null."
	.size	.panic_msg.89, 58

	.type	.panic_msg.90,@object           # @.panic_msg.90
.panic_msg.90:
	.asciz	"Negative value (%d) given for slice length."
	.size	.panic_msg.90, 44

	.type	.panic_msg.91,@object           # @.panic_msg.91
.panic_msg.91:
	.asciz	"Dereference of null pointer, '(char**)current.ptr' was null."
	.size	.panic_msg.91, 61

	.type	.L.str.92,@object               # @.str.92
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.92:
	.asciz	"<INVALID>"
	.size	.L.str.92, 10

	.type	.L.str.93,@object               # @.str.93
.L.str.93:
	.asciz	"<BAD FORMAT>"
	.size	.L.str.93, 13

	.type	.L.str.94,@object               # @.str.94
.L.str.94:
	.asciz	"<INVALID>"
	.size	.L.str.94, 10

	.type	.func.95,@object                # @.func.95
	.section	.rodata,"a",@progbits
.func.95:
	.asciz	"print"
	.size	.func.95, 6

	.type	std.io.XDIGITS_H,@object        # @std.io.XDIGITS_H
	.section	.rodata.std.io.XDIGITS_H,"aG",@progbits,std.io.XDIGITS_H,comdat
	.weak	std.io.XDIGITS_H
	.p2align	4, 0x0
std.io.XDIGITS_H:
	.ascii	"0123456789ABCDEF"
	.size	std.io.XDIGITS_H, 16

	.type	std.io.XDIGITS_L,@object        # @std.io.XDIGITS_L
	.section	.rodata.std.io.XDIGITS_L,"aG",@progbits,std.io.XDIGITS_L,comdat
	.weak	std.io.XDIGITS_L
	.p2align	4, 0x0
std.io.XDIGITS_L:
	.ascii	"0123456789abcdef"
	.size	std.io.XDIGITS_L, 16

	.type	.func.97,@object                # @.func.97
	.section	.rodata,"a",@progbits
.func.97:
	.asciz	"print_hex_chars"
	.size	.func.97, 16

	.type	.panic_msg.98,@object           # @.panic_msg.98
.panic_msg.98:
	.asciz	"Dereference of null pointer, 'is_neg' was null."
	.size	.panic_msg.98, 48

	.type	.func.99,@object                # @.func.99
.func.99:
	.asciz	"int_from_any"
	.size	.func.99, 13

	.type	.panic_msg.100,@object          # @.panic_msg.100
.panic_msg.100:
	.asciz	"Dereference of null pointer, '(void**)arg.ptr' was null."
	.size	.panic_msg.100, 57

	.type	$ct.bool,@object                # @"$ct.bool"
	.section	".data.$ct.bool","awG",@progbits,"$ct.bool",comdat
	.weak	$ct.bool
	.p2align	3, 0x0
$ct.bool:
	.byte	1                               # 0x1
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	1                               # 0x1
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.bool, 48

	.type	.panic_msg.101,@object          # @.panic_msg.101
	.section	.rodata,"a",@progbits
.panic_msg.101:
	.asciz	"Dereference of null pointer, '(bool*)arg' was null."
	.size	.panic_msg.101, 52

	.type	.panic_msg.102,@object          # @.panic_msg.102
.panic_msg.102:
	.asciz	"Dereference of null pointer, '(ichar*)arg' was null."
	.size	.panic_msg.102, 53

	.type	.panic_msg.103,@object          # @.panic_msg.103
.panic_msg.103:
	.asciz	"Dereference of null pointer, '(short*)arg' was null."
	.size	.panic_msg.103, 53

	.type	.panic_msg.104,@object          # @.panic_msg.104
.panic_msg.104:
	.asciz	"Dereference of null pointer, '(int*)arg' was null."
	.size	.panic_msg.104, 51

	.type	.panic_msg.105,@object          # @.panic_msg.105
.panic_msg.105:
	.asciz	"Dereference of null pointer, '(long*)arg' was null."
	.size	.panic_msg.105, 52

	.type	.panic_msg.106,@object          # @.panic_msg.106
.panic_msg.106:
	.asciz	"Dereference of null pointer, '(int128*)arg' was null."
	.size	.panic_msg.106, 54

	.type	.panic_msg.107,@object          # @.panic_msg.107
.panic_msg.107:
	.asciz	"Dereference of null pointer, '(char*)arg' was null."
	.size	.panic_msg.107, 52

	.type	.panic_msg.108,@object          # @.panic_msg.108
.panic_msg.108:
	.asciz	"Dereference of null pointer, '(ushort*)arg' was null."
	.size	.panic_msg.108, 54

	.type	.panic_msg.109,@object          # @.panic_msg.109
.panic_msg.109:
	.asciz	"Dereference of null pointer, '(uint*)arg' was null."
	.size	.panic_msg.109, 52

	.type	.panic_msg.110,@object          # @.panic_msg.110
.panic_msg.110:
	.asciz	"Dereference of null pointer, '(ulong*)arg' was null."
	.size	.panic_msg.110, 53

	.type	.panic_msg.111,@object          # @.panic_msg.111
.panic_msg.111:
	.asciz	"Dereference of null pointer, '(uint128*)arg' was null."
	.size	.panic_msg.111, 55

	.type	$ct.float,@object               # @"$ct.float"
	.section	".data.$ct.float","awG",@progbits,"$ct.float",comdat
	.weak	$ct.float
	.p2align	3, 0x0
$ct.float:
	.byte	4                               # 0x4
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	4                               # 0x4
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.float, 48

	.type	.panic_msg.112,@object          # @.panic_msg.112
	.section	.rodata,"a",@progbits
.panic_msg.112:
	.asciz	"Dereference of null pointer, '(float*)arg' was null."
	.size	.panic_msg.112, 53

	.type	$ct.double,@object              # @"$ct.double"
	.section	".data.$ct.double","awG",@progbits,"$ct.double",comdat
	.weak	$ct.double
	.p2align	3, 0x0
$ct.double:
	.byte	4                               # 0x4
	.zero	7
	.quad	0                               # 0x0
	.quad	0
	.quad	8                               # 0x8
	.quad	0                               # 0x0
	.quad	0                               # 0x0
	.size	$ct.double, 48

	.type	.panic_msg.113,@object          # @.panic_msg.113
	.section	.rodata,"a",@progbits
.panic_msg.113:
	.asciz	"Dereference of null pointer, '(double*)arg' was null."
	.size	.panic_msg.113, 54

	.type	std.io.BAD_FORMAT,@object       # @std.io.BAD_FORMAT
	.section	.data.rel.ro.std.io.BAD_FORMAT,"awG",@progbits,std.io.BAD_FORMAT,comdat
	.weak	std.io.BAD_FORMAT
	.p2align	3, 0x0
std.io.BAD_FORMAT:
	.quad	std.io.BAD_FORMAT.nameof
	.quad	14                              # 0xe
	.size	std.io.BAD_FORMAT, 16

	.type	std.io.BAD_FORMAT.nameof,@object # @std.io.BAD_FORMAT.nameof
	.section	.rodata,"a",@progbits
std.io.BAD_FORMAT.nameof:
	.asciz	"io::BAD_FORMAT"
	.size	std.io.BAD_FORMAT.nameof, 15

	.type	.func.114,@object               # @.func.114
.func.114:
	.asciz	"float_from_any"
	.size	.func.114, 15

	.type	.panic_msg.115,@object          # @.panic_msg.115
.panic_msg.115:
	.asciz	"Dereference of null pointer, 'len_ptr' was null."
	.size	.panic_msg.115, 49

	.type	.func.116,@object               # @.func.116
.func.116:
	.asciz	"simple_atoi"
	.size	.func.116, 12

	.type	.file.117,@object               # @.file.117
.file.117:
	.asciz	"ascii.c3"
	.size	.file.117, 9

	.type	.panic_msg.118,@object          # @.panic_msg.118
.panic_msg.118:
	.asciz	"Dereference of null pointer, '--s' was null."
	.size	.panic_msg.118, 45

	.type	.func.119,@object               # @.func.119
.func.119:
	.asciz	"fmt_u"
	.size	.func.119, 6

	.type	.panic_msg.120,@object          # @.panic_msg.120
.panic_msg.120:
	.asciz	"Dereference of null pointer, 'index_ptr' was null."
	.size	.panic_msg.120, 51

	.type	.func.121,@object               # @.func.121
.func.121:
	.asciz	"printf_parse_format_field"
	.size	.func.121, 26

	.type	.panic_msg.122,@object          # @.panic_msg.122
.panic_msg.122:
	.asciz	"Dereference of null pointer, 'args_index_ptr' was null."
	.size	.panic_msg.122, 56

	.type	.L.str.123,@object              # @.str.123
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.123:
	.asciz	"Unreachable statement reached."
	.size	.L.str.123, 31

	.type	.L.str.124,@object              # @.str.124
.L.str.124:
	.asciz	"formatter_private.c3"
	.size	.L.str.124, 21

	.type	.L.str.125,@object              # @.str.125
.L.str.125:
	.asciz	"printf_parse_format_field"
	.size	.L.str.125, 26

	.type	.func.126,@object               # @.func.126
	.section	.rodata,"a",@progbits
.func.126:
	.asciz	"adjust"
	.size	.func.126, 7

	.type	.func.127,@object               # @.func.127
.func.127:
	.asciz	"out_substr"
	.size	.func.127, 11

	.type	.func.128,@object               # @.func.128
.func.128:
	.asciz	"pad"
	.size	.func.128, 4

	.type	.func.129,@object               # @.func.129
.func.129:
	.asciz	"out_chars"
	.size	.func.129, 10

	.type	.func.130,@object               # @.func.130
.func.130:
	.asciz	"etoa"
	.size	.func.130, 5

	.type	.func.131,@object               # @.func.131
.func.131:
	.asciz	"ftoa"
	.size	.func.131, 5

	.type	.func.132,@object               # @.func.132
.func.132:
	.asciz	"gtoa"
	.size	.func.132, 5

	.type	.func.133,@object               # @.func.133
.func.133:
	.asciz	"atoa"
	.size	.func.133, 5

	.type	.func.134,@object               # @.func.134
.func.134:
	.asciz	"floatformat"
	.size	.func.134, 12

	.type	floatformat.BUF_SIZE,@object    # @floatformat.BUF_SIZE
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2, 0x0
floatformat.BUF_SIZE:
	.long	126                             # 0x7e
	.size	floatformat.BUF_SIZE, 4

	.type	.panic_msg.135,@object          # @.panic_msg.135
	.section	.rodata,"a",@progbits
.panic_msg.135:
	.asciz	"Dereference of null pointer, '($Type*)&expr' was null."
	.size	.panic_msg.135, 55

	.type	.L.str.136,@object              # @.str.136
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.136:
	.asciz	"INF"
	.size	.L.str.136, 4

	.type	.L.str.137,@object              # @.str.137
.L.str.137:
	.asciz	"inf"
	.size	.L.str.137, 4

	.type	.L.str.138,@object              # @.str.138
.L.str.138:
	.asciz	"NAN"
	.size	.L.str.138, 4

	.type	.L.str.139,@object              # @.str.139
.L.str.139:
	.asciz	"nan"
	.size	.L.str.139, 4

	.type	.panic_msg.140,@object          # @.panic_msg.140
	.section	.rodata,"a",@progbits
.panic_msg.140:
	.asciz	"Dereference of null pointer, '--estr' was null."
	.size	.panic_msg.140, 48

	.type	.panic_msg.141,@object          # @.panic_msg.141
.panic_msg.141:
	.asciz	"Dereference of null pointer, 's++' was null."
	.size	.panic_msg.141, 45

	.type	.L.str.142,@object              # @.str.142
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.142:
	.asciz	"0X"
	.size	.L.str.142, 3

	.type	.L.str.143,@object              # @.str.143
.L.str.143:
	.asciz	"0x"
	.size	.L.str.143, 3

	.type	.panic_msg.144,@object          # @.panic_msg.144
	.section	.rodata,"a",@progbits
.panic_msg.144:
	.asciz	"Dereference of null pointer, 'd' was null."
	.size	.panic_msg.144, 43

	.type	.panic_msg.145,@object          # @.panic_msg.145
.panic_msg.145:
	.asciz	"Shift amount out of range (was %s)."
	.size	.panic_msg.145, 36

	.type	.panic_msg.146,@object          # @.panic_msg.146
.panic_msg.146:
	.asciz	"Dereference of null pointer, '--a' was null."
	.size	.panic_msg.146, 45

	.type	.panic_msg.147,@object          # @.panic_msg.147
.panic_msg.147:
	.asciz	"Dereference of null pointer, 'a' was null."
	.size	.panic_msg.147, 43

	.type	.panic_msg.148,@object          # @.panic_msg.148
.panic_msg.148:
	.asciz	"% by zero."
	.size	.panic_msg.148, 11

	.type	.panic_msg.149,@object          # @.panic_msg.149
.panic_msg.149:
	.asciz	"Division by zero."
	.size	.panic_msg.149, 18

	.type	.panic_msg.150,@object          # @.panic_msg.150
.panic_msg.150:
	.asciz	"Dereference of null pointer, 'd--' was null."
	.size	.panic_msg.150, 45

	.type	.func.151,@object               # @.func.151
.func.151:
	.asciz	"ntoa"
	.size	.func.151, 5

	.type	.func.152,@object               # @.func.152
.func.152:
	.asciz	"ntoa_format"
	.size	.func.152, 12

	.type	.L.str.153,@object              # @.str.153
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.153:
	.asciz	"Unreachable statement reached."
	.size	.L.str.153, 31

	.type	.L.str.154,@object              # @.str.154
.L.str.154:
	.asciz	"formatter_private.c3"
	.size	.L.str.154, 21

	.type	.L.str.155,@object              # @.str.155
.L.str.155:
	.asciz	"Formatter.ntoa_format"
	.size	.L.str.155, 22

	.type	.panic_msg.156,@object          # @.panic_msg.156
	.section	.rodata,"a",@progbits
.panic_msg.156:
	.asciz	"Index exceeds array length (array had size %d, index was %d)."
	.size	.panic_msg.156, 62

	.type	.panic_msg.157,@object          # @.panic_msg.157
.panic_msg.157:
	.asciz	"End index out of bounds (end index of %d exceeds size of %d)"
	.size	.panic_msg.157, 61

	.type	.func.158,@object               # @.func.158
.func.158:
	.asciz	"ntoa_any"
	.size	.func.158, 9

	.type	.func.159,@object               # @.func.159
.func.159:
	.asciz	"out_char"
	.size	.func.159, 9

	.type	.L.str.160,@object              # @.str.160
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.160:
	.asciz	"<NOT CHAR>"
	.size	.L.str.160, 11

	.type	.L.str.161,@object              # @.str.161
.L.str.161:
	.asciz	"Unreachable statement reached."
	.size	.L.str.161, 31

	.type	.L.str.162,@object              # @.str.162
.L.str.162:
	.asciz	"formatter_private.c3"
	.size	.L.str.162, 21

	.type	.L.str.163,@object              # @.str.163
.L.str.163:
	.asciz	"Formatter.out_char"
	.size	.L.str.163, 19

	.type	.func.164,@object               # @.func.164
	.section	.rodata,"a",@progbits
.func.164:
	.asciz	"out_reverse"
	.size	.func.164, 12

	.type	$sel.write_byte,@object         # @"$sel.write_byte"
	.section	".rodata.$sel.write_byte","aG",@progbits,"$sel.write_byte",comdat
	.weak	$sel.write_byte
$sel.write_byte:
	.asciz	"write_byte"
	.size	$sel.write_byte, 11

	.type	.panic_msg.165,@object          # @.panic_msg.165
	.section	.rodata,"a",@progbits
.panic_msg.165:
	.asciz	"Dereference of null pointer, 'stream' was null."
	.size	.panic_msg.165, 48

	.type	.file.166,@object               # @.file.166
.file.166:
	.asciz	"io.c3"
	.size	.file.166, 6

	.type	.func.167,@object               # @.func.167
.func.167:
	.asciz	"out_putstream_fn"
	.size	.func.167, 17

	.type	.panic_msg.168,@object          # @.panic_msg.168
.panic_msg.168:
	.asciz	"No method 'write_byte' could be found on target"
	.size	.panic_msg.168, 48

	.type	.panic_msg.169,@object          # @.panic_msg.169
.panic_msg.169:
	.asciz	"@require \"self.file != null\" violated: 'File must be initialized'."
	.size	.panic_msg.169, 67

	.type	.func.170,@object               # @.func.170
.func.170:
	.asciz	"printfn"
	.size	.func.170, 8

	.type	.panic_msg.171,@object          # @.panic_msg.171
.panic_msg.171:
	.asciz	"@require \"self.file != null\" violated."
	.size	.panic_msg.171, 39

	.type	.func.172,@object               # @.func.172
.func.172:
	.asciz	"eprintfn"
	.size	.func.172, 9

	.type	stdout.file,@object             # @stdout.file
	.local	stdout.file
	.comm	stdout.file,8,8
	.type	stderr.file,@object             # @stderr.file
	.local	stderr.file
	.comm	stderr.file,8,8
	.section	.debug_abbrev,"",@progbits
	.byte	1                               # Abbreviation Code
	.byte	17                              # DW_TAG_compile_unit
	.byte	1                               # DW_CHILDREN_yes
	.byte	37                              # DW_AT_producer
	.byte	14                              # DW_FORM_strp
	.byte	19                              # DW_AT_language
	.byte	5                               # DW_FORM_data2
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	16                              # DW_AT_stmt_list
	.byte	23                              # DW_FORM_sec_offset
	.byte	27                              # DW_AT_comp_dir
	.byte	14                              # DW_FORM_strp
	.ascii	"\264B"                         # DW_AT_GNU_pubnames
	.byte	25                              # DW_FORM_flag_present
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	2                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	3                               # Abbreviation Code
	.byte	1                               # DW_TAG_array_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	4                               # Abbreviation Code
	.byte	33                              # DW_TAG_subrange_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	34                              # DW_AT_lower_bound
	.byte	13                              # DW_FORM_sdata
	.byte	55                              # DW_AT_count
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	5                               # Abbreviation Code
	.byte	36                              # DW_TAG_base_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	62                              # DW_AT_encoding
	.byte	11                              # DW_FORM_data1
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	6                               # Abbreviation Code
	.byte	36                              # DW_TAG_base_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	62                              # DW_AT_encoding
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	7                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	8                               # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	9                               # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	10                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	56                              # DW_AT_data_member_location
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	11                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	12                              # Abbreviation Code
	.byte	15                              # DW_TAG_pointer_type
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	51                              # DW_AT_address_class
	.byte	6                               # DW_FORM_data4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	13                              # Abbreviation Code
	.byte	4                               # DW_TAG_enumeration_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	14                              # Abbreviation Code
	.byte	40                              # DW_TAG_enumerator
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	28                              # DW_AT_const_value
	.byte	13                              # DW_FORM_sdata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	15                              # Abbreviation Code
	.byte	4                               # DW_TAG_enumeration_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	16                              # Abbreviation Code
	.byte	40                              # DW_TAG_enumerator
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	28                              # DW_AT_const_value
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	17                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	18                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	19                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	20                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	21                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	22                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	23                              # Abbreviation Code
	.byte	15                              # DW_TAG_pointer_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	51                              # DW_AT_address_class
	.byte	6                               # DW_FORM_data4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	24                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	56                              # DW_AT_data_member_location
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	25                              # Abbreviation Code
	.byte	22                              # DW_TAG_typedef
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	26                              # Abbreviation Code
	.byte	21                              # DW_TAG_subroutine_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	27                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	28                              # Abbreviation Code
	.byte	19                              # DW_TAG_structure_type
	.byte	1                               # DW_CHILDREN_yes
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	11                              # DW_AT_byte_size
	.byte	11                              # DW_FORM_data1
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	29                              # Abbreviation Code
	.byte	13                              # DW_TAG_member
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	56                              # DW_AT_data_member_location
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	30                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	0                               # DW_CHILDREN_no
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	31                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	32                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	0                               # DW_CHILDREN_no
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	33                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	34                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	35                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	36                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	37                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	38                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	39                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	32                              # DW_AT_inline
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	40                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	41                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	42                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	11                              # DW_FORM_data1
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	43                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	44                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	45                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	46                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	0                               # DW_CHILDREN_no
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	47                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	48                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	49                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	0                               # DW_CHILDREN_no
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	11                              # DW_FORM_data1
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	50                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	1                               # DW_CHILDREN_yes
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	11                              # DW_FORM_data1
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	51                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	0                               # DW_CHILDREN_no
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	11                              # DW_FORM_data1
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	52                              # Abbreviation Code
	.byte	11                              # DW_TAG_lexical_block
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	53                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	54                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	55                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	56                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	11                              # DW_FORM_data1
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	57                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.ascii	"\210\001"                      # DW_AT_alignment
	.byte	15                              # DW_FORM_udata
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	58                              # Abbreviation Code
	.byte	52                              # DW_TAG_variable
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	59                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	60                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	63                              # DW_AT_external
	.byte	25                              # DW_FORM_flag_present
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	61                              # Abbreviation Code
	.byte	5                               # DW_TAG_formal_parameter
	.byte	0                               # DW_CHILDREN_no
	.byte	2                               # DW_AT_location
	.byte	24                              # DW_FORM_exprloc
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	62                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	0                               # DW_CHILDREN_no
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	63                              # Abbreviation Code
	.byte	29                              # DW_TAG_inlined_subroutine
	.byte	0                               # DW_CHILDREN_no
	.byte	49                              # DW_AT_abstract_origin
	.byte	19                              # DW_FORM_ref4
	.byte	85                              # DW_AT_ranges
	.byte	23                              # DW_FORM_sec_offset
	.byte	88                              # DW_AT_call_file
	.byte	11                              # DW_FORM_data1
	.byte	89                              # DW_AT_call_line
	.byte	5                               # DW_FORM_data2
	.byte	87                              # DW_AT_call_column
	.byte	11                              # DW_FORM_data1
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	64                              # Abbreviation Code
	.byte	46                              # DW_TAG_subprogram
	.byte	1                               # DW_CHILDREN_yes
	.byte	17                              # DW_AT_low_pc
	.byte	1                               # DW_FORM_addr
	.byte	18                              # DW_AT_high_pc
	.byte	6                               # DW_FORM_data4
	.byte	64                              # DW_AT_frame_base
	.byte	24                              # DW_FORM_exprloc
	.byte	110                             # DW_AT_linkage_name
	.byte	14                              # DW_FORM_strp
	.byte	3                               # DW_AT_name
	.byte	14                              # DW_FORM_strp
	.byte	58                              # DW_AT_decl_file
	.byte	11                              # DW_FORM_data1
	.byte	59                              # DW_AT_decl_line
	.byte	5                               # DW_FORM_data2
	.byte	39                              # DW_AT_prototyped
	.byte	25                              # DW_FORM_flag_present
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	65                              # Abbreviation Code
	.byte	33                              # DW_TAG_subrange_type
	.byte	0                               # DW_CHILDREN_no
	.byte	73                              # DW_AT_type
	.byte	19                              # DW_FORM_ref4
	.byte	34                              # DW_AT_lower_bound
	.byte	13                              # DW_FORM_sdata
	.byte	55                              # DW_AT_count
	.byte	5                               # DW_FORM_data2
	.byte	0                               # EOM(1)
	.byte	0                               # EOM(2)
	.byte	0                               # EOM(3)
	.section	.debug_info,"",@progbits
.Lcu_begin0:
	.long	.Ldebug_info_end0-.Ldebug_info_start0 # Length of Unit
.Ldebug_info_start0:
	.short	4                               # DWARF version number
	.long	.debug_abbrev                   # Offset Into Abbrev. Section
	.byte	8                               # Address Size (in bytes)
	.byte	1                               # Abbrev [1] 0xb:0x4092 DW_TAG_compile_unit
	.long	.Linfo_string0                  # DW_AT_producer
	.short	29                              # DW_AT_language
	.long	.Linfo_string1                  # DW_AT_name
	.long	.Lline_table_start0             # DW_AT_stmt_list
	.long	.Linfo_string2                  # DW_AT_comp_dir
                                        # DW_AT_GNU_pubnames
	.quad	0                               # DW_AT_low_pc
	.long	.Ldebug_ranges186               # DW_AT_ranges
	.byte	2                               # Abbrev [2] 0x2a:0x1a DW_TAG_variable
	.long	.Linfo_string3                  # DW_AT_name
	.long	68                              # DW_AT_type
                                        # DW_AT_external
	.byte	1                               # DW_AT_decl_file
	.byte	4                               # DW_AT_decl_line
	.byte	2                               # DW_AT_alignment
	.byte	9                               # DW_AT_location
	.byte	3
	.quad	std.io.XDIGITS_H
	.long	.Linfo_string6                  # DW_AT_linkage_name
	.byte	3                               # Abbrev [3] 0x44:0xd DW_TAG_array_type
	.long	81                              # DW_AT_type
	.byte	4                               # Abbrev [4] 0x49:0x7 DW_TAG_subrange_type
	.long	88                              # DW_AT_type
	.byte	0                               # DW_AT_lower_bound
	.byte	16                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	5                               # Abbrev [5] 0x51:0x7 DW_TAG_base_type
	.long	.Linfo_string4                  # DW_AT_name
	.byte	8                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	6                               # Abbrev [6] 0x58:0x7 DW_TAG_base_type
	.long	.Linfo_string5                  # DW_AT_name
	.byte	8                               # DW_AT_byte_size
	.byte	7                               # DW_AT_encoding
	.byte	2                               # Abbrev [2] 0x5f:0x1a DW_TAG_variable
	.long	.Linfo_string7                  # DW_AT_name
	.long	68                              # DW_AT_type
                                        # DW_AT_external
	.byte	1                               # DW_AT_decl_file
	.byte	5                               # DW_AT_decl_line
	.byte	2                               # DW_AT_alignment
	.byte	9                               # DW_AT_location
	.byte	3
	.quad	std.io.XDIGITS_L
	.long	.Linfo_string8                  # DW_AT_linkage_name
	.byte	7                               # Abbrev [7] 0x79:0x19 DW_TAG_variable
	.long	.Linfo_string9                  # DW_AT_name
	.long	146                             # DW_AT_type
	.byte	1                               # DW_AT_decl_file
	.byte	214                             # DW_AT_decl_line
	.byte	9                               # DW_AT_location
	.byte	3
	.quad	floatformat.BUF_SIZE
	.long	.Linfo_string11                 # DW_AT_linkage_name
	.byte	5                               # Abbrev [5] 0x92:0x7 DW_TAG_base_type
	.long	.Linfo_string10                 # DW_AT_name
	.byte	5                               # DW_AT_encoding
	.byte	4                               # DW_AT_byte_size
	.byte	8                               # Abbrev [8] 0x99:0x1b DW_TAG_variable
	.long	.Linfo_string12                 # DW_AT_name
	.long	180                             # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.short	404                             # DW_AT_decl_line
	.byte	1                               # DW_AT_alignment
	.byte	9                               # DW_AT_location
	.byte	3
	.quad	stdout.file
	.long	.Linfo_string16                 # DW_AT_linkage_name
	.byte	9                               # Abbrev [9] 0xb4:0x17 DW_TAG_structure_type
	.long	.Linfo_string15                 # DW_AT_name
	.byte	8                               # DW_AT_byte_size
	.byte	2                               # DW_AT_decl_file
	.byte	4                               # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	10                              # Abbrev [10] 0xbd:0xd DW_TAG_member
	.long	.Linfo_string12                 # DW_AT_name
	.long	203                             # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.byte	6                               # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	11                              # Abbrev [11] 0xcb:0xc DW_TAG_typedef
	.long	215                             # DW_AT_type
	.long	.Linfo_string14                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	368                             # DW_AT_decl_line
	.byte	12                              # Abbrev [12] 0xd7:0x9 DW_TAG_pointer_type
	.long	.Linfo_string13                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	8                               # Abbrev [8] 0xe0:0x1b DW_TAG_variable
	.long	.Linfo_string12                 # DW_AT_name
	.long	180                             # DW_AT_type
	.byte	2                               # DW_AT_decl_file
	.short	416                             # DW_AT_decl_line
	.byte	1                               # DW_AT_alignment
	.byte	9                               # DW_AT_location
	.byte	3
	.quad	stderr.file
	.long	.Linfo_string17                 # DW_AT_linkage_name
	.byte	13                              # Abbrev [13] 0xfb:0x26 DW_TAG_enumeration_type
	.long	146                             # DW_AT_type
	.long	.Linfo_string22                 # DW_AT_name
	.byte	4                               # DW_AT_byte_size
	.byte	1                               # DW_AT_decl_file
	.byte	198                             # DW_AT_decl_line
	.byte	4                               # DW_AT_alignment
	.byte	14                              # Abbrev [14] 0x108:0x6 DW_TAG_enumerator
	.long	.Linfo_string18                 # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	14                              # Abbrev [14] 0x10e:0x6 DW_TAG_enumerator
	.long	.Linfo_string19                 # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	14                              # Abbrev [14] 0x114:0x6 DW_TAG_enumerator
	.long	.Linfo_string20                 # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	14                              # Abbrev [14] 0x11a:0x6 DW_TAG_enumerator
	.long	.Linfo_string21                 # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	15                              # Abbrev [15] 0x121:0x8d DW_TAG_enumeration_type
	.long	81                              # DW_AT_type
	.long	.Linfo_string43                 # DW_AT_name
	.byte	1                               # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.short	375                             # DW_AT_decl_line
	.byte	1                               # DW_AT_alignment
	.byte	16                              # Abbrev [16] 0x12f:0x6 DW_TAG_enumerator
	.long	.Linfo_string23                 # DW_AT_name
	.byte	0                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x135:0x6 DW_TAG_enumerator
	.long	.Linfo_string24                 # DW_AT_name
	.byte	1                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x13b:0x6 DW_TAG_enumerator
	.long	.Linfo_string25                 # DW_AT_name
	.byte	2                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x141:0x6 DW_TAG_enumerator
	.long	.Linfo_string26                 # DW_AT_name
	.byte	3                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x147:0x6 DW_TAG_enumerator
	.long	.Linfo_string18                 # DW_AT_name
	.byte	4                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x14d:0x6 DW_TAG_enumerator
	.long	.Linfo_string27                 # DW_AT_name
	.byte	5                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x153:0x6 DW_TAG_enumerator
	.long	.Linfo_string28                 # DW_AT_name
	.byte	6                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x159:0x6 DW_TAG_enumerator
	.long	.Linfo_string29                 # DW_AT_name
	.byte	7                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x15f:0x6 DW_TAG_enumerator
	.long	.Linfo_string30                 # DW_AT_name
	.byte	8                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x165:0x6 DW_TAG_enumerator
	.long	.Linfo_string31                 # DW_AT_name
	.byte	9                               # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x16b:0x6 DW_TAG_enumerator
	.long	.Linfo_string32                 # DW_AT_name
	.byte	10                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x171:0x6 DW_TAG_enumerator
	.long	.Linfo_string33                 # DW_AT_name
	.byte	11                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x177:0x6 DW_TAG_enumerator
	.long	.Linfo_string34                 # DW_AT_name
	.byte	12                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x17d:0x6 DW_TAG_enumerator
	.long	.Linfo_string35                 # DW_AT_name
	.byte	13                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x183:0x6 DW_TAG_enumerator
	.long	.Linfo_string36                 # DW_AT_name
	.byte	14                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x189:0x6 DW_TAG_enumerator
	.long	.Linfo_string37                 # DW_AT_name
	.byte	15                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x18f:0x6 DW_TAG_enumerator
	.long	.Linfo_string38                 # DW_AT_name
	.byte	16                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x195:0x6 DW_TAG_enumerator
	.long	.Linfo_string39                 # DW_AT_name
	.byte	17                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x19b:0x6 DW_TAG_enumerator
	.long	.Linfo_string40                 # DW_AT_name
	.byte	18                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x1a1:0x6 DW_TAG_enumerator
	.long	.Linfo_string41                 # DW_AT_name
	.byte	19                              # DW_AT_const_value
	.byte	16                              # Abbrev [16] 0x1a7:0x6 DW_TAG_enumerator
	.long	.Linfo_string42                 # DW_AT_name
	.byte	20                              # DW_AT_const_value
	.byte	0                               # End Of Children Mark
	.byte	17                              # Abbrev [17] 0x1ae:0x102 DW_TAG_subprogram
	.long	.Linfo_string44                 # DW_AT_linkage_name
	.long	.Linfo_string45                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	362                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	1                               # DW_AT_inline
	.byte	18                              # Abbrev [18] 0x1bf:0xc DW_TAG_formal_parameter
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	362                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x1cb:0xc DW_TAG_formal_parameter
	.long	.Linfo_string60                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	362                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x1d7:0xc DW_TAG_formal_parameter
	.long	.Linfo_string68                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	362                             # DW_AT_decl_line
	.long	944                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x1e3:0xd DW_TAG_variable
	.long	.Linfo_string74                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	370                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x1f0:0xd DW_TAG_variable
	.long	.Linfo_string75                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	371                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x1fd:0xd DW_TAG_variable
	.long	.Linfo_string76                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	372                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x20a:0xa5 DW_TAG_lexical_block
	.byte	19                              # Abbrev [19] 0x20b:0xd DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	373                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x218:0x96 DW_TAG_lexical_block
	.byte	21                              # Abbrev [21] 0x219:0xc DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	376                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	21                              # Abbrev [21] 0x225:0xc DW_TAG_variable
	.long	.Linfo_string79                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	408                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	21                              # Abbrev [21] 0x231:0xc DW_TAG_variable
	.long	.Linfo_string80                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	430                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x23d:0xd DW_TAG_variable
	.long	.Linfo_string81                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	437                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	21                              # Abbrev [21] 0x24a:0xc DW_TAG_variable
	.long	.Linfo_string82                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	557                             # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	20                              # Abbrev [20] 0x256:0xe DW_TAG_lexical_block
	.byte	21                              # Abbrev [21] 0x257:0xc DW_TAG_variable
	.long	.Linfo_string55                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	423                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x264:0x1e DW_TAG_lexical_block
	.byte	19                              # Abbrev [19] 0x265:0xd DW_TAG_variable
	.long	.Linfo_string84                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	489                             # DW_AT_decl_line
	.long	885                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x272:0xf DW_TAG_lexical_block
	.byte	19                              # Abbrev [19] 0x273:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	511                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x282:0xf DW_TAG_lexical_block
	.byte	19                              # Abbrev [19] 0x283:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	525                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x291:0x1c DW_TAG_lexical_block
	.byte	19                              # Abbrev [19] 0x292:0xd DW_TAG_variable
	.long	.Linfo_string50                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	532                             # DW_AT_decl_line
	.long	824                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x29f:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	534                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	22                              # Abbrev [22] 0x2b0:0x9 DW_TAG_typedef
	.long	697                             # DW_AT_type
	.long	.Linfo_string47                 # DW_AT_name
	.byte	5                               # Abbrev [5] 0x2b9:0x7 DW_TAG_base_type
	.long	.Linfo_string46                 # DW_AT_name
	.byte	5                               # DW_AT_encoding
	.byte	8                               # DW_AT_byte_size
	.byte	23                              # Abbrev [23] 0x2c0:0xd DW_TAG_pointer_type
	.long	717                             # DW_AT_type
	.long	.Linfo_string59                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	9                               # Abbrev [9] 0x2cd:0x6b DW_TAG_structure_type
	.long	.Linfo_string58                 # DW_AT_name
	.byte	40                              # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	10                              # Abbrev [10] 0x2d6:0xd DW_TAG_member
	.long	.Linfo_string49                 # DW_AT_name
	.long	215                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	65                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	10                              # Abbrev [10] 0x2e3:0xd DW_TAG_member
	.long	.Linfo_string50                 # DW_AT_name
	.long	824                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	66                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	24                              # Abbrev [24] 0x2f0:0x9 DW_TAG_member
	.long	761                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	16                              # DW_AT_data_member_location
	.byte	9                               # Abbrev [9] 0x2f9:0x3e DW_TAG_structure_type
	.long	.Linfo_string57                 # DW_AT_name
	.byte	24                              # DW_AT_byte_size
	.byte	3                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	10                              # Abbrev [10] 0x302:0xd DW_TAG_member
	.long	.Linfo_string52                 # DW_AT_name
	.long	869                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	69                              # DW_AT_decl_line
	.byte	4                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	10                              # Abbrev [10] 0x30f:0xd DW_TAG_member
	.long	.Linfo_string54                 # DW_AT_name
	.long	869                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	70                              # DW_AT_decl_line
	.byte	4                               # DW_AT_alignment
	.byte	4                               # DW_AT_data_member_location
	.byte	10                              # Abbrev [10] 0x31c:0xd DW_TAG_member
	.long	.Linfo_string55                 # DW_AT_name
	.long	869                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	71                              # DW_AT_decl_line
	.byte	4                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	10                              # Abbrev [10] 0x329:0xd DW_TAG_member
	.long	.Linfo_string56                 # DW_AT_name
	.long	688                             # DW_AT_type
	.byte	3                               # DW_AT_decl_file
	.byte	72                              # DW_AT_decl_line
	.byte	8                               # DW_AT_alignment
	.byte	16                              # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	25                              # Abbrev [25] 0x338:0xb DW_TAG_typedef
	.long	835                             # DW_AT_type
	.long	.Linfo_string51                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	16                              # DW_AT_decl_line
	.byte	23                              # Abbrev [23] 0x343:0xd DW_TAG_pointer_type
	.long	848                             # DW_AT_type
	.long	.Linfo_string51                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	26                              # Abbrev [26] 0x350:0x15 DW_TAG_subroutine_type
	.long	688                             # DW_AT_type
                                        # DW_AT_prototyped
	.byte	27                              # Abbrev [27] 0x355:0x5 DW_TAG_formal_parameter
	.long	215                             # DW_AT_type
	.byte	27                              # Abbrev [27] 0x35a:0x5 DW_TAG_formal_parameter
	.long	215                             # DW_AT_type
	.byte	27                              # Abbrev [27] 0x35f:0x5 DW_TAG_formal_parameter
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	5                               # Abbrev [5] 0x365:0x7 DW_TAG_base_type
	.long	.Linfo_string53                 # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	4                               # DW_AT_byte_size
	.byte	22                              # Abbrev [22] 0x36c:0x9 DW_TAG_typedef
	.long	885                             # DW_AT_type
	.long	.Linfo_string67                 # DW_AT_name
	.byte	28                              # Abbrev [28] 0x375:0x1e DW_TAG_structure_type
	.long	.Linfo_string66                 # DW_AT_name
	.byte	16                              # DW_AT_byte_size
	.byte	8                               # DW_AT_alignment
	.byte	29                              # Abbrev [29] 0x37c:0xb DW_TAG_member
	.long	.Linfo_string61                 # DW_AT_name
	.long	915                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	29                              # Abbrev [29] 0x387:0xb DW_TAG_member
	.long	.Linfo_string63                 # DW_AT_name
	.long	928                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x393:0xd DW_TAG_pointer_type
	.long	81                              # DW_AT_type
	.long	.Linfo_string62                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	22                              # Abbrev [22] 0x3a0:0x9 DW_TAG_typedef
	.long	937                             # DW_AT_type
	.long	.Linfo_string65                 # DW_AT_name
	.byte	5                               # Abbrev [5] 0x3a9:0x7 DW_TAG_base_type
	.long	.Linfo_string64                 # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	8                               # DW_AT_byte_size
	.byte	28                              # Abbrev [28] 0x3b0:0x1e DW_TAG_structure_type
	.long	.Linfo_string73                 # DW_AT_name
	.byte	16                              # DW_AT_byte_size
	.byte	8                               # DW_AT_alignment
	.byte	29                              # Abbrev [29] 0x3b7:0xb DW_TAG_member
	.long	.Linfo_string61                 # DW_AT_name
	.long	974                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	29                              # Abbrev [29] 0x3c2:0xb DW_TAG_member
	.long	.Linfo_string63                 # DW_AT_name
	.long	928                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x3ce:0xd DW_TAG_pointer_type
	.long	987                             # DW_AT_type
	.long	.Linfo_string72                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	28                              # Abbrev [28] 0x3db:0x1e DW_TAG_structure_type
	.long	.Linfo_string71                 # DW_AT_name
	.byte	16                              # DW_AT_byte_size
	.byte	8                               # DW_AT_alignment
	.byte	29                              # Abbrev [29] 0x3e2:0xb DW_TAG_member
	.long	.Linfo_string61                 # DW_AT_name
	.long	215                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	29                              # Abbrev [29] 0x3ed:0xb DW_TAG_member
	.long	.Linfo_string69                 # DW_AT_name
	.long	1017                            # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	5                               # Abbrev [5] 0x3f9:0x7 DW_TAG_base_type
	.long	.Linfo_string70                 # DW_AT_name
	.byte	1                               # DW_AT_encoding
	.byte	8                               # DW_AT_byte_size
	.byte	5                               # Abbrev [5] 0x400:0x7 DW_TAG_base_type
	.long	.Linfo_string83                 # DW_AT_name
	.byte	2                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	30                              # Abbrev [30] 0x407:0xd DW_TAG_subprogram
	.long	.Linfo_string85                 # DW_AT_linkage_name
	.long	.Linfo_string85                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	31                              # Abbrev [31] 0x414:0x8c DW_TAG_subprogram
	.long	.Linfo_string86                 # DW_AT_linkage_name
	.long	.Linfo_string87                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	678                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	1                               # DW_AT_inline
	.byte	18                              # Abbrev [18] 0x425:0xc DW_TAG_formal_parameter
	.long	.Linfo_string88                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	679                             # DW_AT_decl_line
	.long	974                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x431:0xc DW_TAG_formal_parameter
	.long	.Linfo_string89                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	679                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x43d:0xc DW_TAG_formal_parameter
	.long	.Linfo_string90                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	679                             # DW_AT_decl_line
	.long	1184                            # DW_AT_type
	.byte	18                              # Abbrev [18] 0x449:0xc DW_TAG_formal_parameter
	.long	.Linfo_string92                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	680                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x455:0xc DW_TAG_formal_parameter
	.long	.Linfo_string75                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	680                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x461:0xc DW_TAG_formal_parameter
	.long	.Linfo_string93                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	680                             # DW_AT_decl_line
	.long	1184                            # DW_AT_type
	.byte	21                              # Abbrev [21] 0x46d:0xc DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	682                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	19                              # Abbrev [19] 0x479:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	685                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x486:0xd DW_TAG_variable
	.long	.Linfo_string94                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	688                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	21                              # Abbrev [21] 0x493:0xc DW_TAG_variable
	.long	.Linfo_string95                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	690                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x4a0:0xd DW_TAG_pointer_type
	.long	928                             # DW_AT_type
	.long	.Linfo_string91                 # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	32                              # Abbrev [32] 0x4ad:0xc DW_TAG_subprogram
	.long	.Linfo_string96                 # DW_AT_linkage_name
	.long	.Linfo_string96                 # DW_AT_name
	.byte	4                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x4b9:0xc DW_TAG_subprogram
	.long	.Linfo_string97                 # DW_AT_linkage_name
	.long	.Linfo_string97                 # DW_AT_name
	.byte	4                               # DW_AT_decl_file
	.byte	44                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	33                              # Abbrev [33] 0x4c5:0x56 DW_TAG_subprogram
	.long	.Linfo_string98                 # DW_AT_linkage_name
	.long	.Linfo_string99                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	144                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	869                             # DW_AT_type
	.byte	1                               # DW_AT_inline
	.byte	34                              # Abbrev [34] 0x4d5:0xb DW_TAG_formal_parameter
	.long	.Linfo_string100                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	144                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	34                              # Abbrev [34] 0x4e0:0xb DW_TAG_formal_parameter
	.long	.Linfo_string101                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	144                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	34                              # Abbrev [34] 0x4eb:0xb DW_TAG_formal_parameter
	.long	.Linfo_string102                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	144                             # DW_AT_decl_line
	.long	1184                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x4f6:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	146                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	36                              # Abbrev [36] 0x501:0xc DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	147                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x50d:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x50e:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	150                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x51b:0xc DW_TAG_subprogram
	.long	.Linfo_string96                 # DW_AT_linkage_name
	.long	.Linfo_string96                 # DW_AT_name
	.byte	4                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x527:0xc DW_TAG_subprogram
	.long	.Linfo_string97                 # DW_AT_linkage_name
	.long	.Linfo_string97                 # DW_AT_name
	.byte	4                               # DW_AT_decl_file
	.byte	44                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	37                              # Abbrev [37] 0x533:0xcb DW_TAG_subprogram
	.long	.Linfo_string103                # DW_AT_linkage_name
	.long	.Linfo_string103                # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	21                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	36                              # Abbrev [36] 0x53f:0xc DW_TAG_variable
	.long	.Linfo_string104                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	23                              # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x54b:0xb DW_TAG_variable
	.long	.Linfo_string105                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.long	289                             # DW_AT_type
	.byte	35                              # Abbrev [35] 0x556:0xb DW_TAG_variable
	.long	.Linfo_string106                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x561:0xb DW_TAG_variable
	.long	.Linfo_string107                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	26                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	35                              # Abbrev [35] 0x56c:0xb DW_TAG_variable
	.long	.Linfo_string108                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x577:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x578:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	31                              # DW_AT_decl_line
	.long	1534                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x584:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x585:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	35                              # DW_AT_decl_line
	.long	1541                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x591:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x592:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	40                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x59e:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x59f:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	45                              # DW_AT_decl_line
	.long	697                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5ac:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x5ad:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	50                              # DW_AT_decl_line
	.long	1548                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5ba:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x5bb:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	55                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5c7:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x5c8:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	59                              # DW_AT_decl_line
	.long	1555                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5d4:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x5d5:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5e1:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x5e2:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x5ef:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x5f0:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	71                              # DW_AT_decl_line
	.long	1562                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	5                               # Abbrev [5] 0x5fe:0x7 DW_TAG_base_type
	.long	.Linfo_string109                # DW_AT_name
	.byte	6                               # DW_AT_encoding
	.byte	1                               # DW_AT_byte_size
	.byte	5                               # Abbrev [5] 0x605:0x7 DW_TAG_base_type
	.long	.Linfo_string111                # DW_AT_name
	.byte	5                               # DW_AT_encoding
	.byte	2                               # DW_AT_byte_size
	.byte	5                               # Abbrev [5] 0x60c:0x7 DW_TAG_base_type
	.long	.Linfo_string113                # DW_AT_name
	.byte	5                               # DW_AT_encoding
	.byte	16                              # DW_AT_byte_size
	.byte	5                               # Abbrev [5] 0x613:0x7 DW_TAG_base_type
	.long	.Linfo_string114                # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	2                               # DW_AT_byte_size
	.byte	5                               # Abbrev [5] 0x61a:0x7 DW_TAG_base_type
	.long	.Linfo_string115                # DW_AT_name
	.byte	7                               # DW_AT_encoding
	.byte	16                              # DW_AT_byte_size
	.byte	32                              # Abbrev [32] 0x621:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x62d:0xd DW_TAG_subprogram
	.long	.Linfo_string85                 # DW_AT_linkage_name
	.long	.Linfo_string85                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x63a:0xd DW_TAG_subprogram
	.long	.Linfo_string85                 # DW_AT_linkage_name
	.long	.Linfo_string85                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x647:0xd DW_TAG_subprogram
	.long	.Linfo_string85                 # DW_AT_linkage_name
	.long	.Linfo_string85                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x654:0xd DW_TAG_subprogram
	.long	.Linfo_string85                 # DW_AT_linkage_name
	.long	.Linfo_string85                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	337                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x661:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x66d:0x28 DW_TAG_subprogram
	.long	.Linfo_string118                # DW_AT_linkage_name
	.long	.Linfo_string118                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x67a:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x687:0xd DW_TAG_variable
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	346                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x695:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x6a1:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x6ad:0x28 DW_TAG_subprogram
	.long	.Linfo_string118                # DW_AT_linkage_name
	.long	.Linfo_string118                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x6ba:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x6c7:0xd DW_TAG_variable
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	346                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x6d5:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x6e1:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x6ed:0x28 DW_TAG_subprogram
	.long	.Linfo_string118                # DW_AT_linkage_name
	.long	.Linfo_string118                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x6fa:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x707:0xd DW_TAG_variable
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	346                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x715:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x721:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x72d:0x28 DW_TAG_subprogram
	.long	.Linfo_string118                # DW_AT_linkage_name
	.long	.Linfo_string118                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x73a:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x747:0xd DW_TAG_variable
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	346                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x755:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x761:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	39                              # Abbrev [39] 0x76d:0x71 DW_TAG_subprogram
	.long	.Linfo_string120                # DW_AT_linkage_name
	.long	.Linfo_string121                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	1                               # DW_AT_inline
	.byte	34                              # Abbrev [34] 0x77d:0xb DW_TAG_formal_parameter
	.long	.Linfo_string122                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	34                              # Abbrev [34] 0x788:0xb DW_TAG_formal_parameter
	.long	.Linfo_string84                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
	.long	885                             # DW_AT_type
	.byte	34                              # Abbrev [34] 0x793:0xb DW_TAG_formal_parameter
	.long	.Linfo_string123                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	9                               # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x79e:0xb DW_TAG_variable
	.long	.Linfo_string124                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	11                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	36                              # Abbrev [36] 0x7a9:0xc DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	12                              # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x7b5:0x28 DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x7b6:0xc DW_TAG_variable
	.long	.Linfo_string125                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	13                              # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x7c2:0x1a DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x7c3:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	13                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	20                              # Abbrev [20] 0x7ce:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x7cf:0xb DW_TAG_variable
	.long	.Linfo_string126                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	15                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	39                              # Abbrev [39] 0x7de:0x57 DW_TAG_subprogram
	.long	.Linfo_string127                # DW_AT_linkage_name
	.long	.Linfo_string128                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	178                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	1                               # DW_AT_inline
	.byte	34                              # Abbrev [34] 0x7ee:0xb DW_TAG_formal_parameter
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	178                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	34                              # Abbrev [34] 0x7f9:0xb DW_TAG_formal_parameter
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	178                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	34                              # Abbrev [34] 0x804:0xb DW_TAG_formal_parameter
	.long	.Linfo_string54                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	178                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	34                              # Abbrev [34] 0x80f:0xb DW_TAG_formal_parameter
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	178                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x81a:0xc DW_TAG_variable
	.long	.Linfo_string130                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	180                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	20                              # Abbrev [20] 0x826:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x827:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	181                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	22                              # Abbrev [22] 0x835:0x9 DW_TAG_typedef
	.long	697                             # DW_AT_type
	.long	.Linfo_string129                # DW_AT_name
	.byte	32                              # Abbrev [32] 0x83e:0xc DW_TAG_subprogram
	.long	.Linfo_string131                # DW_AT_linkage_name
	.long	.Linfo_string131                # DW_AT_name
	.byte	7                               # DW_AT_decl_file
	.byte	39                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x84a:0xc DW_TAG_subprogram
	.long	.Linfo_string107                # DW_AT_linkage_name
	.long	.Linfo_string107                # DW_AT_name
	.byte	7                               # DW_AT_decl_file
	.byte	113                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x856:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x862:0x28 DW_TAG_subprogram
	.long	.Linfo_string118                # DW_AT_linkage_name
	.long	.Linfo_string118                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x86f:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x87c:0xd DW_TAG_variable
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	346                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x88a:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x896:0xc DW_TAG_subprogram
	.long	.Linfo_string117                # DW_AT_linkage_name
	.long	.Linfo_string117                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	40                              # Abbrev [40] 0x8a2:0x9f4 DW_TAG_subprogram
	.quad	.Lfunc_begin0                   # DW_AT_low_pc
	.long	.Lfunc_end0-.Lfunc_begin0       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string147                # DW_AT_linkage_name
	.long	.Linfo_string148                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x8bf:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300S"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x8ce:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260S"
	.long	.Linfo_string60                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x8dd:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240S"
	.long	.Linfo_string203                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
	.long	944                             # DW_AT_type
	.byte	42                              # Abbrev [42] 0x8ec:0x9a9 DW_TAG_inlined_subroutine
	.long	430                             # DW_AT_abstract_origin
	.quad	.Ltmp1                          # DW_AT_low_pc
	.long	.Ltmp284-.Ltmp1                 # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.byte	60                              # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x900:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220c"
	.long	447                             # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x909:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200c"
	.long	459                             # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x912:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360b"
	.long	471                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x91b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350b"
	.long	483                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x924:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340b"
	.long	496                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x92d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330b"
	.long	509                             # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x936:0x95e DW_TAG_lexical_block
	.long	.Ldebug_ranges0                 # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x93b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320b"
	.long	523                             # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x944:0x94f DW_TAG_lexical_block
	.long	.Ldebug_ranges1                 # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x949:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317b"
	.long	537                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x952:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\234`"
	.long	549                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x95b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214^"
	.long	561                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x964:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320]"
	.long	573                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x96d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\327T"
	.long	586                             # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x976:0x15 DW_TAG_inlined_subroutine
	.long	1031                            # DW_AT_abstract_origin
	.quad	.Ltmp8                          # DW_AT_low_pc
	.long	.Ltmp9-.Ltmp8                   # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	384                             # DW_AT_call_line
	.byte	31                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x98b:0x15 DW_TAG_inlined_subroutine
	.long	1581                            # DW_AT_abstract_origin
	.quad	.Ltmp69                         # DW_AT_low_pc
	.long	.Ltmp70-.Ltmp69                 # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	404                             # DW_AT_call_line
	.byte	34                              # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x9a0:0x1d5 DW_TAG_inlined_subroutine
	.long	1044                            # DW_AT_abstract_origin
	.quad	.Ltmp18                         # DW_AT_low_pc
	.long	.Ltmp67-.Ltmp18                 # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	408                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x9b5:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370}"
	.long	1061                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x9be:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	1073                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x9c7:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	1085                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x9d0:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340}"
	.long	1097                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x9d9:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330}"
	.long	1109                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x9e2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320}"
	.long	1121                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x9eb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317}"
	.long	1133                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x9f4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250|"
	.long	1145                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x9fd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220{"
	.long	1158                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xa06:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214z"
	.long	1171                            # DW_AT_abstract_origin
	.byte	48                              # Abbrev [48] 0xa0f:0x1a DW_TAG_inlined_subroutine
	.long	1209                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges2                 # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0xa1c:0xc DW_TAG_inlined_subroutine
	.long	1197                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges3                 # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0xa29:0x66 DW_TAG_inlined_subroutine
	.long	1221                            # DW_AT_abstract_origin
	.quad	.Ltmp21                         # DW_AT_low_pc
	.long	.Ltmp29-.Ltmp21                 # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0xa3e:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xa46:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xa4e:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xa56:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	100
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xa5e:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xa66:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges4                 # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xa6b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217\177"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0xa74:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges5                 # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0xa80:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges6                 # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0xa8f:0xe5 DW_TAG_inlined_subroutine
	.long	1331                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges7                 # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	690                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xa9c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340y"
	.long	1343                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xaa5:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337y"
	.long	1355                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xaae:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\336y"
	.long	1366                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xab7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330y"
	.long	1377                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xac0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\324y"
	.long	1388                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xac9:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges8                 # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xace:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\307y"
	.long	1400                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xad8:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges9                 # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xadd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\304y"
	.long	1413                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xae7:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges10                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xaec:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374x"
	.long	1426                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xaf6:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges11                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xafb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250x"
	.long	1439                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb05:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges12                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb0a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320w"
	.long	1453                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb14:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges13                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb19:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217w"
	.long	1467                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb23:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges14                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb28:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214w"
	.long	1480                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb32:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges15                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb37:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274v"
	.long	1493                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb41:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges16                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb46:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350u"
	.long	1506                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xb50:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges17                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb55:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220u"
	.long	1520                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0xb5f:0x14 DW_TAG_inlined_subroutine
	.long	1569                            # DW_AT_abstract_origin
	.quad	.Ltmp53                         # DW_AT_low_pc
	.long	.Ltmp54-.Ltmp53                 # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0xb75:0x15 DW_TAG_inlined_subroutine
	.long	1594                            # DW_AT_abstract_origin
	.quad	.Ltmp72                         # DW_AT_low_pc
	.long	.Ltmp73-.Ltmp72                 # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	409                             # DW_AT_call_line
	.byte	23                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0xb8a:0x213 DW_TAG_lexical_block
	.long	.Ldebug_ranges18                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xb8f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204_"
	.long	599                             # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0xb98:0x15 DW_TAG_inlined_subroutine
	.long	1607                            # DW_AT_abstract_origin
	.quad	.Ltmp77                         # DW_AT_low_pc
	.long	.Ltmp78-.Ltmp77                 # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	422                             # DW_AT_call_line
	.byte	34                              # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0xbad:0x1da DW_TAG_inlined_subroutine
	.long	1044                            # DW_AT_abstract_origin
	.quad	.Ltmp79                         # DW_AT_low_pc
	.long	.Ltmp128-.Ltmp79                # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	423                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0xbc2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250r"
	.long	1061                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xbcb:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240r"
	.long	1073                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xbd4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230r"
	.long	1085                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xbdd:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220r"
	.long	1097                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xbe6:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210r"
	.long	1109                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xbef:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200r"
	.long	1121                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xbf8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\377q"
	.long	1133                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xc01:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330p"
	.long	1145                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xc0a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300o"
	.long	1158                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xc13:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274n"
	.long	1171                            # DW_AT_abstract_origin
	.byte	48                              # Abbrev [48] 0xc1c:0x1a DW_TAG_inlined_subroutine
	.long	1209                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges19                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0xc29:0xc DW_TAG_inlined_subroutine
	.long	1197                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges20                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0xc36:0x6b DW_TAG_inlined_subroutine
	.long	1221                            # DW_AT_abstract_origin
	.quad	.Ltmp82                         # DW_AT_low_pc
	.long	.Ltmp90-.Ltmp82                 # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0xc4b:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240t"
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xc54:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230t"
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xc5d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220t"
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xc66:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214t"
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xc6f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200t"
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xc78:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges21                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xc7d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277s"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0xc86:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges22                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0xc92:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges23                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0xca1:0xe5 DW_TAG_inlined_subroutine
	.long	1331                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges24                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	690                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xcae:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220n"
	.long	1343                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xcb7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217n"
	.long	1355                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xcc0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\216n"
	.long	1366                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xcc9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210n"
	.long	1377                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xcd2:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204n"
	.long	1388                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xcdb:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges25                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xce0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\367m"
	.long	1400                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xcea:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges26                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xcef:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\364m"
	.long	1413                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xcf9:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges27                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xcfe:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\254m"
	.long	1426                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd08:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges28                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd0d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330l"
	.long	1439                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd17:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges29                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd1c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200l"
	.long	1453                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd26:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges30                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd2b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277k"
	.long	1467                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd35:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges31                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd3a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274k"
	.long	1480                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd44:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges32                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd49:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354j"
	.long	1493                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd53:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges33                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd58:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230j"
	.long	1506                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xd62:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges34                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xd67:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300i"
	.long	1520                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0xd71:0x14 DW_TAG_inlined_subroutine
	.long	1569                            # DW_AT_abstract_origin
	.quad	.Ltmp114                        # DW_AT_low_pc
	.long	.Ltmp115-.Ltmp114               # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0xd87:0x15 DW_TAG_inlined_subroutine
	.long	1620                            # DW_AT_abstract_origin
	.quad	.Ltmp129                        # DW_AT_low_pc
	.long	.Ltmp130-.Ltmp129               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	424                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0xd9d:0x15 DW_TAG_inlined_subroutine
	.long	1633                            # DW_AT_abstract_origin
	.quad	.Ltmp132                        # DW_AT_low_pc
	.long	.Ltmp134-.Ltmp132               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	433                             # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	48                              # Abbrev [48] 0xdb2:0x4a DW_TAG_inlined_subroutine
	.long	1645                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges35                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.short	462                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xdbf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\\"
	.long	1658                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xdc8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220\\"
	.long	1671                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0xdd1:0x15 DW_TAG_inlined_subroutine
	.long	1685                            # DW_AT_abstract_origin
	.quad	.Ltmp147                        # DW_AT_low_pc
	.long	.Ltmp149-.Ltmp147               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0xde6:0x15 DW_TAG_inlined_subroutine
	.long	1697                            # DW_AT_abstract_origin
	.quad	.Ltmp150                        # DW_AT_low_pc
	.long	.Ltmp152-.Ltmp150               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0xdfc:0x4a DW_TAG_inlined_subroutine
	.long	1709                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges36                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.short	468                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xe09:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260["
	.long	1722                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xe12:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220["
	.long	1735                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0xe1b:0x15 DW_TAG_inlined_subroutine
	.long	1749                            # DW_AT_abstract_origin
	.quad	.Ltmp159                        # DW_AT_low_pc
	.long	.Ltmp161-.Ltmp159               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0xe30:0x15 DW_TAG_inlined_subroutine
	.long	1761                            # DW_AT_abstract_origin
	.quad	.Ltmp162                        # DW_AT_low_pc
	.long	.Ltmp164-.Ltmp162               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0xe46:0x4a DW_TAG_inlined_subroutine
	.long	1773                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges37                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.short	474                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xe53:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260Z"
	.long	1786                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xe5c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220Z"
	.long	1799                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0xe65:0x15 DW_TAG_inlined_subroutine
	.long	1813                            # DW_AT_abstract_origin
	.quad	.Ltmp171                        # DW_AT_low_pc
	.long	.Ltmp173-.Ltmp171               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0xe7a:0x15 DW_TAG_inlined_subroutine
	.long	1825                            # DW_AT_abstract_origin
	.quad	.Ltmp174                        # DW_AT_low_pc
	.long	.Ltmp176-.Ltmp174               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0xe90:0x4a DW_TAG_inlined_subroutine
	.long	1837                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges38                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.short	480                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0xe9d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260Y"
	.long	1850                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xea6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220Y"
	.long	1863                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0xeaf:0x15 DW_TAG_inlined_subroutine
	.long	1877                            # DW_AT_abstract_origin
	.quad	.Ltmp183                        # DW_AT_low_pc
	.long	.Ltmp185-.Ltmp183               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0xec4:0x15 DW_TAG_inlined_subroutine
	.long	1889                            # DW_AT_abstract_origin
	.quad	.Ltmp186                        # DW_AT_low_pc
	.long	.Ltmp188-.Ltmp186               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0xeda:0x21c DW_TAG_lexical_block
	.long	.Ldebug_ranges39                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xedf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250X"
	.long	613                             # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0xee8:0x112 DW_TAG_lexical_block
	.quad	.Ltmp202                        # DW_AT_low_pc
	.long	.Ltmp218-.Ltmp202               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0xef5:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250V"
	.long	627                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0xefe:0x78 DW_TAG_inlined_subroutine
	.long	1901                            # DW_AT_abstract_origin
	.quad	.Ltmp203                        # DW_AT_low_pc
	.long	.Ltmp210-.Ltmp203               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	511                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0xf13:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260g"
	.long	1917                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xf1c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240g"
	.long	1928                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xf25:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\237g"
	.long	1939                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xf2e:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\236g"
	.long	1950                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xf37:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220g"
	.long	1961                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xf40:0x35 DW_TAG_lexical_block
	.long	.Ldebug_ranges40                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xf45:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210g"
	.long	1974                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0xf4e:0x26 DW_TAG_lexical_block
	.long	.Ldebug_ranges41                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0xf53:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\207g"
	.long	1987                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0xf5c:0x17 DW_TAG_lexical_block
	.quad	.Ltmp206                        # DW_AT_low_pc
	.long	.Ltmp207-.Ltmp206               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0xf69:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277f"
	.long	1999                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0xf76:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp211                        # DW_AT_low_pc
	.long	.Ltmp217-.Ltmp211               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	513                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0xf8b:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360c"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xf94:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\357c"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xf9d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340c"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0xfa6:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330c"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0xfaf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320c"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0xfb8:0x17 DW_TAG_lexical_block
	.quad	.Ltmp212                        # DW_AT_low_pc
	.long	.Ltmp213-.Ltmp212               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0xfc5:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310c"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0xfcf:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp214                        # DW_AT_low_pc
	.long	.Ltmp216-.Ltmp214               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0xfe3:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp214                        # DW_AT_low_pc
	.long	.Ltmp215-.Ltmp214               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0xffa:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp220                        # DW_AT_low_pc
	.long	.Ltmp226-.Ltmp220               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	518                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x100f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320d"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1018:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317d"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1021:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300d"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x102a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270d"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1033:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260d"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x103c:0x17 DW_TAG_lexical_block
	.quad	.Ltmp221                        # DW_AT_low_pc
	.long	.Ltmp222-.Ltmp221               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x1049:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250d"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x1053:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp223                        # DW_AT_low_pc
	.long	.Ltmp225-.Ltmp223               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x1067:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp223                        # DW_AT_low_pc
	.long	.Ltmp224-.Ltmp223               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x107d:0x78 DW_TAG_inlined_subroutine
	.long	1901                            # DW_AT_abstract_origin
	.quad	.Ltmp228                        # DW_AT_low_pc
	.long	.Ltmp235-.Ltmp228               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	520                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1092:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320h"
	.long	1917                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x109b:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300h"
	.long	1928                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x10a4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277h"
	.long	1939                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x10ad:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\276h"
	.long	1950                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x10b6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260h"
	.long	1961                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x10bf:0x35 DW_TAG_lexical_block
	.long	.Ldebug_ranges42                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x10c4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250h"
	.long	1974                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x10cd:0x26 DW_TAG_lexical_block
	.long	.Ldebug_ranges43                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x10d2:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\247h"
	.long	1987                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x10db:0x17 DW_TAG_lexical_block
	.quad	.Ltmp231                        # DW_AT_low_pc
	.long	.Ltmp232-.Ltmp231               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x10e8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337g"
	.long	1999                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x10f6:0x9a DW_TAG_lexical_block
	.quad	.Ltmp237                        # DW_AT_low_pc
	.long	.Ltmp245-.Ltmp237               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x1103:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340U"
	.long	643                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0x110c:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp238                        # DW_AT_low_pc
	.long	.Ltmp244-.Ltmp238               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	527                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1121:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260e"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x112a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\257e"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1133:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240e"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x113c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230e"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1145:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220e"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x114e:0x17 DW_TAG_lexical_block
	.quad	.Ltmp239                        # DW_AT_low_pc
	.long	.Ltmp240-.Ltmp239               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x115b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210e"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x1165:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp241                        # DW_AT_low_pc
	.long	.Ltmp243-.Ltmp241               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x1179:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp241                        # DW_AT_low_pc
	.long	.Ltmp242-.Ltmp241               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x1190:0xa3 DW_TAG_lexical_block
	.quad	.Ltmp246                        # DW_AT_low_pc
	.long	.Ltmp254-.Ltmp246               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x119d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270U"
	.long	658                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x11a6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260U"
	.long	671                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0x11af:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp247                        # DW_AT_low_pc
	.long	.Ltmp253-.Ltmp247               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	536                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x11c4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220f"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x11cd:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217f"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x11d6:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200f"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x11df:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370e"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x11e8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360e"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x11f1:0x17 DW_TAG_lexical_block
	.quad	.Ltmp248                        # DW_AT_low_pc
	.long	.Ltmp249-.Ltmp248               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x11fe:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350e"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x1208:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp250                        # DW_AT_low_pc
	.long	.Ltmp252-.Ltmp250               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x121c:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp250                        # DW_AT_low_pc
	.long	.Ltmp251-.Ltmp250               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x1233:0x15 DW_TAG_inlined_subroutine
	.long	2134                            # DW_AT_abstract_origin
	.quad	.Ltmp257                        # DW_AT_low_pc
	.long	.Ltmp259-.Ltmp257               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	545                             # DW_AT_call_line
	.byte	5                               # DW_AT_call_column
	.byte	48                              # Abbrev [48] 0x1248:0x4a DW_TAG_inlined_subroutine
	.long	2146                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges44                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.short	558                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1255:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270T"
	.long	2159                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x125e:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220T"
	.long	2172                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x1267:0x15 DW_TAG_inlined_subroutine
	.long	2186                            # DW_AT_abstract_origin
	.quad	.Ltmp265                        # DW_AT_low_pc
	.long	.Ltmp267-.Ltmp265               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x127c:0x15 DW_TAG_inlined_subroutine
	.long	2198                            # DW_AT_abstract_origin
	.quad	.Ltmp268                        # DW_AT_low_pc
	.long	.Ltmp270-.Ltmp268               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	53                              # Abbrev [53] 0x1296:0x44 DW_TAG_subprogram
	.quad	.Lfunc_begin1                   # DW_AT_low_pc
	.long	.Lfunc_end1-.Lfunc_begin1       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string149                # DW_AT_linkage_name
	.long	.Linfo_string150                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	87                              # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x12af:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	87                              # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x12bd:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string50                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	87                              # DW_AT_decl_line
	.long	824                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x12cb:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string49                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	87                              # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	54                              # Abbrev [54] 0x12da:0x49 DW_TAG_subprogram
	.quad	.Lfunc_begin2                   # DW_AT_low_pc
	.long	.Lfunc_end2-.Lfunc_begin2       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string151                # DW_AT_linkage_name
	.long	.Linfo_string84                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	92                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x12f7:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	92                              # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x1305:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	.Linfo_string78                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	92                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	55                              # Abbrev [55] 0x1313:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string119                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	94                              # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x1323:0x9d DW_TAG_subprogram
	.quad	.Lfunc_begin3                   # DW_AT_low_pc
	.long	.Lfunc_end3-.Lfunc_begin3       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string152                # DW_AT_linkage_name
	.long	.Linfo_string153                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x1340:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x134e:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string204                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	103                             # DW_AT_decl_line
	.long	16351                           # DW_AT_type
	.byte	45                              # Abbrev [45] 0x135c:0x30 DW_TAG_lexical_block
	.long	.Ldebug_ranges45                # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x1361:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	84
	.long	.Linfo_string206                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	107                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x136f:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	.Linfo_string207                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	108                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x137d:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	76
	.long	.Linfo_string208                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	109                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x138c:0x33 DW_TAG_lexical_block
	.long	.Ldebug_ranges46                # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x1391:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204\177"
	.long	.Linfo_string206                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	121                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x13a0:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200\177"
	.long	.Linfo_string207                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	122                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x13af:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374~"
	.long	.Linfo_string208                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	123                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	54                              # Abbrev [54] 0x13c0:0x48 DW_TAG_subprogram
	.quad	.Lfunc_begin4                   # DW_AT_low_pc
	.long	.Lfunc_end4-.Lfunc_begin4       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string154                # DW_AT_linkage_name
	.long	.Linfo_string155                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x13dd:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x13eb:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string209                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x13f9:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	.Linfo_string204                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	136                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x1408:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x1414:0x1b DW_TAG_subprogram
	.long	.Linfo_string132                # DW_AT_linkage_name
	.long	.Linfo_string132                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	459                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x1421:0xd DW_TAG_variable
	.long	.Linfo_string122                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	461                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x142f:0xc DW_TAG_subprogram
	.long	.Linfo_string133                # DW_AT_linkage_name
	.long	.Linfo_string133                # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	12                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x143b:0xd DW_TAG_subprogram
	.long	.Linfo_string134                # DW_AT_linkage_name
	.long	.Linfo_string134                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	278                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	37                              # Abbrev [37] 0x1448:0xcd DW_TAG_subprogram
	.long	.Linfo_string103                # DW_AT_linkage_name
	.long	.Linfo_string103                # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	21                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	36                              # Abbrev [36] 0x1454:0xc DW_TAG_variable
	.long	.Linfo_string104                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	23                              # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x1460:0xb DW_TAG_variable
	.long	.Linfo_string105                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.long	289                             # DW_AT_type
	.byte	35                              # Abbrev [35] 0x146b:0xb DW_TAG_variable
	.long	.Linfo_string106                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	36                              # Abbrev [36] 0x1476:0xc DW_TAG_variable
	.long	.Linfo_string107                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	26                              # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	36                              # Abbrev [36] 0x1482:0xc DW_TAG_variable
	.long	.Linfo_string108                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x148e:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x148f:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	31                              # DW_AT_decl_line
	.long	1534                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x149b:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x149c:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	35                              # DW_AT_decl_line
	.long	1541                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14a8:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x14a9:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	40                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14b5:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x14b6:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	45                              # DW_AT_decl_line
	.long	697                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14c3:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x14c4:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	50                              # DW_AT_decl_line
	.long	1548                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14d1:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x14d2:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	55                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14de:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x14df:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	59                              # DW_AT_decl_line
	.long	1555                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14eb:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x14ec:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x14f8:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x14f9:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x1506:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x1507:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	71                              # DW_AT_decl_line
	.long	1562                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x1515:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x1521:0xd DW_TAG_subprogram
	.long	.Linfo_string134                # DW_AT_linkage_name
	.long	.Linfo_string134                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	278                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x152e:0xd DW_TAG_subprogram
	.long	.Linfo_string135                # DW_AT_linkage_name
	.long	.Linfo_string135                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	268                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	38                              # Abbrev [38] 0x153b:0x1b DW_TAG_subprogram
	.long	.Linfo_string132                # DW_AT_linkage_name
	.long	.Linfo_string132                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	459                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	19                              # Abbrev [19] 0x1548:0xd DW_TAG_variable
	.long	.Linfo_string122                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	461                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	30                              # Abbrev [30] 0x1556:0xd DW_TAG_subprogram
	.long	.Linfo_string135                # DW_AT_linkage_name
	.long	.Linfo_string135                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	268                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x1563:0xd DW_TAG_subprogram
	.long	.Linfo_string135                # DW_AT_linkage_name
	.long	.Linfo_string135                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	268                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x1570:0xd DW_TAG_subprogram
	.long	.Linfo_string135                # DW_AT_linkage_name
	.long	.Linfo_string135                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	268                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	32                              # Abbrev [32] 0x157d:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	54                              # Abbrev [54] 0x1589:0x516 DW_TAG_subprogram
	.quad	.Lfunc_begin5                   # DW_AT_low_pc
	.long	.Lfunc_end5-.Lfunc_begin5       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string156                # DW_AT_linkage_name
	.long	.Linfo_string157                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	140                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x15a6:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	140                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x15b4:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string204                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	140                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x15c2:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370{"
	.long	.Linfo_string211                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	186                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x15d2:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges47                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x15d7:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270\177"
	.long	.Linfo_string122                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	149                             # DW_AT_decl_line
	.long	688                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x15e8:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges48                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x15ed:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300~"
	.long	.Linfo_string210                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	152                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x15fe:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges49                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x1603:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330}"
	.long	.Linfo_string210                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	155                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x1614:0x14 DW_TAG_inlined_subroutine
	.long	5128                            # DW_AT_abstract_origin
	.quad	.Ltmp323                        # DW_AT_low_pc
	.long	.Ltmp324-.Ltmp323               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.byte	158                             # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	52                              # Abbrev [52] 0x1628:0x2c DW_TAG_lexical_block
	.quad	.Ltmp324                        # DW_AT_low_pc
	.long	.Ltmp327-.Ltmp324               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x1635:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\324|"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	161                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x1644:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320|"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	162                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x1654:0x2c DW_TAG_lexical_block
	.quad	.Ltmp327                        # DW_AT_low_pc
	.long	.Ltmp330-.Ltmp327               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x1661:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\264|"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	172                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x1670:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260|"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	173                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x1680:0x1e DW_TAG_inlined_subroutine
	.long	5140                            # DW_AT_abstract_origin
	.quad	.Ltmp332                        # DW_AT_low_pc
	.long	.Ltmp333-.Ltmp332               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.byte	188                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1694:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300{"
	.long	5153                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x169e:0x113 DW_TAG_lexical_block
	.long	.Ldebug_ranges50                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x16a3:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250{"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	192                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	50                              # Abbrev [50] 0x16b3:0xfd DW_TAG_inlined_subroutine
	.long	5167                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges51                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.byte	192                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x16bf:0xc DW_TAG_inlined_subroutine
	.long	5179                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges52                # DW_AT_ranges
	.byte	5                               # DW_AT_call_file
	.byte	14                              # DW_AT_call_line
	.byte	20                              # DW_AT_call_column
	.byte	50                              # Abbrev [50] 0x16cb:0xe4 DW_TAG_inlined_subroutine
	.long	5192                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges53                # DW_AT_ranges
	.byte	5                               # DW_AT_call_file
	.byte	14                              # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x16d7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340y"
	.long	5204                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x16e0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337y"
	.long	5216                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x16e9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\336y"
	.long	5227                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x16f2:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320y"
	.long	5238                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x16fb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310y"
	.long	5250                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1704:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges54                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1709:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277y"
	.long	5263                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1713:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges55                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1718:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274y"
	.long	5276                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1722:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges56                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1727:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354x"
	.long	5289                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1731:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges57                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1736:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230x"
	.long	5302                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1740:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges58                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1745:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300w"
	.long	5316                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x174f:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges59                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1754:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\377v"
	.long	5330                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x175e:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges60                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1763:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374v"
	.long	5343                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x176d:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges61                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1772:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\254v"
	.long	5356                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x177c:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges62                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1781:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330u"
	.long	5369                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x178b:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges63                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1790:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200u"
	.long	5383                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x179a:0x14 DW_TAG_inlined_subroutine
	.long	5397                            # DW_AT_abstract_origin
	.quad	.Ltmp362                        # DW_AT_low_pc
	.long	.Ltmp363-.Ltmp362               # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x17b1:0x2c DW_TAG_lexical_block
	.quad	.Ltmp370                        # DW_AT_low_pc
	.long	.Ltmp375-.Ltmp370               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x17be:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\224r"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	202                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x17cd:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220r"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	203                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	49                              # Abbrev [49] 0x17dd:0xc DW_TAG_inlined_subroutine
	.long	5409                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges64                # DW_AT_ranges
	.byte	3                               # DW_AT_call_file
	.byte	225                             # DW_AT_call_line
	.byte	24                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x17e9:0x8c DW_TAG_lexical_block
	.long	.Ldebug_ranges65                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x17ee:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240m"
	.long	.Linfo_string212                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	227                             # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	55                              # Abbrev [55] 0x17fe:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230m"
	.long	.Linfo_string213                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	228                             # DW_AT_decl_line
	.long	16381                           # DW_AT_type
	.byte	56                              # Abbrev [56] 0x180e:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\364k"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	236                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x181d:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360k"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	237                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x182c:0x48 DW_TAG_lexical_block
	.long	.Ldebug_ranges66                # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x1831:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210m"
	.long	.Linfo_string215                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.byte	231                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	51                              # Abbrev [51] 0x1841:0x14 DW_TAG_inlined_subroutine
	.long	5422                            # DW_AT_abstract_origin
	.quad	.Ltmp387                        # DW_AT_low_pc
	.long	.Ltmp388-.Ltmp387               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.byte	231                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	42                              # Abbrev [42] 0x1855:0x1e DW_TAG_inlined_subroutine
	.long	5435                            # DW_AT_abstract_origin
	.quad	.Ltmp389                        # DW_AT_low_pc
	.long	.Ltmp390-.Ltmp389               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.byte	234                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1869:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200l"
	.long	5448                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x1875:0xad DW_TAG_lexical_block
	.quad	.Ltmp396                        # DW_AT_low_pc
	.long	.Ltmp413-.Ltmp396               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x1882:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314k"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	247                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x1891:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310k"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.byte	248                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x18a0:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300k"
	.long	.Linfo_string212                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	256                             # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	57                              # Abbrev [57] 0x18b1:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270k"
	.long	.Linfo_string216                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	257                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x18c2:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260k"
	.long	.Linfo_string217                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	258                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x18d3:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250k"
	.long	.Linfo_string61                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	260                             # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x18e4:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240k"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	261                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x18f5:0x2c DW_TAG_lexical_block
	.long	.Ldebug_ranges67                # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x18fa:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210k"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	262                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x190b:0x15 DW_TAG_inlined_subroutine
	.long	5462                            # DW_AT_abstract_origin
	.quad	.Ltmp403                        # DW_AT_low_pc
	.long	.Ltmp404-.Ltmp403               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	265                             # DW_AT_call_line
	.byte	25                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x1922:0xaf DW_TAG_lexical_block
	.quad	.Ltmp413                        # DW_AT_low_pc
	.long	.Ltmp430-.Ltmp413               # DW_AT_high_pc
	.byte	58                              # Abbrev [58] 0x192f:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\254j"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	271                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x193f:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250j"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	272                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x194f:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240j"
	.long	.Linfo_string212                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	281                             # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1960:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230j"
	.long	.Linfo_string216                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	282                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1971:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220j"
	.long	.Linfo_string218                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	283                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1982:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210j"
	.long	.Linfo_string61                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	285                             # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1993:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200j"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	286                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x19a4:0x2c DW_TAG_lexical_block
	.long	.Ldebug_ranges68                # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x19a9:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350i"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	287                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x19ba:0x15 DW_TAG_inlined_subroutine
	.long	5475                            # DW_AT_abstract_origin
	.quad	.Ltmp420                        # DW_AT_low_pc
	.long	.Ltmp421-.Ltmp420               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	290                             # DW_AT_call_line
	.byte	25                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x19d1:0xb8 DW_TAG_lexical_block
	.long	.Ldebug_ranges69                # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x19d6:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210i"
	.long	.Linfo_string212                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	297                             # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	58                              # Abbrev [58] 0x19e7:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204i"
	.long	.Linfo_string52                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	299                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x19f7:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200i"
	.long	.Linfo_string54                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	300                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1a07:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370h"
	.long	.Linfo_string216                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1a18:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360h"
	.long	.Linfo_string219                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	310                             # DW_AT_decl_line
	.long	16394                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1a29:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350h"
	.long	.Linfo_string61                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	311                             # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1a3a:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230h"
	.long	.Linfo_string221                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	312                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x1a4b:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310g"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	313                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x1a5c:0x2c DW_TAG_lexical_block
	.long	.Ldebug_ranges70                # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x1a61:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260g"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	314                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x1a72:0x15 DW_TAG_inlined_subroutine
	.long	5488                            # DW_AT_abstract_origin
	.quad	.Ltmp437                        # DW_AT_low_pc
	.long	.Ltmp438-.Ltmp437               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	317                             # DW_AT_call_line
	.byte	25                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x1a89:0x15 DW_TAG_inlined_subroutine
	.long	5501                            # DW_AT_abstract_origin
	.quad	.Ltmp448                        # DW_AT_low_pc
	.long	.Ltmp449-.Ltmp448               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	324                             # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x1a9f:0x9d0 DW_TAG_subprogram
	.quad	.Lfunc_begin6                   # DW_AT_low_pc
	.long	.Lfunc_end6-.Lfunc_begin6       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	430                             # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1ab2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220c"
	.long	447                             # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1abb:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200c"
	.long	459                             # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1ac4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360b"
	.long	471                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1acd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350b"
	.long	483                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1ad6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340b"
	.long	496                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1adf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330b"
	.long	509                             # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1ae8:0x986 DW_TAG_lexical_block
	.long	.Ldebug_ranges71                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1aed:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320b"
	.long	523                             # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1af6:0x977 DW_TAG_lexical_block
	.long	.Ldebug_ranges72                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1afb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317b"
	.long	537                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1b04:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\234`"
	.long	549                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1b0d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214^"
	.long	561                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1b16:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320]"
	.long	573                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1b1f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\327T"
	.long	586                             # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x1b28:0x15 DW_TAG_inlined_subroutine
	.long	1031                            # DW_AT_abstract_origin
	.quad	.Ltmp480                        # DW_AT_low_pc
	.long	.Ltmp481-.Ltmp480               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	384                             # DW_AT_call_line
	.byte	31                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x1b3d:0x15 DW_TAG_inlined_subroutine
	.long	1581                            # DW_AT_abstract_origin
	.quad	.Ltmp491                        # DW_AT_low_pc
	.long	.Ltmp492-.Ltmp491               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	404                             # DW_AT_call_line
	.byte	34                              # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x1b52:0x1d5 DW_TAG_inlined_subroutine
	.long	1044                            # DW_AT_abstract_origin
	.quad	.Ltmp494                        # DW_AT_low_pc
	.long	.Ltmp543-.Ltmp494               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	408                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1b67:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370}"
	.long	1061                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1b70:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	1073                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1b79:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	1085                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1b82:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340}"
	.long	1097                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1b8b:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330}"
	.long	1109                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1b94:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320}"
	.long	1121                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1b9d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317}"
	.long	1133                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1ba6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250|"
	.long	1145                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1baf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220{"
	.long	1158                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1bb8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214z"
	.long	1171                            # DW_AT_abstract_origin
	.byte	48                              # Abbrev [48] 0x1bc1:0x1a DW_TAG_inlined_subroutine
	.long	1209                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges73                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x1bce:0xc DW_TAG_inlined_subroutine
	.long	1197                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges74                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x1bdb:0x66 DW_TAG_inlined_subroutine
	.long	1221                            # DW_AT_abstract_origin
	.quad	.Ltmp497                        # DW_AT_low_pc
	.long	.Ltmp505-.Ltmp497               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1bf0:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1bf8:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1c00:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c08:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	100
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c10:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1c18:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges75                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1c1d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217\177"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0x1c26:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges76                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x1c32:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges77                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0x1c41:0xe5 DW_TAG_inlined_subroutine
	.long	1331                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges78                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	690                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1c4e:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340y"
	.long	1343                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c57:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337y"
	.long	1355                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c60:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\336y"
	.long	1366                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c69:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330y"
	.long	1377                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1c72:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\324y"
	.long	1388                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1c7b:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges79                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1c80:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\307y"
	.long	1400                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1c8a:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges80                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1c8f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\304y"
	.long	1413                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1c99:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges81                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1c9e:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374x"
	.long	1426                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ca8:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges82                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1cad:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250x"
	.long	1439                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1cb7:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges83                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1cbc:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320w"
	.long	1453                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1cc6:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges84                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1ccb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217w"
	.long	1467                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1cd5:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges85                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1cda:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214w"
	.long	1480                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ce4:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges86                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1ce9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274v"
	.long	1493                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1cf3:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges87                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1cf8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350u"
	.long	1506                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1d02:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges88                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1d07:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220u"
	.long	1520                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x1d11:0x14 DW_TAG_inlined_subroutine
	.long	1569                            # DW_AT_abstract_origin
	.quad	.Ltmp529                        # DW_AT_low_pc
	.long	.Ltmp530-.Ltmp529               # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x1d27:0x15 DW_TAG_inlined_subroutine
	.long	1594                            # DW_AT_abstract_origin
	.quad	.Ltmp544                        # DW_AT_low_pc
	.long	.Ltmp545-.Ltmp544               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	409                             # DW_AT_call_line
	.byte	23                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x1d3c:0x213 DW_TAG_lexical_block
	.long	.Ldebug_ranges89                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1d41:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204_"
	.long	599                             # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x1d4a:0x15 DW_TAG_inlined_subroutine
	.long	1607                            # DW_AT_abstract_origin
	.quad	.Ltmp549                        # DW_AT_low_pc
	.long	.Ltmp550-.Ltmp549               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	422                             # DW_AT_call_line
	.byte	34                              # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x1d5f:0x1da DW_TAG_inlined_subroutine
	.long	1044                            # DW_AT_abstract_origin
	.quad	.Ltmp551                        # DW_AT_low_pc
	.long	.Ltmp600-.Ltmp551               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	423                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1d74:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250r"
	.long	1061                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1d7d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240r"
	.long	1073                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1d86:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230r"
	.long	1085                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1d8f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220r"
	.long	1097                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1d98:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210r"
	.long	1109                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1da1:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200r"
	.long	1121                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1daa:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\377q"
	.long	1133                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1db3:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330p"
	.long	1145                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1dbc:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300o"
	.long	1158                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1dc5:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274n"
	.long	1171                            # DW_AT_abstract_origin
	.byte	48                              # Abbrev [48] 0x1dce:0x1a DW_TAG_inlined_subroutine
	.long	1209                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges90                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x1ddb:0xc DW_TAG_inlined_subroutine
	.long	1197                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges91                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x1de8:0x6b DW_TAG_inlined_subroutine
	.long	1221                            # DW_AT_abstract_origin
	.quad	.Ltmp554                        # DW_AT_low_pc
	.long	.Ltmp562-.Ltmp554               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x1dfd:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240t"
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1e06:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230t"
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x1e0f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220t"
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e18:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214t"
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e21:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200t"
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1e2a:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges92                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1e2f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277s"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0x1e38:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges93                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x1e44:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges94                # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0x1e53:0xe5 DW_TAG_inlined_subroutine
	.long	1331                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges95                # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	690                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1e60:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220n"
	.long	1343                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e69:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217n"
	.long	1355                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e72:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\216n"
	.long	1366                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e7b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210n"
	.long	1377                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1e84:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\204n"
	.long	1388                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x1e8d:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges96                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1e92:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\367m"
	.long	1400                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1e9c:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges97                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1ea1:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\364m"
	.long	1413                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1eab:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges98                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1eb0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\254m"
	.long	1426                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1eba:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges99                # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1ebf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330l"
	.long	1439                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ec9:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges100               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1ece:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200l"
	.long	1453                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ed8:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges101               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1edd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277k"
	.long	1467                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ee7:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges102               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1eec:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274k"
	.long	1480                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1ef6:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges103               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1efb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354j"
	.long	1493                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1f05:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges104               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1f0a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230j"
	.long	1506                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x1f14:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges105               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x1f19:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300i"
	.long	1520                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x1f23:0x14 DW_TAG_inlined_subroutine
	.long	1569                            # DW_AT_abstract_origin
	.quad	.Ltmp586                        # DW_AT_low_pc
	.long	.Ltmp587-.Ltmp586               # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x1f39:0x15 DW_TAG_inlined_subroutine
	.long	1620                            # DW_AT_abstract_origin
	.quad	.Ltmp601                        # DW_AT_low_pc
	.long	.Ltmp602-.Ltmp601               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	424                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x1f4f:0x15 DW_TAG_inlined_subroutine
	.long	1633                            # DW_AT_abstract_origin
	.quad	.Ltmp604                        # DW_AT_low_pc
	.long	.Ltmp606-.Ltmp604               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	433                             # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x1f64:0x52 DW_TAG_inlined_subroutine
	.long	1645                            # DW_AT_abstract_origin
	.quad	.Ltmp617                        # DW_AT_low_pc
	.long	.Ltmp626-.Ltmp617               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	462                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1f79:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\\"
	.long	1658                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1f82:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220\\"
	.long	1671                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x1f8b:0x15 DW_TAG_inlined_subroutine
	.long	1685                            # DW_AT_abstract_origin
	.quad	.Ltmp619                        # DW_AT_low_pc
	.long	.Ltmp621-.Ltmp619               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x1fa0:0x15 DW_TAG_inlined_subroutine
	.long	1697                            # DW_AT_abstract_origin
	.quad	.Ltmp622                        # DW_AT_low_pc
	.long	.Ltmp624-.Ltmp622               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x1fb6:0x52 DW_TAG_inlined_subroutine
	.long	1709                            # DW_AT_abstract_origin
	.quad	.Ltmp629                        # DW_AT_low_pc
	.long	.Ltmp638-.Ltmp629               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	468                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x1fcb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260["
	.long	1722                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x1fd4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220["
	.long	1735                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x1fdd:0x15 DW_TAG_inlined_subroutine
	.long	1749                            # DW_AT_abstract_origin
	.quad	.Ltmp631                        # DW_AT_low_pc
	.long	.Ltmp633-.Ltmp631               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x1ff2:0x15 DW_TAG_inlined_subroutine
	.long	1761                            # DW_AT_abstract_origin
	.quad	.Ltmp634                        # DW_AT_low_pc
	.long	.Ltmp636-.Ltmp634               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2008:0x52 DW_TAG_inlined_subroutine
	.long	1773                            # DW_AT_abstract_origin
	.quad	.Ltmp641                        # DW_AT_low_pc
	.long	.Ltmp650-.Ltmp641               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	474                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x201d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260Z"
	.long	1786                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2026:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220Z"
	.long	1799                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x202f:0x15 DW_TAG_inlined_subroutine
	.long	1813                            # DW_AT_abstract_origin
	.quad	.Ltmp643                        # DW_AT_low_pc
	.long	.Ltmp645-.Ltmp643               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x2044:0x15 DW_TAG_inlined_subroutine
	.long	1825                            # DW_AT_abstract_origin
	.quad	.Ltmp646                        # DW_AT_low_pc
	.long	.Ltmp648-.Ltmp646               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x205a:0x52 DW_TAG_inlined_subroutine
	.long	1837                            # DW_AT_abstract_origin
	.quad	.Ltmp653                        # DW_AT_low_pc
	.long	.Ltmp662-.Ltmp653               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	480                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x206f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260Y"
	.long	1850                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2078:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220Y"
	.long	1863                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x2081:0x15 DW_TAG_inlined_subroutine
	.long	1877                            # DW_AT_abstract_origin
	.quad	.Ltmp655                        # DW_AT_low_pc
	.long	.Ltmp657-.Ltmp655               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x2096:0x15 DW_TAG_inlined_subroutine
	.long	1889                            # DW_AT_abstract_origin
	.quad	.Ltmp658                        # DW_AT_low_pc
	.long	.Ltmp660-.Ltmp658               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x20ac:0x21c DW_TAG_lexical_block
	.long	.Ldebug_ranges106               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x20b1:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250X"
	.long	613                             # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x20ba:0x112 DW_TAG_lexical_block
	.quad	.Ltmp674                        # DW_AT_low_pc
	.long	.Ltmp690-.Ltmp674               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x20c7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250V"
	.long	627                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0x20d0:0x78 DW_TAG_inlined_subroutine
	.long	1901                            # DW_AT_abstract_origin
	.quad	.Ltmp675                        # DW_AT_low_pc
	.long	.Ltmp682-.Ltmp675               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	511                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x20e5:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320h"
	.long	1917                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x20ee:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300h"
	.long	1928                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x20f7:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277h"
	.long	1939                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2100:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\276h"
	.long	1950                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2109:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260h"
	.long	1961                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x2112:0x35 DW_TAG_lexical_block
	.long	.Ldebug_ranges107               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x2117:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250h"
	.long	1974                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x2120:0x26 DW_TAG_lexical_block
	.long	.Ldebug_ranges108               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x2125:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\247h"
	.long	1987                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x212e:0x17 DW_TAG_lexical_block
	.quad	.Ltmp678                        # DW_AT_low_pc
	.long	.Ltmp679-.Ltmp678               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x213b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337g"
	.long	1999                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2148:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp683                        # DW_AT_low_pc
	.long	.Ltmp689-.Ltmp683               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	513                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x215d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220f"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2166:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217f"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x216f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200f"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2178:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370e"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2181:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360e"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x218a:0x17 DW_TAG_lexical_block
	.quad	.Ltmp684                        # DW_AT_low_pc
	.long	.Ltmp685-.Ltmp684               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2197:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350e"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x21a1:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp686                        # DW_AT_low_pc
	.long	.Ltmp688-.Ltmp686               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x21b5:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp686                        # DW_AT_low_pc
	.long	.Ltmp687-.Ltmp686               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x21cc:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp692                        # DW_AT_low_pc
	.long	.Ltmp698-.Ltmp692               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	518                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x21e1:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260e"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x21ea:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\257e"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x21f3:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240e"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x21fc:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230e"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2205:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220e"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x220e:0x17 DW_TAG_lexical_block
	.quad	.Ltmp693                        # DW_AT_low_pc
	.long	.Ltmp694-.Ltmp693               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x221b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210e"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2225:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp695                        # DW_AT_low_pc
	.long	.Ltmp697-.Ltmp695               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2239:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp695                        # DW_AT_low_pc
	.long	.Ltmp696-.Ltmp695               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x224f:0x78 DW_TAG_inlined_subroutine
	.long	1901                            # DW_AT_abstract_origin
	.quad	.Ltmp700                        # DW_AT_low_pc
	.long	.Ltmp707-.Ltmp700               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	520                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2264:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260g"
	.long	1917                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x226d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240g"
	.long	1928                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2276:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\237g"
	.long	1939                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x227f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\236g"
	.long	1950                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2288:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220g"
	.long	1961                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x2291:0x35 DW_TAG_lexical_block
	.long	.Ldebug_ranges109               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x2296:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210g"
	.long	1974                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x229f:0x26 DW_TAG_lexical_block
	.long	.Ldebug_ranges110               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x22a4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\207g"
	.long	1987                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x22ad:0x17 DW_TAG_lexical_block
	.quad	.Ltmp703                        # DW_AT_low_pc
	.long	.Ltmp704-.Ltmp703               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x22ba:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277f"
	.long	1999                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x22c8:0x9a DW_TAG_lexical_block
	.quad	.Ltmp709                        # DW_AT_low_pc
	.long	.Ltmp717-.Ltmp709               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x22d5:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340U"
	.long	643                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0x22de:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp710                        # DW_AT_low_pc
	.long	.Ltmp716-.Ltmp710               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	527                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x22f3:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320d"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x22fc:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317d"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2305:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300d"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x230e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270d"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2317:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260d"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2320:0x17 DW_TAG_lexical_block
	.quad	.Ltmp711                        # DW_AT_low_pc
	.long	.Ltmp712-.Ltmp711               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x232d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250d"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2337:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp713                        # DW_AT_low_pc
	.long	.Ltmp715-.Ltmp713               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x234b:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp713                        # DW_AT_low_pc
	.long	.Ltmp714-.Ltmp713               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	52                              # Abbrev [52] 0x2362:0xa3 DW_TAG_lexical_block
	.quad	.Ltmp718                        # DW_AT_low_pc
	.long	.Ltmp726-.Ltmp718               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x236f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270U"
	.long	658                             # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2378:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260U"
	.long	671                             # DW_AT_abstract_origin
	.byte	47                              # Abbrev [47] 0x2381:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp719                        # DW_AT_low_pc
	.long	.Ltmp725-.Ltmp719               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	536                             # DW_AT_call_line
	.byte	19                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2396:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360c"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x239f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\357c"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x23a8:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340c"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x23b1:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330c"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x23ba:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320c"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x23c3:0x17 DW_TAG_lexical_block
	.quad	.Ltmp720                        # DW_AT_low_pc
	.long	.Ltmp721-.Ltmp720               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x23d0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310c"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x23da:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp722                        # DW_AT_low_pc
	.long	.Ltmp724-.Ltmp722               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x23ee:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp722                        # DW_AT_low_pc
	.long	.Ltmp723-.Ltmp722               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x2405:0x15 DW_TAG_inlined_subroutine
	.long	2134                            # DW_AT_abstract_origin
	.quad	.Ltmp729                        # DW_AT_low_pc
	.long	.Ltmp731-.Ltmp729               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	545                             # DW_AT_call_line
	.byte	5                               # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x241a:0x52 DW_TAG_inlined_subroutine
	.long	2146                            # DW_AT_abstract_origin
	.quad	.Ltmp735                        # DW_AT_low_pc
	.long	.Ltmp744-.Ltmp735               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	558                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x242f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270T"
	.long	2159                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2438:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220T"
	.long	2172                            # DW_AT_abstract_origin
	.byte	46                              # Abbrev [46] 0x2441:0x15 DW_TAG_inlined_subroutine
	.long	2186                            # DW_AT_abstract_origin
	.quad	.Ltmp737                        # DW_AT_low_pc
	.long	.Ltmp739-.Ltmp737               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	352                             # DW_AT_call_line
	.byte	18                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x2456:0x15 DW_TAG_inlined_subroutine
	.long	2198                            # DW_AT_abstract_origin
	.quad	.Ltmp740                        # DW_AT_low_pc
	.long	.Ltmp742-.Ltmp740               # DW_AT_high_pc
	.byte	3                               # DW_AT_call_file
	.short	354                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	60                              # Abbrev [60] 0x246f:0x68 DW_TAG_subprogram
	.quad	.Lfunc_begin7                   # DW_AT_low_pc
	.long	.Lfunc_end7-.Lfunc_begin7       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string158                # DW_AT_linkage_name
	.long	.Linfo_string159                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	569                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	61                              # Abbrev [61] 0x248d:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	569                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x249c:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string222                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	569                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x24ab:0x2b DW_TAG_lexical_block
	.long	.Ldebug_ranges111               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x24b0:0x10 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string125                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	3                               # DW_AT_decl_file
	.short	576                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x24c0:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges112               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x24c5:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	95
	.long	.Linfo_string78                 # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	576                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	62                              # Abbrev [62] 0x24d7:0x1e DW_TAG_subprogram
	.quad	.Lfunc_begin8                   # DW_AT_low_pc
	.long	.Lfunc_end8-.Lfunc_begin8       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string160                # DW_AT_linkage_name
	.long	.Linfo_string161                # DW_AT_name
	.byte	3                               # DW_AT_decl_file
	.short	333                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	54                              # Abbrev [54] 0x24f5:0xb8 DW_TAG_subprogram
	.quad	.Lfunc_begin9                   # DW_AT_low_pc
	.long	.Lfunc_end9-.Lfunc_begin9       # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string162                # DW_AT_linkage_name
	.long	.Linfo_string163                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	32                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2512:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230\177"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	32                              # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2521:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220\177"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	32                              # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	42                              # Abbrev [42] 0x2530:0x7c DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp766                        # DW_AT_low_pc
	.long	.Ltmp772-.Ltmp766               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	35                              # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2544:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x254c:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2554:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x255c:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2564:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x256c:0x16 DW_TAG_lexical_block
	.quad	.Ltmp767                        # DW_AT_low_pc
	.long	.Ltmp768-.Ltmp767               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2579:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2582:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp769                        # DW_AT_low_pc
	.long	.Ltmp771-.Ltmp769               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2596:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp769                        # DW_AT_low_pc
	.long	.Ltmp770-.Ltmp769               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	54                              # Abbrev [54] 0x25ad:0xa1 DW_TAG_subprogram
	.quad	.Lfunc_begin10                  # DW_AT_low_pc
	.long	.Lfunc_end10-.Lfunc_begin10     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string164                # DW_AT_linkage_name
	.long	.Linfo_string165                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	159                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x25ca:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	159                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x25d8:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string222                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	159                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x25e6:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	161                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x25f5:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	92
	.long	.Linfo_string55                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	162                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2603:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	.Linfo_string223                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	164                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2612:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	72
	.long	.Linfo_string224                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	165                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2621:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	64
	.long	.Linfo_string61                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	166                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	52                              # Abbrev [52] 0x2630:0x1d DW_TAG_lexical_block
	.quad	.Ltmp776                        # DW_AT_low_pc
	.long	.Ltmp777-.Ltmp776               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x263d:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277\177"
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	169                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x264e:0x7b DW_TAG_subprogram
	.quad	.Lfunc_begin11                  # DW_AT_low_pc
	.long	.Lfunc_end11-.Lfunc_begin11     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	2014                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2661:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2669:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2671:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2679:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2681:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2689:0x16 DW_TAG_lexical_block
	.quad	.Ltmp780                        # DW_AT_low_pc
	.long	.Ltmp781-.Ltmp780               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2696:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x269f:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp782                        # DW_AT_low_pc
	.long	.Ltmp784-.Ltmp782               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x26b3:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp782                        # DW_AT_low_pc
	.long	.Ltmp783-.Ltmp782               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x26c9:0x63 DW_TAG_subprogram
	.quad	.Lfunc_begin12                  # DW_AT_low_pc
	.long	.Lfunc_end12-.Lfunc_begin12     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string166                # DW_AT_linkage_name
	.long	.Linfo_string167                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	192                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x26e6:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	192                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x26f4:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	192                             # DW_AT_decl_line
	.long	885                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x2702:0x29 DW_TAG_lexical_block
	.long	.Ldebug_ranges113               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x2707:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string125                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	194                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x2716:0x14 DW_TAG_lexical_block
	.long	.Ldebug_ranges114               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x271b:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	95
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	194                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x272c:0x3a DW_TAG_subprogram
	.quad	.Lfunc_begin13                  # DW_AT_low_pc
	.long	.Lfunc_end13-.Lfunc_begin13     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string168                # DW_AT_linkage_name
	.long	.Linfo_string169                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	206                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x2749:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	206                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2757:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	206                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x2766:0x3a DW_TAG_subprogram
	.quad	.Lfunc_begin14                  # DW_AT_low_pc
	.long	.Lfunc_end14-.Lfunc_begin14     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string170                # DW_AT_linkage_name
	.long	.Linfo_string171                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	207                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x2783:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	207                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2791:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	207                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x27a0:0x3a DW_TAG_subprogram
	.quad	.Lfunc_begin15                  # DW_AT_low_pc
	.long	.Lfunc_end15-.Lfunc_begin15     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string172                # DW_AT_linkage_name
	.long	.Linfo_string173                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	208                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x27bd:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	208                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x27cb:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	208                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x27da:0x3a DW_TAG_subprogram
	.quad	.Lfunc_begin16                  # DW_AT_low_pc
	.long	.Lfunc_end16-.Lfunc_begin16     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string174                # DW_AT_linkage_name
	.long	.Linfo_string175                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	209                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x27f7:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	209                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2805:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	209                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	30                              # Abbrev [30] 0x2814:0xd DW_TAG_subprogram
	.long	.Linfo_string136                # DW_AT_linkage_name
	.long	.Linfo_string136                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	290                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2821:0xd DW_TAG_subprogram
	.long	.Linfo_string137                # DW_AT_linkage_name
	.long	.Linfo_string137                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	444                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x282e:0xd DW_TAG_subprogram
	.long	.Linfo_string136                # DW_AT_linkage_name
	.long	.Linfo_string136                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	290                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x283b:0xd DW_TAG_subprogram
	.long	.Linfo_string138                # DW_AT_linkage_name
	.long	.Linfo_string138                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2848:0xd DW_TAG_subprogram
	.long	.Linfo_string136                # DW_AT_linkage_name
	.long	.Linfo_string136                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	290                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2855:0xd DW_TAG_subprogram
	.long	.Linfo_string139                # DW_AT_linkage_name
	.long	.Linfo_string139                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	543                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2862:0xd DW_TAG_subprogram
	.long	.Linfo_string140                # DW_AT_linkage_name
	.long	.Linfo_string140                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	430                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x286f:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x287c:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2889:0xd DW_TAG_subprogram
	.long	.Linfo_string107                # DW_AT_linkage_name
	.long	.Linfo_string107                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	373                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x2896:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x28a3:0xd DW_TAG_subprogram
	.long	.Linfo_string107                # DW_AT_linkage_name
	.long	.Linfo_string107                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	373                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x28b0:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x28bd:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	30                              # Abbrev [30] 0x28ca:0xd DW_TAG_subprogram
	.long	.Linfo_string108                # DW_AT_linkage_name
	.long	.Linfo_string108                # DW_AT_name
	.byte	8                               # DW_AT_decl_file
	.short	390                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	54                              # Abbrev [54] 0x28d7:0xac4 DW_TAG_subprogram
	.quad	.Lfunc_begin17                  # DW_AT_low_pc
	.long	.Lfunc_end17-.Lfunc_begin17     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string176                # DW_AT_linkage_name
	.long	.Linfo_string177                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	211                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x28f4:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250w"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	211                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2903:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\244w"
	.long	.Linfo_string227                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	211                             # DW_AT_decl_line
	.long	251                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x2912:0xf DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230w"
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	211                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2921:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240s"
	.long	.Linfo_string228                # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	216                             # DW_AT_decl_line
	.long	16414                           # DW_AT_type
	.byte	56                              # Abbrev [56] 0x2931:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\237s"
	.long	.Linfo_string82                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	217                             # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2940:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270r"
	.long	.Linfo_string229                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	223                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	56                              # Abbrev [56] 0x2950:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\244p"
	.long	.Linfo_string230                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	238                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	56                              # Abbrev [56] 0x295f:0xe DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	108
	.long	.Linfo_string231                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	242                             # DW_AT_decl_line
	.long	16427                           # DW_AT_type
	.byte	55                              # Abbrev [55] 0x296d:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210p"
	.long	.Linfo_string232                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	243                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x297d:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	.Linfo_string233                # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	244                             # DW_AT_decl_line
	.long	16440                           # DW_AT_type
	.byte	55                              # Abbrev [55] 0x298c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200p"
	.long	.Linfo_string100                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	245                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x299c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370o"
	.long	.Linfo_string234                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	246                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	57                              # Abbrev [57] 0x29ac:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250m"
	.long	.Linfo_string210                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x29bd:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240m"
	.long	.Linfo_string243                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x29ce:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230m"
	.long	.Linfo_string244                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	308                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	58                              # Abbrev [58] 0x29df:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\234e"
	.long	.Linfo_string252                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	360                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x29ef:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314d"
	.long	.Linfo_string253                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	367                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x29ff:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274\\"
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	455                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2a0f:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\\"
	.long	.Linfo_string237                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	456                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2a20:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230\\"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	472                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	50                              # Abbrev [50] 0x2a31:0x1a DW_TAG_inlined_subroutine
	.long	10273                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges115               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	218                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	63                              # Abbrev [63] 0x2a3d:0xd DW_TAG_inlined_subroutine
	.long	10260                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges116               # DW_AT_ranges
	.byte	8                               # DW_AT_call_file
	.short	451                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	50                              # Abbrev [50] 0x2a4b:0x1a DW_TAG_inlined_subroutine
	.long	10299                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges117               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	225                             # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	63                              # Abbrev [63] 0x2a57:0xd DW_TAG_inlined_subroutine
	.long	10286                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges118               # DW_AT_ranges
	.byte	8                               # DW_AT_call_file
	.short	536                             # DW_AT_call_line
	.byte	11                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2a65:0x142 DW_TAG_lexical_block
	.long	.Ldebug_ranges119               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x2a6a:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330q"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	227                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	55                              # Abbrev [55] 0x2a7a:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270q"
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	230                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	42                              # Abbrev [42] 0x2a8a:0x80 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp809                        # DW_AT_low_pc
	.long	.Ltmp815-.Ltmp809               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	229                             # DW_AT_call_line
	.byte	32                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2a9e:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	72
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2aa6:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	71
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2aae:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270\177"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2ab7:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\177"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2ac0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250\177"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2ac9:0x17 DW_TAG_lexical_block
	.quad	.Ltmp810                        # DW_AT_low_pc
	.long	.Ltmp811-.Ltmp810               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2ad6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240\177"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2ae0:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp812                        # DW_AT_low_pc
	.long	.Ltmp814-.Ltmp812               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2af4:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp812                        # DW_AT_low_pc
	.long	.Ltmp813-.Ltmp812               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	50                              # Abbrev [50] 0x2b0a:0x1a DW_TAG_inlined_subroutine
	.long	10325                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges120               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	231                             # DW_AT_call_line
	.byte	7                               # DW_AT_call_column
	.byte	63                              # Abbrev [63] 0x2b16:0xd DW_TAG_inlined_subroutine
	.long	10312                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges121               # DW_AT_ranges
	.byte	8                               # DW_AT_call_file
	.short	550                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2b24:0x82 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp819                        # DW_AT_low_pc
	.long	.Ltmp825-.Ltmp819               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	234                             # DW_AT_call_line
	.byte	31                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2b38:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350~"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2b41:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\347~"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2b4a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330~"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2b53:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320~"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2b5c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310~"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2b65:0x17 DW_TAG_lexical_block
	.quad	.Ltmp820                        # DW_AT_low_pc
	.long	.Ltmp821-.Ltmp820               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2b72:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300~"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2b7c:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp822                        # DW_AT_low_pc
	.long	.Ltmp824-.Ltmp822               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2b90:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp822                        # DW_AT_low_pc
	.long	.Ltmp823-.Ltmp822               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x2ba7:0x14 DW_TAG_inlined_subroutine
	.long	10338                           # DW_AT_abstract_origin
	.quad	.Ltmp827                        # DW_AT_low_pc
	.long	.Ltmp828-.Ltmp827               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	240                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x2bbb:0x2cc DW_TAG_lexical_block
	.long	.Ldebug_ranges122               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x2bc0:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360o"
	.long	.Linfo_string235                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	249                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2bd0:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340o"
	.long	.Linfo_string237                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	271                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2be1:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310o"
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	275                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2bf2:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300o"
	.long	.Linfo_string238                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	276                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2c03:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260o"
	.long	.Linfo_string240                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	284                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2c14:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250o"
	.long	.Linfo_string241                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	285                             # DW_AT_decl_line
	.long	2101                            # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2c25:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240o"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	287                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2c36:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230o"
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	288                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	52                              # Abbrev [52] 0x2c47:0x1d DW_TAG_lexical_block
	.quad	.Ltmp830                        # DW_AT_low_pc
	.long	.Ltmp835-.Ltmp830               # DW_AT_high_pc
	.byte	56                              # Abbrev [56] 0x2c54:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354o"
	.long	.Linfo_string236                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	254                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2c64:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges123               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2c69:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274o"
	.long	.Linfo_string239                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	279                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2c7a:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp839                        # DW_AT_low_pc
	.long	.Ltmp845-.Ltmp839               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	291                             # DW_AT_call_line
	.byte	55                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2c8f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210~"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2c98:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\207~"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2ca1:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370}"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2caa:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2cb3:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2cbc:0x17 DW_TAG_lexical_block
	.quad	.Ltmp840                        # DW_AT_low_pc
	.long	.Ltmp841-.Ltmp840               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2cc9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340}"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2cd3:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp842                        # DW_AT_low_pc
	.long	.Ltmp844-.Ltmp842               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2ce7:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp842                        # DW_AT_low_pc
	.long	.Ltmp843-.Ltmp842               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2cfd:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp846                        # DW_AT_low_pc
	.long	.Ltmp852-.Ltmp846               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	294                             # DW_AT_call_line
	.byte	34                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2d12:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250}"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2d1b:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\247}"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2d24:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230}"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2d2d:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220}"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2d36:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210}"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2d3f:0x17 DW_TAG_lexical_block
	.quad	.Ltmp847                        # DW_AT_low_pc
	.long	.Ltmp848-.Ltmp847               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2d4c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200}"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2d56:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp849                        # DW_AT_low_pc
	.long	.Ltmp851-.Ltmp849               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2d6a:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp849                        # DW_AT_low_pc
	.long	.Ltmp850-.Ltmp849               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2d80:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp853                        # DW_AT_low_pc
	.long	.Ltmp859-.Ltmp853               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	296                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2d95:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310|"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2d9e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\307|"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2da7:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270|"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2db0:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260|"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2db9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250|"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2dc2:0x17 DW_TAG_lexical_block
	.quad	.Ltmp854                        # DW_AT_low_pc
	.long	.Ltmp855-.Ltmp854               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2dcf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240|"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2dd9:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp856                        # DW_AT_low_pc
	.long	.Ltmp858-.Ltmp856               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2ded:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp856                        # DW_AT_low_pc
	.long	.Ltmp857-.Ltmp856               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x2e03:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp860                        # DW_AT_low_pc
	.long	.Ltmp866-.Ltmp860               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	298                             # DW_AT_call_line
	.byte	31                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x2e18:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350{"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2e21:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\347{"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2e2a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330{"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x2e33:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320{"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x2e3c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310{"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x2e45:0x17 DW_TAG_lexical_block
	.quad	.Ltmp861                        # DW_AT_low_pc
	.long	.Ltmp862-.Ltmp861               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x2e52:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300{"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x2e5c:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp863                        # DW_AT_low_pc
	.long	.Ltmp865-.Ltmp863               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x2e70:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp863                        # DW_AT_low_pc
	.long	.Ltmp864-.Ltmp863               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2e87:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges124               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2e8c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\224m"
	.long	.Linfo_string245                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	320                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2e9d:0x69 DW_TAG_lexical_block
	.long	.Ldebug_ranges125               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2ea2:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314l"
	.long	.Linfo_string246                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	326                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x2eb2:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310l"
	.long	.Linfo_string247                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	327                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x2ec2:0x15 DW_TAG_inlined_subroutine
	.long	10351                           # DW_AT_abstract_origin
	.quad	.Ltmp878                        # DW_AT_low_pc
	.long	.Ltmp879-.Ltmp878               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	327                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x2ed7:0x2e DW_TAG_lexical_block
	.long	.Ldebug_ranges126               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x2edc:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270l"
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	328                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	45                              # Abbrev [45] 0x2eed:0x17 DW_TAG_lexical_block
	.long	.Ldebug_ranges127               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x2ef2:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260l"
	.long	.Linfo_string239                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	330                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2f06:0x89 DW_TAG_lexical_block
	.long	.Ldebug_ranges128               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2f0b:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374i"
	.long	.Linfo_string246                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	341                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2f1b:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360i"
	.long	.Linfo_string249                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	342                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	58                              # Abbrev [58] 0x2f2c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354i"
	.long	.Linfo_string247                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	343                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x2f3c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340i"
	.long	.Linfo_string250                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	344                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x2f4c:0x15 DW_TAG_inlined_subroutine
	.long	10364                           # DW_AT_abstract_origin
	.quad	.Ltmp888                        # DW_AT_low_pc
	.long	.Ltmp889-.Ltmp888               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	343                             # DW_AT_call_line
	.byte	12                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x2f61:0x2d DW_TAG_lexical_block
	.long	.Ldebug_ranges129               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x2f66:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330i"
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	45                              # Abbrev [45] 0x2f77:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges130               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2f7c:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\324i"
	.long	.Linfo_string251                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	348                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2f8f:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges131               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2f94:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230e"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	363                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x2fa5:0x5f DW_TAG_lexical_block
	.long	.Ldebug_ranges132               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x2faa:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310d"
	.long	.Linfo_string239                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	370                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2fba:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300d"
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	372                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	58                              # Abbrev [58] 0x2fcb:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274d"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	375                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x2fdb:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges133               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x2fe0:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350c"
	.long	.Linfo_string235                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	381                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x2ff1:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340c"
	.long	.Linfo_string254                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	382                             # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3004:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges134               # DW_AT_ranges
	.byte	58                              # Abbrev [58] 0x3009:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314]"
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	437                             # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	46                              # Abbrev [46] 0x301a:0x15 DW_TAG_inlined_subroutine
	.long	10377                           # DW_AT_abstract_origin
	.quad	.Ltmp928                        # DW_AT_low_pc
	.long	.Ltmp929-.Ltmp928               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	445                             # DW_AT_call_line
	.byte	22                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x302f:0x15 DW_TAG_inlined_subroutine
	.long	10390                           # DW_AT_abstract_origin
	.quad	.Ltmp929                        # DW_AT_low_pc
	.long	.Ltmp930-.Ltmp929               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	445                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x3044:0x15 DW_TAG_inlined_subroutine
	.long	10403                           # DW_AT_abstract_origin
	.quad	.Ltmp932                        # DW_AT_low_pc
	.long	.Ltmp933-.Ltmp932               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	449                             # DW_AT_call_line
	.byte	22                              # DW_AT_call_column
	.byte	46                              # Abbrev [46] 0x3059:0x15 DW_TAG_inlined_subroutine
	.long	10416                           # DW_AT_abstract_origin
	.quad	.Ltmp933                        # DW_AT_low_pc
	.long	.Ltmp934-.Ltmp933               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	449                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	47                              # Abbrev [47] 0x306e:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp940                        # DW_AT_low_pc
	.long	.Ltmp946-.Ltmp940               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	473                             # DW_AT_call_line
	.byte	54                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x3083:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210{"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x308c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\207{"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3095:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370z"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x309e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360z"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x30a7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350z"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x30b0:0x17 DW_TAG_lexical_block
	.quad	.Ltmp941                        # DW_AT_low_pc
	.long	.Ltmp942-.Ltmp941               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x30bd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340z"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x30c7:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp943                        # DW_AT_low_pc
	.long	.Ltmp945-.Ltmp943               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x30db:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp943                        # DW_AT_low_pc
	.long	.Ltmp944-.Ltmp943               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x30f1:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp947                        # DW_AT_low_pc
	.long	.Ltmp953-.Ltmp947               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	475                             # DW_AT_call_line
	.byte	33                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x3106:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250z"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x310f:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\247z"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3118:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230z"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3121:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220z"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x312a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210z"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x3133:0x17 DW_TAG_lexical_block
	.quad	.Ltmp948                        # DW_AT_low_pc
	.long	.Ltmp949-.Ltmp948               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x3140:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200z"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x314a:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp950                        # DW_AT_low_pc
	.long	.Ltmp952-.Ltmp950               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x315e:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp950                        # DW_AT_low_pc
	.long	.Ltmp951-.Ltmp950               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3174:0xdd DW_TAG_lexical_block
	.long	.Ldebug_ranges135               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x3179:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340["
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	479                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	45                              # Abbrev [45] 0x318a:0x17 DW_TAG_lexical_block
	.long	.Ldebug_ranges136               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x318f:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330["
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	482                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x31a1:0x2c DW_TAG_lexical_block
	.long	.Ldebug_ranges137               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x31a6:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240Z"
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	495                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x31b7:0x15 DW_TAG_inlined_subroutine
	.long	10429                           # DW_AT_abstract_origin
	.quad	.Ltmp969                        # DW_AT_low_pc
	.long	.Ltmp970-.Ltmp969               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	497                             # DW_AT_call_line
	.byte	29                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x31cd:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp973                        # DW_AT_low_pc
	.long	.Ltmp979-.Ltmp973               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	499                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x31e2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310y"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x31eb:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\307y"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x31f4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270y"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x31fd:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260y"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3206:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250y"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x320f:0x17 DW_TAG_lexical_block
	.quad	.Ltmp974                        # DW_AT_low_pc
	.long	.Ltmp975-.Ltmp974               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x321c:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240y"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x3226:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp976                        # DW_AT_low_pc
	.long	.Ltmp978-.Ltmp976               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x323a:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp976                        # DW_AT_low_pc
	.long	.Ltmp977-.Ltmp976               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3251:0x43 DW_TAG_lexical_block
	.long	.Ldebug_ranges138               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x3256:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360X"
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	504                             # DW_AT_decl_line
	.long	16453                           # DW_AT_type
	.byte	45                              # Abbrev [45] 0x3267:0x2c DW_TAG_lexical_block
	.long	.Ldebug_ranges139               # DW_AT_ranges
	.byte	57                              # Abbrev [57] 0x326c:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350X"
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	506                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x327d:0x15 DW_TAG_inlined_subroutine
	.long	10442                           # DW_AT_abstract_origin
	.quad	.Ltmp987                        # DW_AT_low_pc
	.long	.Ltmp988-.Ltmp987               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	517                             # DW_AT_call_line
	.byte	29                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x3294:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp991                        # DW_AT_low_pc
	.long	.Ltmp997-.Ltmp991               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	520                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x32a9:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350x"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x32b2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\347x"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x32bb:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330x"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x32c4:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320x"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x32cd:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310x"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x32d6:0x17 DW_TAG_lexical_block
	.quad	.Ltmp992                        # DW_AT_low_pc
	.long	.Ltmp993-.Ltmp992               # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x32e3:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300x"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x32ed:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp994                        # DW_AT_low_pc
	.long	.Ltmp996-.Ltmp994               # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x3301:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp994                        # DW_AT_low_pc
	.long	.Ltmp995-.Ltmp994               # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x3317:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp999                        # DW_AT_low_pc
	.long	.Ltmp1005-.Ltmp999              # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	524                             # DW_AT_call_line
	.byte	30                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x332c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210x"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3335:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\207x"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x333e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370w"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3347:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360w"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3350:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350w"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x3359:0x17 DW_TAG_lexical_block
	.quad	.Ltmp1000                       # DW_AT_low_pc
	.long	.Ltmp1001-.Ltmp1000             # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x3366:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340w"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x3370:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp1002                       # DW_AT_low_pc
	.long	.Ltmp1004-.Ltmp1002             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x3384:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp1002                       # DW_AT_low_pc
	.long	.Ltmp1003-.Ltmp1002             # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x339b:0x68 DW_TAG_subprogram
	.quad	.Lfunc_begin18                  # DW_AT_low_pc
	.long	.Lfunc_end18-.Lfunc_begin18     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	13454                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x33ae:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	13471                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x33b7:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320}"
	.long	13483                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x33c0:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317}"
	.long	13495                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x33c9:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310}"
	.long	13507                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x33d2:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	13519                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x33db:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300}"
	.long	13532                           # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x33e4:0x1e DW_TAG_lexical_block
	.long	.Ldebug_ranges140               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x33e9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277}"
	.long	13546                           # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x33f2:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges141               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x33f7:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\276}"
	.long	13559                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x3403:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	64                              # Abbrev [64] 0x340f:0x7f DW_TAG_subprogram
	.quad	.Lfunc_begin19                  # DW_AT_low_pc
	.long	.Lfunc_end19-.Lfunc_begin19     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string178                # DW_AT_linkage_name
	.long	.Linfo_string179                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x342d:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x343c:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string100                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x344b:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x345a:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	95
	.long	.Linfo_string144                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3469:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	.Linfo_string80                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	553                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	46                              # Abbrev [46] 0x3478:0x15 DW_TAG_inlined_subroutine
	.long	13315                           # DW_AT_abstract_origin
	.quad	.Ltmp1066                       # DW_AT_low_pc
	.long	.Ltmp1067-.Ltmp1066             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	591                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	31                              # Abbrev [31] 0x348e:0x78 DW_TAG_subprogram
	.long	.Linfo_string141                # DW_AT_linkage_name
	.long	.Linfo_string142                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	1                               # DW_AT_inline
	.byte	18                              # Abbrev [18] 0x349f:0xc DW_TAG_formal_parameter
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	18                              # Abbrev [18] 0x34ab:0xc DW_TAG_formal_parameter
	.long	.Linfo_string143                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
	.long	1562                            # DW_AT_type
	.byte	18                              # Abbrev [18] 0x34b7:0xc DW_TAG_formal_parameter
	.long	.Linfo_string144                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	18                              # Abbrev [18] 0x34c3:0xc DW_TAG_formal_parameter
	.long	.Linfo_string80                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	529                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	19                              # Abbrev [19] 0x34cf:0xd DW_TAG_variable
	.long	.Linfo_string100                # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	531                             # DW_AT_decl_line
	.long	13574                           # DW_AT_type
	.byte	19                              # Abbrev [19] 0x34dc:0xd DW_TAG_variable
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	532                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x34e9:0x1c DW_TAG_lexical_block
	.byte	21                              # Abbrev [21] 0x34ea:0xc DW_TAG_variable
	.long	.Linfo_string124                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	540                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	20                              # Abbrev [20] 0x34f6:0xe DW_TAG_lexical_block
	.byte	21                              # Abbrev [21] 0x34f7:0xc DW_TAG_variable
	.long	.Linfo_string126                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	544                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	3                               # Abbrev [3] 0x3506:0xe DW_TAG_array_type
	.long	81                              # DW_AT_type
	.byte	65                              # Abbrev [65] 0x350b:0x8 DW_TAG_subrange_type
	.long	88                              # DW_AT_type
	.byte	0                               # DW_AT_lower_bound
	.short	256                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	64                              # Abbrev [64] 0x3514:0xc9 DW_TAG_subprogram
	.quad	.Lfunc_begin20                  # DW_AT_low_pc
	.long	.Lfunc_end20-.Lfunc_begin20     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string180                # DW_AT_linkage_name
	.long	.Linfo_string181                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	614                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3532:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330|"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	614                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3542:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310|"
	.long	.Linfo_string204                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	614                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3552:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\304|"
	.long	.Linfo_string80                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	614                             # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x3562:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\303|"
	.long	.Linfo_string82                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	616                             # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	47                              # Abbrev [47] 0x3572:0x6a DW_TAG_inlined_subroutine
	.long	13454                           # DW_AT_abstract_origin
	.quad	.Ltmp1095                       # DW_AT_low_pc
	.long	.Ltmp1101-.Ltmp1095             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	617                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x3587:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	13471                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3590:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320}"
	.long	13483                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3599:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\317}"
	.long	13495                           # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x35a2:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\310}"
	.long	13507                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x35ab:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	13519                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x35b4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300}"
	.long	13532                           # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x35bd:0x1e DW_TAG_lexical_block
	.long	.Ldebug_ranges142               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x35c2:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277}"
	.long	13546                           # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x35cb:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges143               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x35d0:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\276}"
	.long	13559                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	37                              # Abbrev [37] 0x35dd:0xcb DW_TAG_subprogram
	.long	.Linfo_string103                # DW_AT_linkage_name
	.long	.Linfo_string103                # DW_AT_name
	.byte	5                               # DW_AT_decl_file
	.byte	21                              # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	36                              # Abbrev [36] 0x35e9:0xc DW_TAG_variable
	.long	.Linfo_string104                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	23                              # DW_AT_decl_line
	.long	1017                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x35f5:0xb DW_TAG_variable
	.long	.Linfo_string105                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	24                              # DW_AT_decl_line
	.long	289                             # DW_AT_type
	.byte	35                              # Abbrev [35] 0x3600:0xb DW_TAG_variable
	.long	.Linfo_string106                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	25                              # DW_AT_decl_line
	.long	1024                            # DW_AT_type
	.byte	35                              # Abbrev [35] 0x360b:0xb DW_TAG_variable
	.long	.Linfo_string107                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	26                              # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	35                              # Abbrev [35] 0x3616:0xb DW_TAG_variable
	.long	.Linfo_string108                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	20                              # Abbrev [20] 0x3621:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x3622:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	31                              # DW_AT_decl_line
	.long	1534                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x362e:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x362f:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	35                              # DW_AT_decl_line
	.long	1541                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x363b:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x363c:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	40                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x3648:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x3649:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	45                              # DW_AT_decl_line
	.long	697                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x3656:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x3657:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	50                              # DW_AT_decl_line
	.long	1548                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x3664:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x3665:0xb DW_TAG_variable
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	55                              # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x3671:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x3672:0xb DW_TAG_variable
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	59                              # DW_AT_decl_line
	.long	1555                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x367e:0xd DW_TAG_lexical_block
	.byte	35                              # Abbrev [35] 0x367f:0xb DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	63                              # DW_AT_decl_line
	.long	869                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x368b:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x368c:0xc DW_TAG_variable
	.long	.Linfo_string112                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	20                              # Abbrev [20] 0x3699:0xe DW_TAG_lexical_block
	.byte	36                              # Abbrev [36] 0x369a:0xc DW_TAG_variable
	.long	.Linfo_string77                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	71                              # DW_AT_decl_line
	.long	1562                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x36a8:0xc DW_TAG_subprogram
	.long	.Linfo_string116                # DW_AT_linkage_name
	.long	.Linfo_string116                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.byte	241                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	64                              # Abbrev [64] 0x36b4:0x245 DW_TAG_subprogram
	.quad	.Lfunc_begin21                  # DW_AT_low_pc
	.long	.Lfunc_end21-.Lfunc_begin21     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string182                # DW_AT_linkage_name
	.long	.Linfo_string183                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	620                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x36d2:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270~"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	620                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x36e2:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250~"
	.long	.Linfo_string204                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	620                             # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x36f2:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220~"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	626                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	58                              # Abbrev [58] 0x3703:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374}"
	.long	.Linfo_string78                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	634                             # DW_AT_decl_line
	.long	16466                           # DW_AT_type
	.byte	47                              # Abbrev [47] 0x3713:0x7d DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp1107                       # DW_AT_low_pc
	.long	.Ltmp1113-.Ltmp1107             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	630                             # DW_AT_call_line
	.byte	13                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x3728:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3730:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3738:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3740:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3748:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x3750:0x16 DW_TAG_lexical_block
	.quad	.Ltmp1108                       # DW_AT_low_pc
	.long	.Ltmp1109-.Ltmp1108             # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x375d:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x3766:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp1110                       # DW_AT_low_pc
	.long	.Ltmp1112-.Ltmp1110             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x377a:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp1110                       # DW_AT_low_pc
	.long	.Ltmp1111-.Ltmp1110             # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0x3790:0xe5 DW_TAG_inlined_subroutine
	.long	13789                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges144               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	634                             # DW_AT_call_line
	.byte	13                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x379d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330}"
	.long	13801                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x37a6:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\327}"
	.long	13813                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x37af:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\326}"
	.long	13824                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x37b8:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320}"
	.long	13835                           # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x37c1:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314}"
	.long	13846                           # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x37ca:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges145               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x37cf:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\277}"
	.long	13858                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x37d9:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges146               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x37de:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274}"
	.long	13871                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x37e8:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges147               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x37ed:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\354|"
	.long	13884                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x37f7:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges148               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x37fc:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230|"
	.long	13897                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3806:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges149               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x380b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300{"
	.long	13911                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3815:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges150               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x381a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\377z"
	.long	13925                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3824:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges151               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3829:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374z"
	.long	13938                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3833:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges152               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3838:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\254z"
	.long	13951                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3842:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges153               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3847:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330y"
	.long	13964                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3851:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges154               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3856:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200y"
	.long	13978                           # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x3860:0x14 DW_TAG_inlined_subroutine
	.long	13992                           # DW_AT_abstract_origin
	.quad	.Ltmp1138                       # DW_AT_low_pc
	.long	.Ltmp1139-.Ltmp1138             # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x3875:0x83 DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp1149                       # DW_AT_low_pc
	.long	.Ltmp1155-.Ltmp1149             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	654                             # DW_AT_call_line
	.byte	16                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x388a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230\177"
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3893:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\227\177"
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x389c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210\177"
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x38a5:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200\177"
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x38ae:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370~"
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x38b7:0x17 DW_TAG_lexical_block
	.quad	.Ltmp1150                       # DW_AT_low_pc
	.long	.Ltmp1151-.Ltmp1150             # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x38c4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360~"
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x38ce:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp1152                       # DW_AT_low_pc
	.long	.Ltmp1154-.Ltmp1152             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x38e2:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp1152                       # DW_AT_low_pc
	.long	.Ltmp1153-.Ltmp1152             # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	64                              # Abbrev [64] 0x38f9:0xde DW_TAG_subprogram
	.quad	.Lfunc_begin22                  # DW_AT_low_pc
	.long	.Lfunc_end22-.Lfunc_begin22     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string184                # DW_AT_linkage_name
	.long	.Linfo_string185                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	660                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3917:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230\177"
	.long	.Linfo_string48                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	660                             # DW_AT_decl_line
	.long	704                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3927:0x10 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\210\177"
	.long	.Linfo_string100                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.short	660                             # DW_AT_decl_line
	.long	885                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3937:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\200\177"
	.long	.Linfo_string211                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	662                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3948:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370~"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.short	663                             # DW_AT_decl_line
	.long	928                             # DW_AT_type
	.byte	47                              # Abbrev [47] 0x3959:0x7d DW_TAG_inlined_subroutine
	.long	2014                            # DW_AT_abstract_origin
	.quad	.Ltmp1170                       # DW_AT_low_pc
	.long	.Ltmp1176-.Ltmp1170             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	667                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x396e:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	2030                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3976:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	2041                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x397e:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	2052                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3986:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	2063                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x398e:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	2074                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x3996:0x16 DW_TAG_lexical_block
	.quad	.Ltmp1171                       # DW_AT_low_pc
	.long	.Ltmp1172-.Ltmp1171             # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x39a3:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	2087                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	42                              # Abbrev [42] 0x39ac:0x29 DW_TAG_inlined_subroutine
	.long	2122                            # DW_AT_abstract_origin
	.quad	.Ltmp1173                       # DW_AT_low_pc
	.long	.Ltmp1175-.Ltmp1173             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.byte	182                             # DW_AT_call_line
	.byte	9                               # DW_AT_call_column
	.byte	51                              # Abbrev [51] 0x39c0:0x14 DW_TAG_inlined_subroutine
	.long	2110                            # DW_AT_abstract_origin
	.quad	.Ltmp1173                       # DW_AT_low_pc
	.long	.Ltmp1174-.Ltmp1173             # DW_AT_high_pc
	.byte	7                               # DW_AT_call_file
	.byte	116                             # DW_AT_call_line
	.byte	10                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x39d7:0x6f DW_TAG_subprogram
	.quad	.Lfunc_begin23                  # DW_AT_low_pc
	.long	.Lfunc_end23-.Lfunc_begin23     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	1901                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x39ea:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	1917                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x39f2:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	1928                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x39fa:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	103
	.long	1939                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3a02:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	102
	.long	1950                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3a0a:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	1961                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x3a12:0x33 DW_TAG_lexical_block
	.long	.Ldebug_ranges155               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3a17:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	80
	.long	1974                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x3a1f:0x25 DW_TAG_lexical_block
	.long	.Ldebug_ranges156               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3a24:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	79
	.long	1987                            # DW_AT_abstract_origin
	.byte	52                              # Abbrev [52] 0x3a2c:0x17 DW_TAG_lexical_block
	.quad	.Ltmp1185                       # DW_AT_low_pc
	.long	.Ltmp1186-.Ltmp1185             # DW_AT_high_pc
	.byte	44                              # Abbrev [44] 0x3a39:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\377~"
	.long	1999                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	30                              # Abbrev [30] 0x3a46:0xd DW_TAG_subprogram
	.long	.Linfo_string134                # DW_AT_linkage_name
	.long	.Linfo_string134                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	278                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	54                              # Abbrev [54] 0x3a53:0xdc DW_TAG_subprogram
	.quad	.Lfunc_begin24                  # DW_AT_low_pc
	.long	.Lfunc_end24-.Lfunc_begin24     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string186                # DW_AT_linkage_name
	.long	.Linfo_string187                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	38                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x3a70:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string204                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	38                              # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x3a7e:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string82                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	38                              # DW_AT_decl_line
	.long	16477                           # DW_AT_type
	.byte	49                              # Abbrev [49] 0x3a8c:0xc DW_TAG_inlined_subroutine
	.long	14918                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges157               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	48                              # DW_AT_call_line
	.byte	24                              # DW_AT_call_column
	.byte	45                              # Abbrev [45] 0x3a98:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges158               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x3a9d:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\314}"
	.long	.Linfo_string94                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	58                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3aad:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges159               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x3ab2:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274}"
	.long	.Linfo_string94                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	61                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3ac2:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges160               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x3ac7:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\344|"
	.long	.Linfo_string94                 # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	64                              # DW_AT_decl_line
	.long	146                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3ad7:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges161               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x3adc:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220|"
	.long	.Linfo_string94                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	67                              # DW_AT_decl_line
	.long	697                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3aed:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges162               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x3af2:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260{"
	.long	.Linfo_string94                 # DW_AT_name
	.byte	2                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	70                              # DW_AT_decl_line
	.long	1548                            # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3b03:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges163               # DW_AT_ranges
	.byte	56                              # Abbrev [56] 0x3b08:0xf DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\234x"
	.long	.Linfo_string122                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	83                              # DW_AT_decl_line
	.long	16490                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3b18:0x16 DW_TAG_lexical_block
	.long	.Ldebug_ranges164               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x3b1d:0x10 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\300w"
	.long	.Linfo_string248                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	86                              # DW_AT_decl_line
	.long	16407                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	30                              # Abbrev [30] 0x3b2f:0xd DW_TAG_subprogram
	.long	.Linfo_string134                # DW_AT_linkage_name
	.long	.Linfo_string134                # DW_AT_name
	.byte	6                               # DW_AT_decl_file
	.short	278                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	54                              # Abbrev [54] 0x3b3c:0x38 DW_TAG_subprogram
	.quad	.Lfunc_begin25                  # DW_AT_low_pc
	.long	.Lfunc_end25-.Lfunc_begin25     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string188                # DW_AT_linkage_name
	.long	.Linfo_string189                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	93                              # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	41                              # Abbrev [41] 0x3b59:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string204                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	93                              # DW_AT_decl_line
	.long	987                             # DW_AT_type
	.byte	49                              # Abbrev [49] 0x3b67:0xc DW_TAG_inlined_subroutine
	.long	15151                           # DW_AT_abstract_origin
	.long	.Ldebug_ranges165               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	100                             # DW_AT_call_line
	.byte	25                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x3b74:0x64 DW_TAG_subprogram
	.quad	.Lfunc_begin26                  # DW_AT_low_pc
	.long	.Lfunc_end26-.Lfunc_begin26     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	1221                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3b87:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3b8f:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3b97:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3b9f:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	100
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3ba7:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x3baf:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges166               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3bb4:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217\177"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0x3bbd:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges167               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x3bc9:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges168               # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	40                              # Abbrev [40] 0x3bd8:0x4f DW_TAG_subprogram
	.quad	.Lfunc_begin27                  # DW_AT_low_pc
	.long	.Lfunc_end27-.Lfunc_begin27     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string190                # DW_AT_linkage_name
	.long	.Linfo_string191                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	185                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	915                             # DW_AT_type
                                        # DW_AT_external
	.byte	41                              # Abbrev [41] 0x3bf5:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string239                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	185                             # DW_AT_decl_line
	.long	1562                            # DW_AT_type
	.byte	41                              # Abbrev [41] 0x3c03:0xe DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string110                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	185                             # DW_AT_decl_line
	.long	915                             # DW_AT_type
	.byte	45                              # Abbrev [45] 0x3c11:0x15 DW_TAG_lexical_block
	.long	.Ldebug_ranges169               # DW_AT_ranges
	.byte	55                              # Abbrev [55] 0x3c16:0xf DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string225                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	1                               # DW_AT_decl_file
	.byte	188                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	59                              # Abbrev [59] 0x3c27:0x1d2 DW_TAG_subprogram
	.quad	.Lfunc_begin28                  # DW_AT_low_pc
	.long	.Lfunc_end28-.Lfunc_begin28     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	1044                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c3a:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\370}"
	.long	1061                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c43:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\360}"
	.long	1073                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c4c:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350}"
	.long	1085                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c55:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340}"
	.long	1097                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c5e:0x9 DW_TAG_formal_parameter
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330}"
	.long	1109                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3c67:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	16
	.long	1121                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3c6f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\327}"
	.long	1133                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3c78:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250|"
	.long	1145                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3c81:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220{"
	.long	1158                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3c8a:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214z"
	.long	1171                            # DW_AT_abstract_origin
	.byte	48                              # Abbrev [48] 0x3c93:0x1a DW_TAG_inlined_subroutine
	.long	1209                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges170               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	6                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x3ca0:0xc DW_TAG_inlined_subroutine
	.long	1197                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges171               # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	47                              # Abbrev [47] 0x3cad:0x66 DW_TAG_inlined_subroutine
	.long	1221                            # DW_AT_abstract_origin
	.quad	.Ltmp1307                       # DW_AT_low_pc
	.long	.Ltmp1315-.Ltmp1307             # DW_AT_high_pc
	.byte	1                               # DW_AT_call_file
	.short	683                             # DW_AT_call_line
	.byte	27                              # DW_AT_call_column
	.byte	43                              # Abbrev [43] 0x3cc2:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	1237                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3cca:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	1248                            # DW_AT_abstract_origin
	.byte	43                              # Abbrev [43] 0x3cd2:0x8 DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	1259                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3cda:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	100
	.long	1270                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3ce2:0x8 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	88
	.long	1281                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x3cea:0x28 DW_TAG_lexical_block
	.long	.Ldebug_ranges172               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3cef:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217\177"
	.long	1294                            # DW_AT_abstract_origin
	.byte	50                              # Abbrev [50] 0x3cf8:0x19 DW_TAG_inlined_subroutine
	.long	1319                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges173               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.byte	151                             # DW_AT_call_line
	.byte	8                               # DW_AT_call_column
	.byte	49                              # Abbrev [49] 0x3d04:0xc DW_TAG_inlined_subroutine
	.long	1307                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges174               # DW_AT_ranges
	.byte	4                               # DW_AT_call_file
	.byte	44                              # DW_AT_call_line
	.byte	38                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	48                              # Abbrev [48] 0x3d13:0xe5 DW_TAG_inlined_subroutine
	.long	1331                            # DW_AT_abstract_origin
	.long	.Ldebug_ranges175               # DW_AT_ranges
	.byte	1                               # DW_AT_call_file
	.short	690                             # DW_AT_call_line
	.byte	17                              # DW_AT_call_column
	.byte	44                              # Abbrev [44] 0x3d20:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\340y"
	.long	1343                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3d29:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\337y"
	.long	1355                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3d32:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\336y"
	.long	1366                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3d3b:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\330y"
	.long	1377                            # DW_AT_abstract_origin
	.byte	44                              # Abbrev [44] 0x3d44:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\324y"
	.long	1388                            # DW_AT_abstract_origin
	.byte	45                              # Abbrev [45] 0x3d4d:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges176               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d52:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\307y"
	.long	1400                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3d5c:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges177               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d61:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\304y"
	.long	1413                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3d6b:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges178               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d70:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\374x"
	.long	1426                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3d7a:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges179               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d7f:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\250x"
	.long	1439                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3d89:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges180               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d8e:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\320w"
	.long	1453                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3d98:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges181               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3d9d:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\217w"
	.long	1467                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3da7:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges182               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3dac:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\214w"
	.long	1480                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3db6:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges183               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3dbb:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\274v"
	.long	1493                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3dc5:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges184               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3dca:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\350u"
	.long	1506                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	45                              # Abbrev [45] 0x3dd4:0xf DW_TAG_lexical_block
	.long	.Ldebug_ranges185               # DW_AT_ranges
	.byte	44                              # Abbrev [44] 0x3dd9:0x9 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\220u"
	.long	1520                            # DW_AT_abstract_origin
	.byte	0                               # End Of Children Mark
	.byte	51                              # Abbrev [51] 0x3de3:0x14 DW_TAG_inlined_subroutine
	.long	1569                            # DW_AT_abstract_origin
	.quad	.Ltmp1339                       # DW_AT_low_pc
	.long	.Ltmp1340-.Ltmp1339             # DW_AT_high_pc
	.byte	5                               # DW_AT_call_file
	.byte	75                              # DW_AT_call_line
	.byte	4                               # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
	.byte	64                              # Abbrev [64] 0x3df9:0x4d DW_TAG_subprogram
	.quad	.Lfunc_begin29                  # DW_AT_low_pc
	.long	.Lfunc_end29-.Lfunc_begin29     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string192                # DW_AT_linkage_name
	.long	.Linfo_string193                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	263                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3e17:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string49                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	263                             # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3e26:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	.Linfo_string78                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	263                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3e35:0x10 DW_TAG_variable
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	104
	.long	.Linfo_string258                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	265                             # DW_AT_decl_line
	.long	16497                           # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	64                              # Abbrev [64] 0x3e46:0x3d DW_TAG_subprogram
	.quad	.Lfunc_begin30                  # DW_AT_low_pc
	.long	.Lfunc_end30-.Lfunc_begin30     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string194                # DW_AT_linkage_name
	.long	.Linfo_string195                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	269                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3e64:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	120
	.long	.Linfo_string49                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	269                             # DW_AT_decl_line
	.long	215                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3e73:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	119
	.long	.Linfo_string78                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	269                             # DW_AT_decl_line
	.long	81                              # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	60                              # Abbrev [60] 0x3e83:0x5f DW_TAG_subprogram
	.quad	.Lfunc_begin31                  # DW_AT_low_pc
	.long	.Lfunc_end31-.Lfunc_begin31     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string196                # DW_AT_linkage_name
	.long	.Linfo_string197                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	309                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	61                              # Abbrev [61] 0x3ea1:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string60                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	309                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3eb0:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string203                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	309                             # DW_AT_decl_line
	.long	944                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3ebf:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\270\177"
	.long	.Linfo_string261                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	311                             # DW_AT_decl_line
	.long	717                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3ed0:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\177"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	313                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	60                              # Abbrev [60] 0x3ee2:0x70 DW_TAG_subprogram
	.quad	.Lfunc_begin32                  # DW_AT_low_pc
	.long	.Lfunc_end32-.Lfunc_begin32     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string198                # DW_AT_linkage_name
	.long	.Linfo_string199                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	342                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	688                             # DW_AT_type
                                        # DW_AT_external
	.byte	61                              # Abbrev [61] 0x3f00:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	112
	.long	.Linfo_string60                 # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	342                             # DW_AT_decl_line
	.long	876                             # DW_AT_type
	.byte	61                              # Abbrev [61] 0x3f0f:0xf DW_TAG_formal_parameter
	.byte	2                               # DW_AT_location
	.byte	145
	.byte	96
	.long	.Linfo_string203                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	342                             # DW_AT_decl_line
	.long	944                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3f1e:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\260\177"
	.long	.Linfo_string261                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	344                             # DW_AT_decl_line
	.long	717                             # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3f2f:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\240\177"
	.long	.Linfo_string258                # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	345                             # DW_AT_decl_line
	.long	16510                           # DW_AT_type
	.byte	57                              # Abbrev [57] 0x3f40:0x11 DW_TAG_variable
	.byte	3                               # DW_AT_location
	.byte	145
	.ascii	"\230\177"
	.long	.Linfo_string63                 # DW_AT_name
	.byte	1                               # DW_AT_alignment
	.byte	2                               # DW_AT_decl_file
	.short	347                             # DW_AT_decl_line
	.long	937                             # DW_AT_type
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x3f52:0xc DW_TAG_subprogram
	.long	.Linfo_string145                # DW_AT_linkage_name
	.long	.Linfo_string145                # DW_AT_name
	.byte	9                               # DW_AT_decl_file
	.byte	221                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	60                              # Abbrev [60] 0x3f5e:0x34 DW_TAG_subprogram
	.quad	.Lfunc_begin33                  # DW_AT_low_pc
	.long	.Lfunc_end33-.Lfunc_begin33     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string200                # DW_AT_linkage_name
	.long	.Linfo_string145                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	402                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	16338                           # DW_AT_type
                                        # DW_AT_external
	.byte	46                              # Abbrev [46] 0x3f7c:0x15 DW_TAG_inlined_subroutine
	.long	16210                           # DW_AT_abstract_origin
	.quad	.Ltmp1363                       # DW_AT_low_pc
	.long	.Ltmp1364-.Ltmp1363             # DW_AT_high_pc
	.byte	2                               # DW_AT_call_file
	.short	405                             # DW_AT_call_line
	.byte	43                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	32                              # Abbrev [32] 0x3f92:0xc DW_TAG_subprogram
	.long	.Linfo_string146                # DW_AT_linkage_name
	.long	.Linfo_string146                # DW_AT_name
	.byte	9                               # DW_AT_decl_file
	.byte	222                             # DW_AT_decl_line
	.byte	1                               # DW_AT_inline
	.byte	60                              # Abbrev [60] 0x3f9e:0x34 DW_TAG_subprogram
	.quad	.Lfunc_begin34                  # DW_AT_low_pc
	.long	.Lfunc_end34-.Lfunc_begin34     # DW_AT_high_pc
	.byte	1                               # DW_AT_frame_base
	.byte	86
	.long	.Linfo_string202                # DW_AT_linkage_name
	.long	.Linfo_string146                # DW_AT_name
	.byte	2                               # DW_AT_decl_file
	.short	414                             # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	16338                           # DW_AT_type
                                        # DW_AT_external
	.byte	46                              # Abbrev [46] 0x3fbc:0x15 DW_TAG_inlined_subroutine
	.long	16274                           # DW_AT_abstract_origin
	.quad	.Ltmp1367                       # DW_AT_low_pc
	.long	.Ltmp1368-.Ltmp1367             # DW_AT_high_pc
	.byte	2                               # DW_AT_call_file
	.short	417                             # DW_AT_call_line
	.byte	43                              # DW_AT_call_column
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x3fd2:0xd DW_TAG_pointer_type
	.long	180                             # DW_AT_type
	.long	.Linfo_string201                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	28                              # Abbrev [28] 0x3fdf:0x1e DW_TAG_structure_type
	.long	.Linfo_string205                # DW_AT_name
	.byte	16                              # DW_AT_byte_size
	.byte	8                               # DW_AT_alignment
	.byte	29                              # Abbrev [29] 0x3fe6:0xb DW_TAG_member
	.long	.Linfo_string61                 # DW_AT_name
	.long	215                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	29                              # Abbrev [29] 0x3ff1:0xb DW_TAG_member
	.long	.Linfo_string69                 # DW_AT_name
	.long	1017                            # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x3ffd:0xd DW_TAG_pointer_type
	.long	215                             # DW_AT_type
	.long	.Linfo_string214                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	23                              # Abbrev [23] 0x400a:0xd DW_TAG_pointer_type
	.long	876                             # DW_AT_type
	.long	.Linfo_string220                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	5                               # Abbrev [5] 0x4017:0x7 DW_TAG_base_type
	.long	.Linfo_string226                # DW_AT_name
	.byte	4                               # DW_AT_encoding
	.byte	8                               # DW_AT_byte_size
	.byte	3                               # Abbrev [3] 0x401e:0xd DW_TAG_array_type
	.long	869                             # DW_AT_type
	.byte	4                               # Abbrev [4] 0x4023:0x7 DW_TAG_subrange_type
	.long	88                              # DW_AT_type
	.byte	0                               # DW_AT_lower_bound
	.byte	126                             # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	3                               # Abbrev [3] 0x402b:0xd DW_TAG_array_type
	.long	81                              # DW_AT_type
	.byte	4                               # Abbrev [4] 0x4030:0x7 DW_TAG_subrange_type
	.long	88                              # DW_AT_type
	.byte	0                               # DW_AT_lower_bound
	.byte	12                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	3                               # Abbrev [3] 0x4038:0xd DW_TAG_array_type
	.long	81                              # DW_AT_type
	.byte	4                               # Abbrev [4] 0x403d:0x7 DW_TAG_subrange_type
	.long	88                              # DW_AT_type
	.byte	0                               # DW_AT_lower_bound
	.byte	22                              # DW_AT_count
	.byte	0                               # End Of Children Mark
	.byte	23                              # Abbrev [23] 0x4045:0xd DW_TAG_pointer_type
	.long	869                             # DW_AT_type
	.long	.Linfo_string242                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	25                              # Abbrev [25] 0x4052:0xb DW_TAG_typedef
	.long	869                             # DW_AT_type
	.long	.Linfo_string255                # DW_AT_name
	.byte	1                               # DW_AT_decl_file
	.byte	27                              # DW_AT_decl_line
	.byte	23                              # Abbrev [23] 0x405d:0xd DW_TAG_pointer_type
	.long	1024                            # DW_AT_type
	.long	.Linfo_string256                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	5                               # Abbrev [5] 0x406a:0x7 DW_TAG_base_type
	.long	.Linfo_string257                # DW_AT_name
	.byte	4                               # DW_AT_encoding
	.byte	4                               # DW_AT_byte_size
	.byte	23                              # Abbrev [23] 0x4071:0xd DW_TAG_pointer_type
	.long	16510                           # DW_AT_type
	.long	.Linfo_string260                # DW_AT_name
	.long	0                               # DW_AT_address_class
	.byte	28                              # Abbrev [28] 0x407e:0x1e DW_TAG_structure_type
	.long	.Linfo_string259                # DW_AT_name
	.byte	16                              # DW_AT_byte_size
	.byte	8                               # DW_AT_alignment
	.byte	29                              # Abbrev [29] 0x4085:0xb DW_TAG_member
	.long	.Linfo_string61                 # DW_AT_name
	.long	215                             # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	0                               # DW_AT_data_member_location
	.byte	29                              # Abbrev [29] 0x4090:0xb DW_TAG_member
	.long	.Linfo_string69                 # DW_AT_name
	.long	1017                            # DW_AT_type
	.byte	8                               # DW_AT_alignment
	.byte	8                               # DW_AT_data_member_location
	.byte	0                               # End Of Children Mark
	.byte	0                               # End Of Children Mark
.Ldebug_info_end0:
	.section	.debug_ranges,"",@progbits
.Ldebug_ranges0:
	.quad	.Ltmp4
	.quad	.Ltmp274
	.quad	.Ltmp275
	.quad	.Ltmp284
	.quad	0
	.quad	0
.Ldebug_ranges1:
	.quad	.Ltmp5
	.quad	.Ltmp273
	.quad	.Ltmp275
	.quad	.Ltmp284
	.quad	0
	.quad	0
.Ldebug_ranges2:
	.quad	.Ltmp19
	.quad	.Ltmp20
	.quad	.Ltmp55
	.quad	.Ltmp56
	.quad	0
	.quad	0
.Ldebug_ranges3:
	.quad	.Ltmp19
	.quad	.Ltmp20
	.quad	.Ltmp55
	.quad	.Ltmp56
	.quad	0
	.quad	0
.Ldebug_ranges4:
	.quad	.Ltmp23
	.quad	.Ltmp26
	.quad	.Ltmp27
	.quad	.Ltmp28
	.quad	0
	.quad	0
.Ldebug_ranges5:
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp27
	.quad	.Ltmp28
	.quad	0
	.quad	0
.Ldebug_ranges6:
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp27
	.quad	.Ltmp28
	.quad	0
	.quad	0
.Ldebug_ranges7:
	.quad	.Ltmp30
	.quad	.Ltmp54
	.quad	.Ltmp57
	.quad	.Ltmp67
	.quad	0
	.quad	0
.Ldebug_ranges8:
	.quad	.Ltmp33
	.quad	.Ltmp34
	.quad	.Ltmp57
	.quad	.Ltmp58
	.quad	0
	.quad	0
.Ldebug_ranges9:
	.quad	.Ltmp35
	.quad	.Ltmp36
	.quad	.Ltmp58
	.quad	.Ltmp59
	.quad	0
	.quad	0
.Ldebug_ranges10:
	.quad	.Ltmp37
	.quad	.Ltmp38
	.quad	.Ltmp59
	.quad	.Ltmp60
	.quad	0
	.quad	0
.Ldebug_ranges11:
	.quad	.Ltmp39
	.quad	.Ltmp40
	.quad	.Ltmp60
	.quad	.Ltmp61
	.quad	0
	.quad	0
.Ldebug_ranges12:
	.quad	.Ltmp41
	.quad	.Ltmp42
	.quad	.Ltmp61
	.quad	.Ltmp62
	.quad	0
	.quad	0
.Ldebug_ranges13:
	.quad	.Ltmp43
	.quad	.Ltmp44
	.quad	.Ltmp62
	.quad	.Ltmp63
	.quad	0
	.quad	0
.Ldebug_ranges14:
	.quad	.Ltmp45
	.quad	.Ltmp46
	.quad	.Ltmp63
	.quad	.Ltmp64
	.quad	0
	.quad	0
.Ldebug_ranges15:
	.quad	.Ltmp47
	.quad	.Ltmp48
	.quad	.Ltmp64
	.quad	.Ltmp65
	.quad	0
	.quad	0
.Ldebug_ranges16:
	.quad	.Ltmp49
	.quad	.Ltmp50
	.quad	.Ltmp65
	.quad	.Ltmp66
	.quad	0
	.quad	0
.Ldebug_ranges17:
	.quad	.Ltmp51
	.quad	.Ltmp52
	.quad	.Ltmp66
	.quad	.Ltmp67
	.quad	0
	.quad	0
.Ldebug_ranges18:
	.quad	.Ltmp76
	.quad	.Ltmp131
	.quad	.Ltmp278
	.quad	.Ltmp279
	.quad	0
	.quad	0
.Ldebug_ranges19:
	.quad	.Ltmp80
	.quad	.Ltmp81
	.quad	.Ltmp116
	.quad	.Ltmp117
	.quad	0
	.quad	0
.Ldebug_ranges20:
	.quad	.Ltmp80
	.quad	.Ltmp81
	.quad	.Ltmp116
	.quad	.Ltmp117
	.quad	0
	.quad	0
.Ldebug_ranges21:
	.quad	.Ltmp84
	.quad	.Ltmp87
	.quad	.Ltmp88
	.quad	.Ltmp89
	.quad	0
	.quad	0
.Ldebug_ranges22:
	.quad	.Ltmp85
	.quad	.Ltmp86
	.quad	.Ltmp88
	.quad	.Ltmp89
	.quad	0
	.quad	0
.Ldebug_ranges23:
	.quad	.Ltmp85
	.quad	.Ltmp86
	.quad	.Ltmp88
	.quad	.Ltmp89
	.quad	0
	.quad	0
.Ldebug_ranges24:
	.quad	.Ltmp91
	.quad	.Ltmp115
	.quad	.Ltmp118
	.quad	.Ltmp128
	.quad	0
	.quad	0
.Ldebug_ranges25:
	.quad	.Ltmp94
	.quad	.Ltmp95
	.quad	.Ltmp118
	.quad	.Ltmp119
	.quad	0
	.quad	0
.Ldebug_ranges26:
	.quad	.Ltmp96
	.quad	.Ltmp97
	.quad	.Ltmp119
	.quad	.Ltmp120
	.quad	0
	.quad	0
.Ldebug_ranges27:
	.quad	.Ltmp98
	.quad	.Ltmp99
	.quad	.Ltmp120
	.quad	.Ltmp121
	.quad	0
	.quad	0
.Ldebug_ranges28:
	.quad	.Ltmp100
	.quad	.Ltmp101
	.quad	.Ltmp121
	.quad	.Ltmp122
	.quad	0
	.quad	0
.Ldebug_ranges29:
	.quad	.Ltmp102
	.quad	.Ltmp103
	.quad	.Ltmp122
	.quad	.Ltmp123
	.quad	0
	.quad	0
.Ldebug_ranges30:
	.quad	.Ltmp104
	.quad	.Ltmp105
	.quad	.Ltmp123
	.quad	.Ltmp124
	.quad	0
	.quad	0
.Ldebug_ranges31:
	.quad	.Ltmp106
	.quad	.Ltmp107
	.quad	.Ltmp124
	.quad	.Ltmp125
	.quad	0
	.quad	0
.Ldebug_ranges32:
	.quad	.Ltmp108
	.quad	.Ltmp109
	.quad	.Ltmp125
	.quad	.Ltmp126
	.quad	0
	.quad	0
.Ldebug_ranges33:
	.quad	.Ltmp110
	.quad	.Ltmp111
	.quad	.Ltmp126
	.quad	.Ltmp127
	.quad	0
	.quad	0
.Ldebug_ranges34:
	.quad	.Ltmp112
	.quad	.Ltmp113
	.quad	.Ltmp127
	.quad	.Ltmp128
	.quad	0
	.quad	0
.Ldebug_ranges35:
	.quad	.Ltmp145
	.quad	.Ltmp153
	.quad	.Ltmp154
	.quad	.Ltmp155
	.quad	0
	.quad	0
.Ldebug_ranges36:
	.quad	.Ltmp157
	.quad	.Ltmp165
	.quad	.Ltmp166
	.quad	.Ltmp167
	.quad	0
	.quad	0
.Ldebug_ranges37:
	.quad	.Ltmp169
	.quad	.Ltmp177
	.quad	.Ltmp178
	.quad	.Ltmp179
	.quad	0
	.quad	0
.Ldebug_ranges38:
	.quad	.Ltmp181
	.quad	.Ltmp189
	.quad	.Ltmp190
	.quad	.Ltmp191
	.quad	0
	.quad	0
.Ldebug_ranges39:
	.quad	.Ltmp194
	.quad	.Ltmp236
	.quad	.Ltmp280
	.quad	.Ltmp284
	.quad	0
	.quad	0
.Ldebug_ranges40:
	.quad	.Ltmp204
	.quad	.Ltmp208
	.quad	.Ltmp209
	.quad	.Ltmp210
	.quad	0
	.quad	0
.Ldebug_ranges41:
	.quad	.Ltmp205
	.quad	.Ltmp207
	.quad	.Ltmp209
	.quad	.Ltmp210
	.quad	0
	.quad	0
.Ldebug_ranges42:
	.quad	.Ltmp229
	.quad	.Ltmp233
	.quad	.Ltmp234
	.quad	.Ltmp235
	.quad	0
	.quad	0
.Ldebug_ranges43:
	.quad	.Ltmp230
	.quad	.Ltmp232
	.quad	.Ltmp234
	.quad	.Ltmp235
	.quad	0
	.quad	0
.Ldebug_ranges44:
	.quad	.Ltmp263
	.quad	.Ltmp271
	.quad	.Ltmp272
	.quad	.Ltmp273
	.quad	0
	.quad	0
.Ldebug_ranges45:
	.quad	.Ltmp293
	.quad	.Ltmp297
	.quad	.Ltmp298
	.quad	.Ltmp301
	.quad	0
	.quad	0
.Ldebug_ranges46:
	.quad	.Ltmp302
	.quad	.Ltmp306
	.quad	.Ltmp307
	.quad	.Ltmp310
	.quad	0
	.quad	0
.Ldebug_ranges47:
	.quad	.Ltmp319
	.quad	.Ltmp320
	.quad	.Ltmp450
	.quad	.Ltmp451
	.quad	0
	.quad	0
.Ldebug_ranges48:
	.quad	.Ltmp320
	.quad	.Ltmp321
	.quad	.Ltmp451
	.quad	.Ltmp452
	.quad	0
	.quad	0
.Ldebug_ranges49:
	.quad	.Ltmp321
	.quad	.Ltmp322
	.quad	.Ltmp452
	.quad	.Ltmp453
	.quad	0
	.quad	0
.Ldebug_ranges50:
	.quad	.Ltmp335
	.quad	.Ltmp364
	.quad	.Ltmp454
	.quad	.Ltmp466
	.quad	0
	.quad	0
.Ldebug_ranges51:
	.quad	.Ltmp335
	.quad	.Ltmp363
	.quad	.Ltmp454
	.quad	.Ltmp465
	.quad	0
	.quad	0
.Ldebug_ranges52:
	.quad	.Ltmp337
	.quad	.Ltmp339
	.quad	.Ltmp454
	.quad	.Ltmp455
	.quad	0
	.quad	0
.Ldebug_ranges53:
	.quad	.Ltmp339
	.quad	.Ltmp363
	.quad	.Ltmp455
	.quad	.Ltmp465
	.quad	0
	.quad	0
.Ldebug_ranges54:
	.quad	.Ltmp342
	.quad	.Ltmp343
	.quad	.Ltmp455
	.quad	.Ltmp456
	.quad	0
	.quad	0
.Ldebug_ranges55:
	.quad	.Ltmp344
	.quad	.Ltmp345
	.quad	.Ltmp456
	.quad	.Ltmp457
	.quad	0
	.quad	0
.Ldebug_ranges56:
	.quad	.Ltmp346
	.quad	.Ltmp347
	.quad	.Ltmp457
	.quad	.Ltmp458
	.quad	0
	.quad	0
.Ldebug_ranges57:
	.quad	.Ltmp348
	.quad	.Ltmp349
	.quad	.Ltmp458
	.quad	.Ltmp459
	.quad	0
	.quad	0
.Ldebug_ranges58:
	.quad	.Ltmp350
	.quad	.Ltmp351
	.quad	.Ltmp459
	.quad	.Ltmp460
	.quad	0
	.quad	0
.Ldebug_ranges59:
	.quad	.Ltmp352
	.quad	.Ltmp353
	.quad	.Ltmp460
	.quad	.Ltmp461
	.quad	0
	.quad	0
.Ldebug_ranges60:
	.quad	.Ltmp354
	.quad	.Ltmp355
	.quad	.Ltmp461
	.quad	.Ltmp462
	.quad	0
	.quad	0
.Ldebug_ranges61:
	.quad	.Ltmp356
	.quad	.Ltmp357
	.quad	.Ltmp462
	.quad	.Ltmp463
	.quad	0
	.quad	0
.Ldebug_ranges62:
	.quad	.Ltmp358
	.quad	.Ltmp359
	.quad	.Ltmp463
	.quad	.Ltmp464
	.quad	0
	.quad	0
.Ldebug_ranges63:
	.quad	.Ltmp360
	.quad	.Ltmp361
	.quad	.Ltmp464
	.quad	.Ltmp465
	.quad	0
	.quad	0
.Ldebug_ranges64:
	.quad	.Ltmp382
	.quad	.Ltmp384
	.quad	.Ltmp469
	.quad	.Ltmp470
	.quad	0
	.quad	0
.Ldebug_ranges65:
	.quad	.Ltmp385
	.quad	.Ltmp396
	.quad	.Ltmp470
	.quad	.Ltmp471
	.quad	0
	.quad	0
.Ldebug_ranges66:
	.quad	.Ltmp386
	.quad	.Ltmp391
	.quad	.Ltmp470
	.quad	.Ltmp471
	.quad	0
	.quad	0
.Ldebug_ranges67:
	.quad	.Ltmp398
	.quad	.Ltmp400
	.quad	.Ltmp402
	.quad	.Ltmp405
	.quad	.Ltmp407
	.quad	.Ltmp409
	.quad	0
	.quad	0
.Ldebug_ranges68:
	.quad	.Ltmp415
	.quad	.Ltmp417
	.quad	.Ltmp419
	.quad	.Ltmp422
	.quad	.Ltmp424
	.quad	.Ltmp426
	.quad	0
	.quad	0
.Ldebug_ranges69:
	.quad	.Ltmp430
	.quad	.Ltmp447
	.quad	.Ltmp471
	.quad	.Ltmp472
	.quad	0
	.quad	0
.Ldebug_ranges70:
	.quad	.Ltmp432
	.quad	.Ltmp434
	.quad	.Ltmp436
	.quad	.Ltmp439
	.quad	.Ltmp441
	.quad	.Ltmp443
	.quad	0
	.quad	0
.Ldebug_ranges71:
	.quad	.Ltmp476
	.quad	.Ltmp746
	.quad	.Ltmp747
	.quad	.Ltmp756
	.quad	0
	.quad	0
.Ldebug_ranges72:
	.quad	.Ltmp477
	.quad	.Ltmp745
	.quad	.Ltmp747
	.quad	.Ltmp756
	.quad	0
	.quad	0
.Ldebug_ranges73:
	.quad	.Ltmp495
	.quad	.Ltmp496
	.quad	.Ltmp531
	.quad	.Ltmp532
	.quad	0
	.quad	0
.Ldebug_ranges74:
	.quad	.Ltmp495
	.quad	.Ltmp496
	.quad	.Ltmp531
	.quad	.Ltmp532
	.quad	0
	.quad	0
.Ldebug_ranges75:
	.quad	.Ltmp499
	.quad	.Ltmp502
	.quad	.Ltmp503
	.quad	.Ltmp504
	.quad	0
	.quad	0
.Ldebug_ranges76:
	.quad	.Ltmp500
	.quad	.Ltmp501
	.quad	.Ltmp503
	.quad	.Ltmp504
	.quad	0
	.quad	0
.Ldebug_ranges77:
	.quad	.Ltmp500
	.quad	.Ltmp501
	.quad	.Ltmp503
	.quad	.Ltmp504
	.quad	0
	.quad	0
.Ldebug_ranges78:
	.quad	.Ltmp506
	.quad	.Ltmp530
	.quad	.Ltmp533
	.quad	.Ltmp543
	.quad	0
	.quad	0
.Ldebug_ranges79:
	.quad	.Ltmp509
	.quad	.Ltmp510
	.quad	.Ltmp533
	.quad	.Ltmp534
	.quad	0
	.quad	0
.Ldebug_ranges80:
	.quad	.Ltmp511
	.quad	.Ltmp512
	.quad	.Ltmp534
	.quad	.Ltmp535
	.quad	0
	.quad	0
.Ldebug_ranges81:
	.quad	.Ltmp513
	.quad	.Ltmp514
	.quad	.Ltmp535
	.quad	.Ltmp536
	.quad	0
	.quad	0
.Ldebug_ranges82:
	.quad	.Ltmp515
	.quad	.Ltmp516
	.quad	.Ltmp536
	.quad	.Ltmp537
	.quad	0
	.quad	0
.Ldebug_ranges83:
	.quad	.Ltmp517
	.quad	.Ltmp518
	.quad	.Ltmp537
	.quad	.Ltmp538
	.quad	0
	.quad	0
.Ldebug_ranges84:
	.quad	.Ltmp519
	.quad	.Ltmp520
	.quad	.Ltmp538
	.quad	.Ltmp539
	.quad	0
	.quad	0
.Ldebug_ranges85:
	.quad	.Ltmp521
	.quad	.Ltmp522
	.quad	.Ltmp539
	.quad	.Ltmp540
	.quad	0
	.quad	0
.Ldebug_ranges86:
	.quad	.Ltmp523
	.quad	.Ltmp524
	.quad	.Ltmp540
	.quad	.Ltmp541
	.quad	0
	.quad	0
.Ldebug_ranges87:
	.quad	.Ltmp525
	.quad	.Ltmp526
	.quad	.Ltmp541
	.quad	.Ltmp542
	.quad	0
	.quad	0
.Ldebug_ranges88:
	.quad	.Ltmp527
	.quad	.Ltmp528
	.quad	.Ltmp542
	.quad	.Ltmp543
	.quad	0
	.quad	0
.Ldebug_ranges89:
	.quad	.Ltmp548
	.quad	.Ltmp603
	.quad	.Ltmp750
	.quad	.Ltmp751
	.quad	0
	.quad	0
.Ldebug_ranges90:
	.quad	.Ltmp552
	.quad	.Ltmp553
	.quad	.Ltmp588
	.quad	.Ltmp589
	.quad	0
	.quad	0
.Ldebug_ranges91:
	.quad	.Ltmp552
	.quad	.Ltmp553
	.quad	.Ltmp588
	.quad	.Ltmp589
	.quad	0
	.quad	0
.Ldebug_ranges92:
	.quad	.Ltmp556
	.quad	.Ltmp559
	.quad	.Ltmp560
	.quad	.Ltmp561
	.quad	0
	.quad	0
.Ldebug_ranges93:
	.quad	.Ltmp557
	.quad	.Ltmp558
	.quad	.Ltmp560
	.quad	.Ltmp561
	.quad	0
	.quad	0
.Ldebug_ranges94:
	.quad	.Ltmp557
	.quad	.Ltmp558
	.quad	.Ltmp560
	.quad	.Ltmp561
	.quad	0
	.quad	0
.Ldebug_ranges95:
	.quad	.Ltmp563
	.quad	.Ltmp587
	.quad	.Ltmp590
	.quad	.Ltmp600
	.quad	0
	.quad	0
.Ldebug_ranges96:
	.quad	.Ltmp566
	.quad	.Ltmp567
	.quad	.Ltmp590
	.quad	.Ltmp591
	.quad	0
	.quad	0
.Ldebug_ranges97:
	.quad	.Ltmp568
	.quad	.Ltmp569
	.quad	.Ltmp591
	.quad	.Ltmp592
	.quad	0
	.quad	0
.Ldebug_ranges98:
	.quad	.Ltmp570
	.quad	.Ltmp571
	.quad	.Ltmp592
	.quad	.Ltmp593
	.quad	0
	.quad	0
.Ldebug_ranges99:
	.quad	.Ltmp572
	.quad	.Ltmp573
	.quad	.Ltmp593
	.quad	.Ltmp594
	.quad	0
	.quad	0
.Ldebug_ranges100:
	.quad	.Ltmp574
	.quad	.Ltmp575
	.quad	.Ltmp594
	.quad	.Ltmp595
	.quad	0
	.quad	0
.Ldebug_ranges101:
	.quad	.Ltmp576
	.quad	.Ltmp577
	.quad	.Ltmp595
	.quad	.Ltmp596
	.quad	0
	.quad	0
.Ldebug_ranges102:
	.quad	.Ltmp578
	.quad	.Ltmp579
	.quad	.Ltmp596
	.quad	.Ltmp597
	.quad	0
	.quad	0
.Ldebug_ranges103:
	.quad	.Ltmp580
	.quad	.Ltmp581
	.quad	.Ltmp597
	.quad	.Ltmp598
	.quad	0
	.quad	0
.Ldebug_ranges104:
	.quad	.Ltmp582
	.quad	.Ltmp583
	.quad	.Ltmp598
	.quad	.Ltmp599
	.quad	0
	.quad	0
.Ldebug_ranges105:
	.quad	.Ltmp584
	.quad	.Ltmp585
	.quad	.Ltmp599
	.quad	.Ltmp600
	.quad	0
	.quad	0
.Ldebug_ranges106:
	.quad	.Ltmp666
	.quad	.Ltmp708
	.quad	.Ltmp752
	.quad	.Ltmp756
	.quad	0
	.quad	0
.Ldebug_ranges107:
	.quad	.Ltmp676
	.quad	.Ltmp680
	.quad	.Ltmp681
	.quad	.Ltmp682
	.quad	0
	.quad	0
.Ldebug_ranges108:
	.quad	.Ltmp677
	.quad	.Ltmp679
	.quad	.Ltmp681
	.quad	.Ltmp682
	.quad	0
	.quad	0
.Ldebug_ranges109:
	.quad	.Ltmp701
	.quad	.Ltmp705
	.quad	.Ltmp706
	.quad	.Ltmp707
	.quad	0
	.quad	0
.Ldebug_ranges110:
	.quad	.Ltmp702
	.quad	.Ltmp704
	.quad	.Ltmp706
	.quad	.Ltmp707
	.quad	0
	.quad	0
.Ldebug_ranges111:
	.quad	.Ltmp759
	.quad	.Ltmp762
	.quad	.Ltmp763
	.quad	.Ltmp764
	.quad	0
	.quad	0
.Ldebug_ranges112:
	.quad	.Ltmp760
	.quad	.Ltmp761
	.quad	.Ltmp763
	.quad	.Ltmp764
	.quad	0
	.quad	0
.Ldebug_ranges113:
	.quad	.Ltmp787
	.quad	.Ltmp790
	.quad	.Ltmp791
	.quad	.Ltmp792
	.quad	0
	.quad	0
.Ldebug_ranges114:
	.quad	.Ltmp788
	.quad	.Ltmp789
	.quad	.Ltmp791
	.quad	.Ltmp792
	.quad	0
	.quad	0
.Ldebug_ranges115:
	.quad	.Ltmp802
	.quad	.Ltmp804
	.quad	.Ltmp1006
	.quad	.Ltmp1007
	.quad	0
	.quad	0
.Ldebug_ranges116:
	.quad	.Ltmp802
	.quad	.Ltmp803
	.quad	.Ltmp1006
	.quad	.Ltmp1007
	.quad	0
	.quad	0
.Ldebug_ranges117:
	.quad	.Ltmp806
	.quad	.Ltmp808
	.quad	.Ltmp1007
	.quad	.Ltmp1008
	.quad	0
	.quad	0
.Ldebug_ranges118:
	.quad	.Ltmp806
	.quad	.Ltmp807
	.quad	.Ltmp1007
	.quad	.Ltmp1008
	.quad	0
	.quad	0
.Ldebug_ranges119:
	.quad	.Ltmp808
	.quad	.Ltmp826
	.quad	.Ltmp1008
	.quad	.Ltmp1009
	.quad	0
	.quad	0
.Ldebug_ranges120:
	.quad	.Ltmp816
	.quad	.Ltmp818
	.quad	.Ltmp1008
	.quad	.Ltmp1009
	.quad	0
	.quad	0
.Ldebug_ranges121:
	.quad	.Ltmp816
	.quad	.Ltmp817
	.quad	.Ltmp1008
	.quad	.Ltmp1009
	.quad	0
	.quad	0
.Ldebug_ranges122:
	.quad	.Ltmp829
	.quad	.Ltmp867
	.quad	.Ltmp1009
	.quad	.Ltmp1012
	.quad	0
	.quad	0
.Ldebug_ranges123:
	.quad	.Ltmp836
	.quad	.Ltmp837
	.quad	.Ltmp1010
	.quad	.Ltmp1011
	.quad	0
	.quad	0
.Ldebug_ranges124:
	.quad	.Ltmp873
	.quad	.Ltmp874
	.quad	.Ltmp1013
	.quad	.Ltmp1014
	.quad	0
	.quad	0
.Ldebug_ranges125:
	.quad	.Ltmp877
	.quad	.Ltmp885
	.quad	.Ltmp1014
	.quad	.Ltmp1017
	.quad	0
	.quad	0
.Ldebug_ranges126:
	.quad	.Ltmp879
	.quad	.Ltmp882
	.quad	.Ltmp1014
	.quad	.Ltmp1015
	.quad	0
	.quad	0
.Ldebug_ranges127:
	.quad	.Ltmp880
	.quad	.Ltmp881
	.quad	.Ltmp1014
	.quad	.Ltmp1015
	.quad	0
	.quad	0
.Ldebug_ranges128:
	.quad	.Ltmp887
	.quad	.Ltmp894
	.quad	.Ltmp1017
	.quad	.Ltmp1019
	.quad	0
	.quad	0
.Ldebug_ranges129:
	.quad	.Ltmp890
	.quad	.Ltmp893
	.quad	.Ltmp1017
	.quad	.Ltmp1018
	.quad	0
	.quad	0
.Ldebug_ranges130:
	.quad	.Ltmp891
	.quad	.Ltmp892
	.quad	.Ltmp1017
	.quad	.Ltmp1018
	.quad	0
	.quad	0
.Ldebug_ranges131:
	.quad	.Ltmp895
	.quad	.Ltmp896
	.quad	.Ltmp1019
	.quad	.Ltmp1020
	.quad	0
	.quad	0
.Ldebug_ranges132:
	.quad	.Ltmp897
	.quad	.Ltmp916
	.quad	.Ltmp1020
	.quad	.Ltmp1026
	.quad	0
	.quad	0
.Ldebug_ranges133:
	.quad	.Ltmp900
	.quad	.Ltmp915
	.quad	.Ltmp1021
	.quad	.Ltmp1026
	.quad	0
	.quad	0
.Ldebug_ranges134:
	.quad	.Ltmp924
	.quad	.Ltmp925
	.quad	.Ltmp1030
	.quad	.Ltmp1031
	.quad	0
	.quad	0
.Ldebug_ranges135:
	.quad	.Ltmp954
	.quad	.Ltmp980
	.quad	.Ltmp1032
	.quad	.Ltmp1038
	.quad	0
	.quad	0
.Ldebug_ranges136:
	.quad	.Ltmp956
	.quad	.Ltmp963
	.quad	.Ltmp1032
	.quad	.Ltmp1035
	.quad	0
	.quad	0
.Ldebug_ranges137:
	.quad	.Ltmp966
	.quad	.Ltmp971
	.quad	.Ltmp1035
	.quad	.Ltmp1038
	.quad	0
	.quad	0
.Ldebug_ranges138:
	.quad	.Ltmp981
	.quad	.Ltmp990
	.quad	.Ltmp1038
	.quad	.Ltmp1039
	.quad	0
	.quad	0
.Ldebug_ranges139:
	.quad	.Ltmp982
	.quad	.Ltmp989
	.quad	.Ltmp1038
	.quad	.Ltmp1039
	.quad	0
	.quad	0
.Ldebug_ranges140:
	.quad	.Ltmp1043
	.quad	.Ltmp1046
	.quad	.Ltmp1047
	.quad	.Ltmp1048
	.quad	0
	.quad	0
.Ldebug_ranges141:
	.quad	.Ltmp1044
	.quad	.Ltmp1045
	.quad	.Ltmp1047
	.quad	.Ltmp1048
	.quad	0
	.quad	0
.Ldebug_ranges142:
	.quad	.Ltmp1096
	.quad	.Ltmp1099
	.quad	.Ltmp1100
	.quad	.Ltmp1101
	.quad	0
	.quad	0
.Ldebug_ranges143:
	.quad	.Ltmp1097
	.quad	.Ltmp1098
	.quad	.Ltmp1100
	.quad	.Ltmp1101
	.quad	0
	.quad	0
.Ldebug_ranges144:
	.quad	.Ltmp1115
	.quad	.Ltmp1139
	.quad	.Ltmp1157
	.quad	.Ltmp1167
	.quad	0
	.quad	0
.Ldebug_ranges145:
	.quad	.Ltmp1118
	.quad	.Ltmp1119
	.quad	.Ltmp1157
	.quad	.Ltmp1158
	.quad	0
	.quad	0
.Ldebug_ranges146:
	.quad	.Ltmp1120
	.quad	.Ltmp1121
	.quad	.Ltmp1158
	.quad	.Ltmp1159
	.quad	0
	.quad	0
.Ldebug_ranges147:
	.quad	.Ltmp1122
	.quad	.Ltmp1123
	.quad	.Ltmp1159
	.quad	.Ltmp1160
	.quad	0
	.quad	0
.Ldebug_ranges148:
	.quad	.Ltmp1124
	.quad	.Ltmp1125
	.quad	.Ltmp1160
	.quad	.Ltmp1161
	.quad	0
	.quad	0
.Ldebug_ranges149:
	.quad	.Ltmp1126
	.quad	.Ltmp1127
	.quad	.Ltmp1161
	.quad	.Ltmp1162
	.quad	0
	.quad	0
.Ldebug_ranges150:
	.quad	.Ltmp1128
	.quad	.Ltmp1129
	.quad	.Ltmp1162
	.quad	.Ltmp1163
	.quad	0
	.quad	0
.Ldebug_ranges151:
	.quad	.Ltmp1130
	.quad	.Ltmp1131
	.quad	.Ltmp1163
	.quad	.Ltmp1164
	.quad	0
	.quad	0
.Ldebug_ranges152:
	.quad	.Ltmp1132
	.quad	.Ltmp1133
	.quad	.Ltmp1164
	.quad	.Ltmp1165
	.quad	0
	.quad	0
.Ldebug_ranges153:
	.quad	.Ltmp1134
	.quad	.Ltmp1135
	.quad	.Ltmp1165
	.quad	.Ltmp1166
	.quad	0
	.quad	0
.Ldebug_ranges154:
	.quad	.Ltmp1136
	.quad	.Ltmp1137
	.quad	.Ltmp1166
	.quad	.Ltmp1167
	.quad	0
	.quad	0
.Ldebug_ranges155:
	.quad	.Ltmp1183
	.quad	.Ltmp1187
	.quad	.Ltmp1188
	.quad	.Ltmp1189
	.quad	0
	.quad	0
.Ldebug_ranges156:
	.quad	.Ltmp1184
	.quad	.Ltmp1186
	.quad	.Ltmp1188
	.quad	.Ltmp1189
	.quad	0
	.quad	0
.Ldebug_ranges157:
	.quad	.Ltmp1193
	.quad	.Ltmp1195
	.quad	.Ltmp1226
	.quad	.Ltmp1227
	.quad	0
	.quad	0
.Ldebug_ranges158:
	.quad	.Ltmp1201
	.quad	.Ltmp1202
	.quad	.Ltmp1229
	.quad	.Ltmp1230
	.quad	0
	.quad	0
.Ldebug_ranges159:
	.quad	.Ltmp1203
	.quad	.Ltmp1204
	.quad	.Ltmp1230
	.quad	.Ltmp1231
	.quad	0
	.quad	0
.Ldebug_ranges160:
	.quad	.Ltmp1205
	.quad	.Ltmp1206
	.quad	.Ltmp1231
	.quad	.Ltmp1232
	.quad	0
	.quad	0
.Ldebug_ranges161:
	.quad	.Ltmp1207
	.quad	.Ltmp1208
	.quad	.Ltmp1232
	.quad	.Ltmp1233
	.quad	0
	.quad	0
.Ldebug_ranges162:
	.quad	.Ltmp1209
	.quad	.Ltmp1210
	.quad	.Ltmp1233
	.quad	.Ltmp1234
	.quad	0
	.quad	0
.Ldebug_ranges163:
	.quad	.Ltmp1221
	.quad	.Ltmp1222
	.quad	.Ltmp1239
	.quad	.Ltmp1240
	.quad	0
	.quad	0
.Ldebug_ranges164:
	.quad	.Ltmp1223
	.quad	.Ltmp1224
	.quad	.Ltmp1240
	.quad	.Ltmp1241
	.quad	0
	.quad	0
.Ldebug_ranges165:
	.quad	.Ltmp1243
	.quad	.Ltmp1245
	.quad	.Ltmp1274
	.quad	.Ltmp1275
	.quad	0
	.quad	0
.Ldebug_ranges166:
	.quad	.Ltmp1291
	.quad	.Ltmp1294
	.quad	.Ltmp1295
	.quad	.Ltmp1296
	.quad	0
	.quad	0
.Ldebug_ranges167:
	.quad	.Ltmp1292
	.quad	.Ltmp1293
	.quad	.Ltmp1295
	.quad	.Ltmp1296
	.quad	0
	.quad	0
.Ldebug_ranges168:
	.quad	.Ltmp1292
	.quad	.Ltmp1293
	.quad	.Ltmp1295
	.quad	.Ltmp1296
	.quad	0
	.quad	0
.Ldebug_ranges169:
	.quad	.Ltmp1299
	.quad	.Ltmp1300
	.quad	.Ltmp1302
	.quad	.Ltmp1303
	.quad	0
	.quad	0
.Ldebug_ranges170:
	.quad	.Ltmp1305
	.quad	.Ltmp1306
	.quad	.Ltmp1341
	.quad	.Ltmp1342
	.quad	0
	.quad	0
.Ldebug_ranges171:
	.quad	.Ltmp1305
	.quad	.Ltmp1306
	.quad	.Ltmp1341
	.quad	.Ltmp1342
	.quad	0
	.quad	0
.Ldebug_ranges172:
	.quad	.Ltmp1309
	.quad	.Ltmp1312
	.quad	.Ltmp1313
	.quad	.Ltmp1314
	.quad	0
	.quad	0
.Ldebug_ranges173:
	.quad	.Ltmp1310
	.quad	.Ltmp1311
	.quad	.Ltmp1313
	.quad	.Ltmp1314
	.quad	0
	.quad	0
.Ldebug_ranges174:
	.quad	.Ltmp1310
	.quad	.Ltmp1311
	.quad	.Ltmp1313
	.quad	.Ltmp1314
	.quad	0
	.quad	0
.Ldebug_ranges175:
	.quad	.Ltmp1316
	.quad	.Ltmp1340
	.quad	.Ltmp1343
	.quad	.Ltmp1353
	.quad	0
	.quad	0
.Ldebug_ranges176:
	.quad	.Ltmp1319
	.quad	.Ltmp1320
	.quad	.Ltmp1343
	.quad	.Ltmp1344
	.quad	0
	.quad	0
.Ldebug_ranges177:
	.quad	.Ltmp1321
	.quad	.Ltmp1322
	.quad	.Ltmp1344
	.quad	.Ltmp1345
	.quad	0
	.quad	0
.Ldebug_ranges178:
	.quad	.Ltmp1323
	.quad	.Ltmp1324
	.quad	.Ltmp1345
	.quad	.Ltmp1346
	.quad	0
	.quad	0
.Ldebug_ranges179:
	.quad	.Ltmp1325
	.quad	.Ltmp1326
	.quad	.Ltmp1346
	.quad	.Ltmp1347
	.quad	0
	.quad	0
.Ldebug_ranges180:
	.quad	.Ltmp1327
	.quad	.Ltmp1328
	.quad	.Ltmp1347
	.quad	.Ltmp1348
	.quad	0
	.quad	0
.Ldebug_ranges181:
	.quad	.Ltmp1329
	.quad	.Ltmp1330
	.quad	.Ltmp1348
	.quad	.Ltmp1349
	.quad	0
	.quad	0
.Ldebug_ranges182:
	.quad	.Ltmp1331
	.quad	.Ltmp1332
	.quad	.Ltmp1349
	.quad	.Ltmp1350
	.quad	0
	.quad	0
.Ldebug_ranges183:
	.quad	.Ltmp1333
	.quad	.Ltmp1334
	.quad	.Ltmp1350
	.quad	.Ltmp1351
	.quad	0
	.quad	0
.Ldebug_ranges184:
	.quad	.Ltmp1335
	.quad	.Ltmp1336
	.quad	.Ltmp1351
	.quad	.Ltmp1352
	.quad	0
	.quad	0
.Ldebug_ranges185:
	.quad	.Ltmp1337
	.quad	.Ltmp1338
	.quad	.Ltmp1352
	.quad	.Ltmp1353
	.quad	0
	.quad	0
.Ldebug_ranges186:
	.quad	.Lfunc_begin0
	.quad	.Lfunc_end0
	.quad	.Lfunc_begin1
	.quad	.Lfunc_end1
	.quad	.Lfunc_begin2
	.quad	.Lfunc_end2
	.quad	.Lfunc_begin4
	.quad	.Lfunc_end5
	.quad	.Lfunc_begin8
	.quad	.Lfunc_end10
	.quad	.Lfunc_begin17
	.quad	.Lfunc_end22
	.quad	.Lfunc_begin24
	.quad	.Lfunc_end26
	.quad	.Lfunc_begin28
	.quad	.Lfunc_end30
	.quad	.Lfunc_begin3
	.quad	.Lfunc_end3
	.quad	.Lfunc_begin6
	.quad	.Lfunc_end6
	.quad	.Lfunc_begin7
	.quad	.Lfunc_end7
	.quad	.Lfunc_begin11
	.quad	.Lfunc_end11
	.quad	.Lfunc_begin12
	.quad	.Lfunc_end12
	.quad	.Lfunc_begin13
	.quad	.Lfunc_end13
	.quad	.Lfunc_begin14
	.quad	.Lfunc_end14
	.quad	.Lfunc_begin15
	.quad	.Lfunc_end15
	.quad	.Lfunc_begin16
	.quad	.Lfunc_end16
	.quad	.Lfunc_begin23
	.quad	.Lfunc_end23
	.quad	.Lfunc_begin27
	.quad	.Lfunc_end27
	.quad	.Lfunc_begin31
	.quad	.Lfunc_end31
	.quad	.Lfunc_begin32
	.quad	.Lfunc_end32
	.quad	.Lfunc_begin33
	.quad	.Lfunc_end33
	.quad	.Lfunc_begin34
	.quad	.Lfunc_end34
	.quad	0
	.quad	0
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"c3c"                           # string offset=0
.Linfo_string1:
	.asciz	"bits.c3"                       # string offset=4
.Linfo_string2:
	.asciz	"/nix/store/ihf6dmy4cll298qphlwhnmgml1y02khm-c3c-0.7.5/lib/c3/std/io" # string offset=12
.Linfo_string3:
	.asciz	"XDIGITS_H"                     # string offset=80
.Linfo_string4:
	.asciz	"char"                          # string offset=90
.Linfo_string5:
	.asciz	"__ARRAY_SIZE_TYPE__"           # string offset=95
.Linfo_string6:
	.asciz	"std.io.XDIGITS_H"              # string offset=115
.Linfo_string7:
	.asciz	"XDIGITS_L"                     # string offset=132
.Linfo_string8:
	.asciz	"std.io.XDIGITS_L"              # string offset=142
.Linfo_string9:
	.asciz	"BUF_SIZE"                      # string offset=159
.Linfo_string10:
	.asciz	"int"                           # string offset=168
.Linfo_string11:
	.asciz	"floatformat.BUF_SIZE"          # string offset=172
.Linfo_string12:
	.asciz	"file"                          # string offset=193
.Linfo_string13:
	.asciz	"void*"                         # string offset=198
.Linfo_string14:
	.asciz	"CFile"                         # string offset=204
.Linfo_string15:
	.asciz	"File"                          # string offset=210
.Linfo_string16:
	.asciz	"stdout.file"                   # string offset=215
.Linfo_string17:
	.asciz	"stderr.file"                   # string offset=227
.Linfo_string18:
	.asciz	"FLOAT"                         # string offset=239
.Linfo_string19:
	.asciz	"EXPONENTIAL"                   # string offset=245
.Linfo_string20:
	.asciz	"ADAPTIVE"                      # string offset=257
.Linfo_string21:
	.asciz	"HEX"                           # string offset=266
.Linfo_string22:
	.asciz	"FloatFormatting"               # string offset=270
.Linfo_string23:
	.asciz	"VOID"                          # string offset=286
.Linfo_string24:
	.asciz	"BOOL"                          # string offset=291
.Linfo_string25:
	.asciz	"SIGNED_INT"                    # string offset=296
.Linfo_string26:
	.asciz	"UNSIGNED_INT"                  # string offset=307
.Linfo_string27:
	.asciz	"TYPEID"                        # string offset=320
.Linfo_string28:
	.asciz	"FAULT"                         # string offset=327
.Linfo_string29:
	.asciz	"ANY"                           # string offset=333
.Linfo_string30:
	.asciz	"ENUM"                          # string offset=337
.Linfo_string31:
	.asciz	"CONST_ENUM"                    # string offset=342
.Linfo_string32:
	.asciz	"STRUCT"                        # string offset=353
.Linfo_string33:
	.asciz	"UNION"                         # string offset=360
.Linfo_string34:
	.asciz	"BITSTRUCT"                     # string offset=366
.Linfo_string35:
	.asciz	"FUNC"                          # string offset=376
.Linfo_string36:
	.asciz	"OPTIONAL"                      # string offset=381
.Linfo_string37:
	.asciz	"ARRAY"                         # string offset=390
.Linfo_string38:
	.asciz	"SLICE"                         # string offset=396
.Linfo_string39:
	.asciz	"VECTOR"                        # string offset=402
.Linfo_string40:
	.asciz	"DISTINCT"                      # string offset=409
.Linfo_string41:
	.asciz	"POINTER"                       # string offset=418
.Linfo_string42:
	.asciz	"INTERFACE"                     # string offset=426
.Linfo_string43:
	.asciz	"TypeKind"                      # string offset=436
.Linfo_string44:
	.asciz	"std.io.Formatter.vprintf"      # string offset=445
.Linfo_string45:
	.asciz	"vprintf"                       # string offset=470
.Linfo_string46:
	.asciz	"long"                          # string offset=478
.Linfo_string47:
	.asciz	"fault"                         # string offset=483
.Linfo_string48:
	.asciz	"self"                          # string offset=489
.Linfo_string49:
	.asciz	"data"                          # string offset=494
.Linfo_string50:
	.asciz	"out_fn"                        # string offset=499
.Linfo_string51:
	.asciz	"OutputFn"                      # string offset=506
.Linfo_string52:
	.asciz	"flags"                         # string offset=515
.Linfo_string53:
	.asciz	"uint"                          # string offset=521
.Linfo_string54:
	.asciz	"width"                         # string offset=526
.Linfo_string55:
	.asciz	"prec"                          # string offset=532
.Linfo_string56:
	.asciz	"first_fault"                   # string offset=537
.Linfo_string57:
	.asciz	"$anon"                         # string offset=549
.Linfo_string58:
	.asciz	"Formatter"                     # string offset=555
.Linfo_string59:
	.asciz	"Formatter*"                    # string offset=565
.Linfo_string60:
	.asciz	"format"                        # string offset=576
.Linfo_string61:
	.asciz	"ptr"                           # string offset=583
.Linfo_string62:
	.asciz	"char*"                         # string offset=587
.Linfo_string63:
	.asciz	"len"                           # string offset=593
.Linfo_string64:
	.asciz	"ulong"                         # string offset=597
.Linfo_string65:
	.asciz	"usz"                           # string offset=603
.Linfo_string66:
	.asciz	"char[]"                        # string offset=607
.Linfo_string67:
	.asciz	"String"                        # string offset=614
.Linfo_string68:
	.asciz	"anys"                          # string offset=621
.Linfo_string69:
	.asciz	"type"                          # string offset=626
.Linfo_string70:
	.asciz	"typeid"                        # string offset=631
.Linfo_string71:
	.asciz	"any"                           # string offset=638
.Linfo_string72:
	.asciz	"any*"                          # string offset=642
.Linfo_string73:
	.asciz	"any[]"                         # string offset=647
.Linfo_string74:
	.asciz	"total_len"                     # string offset=653
.Linfo_string75:
	.asciz	"format_len"                    # string offset=663
.Linfo_string76:
	.asciz	"variant_index"                 # string offset=674
.Linfo_string77:
	.asciz	"i"                             # string offset=688
.Linfo_string78:
	.asciz	"c"                             # string offset=690
.Linfo_string79:
	.asciz	"w"                             # string offset=692
.Linfo_string80:
	.asciz	"base"                          # string offset=694
.Linfo_string81:
	.asciz	"current"                       # string offset=699
.Linfo_string82:
	.asciz	"is_neg"                        # string offset=707
.Linfo_string83:
	.asciz	"bool"                          # string offset=714
.Linfo_string84:
	.asciz	"out"                           # string offset=719
.Linfo_string85:
	.asciz	"@report_fault"                 # string offset=723
.Linfo_string86:
	.asciz	"std.io.printf_parse_format_field" # string offset=737
.Linfo_string87:
	.asciz	"printf_parse_format_field"     # string offset=770
.Linfo_string88:
	.asciz	"args_ptr"                      # string offset=796
.Linfo_string89:
	.asciz	"args_len"                      # string offset=805
.Linfo_string90:
	.asciz	"args_index_ptr"                # string offset=814
.Linfo_string91:
	.asciz	"usz*"                          # string offset=829
.Linfo_string92:
	.asciz	"format_ptr"                    # string offset=834
.Linfo_string93:
	.asciz	"index_ptr"                     # string offset=845
.Linfo_string94:
	.asciz	"val"                           # string offset=855
.Linfo_string95:
	.asciz	"intval"                        # string offset=859
.Linfo_string96:
	.asciz	"@is_digit"                     # string offset=866
.Linfo_string97:
	.asciz	"is_digit"                      # string offset=876
.Linfo_string98:
	.asciz	"std.io.simple_atoi"            # string offset=885
.Linfo_string99:
	.asciz	"simple_atoi"                   # string offset=904
.Linfo_string100:
	.asciz	"buf"                           # string offset=916
.Linfo_string101:
	.asciz	"maxlen"                        # string offset=920
.Linfo_string102:
	.asciz	"len_ptr"                       # string offset=927
.Linfo_string103:
	.asciz	"any_to_int"                    # string offset=935
.Linfo_string104:
	.asciz	"any_type"                      # string offset=946
.Linfo_string105:
	.asciz	"kind"                          # string offset=955
.Linfo_string106:
	.asciz	"is_mixed_signed"               # string offset=960
.Linfo_string107:
	.asciz	"max"                           # string offset=976
.Linfo_string108:
	.asciz	"min"                           # string offset=980
.Linfo_string109:
	.asciz	"ichar"                         # string offset=984
.Linfo_string110:
	.asciz	"s"                             # string offset=990
.Linfo_string111:
	.asciz	"short"                         # string offset=992
.Linfo_string112:
	.asciz	"l"                             # string offset=998
.Linfo_string113:
	.asciz	"int128"                        # string offset=1000
.Linfo_string114:
	.asciz	"ushort"                        # string offset=1007
.Linfo_string115:
	.asciz	"uint128"                       # string offset=1014
.Linfo_string116:
	.asciz	"unreachable"                   # string offset=1022
.Linfo_string117:
	.asciz	"first_err"                     # string offset=1034
.Linfo_string118:
	.asciz	"@wrap_bad"                     # string offset=1044
.Linfo_string119:
	.asciz	"err"                           # string offset=1054
.Linfo_string120:
	.asciz	"std.io.print_hex_chars"        # string offset=1058
.Linfo_string121:
	.asciz	"print_hex_chars"               # string offset=1081
.Linfo_string122:
	.asciz	"f"                             # string offset=1097
.Linfo_string123:
	.asciz	"uppercase"                     # string offset=1099
.Linfo_string124:
	.asciz	"past_10"                       # string offset=1109
.Linfo_string125:
	.asciz	".temp"                         # string offset=1117
.Linfo_string126:
	.asciz	"digit"                         # string offset=1123
.Linfo_string127:
	.asciz	"std.io.Formatter.pad"          # string offset=1129
.Linfo_string128:
	.asciz	"pad"                           # string offset=1150
.Linfo_string129:
	.asciz	"isz"                           # string offset=1154
.Linfo_string130:
	.asciz	"delta"                         # string offset=1158
.Linfo_string131:
	.asciz	"greater"                       # string offset=1164
.Linfo_string132:
	.asciz	"@catch"                        # string offset=1172
.Linfo_string133:
	.asciz	"any_to_enum_ordinal"           # string offset=1179
.Linfo_string134:
	.asciz	"as_inner"                      # string offset=1199
.Linfo_string135:
	.asciz	"any_make"                      # string offset=1208
.Linfo_string136:
	.asciz	"bitcast"                       # string offset=1217
.Linfo_string137:
	.asciz	"signbit"                       # string offset=1225
.Linfo_string138:
	.asciz	"is_finite"                     # string offset=1233
.Linfo_string139:
	.asciz	"is_nan"                        # string offset=1243
.Linfo_string140:
	.asciz	"frexp"                         # string offset=1250
.Linfo_string141:
	.asciz	"std.io.Formatter.ntoa"         # string offset=1256
.Linfo_string142:
	.asciz	"ntoa"                          # string offset=1278
.Linfo_string143:
	.asciz	"value"                         # string offset=1283
.Linfo_string144:
	.asciz	"negative"                      # string offset=1289
.Linfo_string145:
	.asciz	"stdout"                        # string offset=1298
.Linfo_string146:
	.asciz	"stderr"                        # string offset=1305
.Linfo_string147:
	.asciz	"std.io.Formatter.printf"       # string offset=1312
.Linfo_string148:
	.asciz	"printf"                        # string offset=1336
.Linfo_string149:
	.asciz	"std.io.Formatter.init"         # string offset=1343
.Linfo_string150:
	.asciz	"init"                          # string offset=1365
.Linfo_string151:
	.asciz	"std.io.Formatter.out"          # string offset=1370
.Linfo_string152:
	.asciz	"std.io.Formatter.print_with_function" # string offset=1391
.Linfo_string153:
	.asciz	"print_with_function"           # string offset=1428
.Linfo_string154:
	.asciz	"std.io.Formatter.out_unknown"  # string offset=1448
.Linfo_string155:
	.asciz	"out_unknown"                   # string offset=1477
.Linfo_string156:
	.asciz	"std.io.Formatter.out_str"      # string offset=1489
.Linfo_string157:
	.asciz	"out_str"                       # string offset=1514
.Linfo_string158:
	.asciz	"std.io.Formatter.print"        # string offset=1522
.Linfo_string159:
	.asciz	"print"                         # string offset=1545
.Linfo_string160:
	.asciz	"std.io.out_null_fn"            # string offset=1551
.Linfo_string161:
	.asciz	"out_null_fn"                   # string offset=1570
.Linfo_string162:
	.asciz	"std.io.Formatter.adjust"       # string offset=1582
.Linfo_string163:
	.asciz	"adjust"                        # string offset=1606
.Linfo_string164:
	.asciz	"std.io.Formatter.out_substr"   # string offset=1613
.Linfo_string165:
	.asciz	"out_substr"                    # string offset=1641
.Linfo_string166:
	.asciz	"std.io.Formatter.out_chars"    # string offset=1652
.Linfo_string167:
	.asciz	"out_chars"                     # string offset=1679
.Linfo_string168:
	.asciz	"std.io.Formatter.etoa"         # string offset=1689
.Linfo_string169:
	.asciz	"etoa"                          # string offset=1711
.Linfo_string170:
	.asciz	"std.io.Formatter.ftoa"         # string offset=1716
.Linfo_string171:
	.asciz	"ftoa"                          # string offset=1738
.Linfo_string172:
	.asciz	"std.io.Formatter.gtoa"         # string offset=1743
.Linfo_string173:
	.asciz	"gtoa"                          # string offset=1765
.Linfo_string174:
	.asciz	"std.io.Formatter.atoa"         # string offset=1770
.Linfo_string175:
	.asciz	"atoa"                          # string offset=1792
.Linfo_string176:
	.asciz	"std.io.Formatter.floatformat"  # string offset=1797
.Linfo_string177:
	.asciz	"floatformat"                   # string offset=1826
.Linfo_string178:
	.asciz	"std.io.Formatter.ntoa_format"  # string offset=1838
.Linfo_string179:
	.asciz	"ntoa_format"                   # string offset=1867
.Linfo_string180:
	.asciz	"std.io.Formatter.ntoa_any"     # string offset=1879
.Linfo_string181:
	.asciz	"ntoa_any"                      # string offset=1905
.Linfo_string182:
	.asciz	"std.io.Formatter.out_char"     # string offset=1914
.Linfo_string183:
	.asciz	"out_char"                      # string offset=1940
.Linfo_string184:
	.asciz	"std.io.Formatter.out_reverse"  # string offset=1949
.Linfo_string185:
	.asciz	"out_reverse"                   # string offset=1978
.Linfo_string186:
	.asciz	"std.io.int_from_any"           # string offset=1990
.Linfo_string187:
	.asciz	"int_from_any"                  # string offset=2010
.Linfo_string188:
	.asciz	"std.io.float_from_any"         # string offset=2023
.Linfo_string189:
	.asciz	"float_from_any"                # string offset=2045
.Linfo_string190:
	.asciz	"std.io.fmt_u"                  # string offset=2060
.Linfo_string191:
	.asciz	"fmt_u"                         # string offset=2073
.Linfo_string192:
	.asciz	"std.io.out_putstream_fn"       # string offset=2079
.Linfo_string193:
	.asciz	"out_putstream_fn"              # string offset=2103
.Linfo_string194:
	.asciz	"std.io.out_putchar_fn"         # string offset=2120
.Linfo_string195:
	.asciz	"out_putchar_fn"                # string offset=2142
.Linfo_string196:
	.asciz	"std.io.printfn"                # string offset=2157
.Linfo_string197:
	.asciz	"printfn"                       # string offset=2172
.Linfo_string198:
	.asciz	"std.io.eprintfn"               # string offset=2180
.Linfo_string199:
	.asciz	"eprintfn"                      # string offset=2196
.Linfo_string200:
	.asciz	"std.io.stdout"                 # string offset=2205
.Linfo_string201:
	.asciz	"File*"                         # string offset=2219
.Linfo_string202:
	.asciz	"std.io.stderr"                 # string offset=2225
.Linfo_string203:
	.asciz	"args"                          # string offset=2239
.Linfo_string204:
	.asciz	"arg"                           # string offset=2244
.Linfo_string205:
	.asciz	"Printable"                     # string offset=2248
.Linfo_string206:
	.asciz	"old"                           # string offset=2258
.Linfo_string207:
	.asciz	"old_width"                     # string offset=2262
.Linfo_string208:
	.asciz	"old_prec"                      # string offset=2272
.Linfo_string209:
	.asciz	"category"                      # string offset=2281
.Linfo_string210:
	.asciz	"a"                             # string offset=2290
.Linfo_string211:
	.asciz	"n"                             # string offset=2292
.Linfo_string212:
	.asciz	"inner"                         # string offset=2294
.Linfo_string213:
	.asciz	"pointer"                       # string offset=2300
.Linfo_string214:
	.asciz	"void**"                        # string offset=2308
.Linfo_string215:
	.asciz	"deref"                         # string offset=2315
.Linfo_string216:
	.asciz	"size"                          # string offset=2321
.Linfo_string217:
	.asciz	"alen"                          # string offset=2326
.Linfo_string218:
	.asciz	"vlen"                          # string offset=2331
.Linfo_string219:
	.asciz	"temp"                          # string offset=2336
.Linfo_string220:
	.asciz	"String*"                       # string offset=2341
.Linfo_string221:
	.asciz	"slen"                          # string offset=2349
.Linfo_string222:
	.asciz	"str"                           # string offset=2354
.Linfo_string223:
	.asciz	"index"                         # string offset=2358
.Linfo_string224:
	.asciz	"chars"                         # string offset=2364
.Linfo_string225:
	.asciz	"y"                             # string offset=2370
.Linfo_string226:
	.asciz	"double"                        # string offset=2372
.Linfo_string227:
	.asciz	"formatting"                    # string offset=2379
.Linfo_string228:
	.asciz	"big"                           # string offset=2390
.Linfo_string229:
	.asciz	"pl"                            # string offset=2394
.Linfo_string230:
	.asciz	"e2"                            # string offset=2397
.Linfo_string231:
	.asciz	"ebuf0"                         # string offset=2400
.Linfo_string232:
	.asciz	"ebuf"                          # string offset=2406
.Linfo_string233:
	.asciz	"buf_array"                     # string offset=2411
.Linfo_string234:
	.asciz	"p"                             # string offset=2421
.Linfo_string235:
	.asciz	"round"                         # string offset=2423
.Linfo_string236:
	.asciz	"re"                            # string offset=2429
.Linfo_string237:
	.asciz	"estr"                          # string offset=2432
.Linfo_string238:
	.asciz	"xdigits"                       # string offset=2437
.Linfo_string239:
	.asciz	"x"                             # string offset=2445
.Linfo_string240:
	.asciz	"outlen"                        # string offset=2447
.Linfo_string241:
	.asciz	"explen"                        # string offset=2454
.Linfo_string242:
	.asciz	"uint*"                         # string offset=2461
.Linfo_string243:
	.asciz	"z"                             # string offset=2467
.Linfo_string244:
	.asciz	"r"                             # string offset=2469
.Linfo_string245:
	.asciz	"v"                             # string offset=2471
.Linfo_string246:
	.asciz	"carry"                         # string offset=2473
.Linfo_string247:
	.asciz	"sh"                            # string offset=2479
.Linfo_string248:
	.asciz	"d"                             # string offset=2482
.Linfo_string249:
	.asciz	"b"                             # string offset=2484
.Linfo_string250:
	.asciz	"need"                          # string offset=2486
.Linfo_string251:
	.asciz	"rm"                            # string offset=2491
.Linfo_string252:
	.asciz	"e"                             # string offset=2494
.Linfo_string253:
	.asciz	"j"                             # string offset=2496
.Linfo_string254:
	.asciz	"small"                         # string offset=2498
.Linfo_string255:
	.asciz	"Char32"                        # string offset=2504
.Linfo_string256:
	.asciz	"bool*"                         # string offset=2511
.Linfo_string257:
	.asciz	"float"                         # string offset=2517
.Linfo_string258:
	.asciz	"stream"                        # string offset=2523
.Linfo_string259:
	.asciz	"OutStream"                     # string offset=2530
.Linfo_string260:
	.asciz	"OutStream*"                    # string offset=2540
.Linfo_string261:
	.asciz	"formatter"                     # string offset=2551
	.section	.debug_pubnames,"",@progbits
	.long	.LpubNames_end0-.LpubNames_start0 # Length of Public Names Info
.LpubNames_start0:
	.short	2                               # DWARF Version
	.long	.Lcu_begin0                     # Offset of Compilation Unit Info
	.long	16541                           # Compilation Unit Length
	.long	42                              # DIE offset
	.asciz	"XDIGITS_H"                     # External Name
	.long	95                              # DIE offset
	.asciz	"XDIGITS_L"                     # External Name
	.long	121                             # DIE offset
	.asciz	"BUF_SIZE"                      # External Name
	.long	224                             # DIE offset
	.asciz	"file"                          # External Name
	.long	270                             # DIE offset
	.asciz	"EXPONENTIAL"                   # External Name
	.long	276                             # DIE offset
	.asciz	"ADAPTIVE"                      # External Name
	.long	282                             # DIE offset
	.asciz	"HEX"                           # External Name
	.long	303                             # DIE offset
	.asciz	"VOID"                          # External Name
	.long	309                             # DIE offset
	.asciz	"BOOL"                          # External Name
	.long	315                             # DIE offset
	.asciz	"SIGNED_INT"                    # External Name
	.long	321                             # DIE offset
	.asciz	"UNSIGNED_INT"                  # External Name
	.long	327                             # DIE offset
	.asciz	"FLOAT"                         # External Name
	.long	333                             # DIE offset
	.asciz	"TYPEID"                        # External Name
	.long	339                             # DIE offset
	.asciz	"FAULT"                         # External Name
	.long	345                             # DIE offset
	.asciz	"ANY"                           # External Name
	.long	351                             # DIE offset
	.asciz	"ENUM"                          # External Name
	.long	357                             # DIE offset
	.asciz	"CONST_ENUM"                    # External Name
	.long	363                             # DIE offset
	.asciz	"STRUCT"                        # External Name
	.long	369                             # DIE offset
	.asciz	"UNION"                         # External Name
	.long	375                             # DIE offset
	.asciz	"BITSTRUCT"                     # External Name
	.long	381                             # DIE offset
	.asciz	"FUNC"                          # External Name
	.long	387                             # DIE offset
	.asciz	"OPTIONAL"                      # External Name
	.long	393                             # DIE offset
	.asciz	"ARRAY"                         # External Name
	.long	399                             # DIE offset
	.asciz	"SLICE"                         # External Name
	.long	405                             # DIE offset
	.asciz	"VECTOR"                        # External Name
	.long	411                             # DIE offset
	.asciz	"DISTINCT"                      # External Name
	.long	417                             # DIE offset
	.asciz	"POINTER"                       # External Name
	.long	423                             # DIE offset
	.asciz	"INTERFACE"                     # External Name
	.long	430                             # DIE offset
	.asciz	"vprintf"                       # External Name
	.long	1044                            # DIE offset
	.asciz	"printf_parse_format_field"     # External Name
	.long	1221                            # DIE offset
	.asciz	"simple_atoi"                   # External Name
	.long	1307                            # DIE offset
	.asciz	"@is_digit"                     # External Name
	.long	1319                            # DIE offset
	.asciz	"is_digit"                      # External Name
	.long	1620                            # DIE offset
	.asciz	"@report_fault"                 # External Name
	.long	1901                            # DIE offset
	.asciz	"print_hex_chars"               # External Name
	.long	2014                            # DIE offset
	.asciz	"pad"                           # External Name
	.long	2110                            # DIE offset
	.asciz	"greater"                       # External Name
	.long	2146                            # DIE offset
	.asciz	"@wrap_bad"                     # External Name
	.long	2198                            # DIE offset
	.asciz	"first_err"                     # External Name
	.long	2210                            # DIE offset
	.asciz	"printf"                        # External Name
	.long	4758                            # DIE offset
	.asciz	"init"                          # External Name
	.long	4826                            # DIE offset
	.asciz	"out"                           # External Name
	.long	4899                            # DIE offset
	.asciz	"print_with_function"           # External Name
	.long	5056                            # DIE offset
	.asciz	"out_unknown"                   # External Name
	.long	5167                            # DIE offset
	.asciz	"any_to_enum_ordinal"           # External Name
	.long	5435                            # DIE offset
	.asciz	"@catch"                        # External Name
	.long	5488                            # DIE offset
	.asciz	"any_make"                      # External Name
	.long	5513                            # DIE offset
	.asciz	"out_str"                       # External Name
	.long	9327                            # DIE offset
	.asciz	"print"                         # External Name
	.long	9431                            # DIE offset
	.asciz	"out_null_fn"                   # External Name
	.long	9461                            # DIE offset
	.asciz	"adjust"                        # External Name
	.long	9645                            # DIE offset
	.asciz	"out_substr"                    # External Name
	.long	9929                            # DIE offset
	.asciz	"out_chars"                     # External Name
	.long	10028                           # DIE offset
	.asciz	"etoa"                          # External Name
	.long	10086                           # DIE offset
	.asciz	"ftoa"                          # External Name
	.long	10144                           # DIE offset
	.asciz	"gtoa"                          # External Name
	.long	10202                           # DIE offset
	.asciz	"atoa"                          # External Name
	.long	10273                           # DIE offset
	.asciz	"signbit"                       # External Name
	.long	10299                           # DIE offset
	.asciz	"is_finite"                     # External Name
	.long	10312                           # DIE offset
	.asciz	"bitcast"                       # External Name
	.long	10325                           # DIE offset
	.asciz	"is_nan"                        # External Name
	.long	10338                           # DIE offset
	.asciz	"frexp"                         # External Name
	.long	10403                           # DIE offset
	.asciz	"max"                           # External Name
	.long	10442                           # DIE offset
	.asciz	"min"                           # External Name
	.long	10455                           # DIE offset
	.asciz	"floatformat"                   # External Name
	.long	13327                           # DIE offset
	.asciz	"ntoa_format"                   # External Name
	.long	13454                           # DIE offset
	.asciz	"ntoa"                          # External Name
	.long	13588                           # DIE offset
	.asciz	"ntoa_any"                      # External Name
	.long	13789                           # DIE offset
	.asciz	"any_to_int"                    # External Name
	.long	13992                           # DIE offset
	.asciz	"unreachable"                   # External Name
	.long	14004                           # DIE offset
	.asciz	"out_char"                      # External Name
	.long	14585                           # DIE offset
	.asciz	"out_reverse"                   # External Name
	.long	14931                           # DIE offset
	.asciz	"int_from_any"                  # External Name
	.long	15151                           # DIE offset
	.asciz	"as_inner"                      # External Name
	.long	15164                           # DIE offset
	.asciz	"float_from_any"                # External Name
	.long	15320                           # DIE offset
	.asciz	"fmt_u"                         # External Name
	.long	15865                           # DIE offset
	.asciz	"out_putstream_fn"              # External Name
	.long	15942                           # DIE offset
	.asciz	"out_putchar_fn"                # External Name
	.long	16003                           # DIE offset
	.asciz	"printfn"                       # External Name
	.long	16098                           # DIE offset
	.asciz	"eprintfn"                      # External Name
	.long	16222                           # DIE offset
	.asciz	"stdout"                        # External Name
	.long	16286                           # DIE offset
	.asciz	"stderr"                        # External Name
	.long	0                               # End Mark
.LpubNames_end0:
	.section	.debug_pubtypes,"",@progbits
	.long	.LpubTypes_end0-.LpubTypes_start0 # Length of Public Types Info
.LpubTypes_start0:
	.short	2                               # DWARF Version
	.long	.Lcu_begin0                     # Offset of Compilation Unit Info
	.long	16541                           # Compilation Unit Length
	.long	81                              # DIE offset
	.asciz	"char"                          # External Name
	.long	146                             # DIE offset
	.asciz	"int"                           # External Name
	.long	180                             # DIE offset
	.asciz	"File"                          # External Name
	.long	203                             # DIE offset
	.asciz	"CFile"                         # External Name
	.long	215                             # DIE offset
	.asciz	"void*"                         # External Name
	.long	251                             # DIE offset
	.asciz	"FloatFormatting"               # External Name
	.long	289                             # DIE offset
	.asciz	"TypeKind"                      # External Name
	.long	688                             # DIE offset
	.asciz	"fault"                         # External Name
	.long	697                             # DIE offset
	.asciz	"long"                          # External Name
	.long	704                             # DIE offset
	.asciz	"Formatter*"                    # External Name
	.long	717                             # DIE offset
	.asciz	"Formatter"                     # External Name
	.long	835                             # DIE offset
	.asciz	"OutputFn"                      # External Name
	.long	869                             # DIE offset
	.asciz	"uint"                          # External Name
	.long	876                             # DIE offset
	.asciz	"String"                        # External Name
	.long	885                             # DIE offset
	.asciz	"char[]"                        # External Name
	.long	915                             # DIE offset
	.asciz	"char*"                         # External Name
	.long	928                             # DIE offset
	.asciz	"usz"                           # External Name
	.long	937                             # DIE offset
	.asciz	"ulong"                         # External Name
	.long	944                             # DIE offset
	.asciz	"any[]"                         # External Name
	.long	974                             # DIE offset
	.asciz	"any*"                          # External Name
	.long	987                             # DIE offset
	.asciz	"any"                           # External Name
	.long	1017                            # DIE offset
	.asciz	"typeid"                        # External Name
	.long	1024                            # DIE offset
	.asciz	"bool"                          # External Name
	.long	1184                            # DIE offset
	.asciz	"usz*"                          # External Name
	.long	1534                            # DIE offset
	.asciz	"ichar"                         # External Name
	.long	1541                            # DIE offset
	.asciz	"short"                         # External Name
	.long	1548                            # DIE offset
	.asciz	"int128"                        # External Name
	.long	1555                            # DIE offset
	.asciz	"ushort"                        # External Name
	.long	1562                            # DIE offset
	.asciz	"uint128"                       # External Name
	.long	2101                            # DIE offset
	.asciz	"isz"                           # External Name
	.long	16338                           # DIE offset
	.asciz	"File*"                         # External Name
	.long	16351                           # DIE offset
	.asciz	"Printable"                     # External Name
	.long	16381                           # DIE offset
	.asciz	"void**"                        # External Name
	.long	16394                           # DIE offset
	.asciz	"String*"                       # External Name
	.long	16407                           # DIE offset
	.asciz	"double"                        # External Name
	.long	16453                           # DIE offset
	.asciz	"uint*"                         # External Name
	.long	16466                           # DIE offset
	.asciz	"Char32"                        # External Name
	.long	16477                           # DIE offset
	.asciz	"bool*"                         # External Name
	.long	16490                           # DIE offset
	.asciz	"float"                         # External Name
	.long	16497                           # DIE offset
	.asciz	"OutStream*"                    # External Name
	.long	16510                           # DIE offset
	.asciz	"OutStream"                     # External Name
	.long	0                               # End Mark
.LpubTypes_end0:
	.weak	std.core.builtin.panicf
	.weak	std.core.types.TypeKind.is_int
	.weak	std.core.string.ZString.str_view
	.weak	std.core.dstring.DString.str_view
	.weak	std.core.string.conv.utf8_codepoints
	.weak	std.math._frexp
	.weak	std.io.File.flush
	.weak	std.io.File.write_byte
	.weak	std.io.file.from_handle
	.weak	std.core.builtin.panic
	.weak	std.core.ascii.ASCII_LOOKUP
	.section	".note.GNU-stack","",@progbits
	.section	.debug_line,"",@progbits
.Lline_table_start0:
